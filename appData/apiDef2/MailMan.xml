<?xml version="1.0" encoding="utf-8" ?>
<class XojoModuleId="389993292" sourceXmlPath="c:/ck2000/appData/apiDef2/MailMan.xml" license="Email" hasEvents="1">
    <axName>ChilkatMailMan</axName>
    <dnName>MailMan</dnName>
    <cppName>CkMailMan</cppName>
    <properties>
        <property name="AbortCurrent" read="1" write="1" ax="1" cpp="1" dn="1" axId="277">
            <gType>bool</gType>
            <descrip>When set to _TRUE_, causes the currently running method to abort.  Methods that always finish quickly (i.e.have no length file operations or network communications) are not affected.  If no method is running, then this property is automatically reset to _FALSE_ when the next method is called.  When the abort occurs, this property is reset to _FALSE_.  Both synchronous and asynchronous method calls can be aborted.  (A synchronous method call could be aborted by setting this property from a separate thread.)</descrip>
            <iversion>9.5.0.58</iversion>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="AllOrNone" axId="100">
            <gType>bool</gType>
            <descrip>Prevents sending any email if any of the addresses in the recipient list are rejected by the SMTP server.  The default value is _FALSE_, which indicates that the mail sending should continue even if some email addresses are invalid. (Note: Not all SMTP servers check the validity of email addresses, and even for those that do, it is not 100% accurate.)
&lt;p&gt;Note: An SMTP server only knows the validity of email addresses within the domain it controls.&lt;/p&gt;</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AutoFix" axId="101" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If _TRUE_, then the following will occur when a connection is made to an SMTP or POP3 server:&lt;p&gt;
1) If the SmtpPort property = 465, then sets StartTLS = _FALSE_ and SmtpSsl = _TRUE_&lt;br&gt;
2) If the SmtpPort property = 25, sets SmtpSsl = _FALSE_&lt;br&gt;
3) If the MailPort property = 995, sets PopSsl = _TRUE_&lt;br&gt;
4) If the MailPort property = 110, sets PopSsl = _FALSE_&lt;p&gt;
The default value of this property is _TRUE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AutoGenMessageId" axId="102" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Controls whether a unique Message-ID header is auto-generated for each email sent.&lt;p&gt;
The Message-ID header field should contain a unique message ID for each email that is sent.  The default behavior is to auto-generate this header field at the time the message is sent.  This makes it easier for the same email object to be re-used.  If the message ID is not unique, the SMTP server may consider the message to be a duplicate of one that has already been sent, and may discard it without sending.  This property controls whether message IDs are automatically generated.  If auto-generation is turned on (_TRUE_), the value returned by GetHeaderField("Message-ID") will not reflect the actual message ID that gets sent with the email.&lt;p&gt;
To turn off automatic Message-ID generation, set this property to _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AutoSmtpRset" axId="103" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If _TRUE_, then the SMTP "RSET" command is automatically sent to ensure that the SMTP connection is in a valid state when a new email is about to be sent on an already established connection.   The default value is _FALSE_.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; This property only applies when an email is sent on an already-open SMTP connection.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AutoUnwrapSecurity" read="1" write="1" ax="1" cpp="1" dn="1" axId="263">
            <gType>bool</gType>
            <descrip>If _TRUE_, then digitally signed and/or encrypted email when downloaded from a mail server is automatically "unwrapped" and the results of the signature validation and decryption are available in various email object properties and methods.  The default value of this property is _TRUE_.  Set this property to _FALSE_ to prevent unwrapping.
&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; A digitally signed or encrypted email can &lt;b&gt;ONLY&lt;/b&gt; be verified and/or decrypted when initially loading the original MIME into the email object (i.e. when downloading from the server, or when loading from MIME).  Once the MIME is parsed and stored in the internal email object format, the exactnes of the MIME has been lost and the signature can no longer be verified.  This is why the signature is verified upon the intial loading of the MIME, and the results are made available through the various properties and methods.  This property provides a means for downloading email where the .p7m (or .p7s) attachments are are to be treated as simple attachments and the desire is to  access or save the original .p7m/.p7s files.</descrip>
            <iversion>9.5.0.49</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="ClientIpAddress" axId="104" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The IP address to use for computers with multiple network interfaces or IP addresses.
For computers with a single network interface (i.e. most computers), this property should not be set.  For multihoming computers, the default IP address is automatically used if this property is not set.&lt;p&gt;
The IP address is a string such as in dotted notation using numbers, not domain names, such as "165.164.55.124".</descrip>
            <links>
                <link>
                    <text>Important Bind to Adapter Notes for Windows</text>
                    <url>http://www.cknotes.com/?p=376</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>Important Bind to Adapter Notes for Windows</text>
                    <url>http://www.cknotes.com/?p=376</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="ConnectFailReason" axId="274" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>This property will be set to the status of the last connection made (or failed to be made) by any  method.
&lt;p&gt;
Possible values are:
&lt;pre&gt;
0 = success

Normal (non-TLS) sockets:
1 = empty hostname
2 = DNS lookup failed
3 = DNS timeout
4 = Aborted by application.
5 = Internal failure.
6 = Connect Timed Out
7 = Connect Rejected (or failed for some other reason)

SSL/TLS:
100 = TLS internal error.
101 = Failed to send client hello.
102 = Unexpected handshake message.
103 = Failed to read server hello.
104 = No server certificate.
105 = Unexpected TLS protocol version.
106 = Server certificate verify failed (the server certificate is expired or the cert's signature verification failed).
107 = Unacceptable TLS protocol version.
109 = Failed to read handshake messages.
110 = Failed to send client certificate handshake message.
111 = Failed to send client key exchange handshake message.
112 = Client certificate's private key not accessible.
113 = Failed to send client cert verify handshake message.
114 = Failed to send change cipher spec handshake message.
115 = Failed to send finished handshake message.
116 = Server's Finished message is invalid.
&lt;/pre&gt;</descrip>
            <iversion>9.5.0.56</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="ConnectTimeout" axId="105" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>The time (in seconds) to wait before while trying to connect to a mail server (POP3 or SMTP).  The default value is 30.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="DsnEnvid" axId="106">
            <gType>string</gType>
            <descrip>(An SMTP DSN service extension feature) An arbitrary string that will be used as the ENVID property when sending email.  See RFC 3461 for more details.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="DsnNotify" axId="107">
            <gType>string</gType>
            <descrip>(An SMTP DSN service extension feature) A string that will be used as the NOTIFY parameter when sending email. (See RFC 3461 for more details. )  This string can be left blank, or can be set to "NEVER", or any combination of a comma-separated list of "SUCCESS", "FAILURE", or "NOTIFY".</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="DsnRet" axId="108">
            <gType>string</gType>
            <descrip>(An SMTP DSN service extension feature) A string that will be used as the RET parameter when sending email. (See RFC 3461 for more details. )  This string can be left blank, or can be set to "FULL" to receive entire-message DSN notifications, or "HDRS" to receive header-only DSN notifications.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="EmbedCertChain" axId="109">
            <gType>bool</gType>
            <descrip>If _TRUE_, causes the digital certificate chain to be embedded in signed emails.  The certificates in the chain of authentication are embedded up to but not including the root certificate.   If the IncludeRootCert property is also _TRUE_, then the root CA certificate is also included in the S/MIME signature.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Filter" axId="110">
            <gType>string</gType>
            <descrip>An expression that is applied to any of the following method calls when present: LoadXmlFile, LoadXmlString, LoadMbx, CopyMail, and TransferMail. For these methods, only the emails that match the filter's expression are returned in the email bundle. In the case of TransferMail, only the matching emails are removed from the mail server. The filter allows any header field, or the body, to be checked.
&lt;pre&gt;
Here are some examples of expressions:

Body like "mortgage rates*". 
Subject contains "update" and From contains "chilkat" 
To = "info@chilkatsoft.com" 

Here are the general rules for forming filter expressions:

Any MIME header field name can be used, case is insensitive. 
Literal strings are double-quoted, and case is insensitive. 
The "*" wildcard matches 0 or more occurrences of any character. 
Parentheses can be used to control precedence. 
The logical operators are: AND, OR, NOT (case insensitive) 
Comparison operators are: =, &lt;, &gt;, &lt;=, &gt;=, &lt;&gt; 
String comparison operators are: CONTAINS, LIKE (case insensitive)
&lt;/pre&gt;</descrip>
            <links>
                <link>
                    <text>More information about the Filter property (for POP3)</text>
                    <url>http://www.chilkatsoft.com/p/p_455.asp</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>More information about the Filter property (for POP3)</text>
                    <url>http://www.chilkatsoft.com/p/p_455.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HeartbeatMs" axId="111">
            <gType>int</gType>
            <descrip>The time interval, in milliseconds, between AbortCheck event callbacks.  The heartbeat provides a means for an application to monitor a mail-sending and/or mail-reading method call, and to abort it while in progress.</descrip>
            <links>
                <link>
                    <text>HeartbeatMs and the AbortCheck Event</text>
                    <url_cs>http://www.cknotes.com/?p=149</url_cs>
                    <url_vb.net>http://www.cknotes.com/?p=149</url_vb.net>
                </link>
            </links>
            <links2>
                <link linkType="external" lang="csharp">
                    <text>HeartbeatMs and the AbortCheck Event</text>
                    <url>http://www.cknotes.com/?p=149</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HeloHostname" axId="112">
            <gType>string</gType>
            <descrip>Specifies the hostname to be used for the EHLO/HELO command sent to an SMTP server.  By default, this property is an empty string which causes the local hostname to be used.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HttpProxyAuthMethod" axId="113">
            <gType>string</gType>
            <descrip>If an HTTP proxy requiring authentication is to be used, set this property to the HTTP proxy authentication method name.  Valid choices are "Basic" or "NTLM".</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="HttpProxyDomain" axId="114" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The NTLM authentication domain (optional) if NTLM authentication is used.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HttpProxyHostname" axId="115">
            <gType>string</gType>
            <descrip>If an HTTP proxy is to be used, set this property to the HTTP proxy hostname or IPv4 address (in dotted decimal notation).</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HttpProxyPassword" axId="116">
            <gType>string</gType>
            <descrip>If an HTTP proxy requiring authentication is to be used, set this property to the HTTP proxy password.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HttpProxyPort" axId="117">
            <gType>int</gType>
            <descrip>If an HTTP proxy is to be used, set this property to the HTTP proxy port number.  (Two commonly used HTTP proxy ports are 8080 and 3128.)</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HttpProxyUsername" axId="118">
            <gType>string</gType>
            <descrip>If an HTTP proxy requiring authentication is to be used, set this property to the HTTP proxy login name.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ImmediateDelete" axId="119">
            <gType>bool</gType>
            <descrip>If _TRUE_ (the default) then any method that deletes an email from the POP3 server will also issue a QUIT command to close the session to ensure the message is deleted immediately.
&lt;p&gt;
The POP3 protocol is such that the DELE command marks a message for deletion. It is not actually deleted until the QUIT command is sent and the session is closed. If ImmediateDelete is _TRUE_, then any Chilkat MailMan method that marks a message (or messages) for deletion will also followup with a QUIT command and close the session. If your program sets ImmediateDelete to _FALSE_, it must make sure to call Pop3EndSession to ensure that messages marked for deletion are actually deleted.</descrip>
            <links>
                <link>
                    <text>POP3 Session Management</text>
                    <url>http://www.chilkatsoft.com/p/p_250.asp</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>POP3 Session Management</text>
                    <url>http://www.chilkatsoft.com/p/p_250.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="IncludeRootCert" axId="120">
            <gType>bool</gType>
            <descrip>Controls whether the root certificate in the chain of authentication (i.e. the CA root certificate) is included within the S/MIME signature of a signed email.  Note: This property only applies if the EmbedCertChain property is also _TRUE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="IsPop3Connected" read="1" ax="1" cpp="1" dn="1" axId="261">
            <gType>bool</gType>
            <descrip>Returns _TRUE_ if still connected to the POP3  server.   Otherwise returns _FALSE_.
&lt;p&gt;
Note: Accessing this property does not trigger any communication with the POP3 server.  A connection to the POP3 server is established by explicitly calling Pop3BeginSession, or it is implicitly established as needed by any method that requires communication.  A lost connection might only be detected when attempting to communicate with the server.  To truly determine if a connection to the POP3 server is open and valid, it may be necessary to call the Pop3Noop method instead.  This property might return _TRUE_ if the server has disconnected, but the client has not attempted to communicate with the server since the disconnect.</descrip>
            <iversion>9.5.0.48</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="IsSmtpConnected" axId="121" read="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Returns _TRUE_ if still connected to the SMTP server.   Otherwise returns _FALSE_ (if there was never a connection in the first place, or if the connection was lost).
&lt;p&gt;
Note: Accessing this property does not trigger any communication with the SMTP server.  A connection to the SMTP server is established by explicitly calling OpenSmtpConnection, or it is implicitly established as needed by any method that requires communication.  A lost connection might only be detected when attempting to communicate with the server.  To truly determine if a connection to the SMTP server is open and valid, it may be necessary to call the SmtpNoop method instead.  This property might return _TRUE_ if the server has disconnected, but the client has not attempted to communicate with the server since the disconnect.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="LastSendQFilename" axId="122" read="1" ax="1" cpp="1" dn="1" deprecated="1">
            <gType>string</gType>
            <descrip>The name of the file created in the SMTPQ's queue directory for the last email sent via SendQ, SendQ2, or SendMimeQ.</descrip>
            <args2 />
            <links2 />
            <ifdef>#if defined(CK_SMTPQ_INCLUDED)</ifdef>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="LastSmtpStatus" axId="123">
            <gType>int</gType>
            <descrip>Returns the last SMTP diagnostic status code.  This can be checked after sending an email.  SMTP reply codes are defined by RFC 821 - Simple Mail Transfer Protocol.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="LogMailReceivedFilename" axId="124">
            <gType>string</gType>
            <descrip>A log filename where the MailMan will log each message in the exact form it was received from a POP3 server. This property is provided for help in debugging.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="LogMailSentFilename" axId="125">
            <gType>string</gType>
            <descrip>A log filename where the MailMan will log the exact message sent to the SMTP server. This property is helpful in debugging.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="MailHost" axId="126">
            <gType>string</gType>
            <descrip>The domain name of the POP3 server.  Do not include "http://" in the domain name. This property may also be set to an IP address string, such as "168.144.70.227".  Both IPv4 and IPv6 address formats are supported.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="MailPort" axId="127">
            <gType>int</gType>
            <descrip>The port number of the POP3 server. Only needs to be set if the POP3 server is running on a non-standard port.  The default value is 110.   (If SSL/TLS is used by setting the PopSsl property = _TRUE_, then this property should probably be set to 995, which is the standard SSL/TLS port for POP3.)</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="MaxCount" axId="128">
            <gType>int</gType>
            <descrip>Limits the number of messages the MailMan will try to retrieve from the POP3 server in a single method call.  If you are trying to read a large mailbox, you might set this to a value such as 100 to download 100 emails at a time.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="OAuth2AccessToken" axId="256" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The OAUTH2 access token if OAUTH2 authentication is to be used for the authentication.   For GMail, the Chilkat HTTP class/object's  G_SvcOauthAccessToken method can be called to obtain an OAUTH2 access token.</descrip>
            <iversion>9.5.0.44</iversion>
            <links>
                <link>
                    <text>Send using GMail with OAuth2 Authentication</text>
                    <url_android>http://www.example-code.com/android/smtp_gmailOAuth2.asp</url_android>
                    <url_c>http://www.example-code.com/C/smtp_gmailOAuth2.asp</url_c>
                    <url_cs>http://www.example-code.com/csharp/smtp_gmailOAuth2.asp</url_cs>
                    <url_cpp>http://www.example-code.com/cpp/smtp_gmailOAuth2.asp</url_cpp>
                    <url_asp>http://www.example-code.com/asp/smtp_gmailOAuth2.asp</url_asp>
                    <url_delphi>http://www.example-code.com/delphiAx/smtp_gmailOAuth2.asp</url_delphi>
                    <url_dd>http://www.example-code.com/delphiDll/smtp_gmailOAuth2.asp</url_dd>
                    <url_java>http://www.example-code.com/java/smtp_gmailOAuth2.asp</url_java>
                    <url_mfc>http://www.example-code.com/mfc/smtp_gmailOAuth2.asp</url_mfc>
                    <url_objc>http://www.example-code.com/objc/smtp_gmailOAuth2.asp</url_objc>
                    <url_perl>http://www.example-code.com/perl/smtp_gmailOAuth2.asp</url_perl>
                    <url_php>http://www.example-code.com/phpAx/smtp_gmailOAuth2.asp</url_php>
                    <url_phpext>http://www.example-code.com/phpExt/smtp_gmailOAuth2.asp</url_phpext>
                    <url_powershell>http://www.example-code.com/powershell/smtp_gmailOAuth2.asp</url_powershell>
                    <url_python>http://www.example-code.com/python/smtp_gmailOAuth2.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/smtp_gmailOAuth2.asp</url_ruby>
                    <url_sql>http://www.example-code.com/sql/smtp_gmailOAuth2.asp</url_sql>
                    <url_wc>http://www.example-code.com/unicodeC/smtp_gmailOAuth2.asp</url_wc>
                    <url_wcpp>http://www.example-code.com/unicodeCpp/smtp_gmailOAuth2.asp</url_wcpp>
                    <url_vb.net>http://www.example-code.com/vbnet/smtp_gmailOAuth2.asp</url_vb.net>
                    <url_vbscript>http://www.example-code.com/vbscript/smtp_gmailOAuth2.asp</url_vbscript>
                    <url_vb6>http://www.example-code.com/vb6/smtp_gmailOAuth2.asp</url_vb6>
                    <url_foxpro>http://www.example-code.com/foxpro/smtp_gmailOAuth2.asp</url_foxpro>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>Send using GMail with OAuth2 Authentication</text>
                    <url>smtp_gmailOAuth2.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="OpaqueSigning" axId="129">
            <gType>bool</gType>
            <descrip>When set to _TRUE_, signed emails are sent using opaque signing.  The default is to send clear-text (multipart/signed) emails.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="P7mEncryptAttachFilename" read="1" write="1" ax="1" cpp="1" dn="1" axId="250">
            <gType>string</gType>
            <descrip>The filename attribute to be used in the Content-Disposition header field when sending a PCKS7 encrypted email.  The default value is "smime.p7m".</descrip>
            <iversion>9.5.0.30</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="P7mSigAttachFilename" read="1" write="1" ax="1" cpp="1" dn="1" axId="251">
            <gType>string</gType>
            <descrip>The filename attribute to be used in the Content-Disposition header field when sending a PCKS7 opaque signed email.  The default value is "smime.p7m".</descrip>
            <iversion>9.5.0.30</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="P7sSigAttachFilename" read="1" write="1" ax="1" cpp="1" dn="1" axId="252">
            <gType>string</gType>
            <descrip>The filename attribute to be used in the Content-Disposition header field when sending a signed email with a detached PKCS7 signature.  The default value is "smime.p7s".</descrip>
            <iversion>9.5.0.30</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="PercentDoneScale" read="1" write="1" ax="1" cpp="1" dn="1" axId="265">
            <gType>int</gType>
            <descrip>This property is only valid in programming environment and languages that allow for event callbacks.
&lt;p&gt;
Sets the value to be defined as 100% complete for the purpose of PercentDone event callbacks.  The defaut value of 100 means that at most 100 event PercentDone callbacks will occur in a method that (1) is event enabled and (2) is such that it is possible to measure progress as a percentage completed.   This property may be set to larger numbers to get more fine-grained PercentDone callbacks.  For example, setting this property equal to 1000 will provide callbacks with .1 percent granularity.  For example, a value of 453 would indicate 45.3% competed.  This property is clamped to a minimum value of 10, and a maximum value of 100000.</descrip>
            <iversion>9.5.0.49</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="Pop3SPA" axId="130" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Controls whether SPA authentication for POP3 is used or not. To use SPA authentication, set this propoerty = _TRUE_. No other programming changes are required.   The default value is _FALSE_.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; If SPA (i.e. NTLM) authentication does not succeed, set the Global.DefaultNtlmVersion property equal to 1 and then retry.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="Pop3SessionId" axId="131">
            <gType>int</gType>
            <descrip>0 if no POP3 session is active.  Otherwise a positive integer that is incremented with each new POP3 session.  It may be used to determine if a new POP3 session has been established.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="Pop3SessionLog" axId="132">
            <gType>string</gType>
            <descrip>This string property accumulates the raw commands sent to the POP3 server, and the raw responses received from the POP3 server.  This property is read-only, but it may be cleared by calling ClearPop3SessionLog.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="Pop3SslServerCertVerified" axId="133">
            <gType>bool</gType>
            <descrip>When connecting via SSL, this property is _TRUE_ if the POP3 server's SSL certificate was verified.  Otherwise it is set to _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Pop3Stls" axId="134">
            <gType>bool</gType>
            <descrip>If _TRUE_, then an unencrypted connection (typically on port 110) is automatically converted to a secure TLS connection via the STLS command (see RFC 2595) when connecting.  This should only be used with POP3 servers that support the STLS capability.  If this property is set to _TRUE_, then the PopSsl property should be set to _FALSE_.  (The PopSsl property controls whether the connection is SSL/TLS from the beginning.  Setting the Pop3Stls property = _TRUE_ indicates that the POP3 client will initially connect unencrypted and then convert to TLS.)</descrip>
            <links2>
                <link linkType="example">
                    <url>pop3_starttls.asp</url>
                    <text>POP3 STARTTLS</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="PopPassword" axId="135" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The POP3 password.
&lt;p&gt;
If the Pop3SPA property is set, the PopUsername and PopPassword properties may be set to the string "default" to cause the component to use the current logged-on credentials (of the calling process) for authentication.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="PopPasswordBase64" axId="136" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Provides a way to specify the POP3 password from a Base64-encoded string.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="PopSsl" axId="137" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Controls whether TLS/SSL is used when reading email from a POP3 server.  Note: Check first to determine if your POP3 server can accept TLS/SSL connections.  Also, be sure to set the MailPort property to the TLS/SSL POP3 port number, which is typically 995.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="PopUsername" axId="138">
            <gType>string</gType>
            <descrip>The POP3 login name.
&lt;p&gt;
If the Pop3SPA property is set, the PopUsername and PopPassword properties may be set to the string "default" to cause the component to use the current logged-on credentials (of the calling process) for authentication.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="PreferIpv6" read="1" write="1" ax="1" cpp="1" dn="1" axId="253">
            <gType>bool</gType>
            <descrip>If _TRUE_, then use IPv6 over IPv4 when both are supported for a particular domain.   The default value of this property is _FALSE_, which will choose IPv4 over IPv6.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ReadTimeout" axId="139">
            <gType>int</gType>
            <descrip>The maximum time to wait, in seconds, if the POP3 or SMTP server stops responding.  The default value is 30 seconds.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="RequireSslCertVerify" axId="140">
            <gType>bool</gType>
            <descrip>If _TRUE_, then the mailman will verify the SMTP or POP3 server's SSL certificate when connecting.  The certificate is expired, or if the cert's signature is invalid, the connection is not allowed.  The default value of this property is _FALSE_.  (Obviously, this only applies to SSL/TLS connections.)</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ResetDateOnLoad" axId="141">
            <gType>bool</gType>
            <descrip>Controls whether the Date header field is reset to the current date/time when an email is loaded from LoadMbx, LoadEml, LoadMime, LoadXml, or LoadXmlString.  The default is _FALSE_ (to not reset the date).  To automatically reset the date, set this property equal to _TRUE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SendBufferSize" axId="142">
            <gType>int</gType>
            <descrip>The buffer size to be used with the underlying TCP/IP socket for sending.  The default value is 32767.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="SendIndividual" axId="143" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Determines how emails are sent to distribution lists. If _TRUE_, emails are sent to each recipient in the list one at a time, with the "To"header field containing the email address of the recipient. If _FALSE_, emails will contain &lt;undisclosed-recipients&gt;in the "To"header field, and are sent to 100 BCC recipients at a time. As an example, if your distribution list contained 350 email addresses, 4 emails would be sent, the first 3 having 100 BCC recipients, and the last email with 50 BCC recipients.The default value of this property is _TRUE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SizeLimit" axId="144">
            <gType>int</gType>
            <descrip>The MailMan will not try to retrieve mail messages from a POP3 server that are greater than this size limit. The default value is 0 indicating no size limit.  The SizeLimit is specified in number of bytes.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="SmtpAuthMethod" axId="145" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>This property should usually be left empty. The MailMan will by default choose the most secure login method available to prevent unencrypted username and passwords from being transmitted if possible. However, some SMTP servers may not advertise the acceptable authorization methods, and therefore it is not possible to automatically determine the best authorization method. To force a particular auth method, or to prevent any authorization from being used, set this property to one of the following values: "NONE", "LOGIN", "PLAIN", "CRAM-MD5", or "NTLM".
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; If NTLM authentication does not succeed, set the Global.DefaultNtlmVersion property equal to 1 and then retry.</descrip>
            <links2>
                <link linkType="example">
                    <url>smtp_noAuthentication.asp</url>
                    <text>Send Email without Authentication (no Login)</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="SmtpFailReason" read="1" ax="1" cpp="1" dn="1" axId="258">
            <gType>string</gType>
            <descrip>A keyword  that indicates the cause of failure (or success) for the last SMTP related method called.  Possible values are:
&lt;ol&gt;
&lt;li&gt;&lt;b&gt;Success&lt;/b&gt; The method call was successful.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Failed&lt;/b&gt; A general failure not covered by any of the other possible keywords.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;NoValidRecipients&lt;/b&gt; The SMTP server rejected all receipients.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;NoRecipients&lt;/b&gt; The app failed to provide any recipients (TO, CC, or BCC).
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SomeBadRecipients&lt;/b&gt; The AllOrNone property is _TRUE_, and some recipients were rejected by the SMTP server.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Aborted&lt;/b&gt; The application aborted the method.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;NoFrom&lt;/b&gt; The failed to provide a FROM address.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;FromFailure&lt;/b&gt; The SMTP replied with an error in response to the "MAIL FROM" command.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;NoCredentials&lt;/b&gt; The application did not provide the required credentials, such as username or password.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;AuthFailure&lt;/b&gt; The login (authentication) failed.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DataFailure&lt;/b&gt; The SMTP replied with an error in response to the "DATA" command.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;NoSmtpHostname&lt;/b&gt; The application failed to provide an SMTP hostname or IP address.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;StartTlsFailed&lt;/b&gt; Failed to convert the TCP connection to TLS via STARTTLS.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ConnectFailed&lt;/b&gt; Unable to establish a TCP or TLS connection to the SMTP server.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;GreetingError&lt;/b&gt; The SMTP server immediately responded with an error status in the intial greeting.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ConnectionLost&lt;/b&gt; The connection to the SMTP server was lost at some point during the method call.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Timeout&lt;/b&gt; A timeout occurred when reading or writing the socket connection.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;RenderFailed&lt;/b&gt; A failure occurred when rendering the email.  (Rendering the email for sending includes tasks such as signing or encrypting.)
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;NotUnlocked&lt;/b&gt; The UnlockComponent method was not previously called on at least one instance of the mailman object.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;InternalFailure&lt;/b&gt; An internal failure that should be reported to Chilkat support.
&lt;/li&gt;
&lt;/ol&gt;</descrip>
            <iversion>9.5.0.48</iversion>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SmtpHost" axId="146">
            <gType>string</gType>
            <descrip>The domain name of the SMTP server.  Do not include "http://" in the domain name.  This property may also be set to an IP address string, such as "168.144.70.227".  Both IPv4 and IPv6 address formats are supported.</descrip>
            <links>
                <link>
                    <text>Sending Email without an SMTP Server</text>
                    <url>http://www.chilkatsoft.com/p/p_325.asp</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>Sending Email without an SMTP Server</text>
                    <url>http://www.chilkatsoft.com/p/p_325.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SmtpLoginDomain" axId="147">
            <gType>string</gType>
            <descrip>The Windows domain for logging into the SMTP server. Use this only if your SMTP server requires NTLM authentication, which means your SMTP server uses Integrated Windows Authentication. If there is no domain, this can be left empty.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="SmtpPassword" axId="148" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The password for logging into the SMTP server. Use this only if your SMTP server requires authentication. Chilkat Email.NET supports the LOGIN, PLAIN, CRAM-MD5, and NTLM login methods, and it will automatically choose the most secure method available. Additional login methods will be available in the future.
&lt;p&gt;
If NTLM (Windows-Integrated) authentication is used, the SmtpUsername and SmtpPassword properties may be set to the string "default" to cause the component to use the current logged-on credentials (of the calling process) for authentication.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="SmtpPipelining" read="1" write="1" ax="1" cpp="1" dn="1" axId="264">
            <gType>bool</gType>
            <descrip>Controls whether SMTP pipelining is automatically used when the SMTP server indicates support for it.  The default is _TRUE_.  Setting this property equal to _FALSE_ will  prevent the SMTP pipelining feature from being used.</descrip>
            <iversion>9.5.0.49</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="SmtpPort" axId="149" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>The port number of the SMTP server used to send email. Only needs to be set if the SMTP server is running on a non-standard port.  The default value is 25.   If SmtpSsl is set to _TRUE_, this property should be set to 465. (TCP port 465 is reserved by common industry practice for secure SMTP communication using the SSL protocol.)</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="SmtpSessionLog" axId="150">
            <gType>string</gType>
            <descrip>This string property accumulates the raw commands sent to the SMTP server, and the raw responses received from the SMTP server.  This property is read-only, but it may be cleared by calling ClearSmtpSessionLog.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SmtpSsl" axId="151">
            <gType>bool</gType>
            <descrip>When set to _TRUE_, causes the mailman to connect to the SMTP server via the TLS/SSL protocol.</descrip>
            <links>
                <link>
                    <text>GMail SMTP port 465 (SSL)</text>
                    <url_asp>http://www.example-code.com/asp/gmail_smtp_465.asp</url_asp>
                    <url_cs>http://www.example-code.com/csharp/gmail_smtp_465.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/gmail_smtp_465.asp</url_cpp>
                    <url_delphi>http://www.example-code.com/delphi/gmail_smtp_465.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/gmail_smtp_465.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/gmail_smtp_465.asp</url_java>
                    <url_perl>http://www.example-code.com/perl/gmail_smtp_465.asp</url_perl>
                    <url_python>http://www.example-code.com/python/gmail_smtp_465.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/gmail_smtp_465.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/gmail_smtp_465.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/gmail_smtp_465.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/gmail_smtp_465.asp</url_vbscript>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>GMail SMTP port 465 (SSL)</text>
                    <url>gmail_smtp_465.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="SmtpSslServerCertVerified" axId="152">
            <gType>bool</gType>
            <descrip>If using SSL, this property will be set to _TRUE_ if the SMTP server's SSL certificate was verified when establishing the connection.  Otherwise it is set to _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SmtpUsername" axId="153">
            <gType>string</gType>
            <descrip>The login for logging into the SMTP server. Use this only if your SMTP server requires authentication.
&lt;p&gt;
Note: In many cases, an SMTP server will not require authentication when sending to an email address local to it's domain.  However, when sending email to an external domain, authentication is required (i.e. the SMTP server is being used as  a relay).
&lt;p&gt;
If the Pop3SPA property is set, the PopUsername and PopPassword properties may be set to the string "default" to cause the component to use the current logged-on credentials (of the calling process) for authentication.</descrip>
            <links>
                <link>
                    <text>550 5.7.1 Unable to relay</text>
                    <url>http://www.chilkatsoft.com/p/p_372.asp</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>550 5.7.1 Unable to relay</text>
                    <url>http://www.chilkatsoft.com/p/p_372.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SoRcvBuf" axId="154">
            <gType>int</gType>
            <descrip>Sets the receive buffer size socket option.   Normally, this property should be left unchanged.  The default value is 4194304.
&lt;p&gt;
This property can be increased if download performance seems slow.  It is recommended to be a multiple of 4096.</descrip>
            <links>
                <link>
                    <text>More Information about TCP performance and Buffer Sizes</text>
                    <url>http://www.cknotes.com/?p=446</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>More Information about TCP performance and Buffer Sizes</text>
                    <url>http://www.cknotes.com/?p=446</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SoSndBuf" axId="155">
            <gType>int</gType>
            <descrip>Sets the send buffer size socket option.   Normally, this property should be left unchanged.  The default value is 262144.   
&lt;p&gt;
This property can be increased if upload performance seems slow.  It is recommended to be a multiple of 4096.  Testing with sizes such as 512K and 1MB is reasonable.</descrip>
            <links>
                <link>
                    <text>More Information about TCP performance and Buffer Sizes</text>
                    <url>http://www.cknotes.com/?p=446</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>More Information about TCP performance and Buffer Sizes</text>
                    <url>http://www.cknotes.com/?p=446</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SocksHostname" axId="156">
            <gType>string</gType>
            <descrip>The SOCKS4/SOCKS5 hostname or IPv4 address (in dotted decimal notation).  This property is only used if the SocksVersion property is set to 4 or 5).</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SocksPassword" axId="157">
            <gType>string</gType>
            <descrip>The SOCKS5 password (if required).  The SOCKS4 protocol does not include the use of a password, so this does not apply to SOCKS4.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SocksPort" axId="158">
            <gType>int</gType>
            <descrip>The SOCKS4/SOCKS5 proxy port.  The default value is 1080. 
This property only applies if a SOCKS proxy is used (if the SocksVersion property is set to 4 or 5).</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SocksUsername" axId="159">
            <gType>string</gType>
            <descrip>The SOCKS4/SOCKS5 proxy username.  This property is only used if the SocksVersion property is set to 4 or 5).</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SocksVersion" axId="160">
            <gType>int</gType>
            <descrip>May be set to one of the following integer values:
&lt;p&gt;
&lt;b&gt;0&lt;/b&gt; - No SOCKS proxy is used.  This is the default.&lt;br&gt;
&lt;b&gt;4&lt;/b&gt; - Connect via a SOCKS4 proxy.&lt;br&gt;
&lt;b&gt;5&lt;/b&gt; - Connect via a SOCKS5 proxy.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="SslAllowedCiphers" axId="262" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Provides a means for setting a list of ciphers that are allowed for SSL/TLS connections.  The default (empty string) indicates that all implemented ciphers are possible.  The TLS ciphers supported in Chilkat v9.5.0.55 and later are:
&lt;pre&gt;
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
TLS_DHE_RSA_WITH_AES_256_CBC_SHA
TLS_RSA_WITH_AES_256_CBC_SHA256
TLS_RSA_WITH_AES_256_GCM_SHA384
TLS_RSA_WITH_AES_256_CBC_SHA
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
TLS_DHE_RSA_WITH_AES_128_CBC_SHA
TLS_RSA_WITH_AES_128_CBC_SHA256
TLS_RSA_WITH_AES_128_GCM_SHA256
TLS_RSA_WITH_AES_128_CBC_SHA
TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
TLS_RSA_WITH_3DES_EDE_CBC_SHA
TLS_ECDHE_RSA_WITH_RC4_128_SHA
TLS_RSA_WITH_RC4_128_SHA
TLS_RSA_WITH_RC4_128_MD5
TLS_DHE_RSA_WITH_DES_CBC_SHA
TLS_RSA_WITH_DES_CBC_SHA
&lt;/pre&gt;
To restrict SSL/TLS connections to one or more specific ciphers, set this property to a comma-separated list of ciphers such as "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384".   The order should be in terms of preference, with the preferred algorithms listed first.  (Note that the client cannot specifically choose the algorithm is picked because it is the server that chooses.  The client simply provides the server with a list from which to choose.)
&lt;p&gt;
The property can also disallow connections with servers having certificates with RSA keys less than a certain size.  By default, server certificates having RSA keys of 512 bits or greater are allowed.  Add the keyword "rsa1024" to disallow connections with servers having keys smaller than 1024 bits.  Add the keyword "rsa2048"  to disallow connections with servers having keys smaller than 2048 bits.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; Prior to Chilkat v9.5.0.55, it was not possible to explicitly list allowed cipher suites.  The deprecated means for indicating allowed ciphers was both incomplete  and unprecise.  For example, the following keywords could be listed to allow matching ciphers: "aes256-cbc", "aes128-cbc", "3des-cbc", and "rc4".    These keywords will still be recognized, but programs should be updated to explicitly list the allowed ciphers.&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;secure-renegotiation:&lt;/b&gt; Starting in Chilkat v9.5.0.55, the keyword "secure-renegotiation" may be added to require that all renegotions be done securely (as per RFC 5746).&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;best-practices:&lt;/b&gt; Starting in Chilkat v9.5.0.55, this  property may be set to the single keyword "best-practices".  This will allow ciphers based on the current best practices.  As new versions of Chilkat are released, the best practices may change.  Changes will be noted here.  The current best practices are:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the server uses an RSA key, it must be 1024 bits or greater.&lt;/li&gt;
&lt;li&gt;All renegotations must be secure renegotiations.&lt;/li&gt;
&lt;li&gt;All ciphers using RC4, DES, or 3DES are disallowed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;b&gt;Example:&lt;/b&gt; The following string would restrict to 2 specific cipher suites, require RSA keys to be 1024 bits or greater, and require secure renegotiations: "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA, rsa1024, secure-renegotiation"&lt;/p&gt;</descrip>
            <iversion>9.5.0.48</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="SslProtocol" axId="257" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Selects the secure protocol to be used for secure (SSL/TLS) connections (for both SMTP and POP3).  Possible values are:
&lt;blockquote&gt;
default&lt;br /&gt;
TLS 1.2&lt;br /&gt;
TLS 1.1&lt;br /&gt;
TLS 1.0&lt;br /&gt;
SSL 3.0&lt;br /&gt;
TLS 1.2 or higher&lt;br /&gt;
TLS 1.1 or higher&lt;br /&gt;
TLS 1.0 or higher&lt;br /&gt;
&lt;/blockquote&gt;
The default value is "default" which will choose the, which allows for the protocol to be selected dynamically at runtime based on the requirements of the server.  Choosing an exact protocol will cause the connection to fail unless that exact protocol is negotiated.  It is better to choose "X or higher" than an exact protocol.   The "default" is effectively "SSL 3.0 or higher".</descrip>
            <iversion>9.5.0.46</iversion>
            <args2 />
            <links2 />
        </property>
        <property read="1" write="1" name="StartTLS" axId="161" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>When set to _TRUE_, causes the mailman to issue a STARTTLS command to switch over to a secure SSL/TLS connection prior to authenticating and sending email.  The default value is _FALSE_.</descrip>
            <links>
                <link>
                    <text>GMail SMTP port 587 (STARTTLS)</text>
                    <url_asp>http://www.example-code.com/asp/gmail_smtp_587.asp</url_asp>
                    <url_cs>http://www.example-code.com/csharp/gmail_smtp_587.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/gmail_smtp_587.asp</url_cpp>
                    <url_delphi>http://www.example-code.com/delphi/gmail_smtp_587.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/gmail_smtp_587.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/gmail_smtp_587.asp</url_java>
                    <url_perl>http://www.example-code.com/perl/gmail_smtp_587.asp</url_perl>
                    <url_python>http://www.example-code.com/python/gmail_smtp_587.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/gmail_smtp_587.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/gmail_smtp_587.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/gmail_smtp_587.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/gmail_smtp_587.asp</url_vbscript>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>GMail SMTP port 587 (STARTTLS)</text>
                    <url>gmail_smtp_587.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="TlsCipherSuite" read="1" ax="1" cpp="1" dn="1" axId="267">
            <gType>string</gType>
            <descrip>Contains the current or last negotiated TLS cipher suite.  If no TLS connection has yet to be established, or if a connection as attempted and failed, then this will be empty.  A sample cipher suite string looks like this:  TLS_DHE_RSA_WITH_AES_256_CBC_SHA256.</descrip>
            <iversion>9.5.0.49</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="TlsPinSet" read="1" write="1" ax="1" cpp="1" dn="1" axId="273">
            <gType>string</gType>
            <descrip>Specifies a set of pins for Public Key Pinning for TLS connections.  This property lists the expected SPKI fingerprints for the server certificates.  If the server's certificate (sent during the TLS handshake) does not match any of the SPKI fingerprints, then the TLS handshake is aborted and the connection fails. The format of this string property is as follows:
&lt;pre&gt;
hash_algorithm, encoding, SPKI_fingerprint_1, SPKI_fingerprint_2, ...
&lt;/pre&gt;
For example, the following string specifies a single sha256 base64-encoded SPKI fingerprint:
&lt;pre&gt;
"sha256, base64, lKg1SIqyhPSK19tlPbjl8s02yChsVTDklQpkMCHvsTE="
&lt;/pre&gt;
This example specifies two SPKI fingerprints:
&lt;pre&gt;
"sha256, base64, 4t37LpnGmrMEAG8HEz9yIrnvJV2euVRwCLb9EH5WZyI=, 68b0G5iqMvWVWvUCjMuhLEyekM5729PadtnU5tdXZKs="
&lt;/pre&gt;
Any of the following hash algorithms are allowed:.sha1, sha256, sha384, sha512, md2, md5, haval, ripemd128, ripemd160,ripemd256, or ripemd320.
&lt;p&gt;
The following encodings are allowed: base64, hex, and any of the encodings indicated in the link below.</descrip>
            <iversion>9.5.0.55</iversion>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Encodings Supported by Chilkat</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="TlsVersion" read="1" ax="1" cpp="1" dn="1" axId="266">
            <gType>string</gType>
            <descrip>Contains the current or last negotiated TLS protocol version.  If no TLS connection has yet to be established, or if a connection as attempted and failed, then this will be empty.  Possible values are "SSL 3.0", "TLS 1.0", "TLS 1.1", and "TLS 1.2".</descrip>
            <iversion>9.5.0.49</iversion>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="UseApop" axId="162">
            <gType>bool</gType>
            <descrip>If _TRUE_, will automatically use APOP authentication if the POP3 server supports it.  The default value of this property is _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="StartTLSifPossible" axId="280" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>When set to _TRUE_, causes the mailman to do STARTTLS (if possible and supported by the server) to convert to a secure SSL/TLS connection prior to authenticating and sending email.  The default value is _TRUE_.
&lt;p&gt;
Note: Setting the StartTLS property = _TRUE_ causes STARTTLS to always be used, even if the SMTP server does not support it.  This property allows for a non-encrypted connection, whereas the StartTLS property disallows non-encrypted connections.</descrip>
            <args2 />
            <links2 />
            <iversion>9.5.0.67</iversion>
        </property>
    </properties>
    <methods>
        <method name="AddPfxSourceData" axId="163" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>pfxData</argName>
                    <objcName>pfxData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>password</argName>
                    <objcName>password</objcName>
                </arg>
            </args>
            <descrip>Adds a PFX to the object's internal list of sources to be searched for certificates and private keys when decrypting or when creating signed email for sending.  Multiple PFX sources can be added by calling this method once for each.  (On the Windows operating system, the registry-based certificate stores are also automatically searched, so it is commonly not required to explicitly add PFX sources.) 
&lt;p&gt;
The ARG1 contains the bytes of a PFX file  (also known as PKCS12 or .p12).</descrip>
            <args2>
                <arg name="pfxData" type="bytes" objcName="pfxData" />
                <arg name="password" type="string" objcName="password" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddPfxSourceFile" axId="164">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pfxFilePath</argName>
                    <objcName>pfxFilePath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>password</argName>
                    <objcName>password</objcName>
                </arg>
            </args>
            <descrip>Adds a PFX file to the object's internal list of sources to be searched for certificates and private keys when decrypting or when sending signed email.  Multiple PFX files can be added by calling this method once for each.  (On the Windows operating system, the registry-based certificate stores are also automatically searched, so it is commonly not required to explicitly add PFX sources.)
&lt;p&gt;
The ARG1 contains the bytes of a PFX file  (also known as PKCS12 or .p12).</descrip>
            <args2>
                <arg name="pfxFilePath" type="string" objcName="pfxFilePath" />
                <arg name="password" type="string" objcName="password" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="CheckMail" axId="165">
            <gType>int</gType>
            <args />
            <descrip>Returns the number of emails available on the POP3 server.  Returns -1 on error. &lt;p&gt;
The VerifyPopConnection method can be called to verify basic TCP/IP connectivity with the POP3 server.  The VerifyPopLogin method can be called to verify the POP3 login.  The Verify* methods are intended to be called as a way of diagnosing the failure when a POP3 method returns an error status.
&lt;p&gt;</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>pop3_live_com.asp</url>
                    <text>Test HotMail POP3 (pop3.live.com or pop-mail.outlook.com)</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="ClearBadEmailAddresses" axId="166">
            <gType>void</gType>
            <args />
            <descrip>Clears the list of bad email addresses stored within the Mailman object.  When an email-sending method is called, any email addresses rejected by the SMTP server will be cached within the Mailman object.  These can be accessed by calling the GetBadEmailAddresses method.  This method clears the Mailman's in-memory cache of bad addresses.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="ClearPop3SessionLog" axId="167">
            <gType>void</gType>
            <args />
            <descrip>Clears the contents of the Pop3SessionLog property.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="ClearSmtpSessionLog" axId="168">
            <gType>void</gType>
            <args />
            <descrip>Clears the contents of the SmtpSessionLog property.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="CloseSmtpConnection" axId="169" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args />
            <descrip>The mailman object automatically opens an SMTP connection (if necessary) whenever an email-sending method is called.  The connection is kept open until explicitly closed by this method.  Calling this method is entirely optional.  The SMTP connection is also automatically closed when the mailman object is destructed.    Thus, if an application calls SendEmail 10 times to send 10 emails, the 1st call will open the SMTP connection, while the subsequent 9 will send over the existing connection (unless a property such as username, login, hostname, etc. is changed, which would force the connection to become closed and re-established with the next mail-sending method call).
&lt;p&gt;
Note: This method sends a QUIT command to the SMTP server prior to closing the connection.</descrip>
            <links2>
                <link linkType="external">
                    <text>Minimizing SMTP Sessions</text>
                    <url>http://www.chilkatsoft.com/p/p_176.asp</url>
                </link>
            </links2>
            <args2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="CopyMail" axId="170">
            <gType>EmailBundle</gType>
            <args />
            <descrip>Copy the email from a POP3 server into a EmailBundle. This does not remove the email from the POP3 server.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>mailman_hotmail_copymail.asp</url>
                    <text>POP3 CopyMail Example</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="DeleteBundle" axId="171">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>EmailBundle</axType>
                    <dnType>EmailBundle</dnType>
                    <cppType>CkEmailBundle &amp;</cppType>
                    <argName>emailBundle</argName>
                    <objcName>bundle</objcName>
                </arg>
            </args>
            <descrip>Marks multiple emails on the POP3 server for deletion. (Each email in ARG1 that is also present on the server is marked for deletion.)  To complete the deletion of the emails, a "QUIT" message must be sent and the POP3 session ended. This will happen automatically when the ImmediateDelete property equals _TRUE_, which is the default. If ImmediateDelete equals _FALSE_, then the Pop3EndSession method can be called to send the "QUIT" and end the session (i.e. disconnect.)   
&lt;p&gt;Note: When making multiple calls to a Delete* method, it's best to turn off ImmediateDelete, and then manually call Pop3EndSession to finalize the deletions.  
&lt;p&gt;Also, any method call requiring communication with the POP3 server will automatically re-establish a session based on the current property settings.</descrip>
            <args2>
                <arg name="emailBundle" type="EmailBundle" objcName="bundle" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="DeleteByMsgnum" axId="172">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>msgnum</argName>
                    <objcName>msgnum</objcName>
                </arg>
            </args>
            <descrip>Marks an email for deletion by message number.  WARNING: Be very careful if calling this method.  Message numbers are specific to a POP3 session.  If a maildrop has (for example) 10 messages, the message numbers will be 1, 2, 3, ... 10.  If message number 1 is deleted and a new POP3 session is established, there will be 9 messages numbered 1, 2, 3, ... 9.
&lt;p&gt;
IMPORTANT: A POP3 must first be established by either calling Pop3BeginSession explicitly, or implicitly by calling some other method that automatically establishes the session.  This method will not automatically establish a new POP3 session (because if it did, the message numbers would potentially be different than what the application expects).  
&lt;p&gt;
This method only marks an email for deletion.  It is not actually removed from the maildrop until the POP3 session is explicitly ended by calling Pop3EndSession.</descrip>
            <args2>
                <arg name="msgnum" type="int" objcName="msgnum" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="DeleteByUidl" axId="173">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>uidl</argName>
                    <objcName>uidl</objcName>
                </arg>
            </args>
            <descrip>Marks an email on the POP3 server for deletion. To complete the deletion of an email, a "QUIT" message must be sent and the POP3 session ended. This will happen automatically when the ImmediateDelete property equals _TRUE_, which is the default. If ImmediateDelete equals _FALSE_, then the Pop3EndSession method can be called to send the "QUIT" and end the session (i.e. disconnect.)   
&lt;p&gt;Note: When making multiple calls to a Delete* method, it's best to turn off ImmediateDelete, and then manually call Pop3EndSession to finalize the deletions.  
&lt;p&gt;Also, any method call requiring communication with the POP3 server will automatically re-establish a session based on the current property settings.</descrip>
            <args2>
                <arg name="uidl" type="string" objcName="uidl" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="DeleteEmail" axId="174">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Email</axType>
                    <dnType>Email</dnType>
                    <cppType>CkEmail &amp;</cppType>
                    <argName>email</argName>
                    <objcName>email</objcName>
                </arg>
            </args>
            <descrip>Marks an email on the POP3 server for deletion. To complete the deletion of an email, a "QUIT" message must be sent and the POP3 session ended. This will happen automatically when the ImmediateDelete property equals _TRUE_, which is the default. If ImmediateDelete equals _FALSE_, then the Pop3EndSession method can be called to send the "QUIT" and end the session (i.e. disconnect.)   
&lt;p&gt;Note: When making multiple calls to a Delete* method, it's best to turn off ImmediateDelete, and then manually call Pop3EndSession to finalize the deletions.  
&lt;p&gt;Also, any method call requiring communication with the POP3 server will automatically re-establish a session based on the current property settings.</descrip>
            <args2>
                <arg name="email" type="Email" objcName="email" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="DeleteMultiple" axId="175">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>StringArray</axType>
                    <dnType>StringArray</dnType>
                    <cppType>CkStringArray &amp;</cppType>
                    <argName>uidlArray</argName>
                    <objcName>uidlArray</objcName>
                </arg>
            </args>
            <descrip>Marks multiple emails on the POP3 server for deletion. (Any email on the server having a UIDL equal to a UIDL found in ARG1 is marked for deletion.)  To complete the deletion of the emails, a "QUIT" message must be sent and the POP3 session ended. This will happen automatically when the ImmediateDelete property equals _TRUE_, which is the default. If ImmediateDelete equals _FALSE_, then the Pop3EndSession method can be called to send the "QUIT" and end the session (i.e. disconnect.)   
&lt;p&gt;Note: When making multiple calls to a Delete* method, it's best to turn off ImmediateDelete, and then manually call Pop3EndSession to finalize the deletions.  
&lt;p&gt;Also, any method call requiring communication with the POP3 server will automatically re-establish a session based on the current property settings.</descrip>
            <links2>
                <link linkType="external">
                    <text>Using GMail?  You'll need to read this information.</text>
                    <url>http://www.cknotes.com/?p=148</url>
                </link>
            </links2>
            <args2>
                <arg name="uidlArray" type="StringArray" objcName="uidlArray" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="FetchByMsgnum" axId="176">
            <gType>Email</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>msgnum</argName>
                    <objcName>msgnum</objcName>
                </arg>
            </args>
            <descrip>Fetches an email by message number.  WARNING: Be very careful if calling this method.  Message numbers are specific to a POP3 session.  If a maildrop has (for example) 10 messages, the message numbers will be 1, 2, 3, ... 10.  If message number 1 is deleted and a new POP3 session is established, there will be 9 messages numbered 1, 2, 3, ... 9.
&lt;p&gt;
IMPORTANT: A POP3 connection must first be established by either calling Pop3BeginSession explicitly, or implicitly by calling some other method that automatically establishes the session.  This method will not automatically establish a new POP3 session (because if it did, the message numbers would potentially be different than what the application expects).</descrip>
            <args2>
                <arg name="msgnum" type="int" objcName="msgnum" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="FetchEmail" axId="177">
            <gType>Email</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>uidl</argName>
                    <objcName>uidl</objcName>
                </arg>
            </args>
            <descrip>Fetches an email from the POP3 mail server given its UIDL. Calling this method does not remove the email from the server. A typical program might get the email headers from the POP3 server by calling GetAllHeaders or GetHeaders, and then fetch individual emails by UIDL.
&lt;p&gt;
Returns a null reference on failure.</descrip>
            <args2>
                <arg name="uidl" type="string" objcName="uidl" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="FetchMime" axId="178" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>uidl</argName>
                    <objcName>uidl</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Fetches an email by UIDL and returns the MIME source of the email in a byte array.</descrip>
            <args2>
                <arg name="uidl" type="string" objcName="uidl" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="FetchMimeByMsgnum" axId="179" outArgName="outBytes">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>msgnum</argName>
                    <objcName>msgnum</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>Fetches an email by message number and returns the MIME source of the email in a byte array.  WARNING: Message sequend numbers are specific to a POP3 session.  If a maildrop has (for example) 10 messages, the message numbers will be 1, 2, 3, ... 10.  If message number 1 is deleted and a new POP3 session is established, there will be 9 messages numbered 1, 2, 3, ... 9.
&lt;p&gt;
IMPORTANT: A POP3 connection must first be established by either calling Pop3BeginSession explicitly, or implicitly by calling some other method that automatically establishes the session.  This method will not automatically establish a new POP3 session (because if it did, the message numbers would potentially be different than what the application expects).</descrip>
            <args2>
                <arg name="msgnum" type="int" objcName="msgnum" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="FetchMultiple" axId="180">
            <gType>EmailBundle</gType>
            <args>
                <arg>
                    <axType>StringArray</axType>
                    <dnType>StringArray</dnType>
                    <cppType>CkStringArray &amp;</cppType>
                    <argName>uidlArray</argName>
                    <objcName>uidlArray</objcName>
                </arg>
            </args>
            <descrip>Given an array of UIDL strings, fetchs all the emails from the POP3 server whose UIDL is present in the array, and returns the emails in a bundle.</descrip>
            <links2>
                <link linkType="example">
                    <text>Process Large POP3 Mailbox</text>
                    <url>pop3_readLargeMailbox.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="uidlArray" type="StringArray" objcName="uidlArray" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="FetchMultipleHeaders" axId="181">
            <gType>EmailBundle</gType>
            <args>
                <arg>
                    <axType>StringArray</axType>
                    <dnType>StringArray</dnType>
                    <cppType>CkStringArray &amp;</cppType>
                    <argName>uidlArray</argName>
                    <objcName>uidlArray</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>numBodyLines</argName>
                    <objcName>numBodyLines</objcName>
                </arg>
            </args>
            <descrip>Given an array of UIDL strings, fetchs all the email headers from the POP3 server whose UIDL is present in the array.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; The email objects returned in the bundle contain only headers.  The attachments will be missing, and the bodies will be mostly missing (only the 1st ARG2 lines of either the plain-text or HTML body will be present).</descrip>
            <args2>
                <arg name="uidlArray" type="StringArray" objcName="uidlArray" />
                <arg name="numBodyLines" type="int" objcName="numBodyLines" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="FetchMultipleMime" axId="182">
            <gType>StringArray</gType>
            <args>
                <arg>
                    <axType>StringArray</axType>
                    <dnType>StringArray</dnType>
                    <cppType>CkStringArray &amp;</cppType>
                    <argName>uidlArray</argName>
                    <objcName>uidlArray</objcName>
                </arg>
            </args>
            <descrip>Given an array of UIDL strings, fetchs all the emails from the POP3 server whose UIDL is present in the array, and returns the MIME source of each email in an "stringarray" -- an object containing a collection of strings.  Returns a null reference on failure.</descrip>
            <args2>
                <arg name="uidlArray" type="StringArray" objcName="uidlArray" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="FetchSingleHeader" axId="183">
            <gType>Email</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>numBodyLines</argName>
                    <objcName>numBodyLines</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>messageNumber</argName>
                    <objcName>msgNum</objcName>
                </arg>
            </args>
            <descrip>Fetches a single header by message number.   Returns an email object on success, or a null reference on failure.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; The email objects returned in the bundle contain only headers.  The attachments will be missing, and the bodies will be mostly missing (only the 1st ARG2 lines of either the plain-text or HTML body will be present).
&lt;p&gt;
&lt;b&gt;Also Important:&lt;/b&gt;Message numbers are specific to a POP3 session (whereas UIDLs are valid across sessions).  Be very careful when using this method.</descrip>
            <args2>
                <arg name="numBodyLines" type="int" objcName="numBodyLines" />
                <arg name="messageNumber" type="int" objcName="msgNum" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="FetchSingleHeaderByUidl" axId="184">
            <gType>Email</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>numBodyLines</argName>
                    <objcName>numBodyLines</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>uidl</argName>
                    <objcName>uidl</objcName>
                </arg>
            </args>
            <descrip>Fetches a single header by UIDL.   Returns an email object on success, or a null reference on failure.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; The email objects returned in the bundle contain only headers.  The attachments will be missing, and the bodies will be mostly missing (only the 1st ARG2 lines of either the plain-text or HTML body will be present).</descrip>
            <args2>
                <arg name="numBodyLines" type="int" objcName="numBodyLines" />
                <arg name="uidl" type="string" objcName="uidl" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetAllHeaders" axId="185">
            <gType>EmailBundle</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>numBodyLines</argName>
                    <objcName>numBodyLines</objcName>
                </arg>
            </args>
            <descrip>Returns all the emails from the POP3 server, but only the first ARG1 lines of the body. Attachments are not returned. The emails returned in the bundle are valid email objects, the only difference is that the body is truncated to include only the top ARG1 lines, and the attachments will be missing.</descrip>
            <args2>
                <arg name="numBodyLines" type="int" objcName="numBodyLines" />
            </args2>
            <links2 />
        </method>
        <method cpp="0" dn="0" ax="1" name="GetBadEmailAddresses" axId="246">
            <gType>void</gType>
            <args>
                <arg>
                    <dnType>StringArray</dnType>
                    <axType>StringArray</axType>
                    <argName>strArray</argName>
                </arg>
            </args>
            <descrip>Returns a string array object containing a list of failed and invalid email addresses that have accumulated during SMTP sends. The list will not contain duplicates. Also, this only works with some SMTP servers -- not all SMTP servers check the validity of each email address.
&lt;p&gt;Note: An SMTP server can only validate the email addresses within it's own domain.  External email address are not verifiable at the time of sending.</descrip>
            <links2>
                <link linkType="example">
                    <url>mailman_getBadEmailAddrs.asp</url>
                    <text>MailMan GetBadEmailAddrs</text>
                </link>
            </links2>
            <args2>
                <arg name="strArray" type="StringArray" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="0" name="GetBadEmailAddrs">
            <gType>StringArray</gType>
            <args />
            <descrip>Returns a string array object containing a list of failed and invalid email addresses that have accumulated during SMTP sends. The list will not contain duplicates. Also, this only works with some SMTP servers -- not all SMTP servers check the validity of each email address.
&lt;p&gt;Note: An SMTP server can only validate the email addresses within it's own domain.  External email address are not verifiable at the time of sending.</descrip>
            <links2>
                <link linkType="example">
                    <url>mailman_getBadEmailAddrs.asp</url>
                    <text>MailMan GetBadEmailAddrs</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetFullEmail" axId="186">
            <gType>Email</gType>
            <args>
                <arg>
                    <axType>Email</axType>
                    <dnType>Email</dnType>
                    <cppType>CkEmail &amp;</cppType>
                    <argName>email</argName>
                    <objcName>email</objcName>
                </arg>
            </args>
            <descrip>If a partial email was obtained using GetHeaders or GetAllHeaders, this method will take the partial email as an argument, and download the full email from the server. A new email object (separate from the partial email) is returned.  A null reference is returned on failure.</descrip>
            <args2>
                <arg name="email" type="Email" objcName="email" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetHeaders" axId="187">
            <gType>EmailBundle</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>numBodyLines</argName>
                    <objcName>numBodyLines</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>fromIndex</argName>
                    <objcName>fromIndex</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>toIndex</argName>
                    <objcName>toIndex</objcName>
                </arg>
            </args>
            <descrip>The same as the GetAllHeaders method, except only the emails from ARG2 to ARG3 on the POP3 server are returned. The first email on the server is at index 0.</descrip>
            <args2>
                <arg name="numBodyLines" type="int" objcName="numBodyLines" />
                <arg name="fromIndex" type="int" objcName="fromIndex" />
                <arg name="toIndex" type="int" objcName="toIndex" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetMailboxCount" axId="188">
            <gType>int</gType>
            <args />
            <descrip>Returns the number of emails on the POP3 server, or -1 for failure.
&lt;p&gt;
This method is identical to CheckEmail.  It was added for clarity.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetMailboxInfoXml" axId="189" outArgName="outXml">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outXml</argName>
                    <objcName>outXml</objcName>
                </arg>
            </args>
            <descrip>Returns an XML document with information about the emails in a POP3 mailbox.  The XML contains the UIDL and size (in bytes) of each email in the mailbox.</descrip>
            <links2>
                <link linkType="example">
                    <text>Example: Get POP3 Mailbox XML Summary</text>
                    <url>pop3_mailboxInfoXml.asp</url>
                </link>
            </links2>
            <args2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetMailboxSize" axId="190">
            <gType>unsigned long</gType>
            <args />
            <descrip>Returns the total combined size in bytes of all the emails in the POP3 mailbox.  This is also known as the "mail drop" size.
Returns -1 on failure.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetPop3SslServerCert" axId="191">
            <gType>Cert</gType>
            <args />
            <descrip>Returns the POP3 server's SSL certificate.  This is available after connecting via SSL to a POP3 server.  (To use POP3 SSL, set the PopSsl property = _TRUE_.)
&lt;p&gt;
Returns a null reference if no POP3 SSL certificate is available.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetSentToEmailAddrs" axId="192">
            <gType>StringArray</gType>
            <args />
            <descrip>Returns the list of successful email addresses in the last call to a mail sending method, such as SendEmail.&lt;p&gt;
When an email is sent, the email addresses that were flagged invalid by the SMTP server are saved in a "bad email addresses" list within the mailman object, and the acceptable email addresses are saved in a "good email addresses" list (within the mailman object).  These internal lists are automatically reset at the start of the next mail-sending method call.  This allows for a program to know which email addresses were accepted and which were not.
&lt;p&gt;
Note: The AllOrNone property controls whether the mail-sending method, such as SendEmail, returns _FALSE_ (to indicate failure) if any single email address is rejected.  
&lt;p&gt;
Note: An SMTP server can only be aware of invalid email addresses that are of the same domain.  For example, the comcast.net mail servers would only be aware of what comcast.net email addresses are valid.  All external email addresses are implicitly accepted because the server is simply forwarding the email towards the mail server controlling that domain.</descrip>
            <links2>
                <link linkType="example">
                    <url>mailman_getSentToEmailAddrs.asp</url>
                    <text>MailMan GetSentToEmailAddrs</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetSizeByUidl" axId="193">
            <gType>int</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>uidl</argName>
                    <objcName>uidl</objcName>
                </arg>
            </args>
            <descrip>Returns the size of an email (including attachments) given the UIDL of the email on the POP3 server.  Returns -1 for failure.</descrip>
            <args2>
                <arg name="uidl" type="string" objcName="uidl" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetSmtpSslServerCert" axId="194">
            <gType>Cert</gType>
            <args />
            <descrip>If using SSL/TLS, this method returns the SMTP server's digital certificate used with the secure connection.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="GetUidls" axId="195">
            <gType>StringArray</gType>
            <args />
            <descrip>Returns the UIDLs of the emails currently stored on the POP3 server.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="IsSmtpDsnCapable" axId="196">
            <gType>bool</gType>
            <args />
            <descrip>Contacts the SMTP server and determines if it supports the DSN (Delivery Status Notification) features specified by RFC 3461 and supported by the DsnEnvid, DsnNotify, and DsnRet properties.  Returns _TRUE_ if the SMTP server supports DSN, otherwise returns _FALSE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsUnlocked" axId="197">
            <gType>bool</gType>
            <args />
            <descrip>Returns _TRUE_ if the mailman is already unlocked, otherwise returns _FALSE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="LoadEml" axId="198">
            <gType>Email</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>emlFilename</argName>
                    <objcName>emlPath</objcName>
                </arg>
            </args>
            <descrip>Loads an email from a .eml file.  (EML files contain the MIME source of an email.)  Returns a null reference on failure.
&lt;p&gt;Note: MHT files can be loaded into an email object by calling this method.</descrip>
            <links2>
                <link linkType="external">
                    <text>MHT = EML</text>
                    <url>http://www.chilkatsoft.com/p/p_73.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="emlFilename" type="string" objcName="emlPath" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="LoadMbx" axId="199">
            <gType>EmailBundle</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>mbxFileName</argName>
                    <objcName>mbxPath</objcName>
                </arg>
            </args>
            <descrip>Loads a .mbx file containing emails and returns an email bundle. If a Filter is present, only emails matching the filter are returned.</descrip>
            <args2>
                <arg name="mbxFileName" type="string" objcName="mbxPath" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="LoadMime" axId="200">
            <gType>Email</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>mimeText</argName>
                    <objcName>mimeText</objcName>
                </arg>
            </args>
            <descrip>Creates and loads an email from a MIME string.  Returns a null reference on failure.</descrip>
            <args2>
                <arg name="mimeText" type="string" objcName="mimeText" />
            </args2>
            <links2 />
        </method>
        <method name="LoadQueuedEmail" axId="268" ax="1" cpp="1" dn="1" deprecated="1" noObjC="1" windowsOnly="1">
            <gType>Email</gType>
            <args>
                <arg>
                    <dnType>string</dnType>
                    <argName>path</argName>
                    <cppType>const char *</cppType>
                    <axType>string</axType>
                    <objcName>path</objcName>
                </arg>
            </args>
            <descrip>Loads an email previously written to a Chilkat SMTPQ file via the SendQ/SendQ2 methods.  When SendQ or SendQ2 writes an email to a queue directory, the .eml created contains special MIME header fields used by the SMTPQ process.  These include fields to specify the SMTP server, login/password, whether the email should be sent signed and/or encrypted, etc.  The SMTPQ process reads these fields and removes them before sending.  This method will read the .eml and set the mailman properties to reflect the settings at the time when SendQ/SendQ2 was originally called.  This makes it possible for you to write your own "SMTPQ" process that processes files from a queue directory and sends according to the SMTP hostname/login parameters specified by the program that queued the email.   &lt;p&gt;Returns a null reference upon failure.</descrip>
            <ifdef>#if defined(CK_SMTPQ_INCLUDED)</ifdef>
            <args2>
                <arg name="path" type="string" objcName="path" />
            </args2>
            <links2>
                <link linkType="external">
                    <url>https://github.com/chilkatsoft/Chilkat-SMTPQ</url>
                    <text>SMTPQ Source Code and Visual Studio Project on GitHub</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="LoadXmlEmail" axId="201">
            <gType>Email</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>folderPath</objcName>
                </arg>
            </args>
            <descrip>Loads an XML file containing a single email and returns an email object.  Returns a null reference on failure.</descrip>
            <args2>
                <arg name="filename" type="string" objcName="folderPath" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="LoadXmlEmailString" axId="202">
            <gType>Email</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>xmlString</argName>
                    <objcName>xmlString</objcName>
                </arg>
            </args>
            <descrip>Loads an XML string containing a single email and returns an email object.  Returns a null reference on failure.</descrip>
            <args2>
                <arg name="xmlString" type="string" objcName="xmlString" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="LoadXmlFile" axId="203">
            <gType>EmailBundle</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>folderPath</objcName>
                </arg>
            </args>
            <descrip>Loads an XML file containing one or more emails and returns an email bundle. If a Filter is present, only emails matching the filter are returned.  Returns a null reference on failure.</descrip>
            <args2>
                <arg name="filename" type="string" objcName="folderPath" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="LoadXmlString" axId="204">
            <gType>EmailBundle</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>xmlString</argName>
                    <objcName>xmlString</objcName>
                </arg>
            </args>
            <descrip>Loads from an XML string containing emails and returns an email bundle. If a Filter is present, only emails matching the filter are returned.</descrip>
            <args2>
                <arg name="xmlString" type="string" objcName="xmlString" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="MxLookup" axId="205" outArgName="outStrHostname">
            <gType>string</gType>
            <ifdef>#if defined(CK_MX_INCLUDED)</ifdef>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>emailAddress</argName>
                    <objcName>emailAddr</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrHostname</argName>
                    <objcName>outStrHostname</objcName>
                </arg>
            </args>
            <descrip>Performs a DNS MX lookup to return the mail server hostname based on an email address.</descrip>
            <links2>
                <link linkType="example">
                    <text>MX Lookup Example</text>
                    <url>smtp_mxLookup.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="emailAddress" type="string" objcName="emailAddr" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="MxLookupAll" axId="206">
            <gType>StringArray</gType>
            <ifdef>#if defined(CK_MX_INCLUDED)</ifdef>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>emailAddress</argName>
                    <objcName>emailAddress</objcName>
                </arg>
            </args>
            <descrip>Performs a DNS MX lookup to return the list of mail server hostnames based on an email address.  The primary server is at index 0.  In most cases, there is only one mail server for a given email address.</descrip>
            <args2>
                <arg name="emailAddress" type="string" objcName="emailAddress" />
            </args2>
            <links2 />
        </method>
        <method name="OpenSmtpConnection" axId="207" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args />
            <descrip>Explicitly opens a connection to the SMTP server and authenticates (if a username/password was specified).  Calling this method is optional because the SendEmail method and other mail-sending methods will automatically open the connection to the SMTP server if one is not already established.
&lt;p&gt;
&lt;b&gt;Note: &lt;/b&gt; This method is the equivalent of calling SmtpConnect followed by SmtpAuthenticate.</descrip>
            <links2>
                <link linkType="external">
                    <text>Minimizing SMTP Connections</text>
                    <url>http://www.chilkatsoft.com/p/p_176.asp</url>
                </link>
                <link linkType="example">
                    <url>smtp_ssh_tunnel.asp</url>
                    <text>SMTP SSH Tunneling (Port Forwarding)</text>
                </link>
                <link linkType="example">
                    <url>smtp_hotmail_live.asp</url>
                    <text>Send Email with Hotmail (live.com) -- smtp-mail.outlook.com</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method name="Pop3Authenticate" ax="1" cpp="1" dn="1" events="1" status="1" axId="276">
            <gType>bool</gType>
            <descrip>Authenticates with the POP3 server using the property settings such as PopUsername, PopPassword, etc.   This method should only be called after a successful call to Pop3Connect.
&lt;p&gt;
&lt;b&gt;Note 1: &lt;/b&gt; The Pop3BeginSession method both connects and authenticates.  It is the equivalent of calling Pop3Connect followed by Pop3Authenticate.
&lt;p&gt;
&lt;b&gt;Note 2: &lt;/b&gt; All methods that communicate with the POP3 server, such as FetchEmail, will automatically connect and authenticate if not already connected and authenticated.</descrip>
            <iversion>9.5.0.56</iversion>
            <args />
            <args2 />
            <links2 />
        </method>
        <method name="Pop3BeginSession" axId="208" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args />
            <descrip>Call to explicitly begin a POP3 session.  It is not necessary to call this method because any method requiring an established POP3 session will automatically connect and login if a session is not already open.
&lt;p&gt;
&lt;b&gt;Important: &lt;/b&gt; All TCP-based Internet communications, regardless of the protocol (such as HTTP, FTP, SSH, IMAP, POP3, SMTP, etc.), and regardless of SSL/TLS, begin with establishing a TCP connection to a remote host:port.  External security-related infrastructure such as software firewalls (Windows Firewall), hardware firewalls, anti-virus, at either source or destination (or both) can block the connection.  If the connection fails, make sure to check all potential external causes of blockage.</descrip>
            <links2>
                <link linkType="external">
                    <text>More about POP3 Session Management</text>
                    <url>http://www.chilkatsoft.com/p/p_250.asp</url>
                </link>
            </links2>
            <args2 />
        </method>
        <method name="Pop3Connect" ax="1" cpp="1" dn="1" events="1" status="1" axId="275">
            <gType>bool</gType>
            <descrip>Explicitly establishes a connection to the POP3 server, which includes establishing a secure TLS channel if required, and receives the initial greeting.   This method stops short of authenticating.  The Pop3Authenticate method should be called after a successful call to this method.
&lt;p&gt;
&lt;b&gt;Note 1: &lt;/b&gt; The Pop3BeginSession method both connects and authenticates.  It is the equivalent of calling Pop3Connect followed by Pop3Authenticate.
&lt;p&gt;
&lt;b&gt;Note 2: &lt;/b&gt; All methods that communicate with the POP3 server, such as FetchEmail, will automatically connect and authenticate if not already connected and authenticated.
&lt;p&gt;
&lt;b&gt;Important: &lt;/b&gt; All TCP-based Internet communications, regardless of the protocol (such as HTTP, FTP, SSH, IMAP, POP3, SMTP, etc.), and regardless of SSL/TLS, begin with establishing a TCP connection to a remote host:port.  External security-related infrastructure such as software firewalls (Windows Firewall), hardware firewalls, anti-virus, at either source or destination (or both) can block the connection.  If the connection fails, make sure to check all potential external causes of blockage.</descrip>
            <iversion>9.5.0.56</iversion>
            <args />
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="Pop3EndSession" axId="209">
            <gType>bool</gType>
            <args />
            <descrip>Call to explicitly end a POP3 session.  If the ImmediateDelete property is set to _FALSE_, and emails marked for deletion will be deleted at this time.</descrip>
            <links2>
                <link linkType="external">
                    <text>More about POP3 Session Management</text>
                    <url>http://www.chilkatsoft.com/p/p_250.asp</url>
                </link>
                <link linkType="example">
                    <url>pop3_live_com.asp</url>
                    <text>Test HotMail POP3 (pop3.live.com or pop-mail.outlook.com)</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="Pop3EndSessionNoQuit" axId="210">
            <gType>bool</gType>
            <args />
            <descrip>This method is identical to Pop3EndSession, but no "QUIT" command is sent.  The client simply disconnects from the POP3 server.
&lt;p&gt;
This method should always return _TRUE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="Pop3Noop" axId="211">
            <gType>bool</gType>
            <args />
            <descrip>Sends a NOOP command to the POP3 server.  This may be a useful method to call periodically to keep a connection open, or to verify that the POP3 connection (session) is open and functioning.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="Pop3Reset" axId="212">
            <gType>bool</gType>
            <args />
            <descrip>Sends a RSET command to the POP3 server.  If any messages have been marked as deleted by the POP3
server, they are unmarked.  Calling Pop3Reset resets the POP3 session to a valid, known starting point.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="Pop3SendRawCommand" axId="213" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>command</argName>
                    <objcName>command</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Sends a raw command to the POP3 server and returns the POP3 server's response.   If non-us-ascii characters are included in ARG1, then ARG2 indicates the charset to be used in sending the command (such as "utf-8", "ansi", "iso-8859-1", "Shift_JIS", etc.)</descrip>
            <args2>
                <arg name="command" type="string" objcName="command" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method name="QuickSend" ax="1" cpp="1" dn="1" events="1" status="1" axId="214">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fromAddr</argName>
                    <objcName>fromAddr</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>toAddr</argName>
                    <objcName>to</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>subject</argName>
                    <objcName>subject</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>body</argName>
                    <objcName>body</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>smtpServer</argName>
                    <objcName>smtpServer</objcName>
                </arg>
            </args>
            <descrip>A quick way to send an email to a single recipient without having to explicitly create an email object.</descrip>
            <args2>
                <arg name="fromAddr" type="string" objcName="fromAddr" />
                <arg name="toAddr" type="string" objcName="to" />
                <arg name="subject" type="string" objcName="subject" />
                <arg name="body" type="string" objcName="body" />
                <arg name="smtpServer" type="string" objcName="smtpServer" />
            </args2>
            <links2 />
        </method>
        <method name="RenderToMime" axId="215" outArgName="outStr" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>Email</axType>
                    <dnType>Email</dnType>
                    <cppType>CkEmail &amp;</cppType>
                    <argName>email</argName>
                    <objcName>email</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>When an email is sent by calling SendEmail, it is first "rendered" according to the values of the email properties and contents. It may be digitally signed, encrypted, values substituted for replacement patterns, and header fields "Q"or "B" encoded as needed based on the email. The RenderToMime method performs the rendering, but without the actual sending. The MIME text produced is exactly what would be sent to the SMTP server had SendEmail been called. (The SendEmail method is effectively the same as calling RenderToMime followed by a call to SendRendered.)
&lt;p&gt;
The rendered MIME string is returned on success.</descrip>
            <args2>
                <arg name="email" type="Email" objcName="email" />
            </args2>
            <links2 />
        </method>
        <method name="RenderToMimeBytes" axId="216" outArgName="outBytes" ax="1" cpp="1" dn="1">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>Email</axType>
                    <dnType>Email</dnType>
                    <cppType>CkEmail &amp;</cppType>
                    <argName>email</argName>
                    <objcName>email</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>This method is the same as RenderToMime, but the MIME is returned in a byte array.  If an email uses an 8bit or binary MIME encoding, then calling RenderToMime may introduce errors because it is not possible to return non-text binary data as a string.  Therefore, calling RenderToMimeBytes is recommended over RenderToMime, unless it is assured that the email (MIME) does not use a binary encoding for non-text data.</descrip>
            <args2>
                <arg name="email" type="Email" objcName="email" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="SendBundle" axId="217">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>EmailBundle</axType>
                    <dnType>EmailBundle</dnType>
                    <cppType>CkEmailBundle &amp;</cppType>
                    <argName>bundle</argName>
                    <objcName>bundle</objcName>
                </arg>
            </args>
            <descrip>Sends a bundle of emails.  This is identical to calling SendEmail for each email in the bundle.
&lt;p&gt;If an error occurs when sending one of the emails in the bundle, it will continue with each subsequent email until each email in the bundle has been attempted (unless a fatal error occurs, in which case the send is aborted).
&lt;p&gt;Because it is difficult or impossible to programmatically identify which emails in the bundle failed and which succeeded, it is best to write a loop that sends each email separately (via the SendEmail method).</descrip>
            <args2>
                <arg name="bundle" type="EmailBundle" objcName="bundle" />
            </args2>
            <links2 />
        </method>
        <method name="SendEmail" axId="218" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Email</axType>
                    <dnType>Email</dnType>
                    <cppType>CkEmail &amp;</cppType>
                    <argName>email</argName>
                    <objcName>email</objcName>
                </arg>
            </args>
            <descrip>Sends a single email.  The connection to the SMTP server will remain open so that a subsequent call to SendEmail (or other email-sending methods) can re-use the same connection.  If any properties relating to the SMTP server are changed, such as SmtpHost, SmtpUsername, etc., then the next call to an email-sending method will automatically close the connection and re-establish a connection using the updated property settings. &lt;p&gt;
&lt;b&gt;Important: &lt;/b&gt;Some SMTP servers do not actually send the email until the connection is closed.  In these cases, it is necessary to call &lt;b&gt;CloseSmtpConnection&lt;/b&gt; for the mail to be  sent.  Most SMTP servers send the email immediately, and it is not required to close the connection.&lt;p&gt;
&lt;b&gt;GMail: &lt;/b&gt; If sending via smtp.gmail.com, then send with OAuth2 authentication if possible.  Otherwise you will need to change your GMail account settings to allow  for sending by less secure apps.  See the links below.</descrip>
            <links2>
                <link linkType="example">
                    <text>Send Email</text>
                    <url>smtp_simpleSend.asp</url>
                </link>
                <link linkType="example">
                    <text>Send using GMail with OAuth2 Authentication</text>
                    <url>smtp_gmailOAuth2.asp</url>
                </link>
                <link linkType="external">
                    <text>Configure GMail for less secure apps</text>
                    <url>http://www.ghacks.net/2014/07/21/gmail-starts-block-less-secure-apps-enable-access/</url>
                </link>
                <link linkType="external">
                    <text>Diagnosing SMTP Failures</text>
                    <url>http://www.chilkatsoft.com/p/p_245.asp</url>
                </link>
                <link linkType="external">
                    <text>SocketError: WSAECONNABORTED when Sending Email (SMTP)</text>
                    <url>http://www.chilkatsoft.com/p/p_389.asp</url>
                </link>
                <link linkType="external">
                    <text>SMTP 553-Relaying Denied</text>
                    <url>http://www.chilkatsoft.com/p/p_425.asp</url>
                </link>
                <link linkType="external">
                    <text>550 5.7.1 Unable to relay</text>
                    <url>http://www.chilkatsoft.com/p/p_372.asp</url>
                </link>
                <link linkType="external">
                    <text>Using undisclosed recipients / Send Failed</text>
                    <url>http://www.chilkatsoft.com/p/p_369.asp</url>
                </link>
                <link linkType="external">
                    <text>sockError: 10053, WSAECONNABORTED An established connection was aborted by the software in your host machine</text>
                    <url>http://www.chilkatsoft.com/p/p_361.asp</url>
                </link>
                <link linkType="external">
                    <text>Sending Email without a Mail Server (sort of)</text>
                    <url>http://www.chilkatsoft.com/p/p_325.asp</url>
                </link>
                <link linkType="external">
                    <text>Invalid Token error when trying to connect with SSL (SMTP, POP3, IMAP, FTP, HTTP)</text>
                    <url>http://www.chilkatsoft.com/p/p_321.asp</url>
                </link>
                <link linkType="external">
                    <text>SMTP SSL Clarification</text>
                    <url>http://www.chilkatsoft.com/p/p_315.asp</url>
                </link>
                <link linkType="external">
                    <text>Read Receipt vs. Delivery Receipt when Sending Email</text>
                    <url>http://www.chilkatsoft.com/p/p_313.asp</url>
                </link>
                <link linkType="external" lang="csharp">
                    <text>C# SMTP Send in Background Thread with Progress Monitoring and Abort</text>
                    <url>http://www.chilkatsoft.com/p/p_306.asp</url>
                </link>
                <link linkType="external">
                    <text>Validating an Email Address - Unfortunately, Nothing is Perfect</text>
                    <url>http://www.chilkatsoft.com/p/p_235.asp</url>
                </link>
                <link linkType="external">
                    <text>POP-before-SMTP Authentication</text>
                    <url>http://www.chilkatsoft.com/p/p_148.asp</url>
                </link>
                <link linkType="example">
                    <url>smtp_sendWithCopyToSentFolder.asp</url>
                    <text>Send Email with Copy Placed in the Sent Folder</text>
                </link>
                <link linkType="example">
                    <url>smtp_async.asp</url>
                    <text>Send Email Asynchronously using a Task</text>
                </link>
            </links2>
            <args2>
                <arg name="email" type="Email" objcName="email" />
            </args2>
        </method>
        <method name="SendMime" axId="219" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fromAddr</argName>
                    <objcName>from</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>recipients</argName>
                    <objcName>recipients</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>mimeSource</argName>
                    <objcName>mimeMsg</objcName>
                </arg>
            </args>
            <descrip>Provides complete control over the email that is sent.  The MIME text passed in ARG3 (the MIME source of an email) is passed exactly as-is to the SMTP server.   The ARG2 is a comma separated list of recipient email addresses.  The ARG1 is the reverse-path email address.  This is where bounced email (non-delivery reports) will be delivered.  It may be different than the "From" header field in the ARG3.
&lt;p&gt;
To understand how the ARG1 and ARG2 relate to the email addresses found in the MIME headers (FROM, TO, CC), see the link below entitled "SMTP Protocol in a Nutshell".  The ARG1 is what is passed to the SMTP server in the "MAIL FROM" command.  The ARG2 are the email addresses passed in "RCPT TO" commands.  These are usually the same email addresses found in the MIME headers, but need not be (unless the SMTP server enforces policies that require them to be the same).</descrip>
            <links2>
                <link linkType="external">
                    <text>SMTP Protocol in a Nutshell</text>
                    <url>http://www.cknotes.com/?p=40</url>
                </link>
                <link linkType="external">
                    <url>http://www.chilkatforum.com/questions/8163/sendemail-returns-success-but-recipient-never-receives-email</url>
                    <text>Email send function returns success, but recipient never receives email?</text>
                </link>
            </links2>
            <args2>
                <arg name="fromAddr" type="string" objcName="from" />
                <arg name="recipients" type="string" objcName="recipients" />
                <arg name="mimeSource" type="string" objcName="mimeMsg" />
            </args2>
        </method>
        <method name="SendMimeBytes" axId="220" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fromAddr</argName>
                    <objcName>from</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>recipients</argName>
                    <objcName>recipients</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>mimeSource</argName>
                    <objcName>mimeData</objcName>
                </arg>
            </args>
            <descrip>This method is the same as SendMime, except the MIME is passed in a byte array.   This can be important if the MIME uses a binary encoding, or if a DKIM/DomainKey signature is included. 
&lt;p&gt;
To understand how the ARG1 and ARG2 relate to the email addresses found in the MIME headers (FROM, TO, CC), see the link below entitled "SMTP Protocol in a Nutshell".  The ARG1 is what is passed to the SMTP server in the "MAIL FROM" command.  The ARG2 are the email addresses passed in "RCPT TO" commands.  These are usually the same email addresses found in the MIME headers, but need not be (unless the SMTP server enforces policies that require them to be the same).</descrip>
            <links2>
                <link linkType="external">
                    <text>SMTP Protocol in a Nutshell</text>
                    <url>http://www.cknotes.com/?p=40</url>
                </link>
                <link linkType="external">
                    <url>http://www.chilkatforum.com/questions/8163/sendemail-returns-success-but-recipient-never-receives-email</url>
                    <text>Email send function returns success, but recipient never receives email?</text>
                </link>
            </links2>
            <args2>
                <arg name="fromAddr" type="string" objcName="from" />
                <arg name="recipients" type="string" objcName="recipients" />
                <arg name="mimeSource" type="bytes" objcName="mimeData" />
            </args2>
        </method>
        <method name="SendMimeBytesQ" axId="221" ax="1" cpp="1" dn="1" deprecated="1" windowsOnly="1" status="1">
            <gType>bool</gType>
            <ifdef>#if defined(CK_SMTPQ_INCLUDED)</ifdef>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>from</argName>
                    <objcName>from</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>recipients</argName>
                    <objcName>recipients</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>mimeData</argName>
                    <objcName>mimeData</objcName>
                </arg>
            </args>
            <descrip>This method is the samem as SendMimeQ, except the MIME is passed in a byte array argument instead of a string argument.</descrip>
            <links2>
                <link linkType="external">
                    <url>https://github.com/chilkatsoft/Chilkat-SMTPQ</url>
                    <text>SMTPQ Source Code and Visual Studio Project on GitHub</text>
                </link>
            </links2>
            <args2>
                <arg name="from" type="string" objcName="from" />
                <arg name="recipients" type="string" objcName="recipients" />
                <arg name="mimeData" type="bytes" objcName="mimeData" />
            </args2>
        </method>
        <method name="SendMimeQ" axId="222" ax="1" cpp="1" dn="1" deprecated="1" windowsOnly="1" status="1">
            <gType>bool</gType>
            <ifdef>#if defined(CK_SMTPQ_INCLUDED)</ifdef>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fromAddr</argName>
                    <objcName>fromAddr</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>recipients</argName>
                    <objcName>recipients</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>mimeSource</argName>
                    <objcName>mimeSource</objcName>
                </arg>
            </args>
            <descrip>Same as SendMime, except the email is written to the Chilkat SMTPQ's queue directory for background sending from the SMTPQ service.
&lt;p&gt;&lt;b&gt;Important: &lt;/b&gt; The SMTPQ functionality is deprecated and will be removed in a future version.  The SMTPQ Windows Service Visual Studo project is available on GitHub at the link below.  Users would need to build the project prior to using.  Chilkat does not provide pre-built binaries for the SMTPQ Windows Service.</descrip>
            <links2>
                <link linkType="external">
                    <url>https://github.com/chilkatsoft/Chilkat-SMTPQ</url>
                    <text>SMTPQ Source Code and Visual Studio Project on GitHub</text>
                </link>
            </links2>
            <args2>
                <arg name="fromAddr" type="string" objcName="fromAddr" />
                <arg name="recipients" type="string" objcName="recipients" />
                <arg name="mimeSource" type="string" objcName="mimeSource" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="SendMimeToList" axId="223">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fromAddr</argName>
                    <objcName>from</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>distListFilename</argName>
                    <objcName>distListFile</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>mimeSource</argName>
                    <objcName>mimeText</objcName>
                </arg>
            </args>
            <descrip>Same as SendMime, but the recipient list is read from a text file (ARG2) containing one email address per line.</descrip>
            <args2>
                <arg name="fromAddr" type="string" objcName="from" />
                <arg name="distListFilename" type="string" objcName="distListFile" />
                <arg name="mimeSource" type="string" objcName="mimeText" />
            </args2>
            <links2 />
        </method>
        <method name="SendQ" axId="224" ax="1" cpp="1" dn="1" deprecated="1" windowsOnly="1" status="1">
            <gType>bool</gType>
            <ifdef>#if defined(CK_SMTPQ_INCLUDED)</ifdef>
            <args>
                <arg>
                    <axType>Email</axType>
                    <dnType>Email</dnType>
                    <cppType>CkEmail &amp;</cppType>
                    <argName>email</argName>
                    <objcName>email</objcName>
                </arg>
            </args>
            <descrip>Queues an email to be sent using the Chilkat SMTP queue service.  This is the same as SendEmail, except the email is written to the SMTPQ's queue directory.
&lt;p&gt;
The email is written as a .eml to the SMTPQ's queue directory.  The SMTP server hostname, login, password, and send-time parameters are saved as encrypted headers in the .eml.  The SMTPQ service watches the queue directory.  When a .eml file appears, it loads the .eml, extracts and removes the encrypted information from the header, and sends the email.
&lt;p&gt;
Note: When the Chilkat SMTPQ service is configured, the location of the queue directory is written to the registry.  Because Chilkat SMTPQ is a 32-bit service, it is the 32-bit registry that is written.  (Microsoft 64-bit systems have two separate registries -- one for 32-bit and one for 64-bit.)  Therefore, if your application is a 64-bit app, the registry lookup for the queue directory will fail.  You should instead call the SendQ2 method which allows for the queue directory to be explicitly specified.
&lt;p&gt;
Note: After calling this method, the filename of the .eml that was created will be available in the LastSendQFilename property.
&lt;p&gt;&lt;b&gt;Important: &lt;/b&gt; The SMTPQ functionality is deprecated and will be removed in a future version.  The SMTPQ Windows Service Visual Studo project is available on GitHub at the link below.  Users would need to build the project prior to using.  Chilkat does not provide pre-built binaries for the SMTPQ Windows Service.</descrip>
            <links2>
                <link linkType="external">
                    <url>https://github.com/chilkatsoft/Chilkat-SMTPQ</url>
                    <text>SMTPQ Source Code and Visual Studio Project on GitHub</text>
                </link>
            </links2>
            <args2>
                <arg name="email" type="Email" objcName="email" />
            </args2>
        </method>
        <method name="SendQ2" axId="225" ax="1" cpp="1" dn="1" deprecated="1" windowsOnly="1" status="1">
            <gType>bool</gType>
            <ifdef>#if defined(CK_SMTPQ_INCLUDED)</ifdef>
            <args>
                <arg>
                    <axType>Email</axType>
                    <dnType>Email</dnType>
                    <cppType>CkEmail &amp;</cppType>
                    <argName>email</argName>
                    <objcName>email</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>queueDir</argName>
                    <objcName>queueDir</objcName>
                </arg>
            </args>
            <descrip>Same as SendQ, but the queue directory can be explicitly specified in a method argument.
&lt;p&gt;
Beginning with version 9.5.0.47, the ARG2 can indicate the exact output filepath to be written.  If ARG2 specifies only the directory, then SendQ2 will automatically generate the output filename.
&lt;p&gt;&lt;b&gt;Important: &lt;/b&gt; The SMTPQ functionality is deprecated and will be removed in a future version.  The SMTPQ Windows Service Visual Studo project is available on GitHub at the link below.  Users would need to build the project prior to using.  Chilkat does not provide pre-built binaries for the SMTPQ Windows Service.</descrip>
            <links2>
                <link linkType="external">
                    <url>https://github.com/chilkatsoft/Chilkat-SMTPQ</url>
                    <text>SMTPQ Source Code and Visual Studio Project on GitHub</text>
                </link>
            </links2>
            <args2>
                <arg name="email" type="Email" objcName="email" />
                <arg name="queueDir" type="string" objcName="queueDir" />
            </args2>
        </method>
        <method name="SendToDistributionList" axId="226" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Email</axType>
                    <dnType>Email</dnType>
                    <cppType>CkEmail &amp;</cppType>
                    <argName>emailObj</argName>
                    <objcName>email</objcName>
                </arg>
                <arg>
                    <axType>StringArray</axType>
                    <dnType>StringArray</dnType>
                    <cppType>CkStringArray &amp;</cppType>
                    <argName>recipientList</argName>
                    <objcName>sa</objcName>
                </arg>
            </args>
            <descrip>Send the same email to a list of email addresses.</descrip>
            <links2>
                <link linkType="example">
                    <text>Send Identical Email to Distribution List</text>
                    <url>smtp_distributionList.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="emailObj" type="Email" objcName="email" />
                <arg name="recipientList" type="StringArray" objcName="sa" />
            </args2>
        </method>
        <method name="SetCSP" axId="227" ax="1" cpp="1" dn="1" noObjC="1" windowsOnly="1" status="1">
            <gType>bool</gType>
            <ifdef>#if defined(CK_CSP_INCLUDED)</ifdef>
            <args>
                <arg>
                    <axType>Csp</axType>
                    <dnType>Csp</dnType>
                    <cppType>CkCsp &amp;</cppType>
                    <argName>csp</argName>
                    <objcName>csp</objcName>
                </arg>
            </args>
            <descrip>(Only applies to the Microsoft Windows OS)  Sets the Cryptographic Service Provider (CSP) to be used for encryption or digital signing, or decryption / signature verification.
&lt;p&gt;
This is not commonly used becaues the default Microsoft CSP is typically appropriate. 
One instance where SetCSP is necessary is when using the Crypto-Pro CSP for the GOST R 34.10-2001 and GOST R 34.10-94 providers.</descrip>
            <args2>
                <arg name="csp" type="Csp" objcName="csp" />
            </args2>
            <links2 />
        </method>
        <method name="SetDecryptCert" ax="1" cpp="1" dn="1" status="1" axId="255">
            <gType>bool</gType>
            <descrip>Explicitly specifies the certificate  to be used for decrypting encrypted email.</descrip>
            <args>
                <arg>
                    <argName>cert</argName>
                    <cppType>CkCert &amp;</cppType>
                    <dnType>Cert</dnType>
                    <axType>Cert</axType>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <iversion>9.5.0.40</iversion>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetDecryptCert2" axId="228">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
                <arg>
                    <axType>PrivateKey</axType>
                    <dnType>PrivateKey</dnType>
                    <cppType>CkPrivateKey &amp;</cppType>
                    <argName>privateKey</argName>
                    <objcName>key</objcName>
                </arg>
            </args>
            <descrip>Explicitly specifies the certificate and associated private key to be used for decrypting S/MIME encrypted email.  
&lt;p&gt;
Note: In most cases, it  is easier to call AddPfxSourceFile or AddPfxSourceData to provide the required cert and private key.  On Windows systems where the certificate + private key has already been installed in the default certificate store, nothing needs to be done -- the mailman will automatically locate and use the required cert + private key.</descrip>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
                <arg name="privateKey" type="PrivateKey" objcName="key" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetSslClientCert" axId="229">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <descrip>Sets the client-side certificate to be used with SSL connections.  This is typically not required, as most SSL connections are such that only the server is authenticated while the client remains unauthenticated.</descrip>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetSslClientCertPem" axId="230">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pemDataOrFilename</argName>
                    <objcName>pemDataOrPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pemPassword</argName>
                    <objcName>pemPassword</objcName>
                </arg>
            </args>
            <descrip>Allows for a client-side certificate to be used for the SSL / TLS connection.</descrip>
            <links2>
                <link linkType="external">
                    <text>How to Create a PEM that Contains Certificates and a Private Key</text>
                    <url>http://www.chilkatforum.com/questions/356/how-to-use-a-client-side-certificate-and-private-key-for-an-ssltls-connection</url>
                </link>
            </links2>
            <args2>
                <arg name="pemDataOrFilename" type="string" objcName="pemDataOrPath" />
                <arg name="pemPassword" type="string" objcName="pemPassword" />
            </args2>
        </method>
        <method name="SetSslClientCertPfx" axId="231" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pfxFilename</argName>
                    <objcName>pfxPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pfxPassword</argName>
                    <objcName>pfxPassword</objcName>
                </arg>
            </args>
            <descrip>Allows for a client-side certificate to be used for the SSL / TLS connection.</descrip>
            <args2>
                <arg name="pfxFilename" type="string" objcName="pfxPath" />
                <arg name="pfxPassword" type="string" objcName="pfxPassword" />
            </args2>
            <links2 />
        </method>
        <method name="SmtpAuthenticate" axId="260" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Authenticates with the SMTP server using the property settings such as SmtpUsername, SmtpPassword, etc.   This method should only be called after a successful call to SmtpConnect.
&lt;p&gt;
&lt;b&gt;Note 1: &lt;/b&gt; The OpenSmtpConnection method both connects and authenticates.  It is the equivalent of calling SmtpConnect followed by SmtpAuthenticate.
&lt;p&gt;
&lt;b&gt;Note 2: &lt;/b&gt; All methods that communicate with the SMTP server, such as SendEmail, will automatically connect and authenticate if not already connected and authenticated.</descrip>
            <iversion>9.5.0.48</iversion>
            <args />
            <args2 />
            <links2 />
        </method>
        <method name="SmtpConnect" axId="259" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Explicitly establishes a connection to the SMTP server, which includes establishing a secure TLS channel if required, and receives the initial greeting.   This method stops short of authenticating.  The SmtpAuthenticate method should be called after a successful call to this method.
&lt;p&gt;
&lt;b&gt;Note 1: &lt;/b&gt; The OpenSmtpConnection method both connects and authenticates.  It is the equivalent of calling SmtpConnect followed by SmtpAuthenticate.
&lt;p&gt;
&lt;b&gt;Note 2: &lt;/b&gt; All methods that communicate with the SMTP server, such as SendEmail, will automatically connect and authenticate if not already connected and authenticated.
&lt;p&gt;
&lt;b&gt;Important: &lt;/b&gt; All TCP-based Internet communications, regardless of the protocol (such as HTTP, FTP, SSH, IMAP, POP3, SMTP, etc.), and regardless of SSL/TLS, begin with establishing a TCP connection to a remote host:port.  External security-related infrastructure such as software firewalls (Windows Firewall), hardware firewalls, anti-virus, at either source or destination (or both) can block the connection.  If the connection fails, make sure to check all potential external causes of blockage.</descrip>
            <iversion>9.5.0.48</iversion>
            <args />
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="SmtpNoop" axId="232">
            <gType>bool</gType>
            <args />
            <descrip>Sends a no-op to the SMTP server.  Calling this method is good for testing to see if the connection to the SMTP server is working and valid.  The SmtpNoop method will automatically establish the SMTP connection if it does not already exist.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="SmtpReset" axId="233">
            <gType>bool</gType>
            <args />
            <descrip>Sends an RSET command to the SMTP server.  This method is rarely needed.  The RSET command resets the state of the connection to the SMTP server to the initial state (so that the component can proceed with sending a new email).  The SmtpReset method would only be needed if a mail-sending method failed and left the connection with the SMTP server open and in a non-initial state.  (A situation that is probably not even possible with the Chilkat mail component.)</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="SmtpSendRawCommand" axId="234" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>command</argName>
                    <objcName>command</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bEncodeBase64</argName>
                    <objcName>bEncodeBase64</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Sends a raw command to the SMTP server and returns the SMTP server's response.   If non-us-ascii characters are included in ARG1, then ARG2 indicates the charset to be used in sending the command (such as "utf-8", "ansi", "iso-8859-1", "Shift_JIS", etc.)
&lt;p&gt;
If ARG3 is _TRUE_, then the response is returned in Base64-encoded format.   Otherwise the raw response is returned.</descrip>
            <args2>
                <arg name="command" type="string" objcName="command" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="bEncodeBase64" type="bool" objcName="bEncodeBase64" />
            </args2>
            <links2 />
        </method>
        <method name="SshAuthenticatePk" axId="235" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>sshLogin</argName>
                    <objcName>sshLogin</objcName>
                </arg>
                <arg>
                    <axType>SshKey</axType>
                    <dnType>SshKey</dnType>
                    <cppType>CkSshKey &amp;</cppType>
                    <argName>privateKey</argName>
                    <objcName>privateKey</objcName>
                </arg>
            </args>
            <descrip>Authenticates with the SSH server using public-key authentication.  The corresponding public key must have been installed on the SSH server for the ARG1.   Authentication will succeed if the matching ARG2 is provided.
&lt;p&gt;
Important: When reporting problems, please send the full contents of the LastErrorText property to support@chilkatsoft.com.</descrip>
            <args2>
                <arg name="sshLogin" type="string" objcName="sshLogin" />
                <arg name="sshUsername" type="SshKey" objcName="privateKey" />
            </args2>
            <links2 />
        </method>
        <method name="SshAuthenticatePw" axId="236" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>sshLogin</argName>
                    <objcName>sshLogin</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>sshPassword</argName>
                    <objcName>sshPassword</objcName>
                </arg>
            </args>
            <descrip>Authenticates with the SSH server using a ARG1 and ARG2.  
&lt;p&gt;
An SSH tunneling (port forwarding) session always begins by first calling SshTunnel to connect to the SSH server, then calling either AuthenticatePw or AuthenticatePk to authenticate.  
&lt;p&gt;
Note: Once the SSH tunnel is setup by calling SshTunnel and SshAuthenticatePw (or SshAuthenticatePk), all underlying communcations with the POP3 or SMTP server use the SSH tunnel.  No changes in programming are required other than making two initial calls to setup the tunnel.
&lt;p&gt;
Important: When reporting problems, please send the full contents of the LastErrorText property to support@chilkatsoft.com.</descrip>
            <links2>
                <link linkType="example">
                    <url>pop3_ssh_tunnel.asp</url>
                    <text>POP3 SSH Tunneling (Port Forwarding)</text>
                </link>
                <link linkType="example">
                    <url>smtp_ssh_tunnel.asp</url>
                    <text>SMTP SSH Tunneling (Port Forwarding)</text>
                </link>
            </links2>
            <args2>
                <arg name="sshLogin" type="string" objcName="sshLogin" />
                <arg name="sshPassword" type="string" objcName="sshPassword" />
            </args2>
        </method>
        <method name="SshCloseTunnel" axId="237" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args />
            <descrip>Closes the SSH tunnel for SMTP or POP3.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="SshOpenTunnel" axId="269" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Connects to an SSH server and creates a tunnel for SMTP or POP3.  The ARG1 is the hostname (or IP address) of the SSH server.  The ARG2 is typically 22, which is the standard SSH port number.
&lt;p&gt;
An SSH tunneling (port forwarding) session always begins by first calling SshTunnel to connect to the SSH server, followed by calling either SshAuthenticatePw or SshAuthenticatePk to authenticate.  
&lt;p&gt;
Note: Once the SSH tunnel is setup by calling SshOpenTunnel and SshAuthenticatePw (or SshAuthenticatePk), all underlying communcations with the SMTP or POP3 server use the SSH tunnel.  No changes in programming are required other than making two initial calls to setup the tunnel.
&lt;p&gt;
&lt;b&gt;Important: &lt;/b&gt; All TCP-based Internet communications, regardless of the protocol (such as HTTP, FTP, SSH, IMAP, POP3, SMTP, etc.), and regardless of SSL/TLS, begin with establishing a TCP connection to a remote host:port.  External security-related infrastructure such as software firewalls (Windows Firewall), hardware firewalls, anti-virus, at either source or destination (or both) can block the connection.  If the connection fails, make sure to check all potential external causes of blockage.</descrip>
            <iversion>9.5.0.50</iversion>
            <args>
                <arg>
                    <argName>sshHostname</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>sshHostname</objcName>
                </arg>
                <arg>
                    <argName>sshPort</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>sshPort</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>pop3_ssh_tunnel.asp</url>
                    <text>POP3 SSH Tunneling (Port Forwarding)</text>
                </link>
                <link linkType="example">
                    <url>smtp_ssh_tunnel.asp</url>
                    <text>SMTP SSH Tunneling (Port Forwarding)</text>
                </link>
            </links2>
            <args2>
                <arg name="sshHostname" type="string" objcName="sshHostname" />
                <arg name="sshPort" type="int" objcName="sshPort" />
            </args2>
        </method>
        <method name="SshTunnel" axId="238" ax="1" events="1" deprecated="1" noC="1" noWinRT="1" noObjC="1" windowsOnly="1" noPublish="1" status="1" noxojo="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bSmtp</argName>
                    <objcName>bSmtp</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>sshServerHostname</argName>
                    <objcName>sshServerHostname</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>sshPort</argName>
                    <objcName>sshServerPort</objcName>
                </arg>
            </args>
            <descrip>Connects to an SSH server and creates a tunnel for SMTP or POP3.  If ARG1 is _TRUE_, then an SSH tunnel is created for SMTP.  If ARG1 is _FALSE_, the SSH tunnel is created for POP3.  The ARG2 is the hostname (or IP address) of the SSH server.  The ARG3 is typically 22, which is the standard SSH port number.
&lt;p&gt;
An SSH tunneling (port forwarding) session always begins by first calling SshTunnel to connect to the SSH server, followed by calling either AuthenticatePw or AuthenticatePk to authenticate.  
&lt;p&gt;
Note: Once the SSH tunnel is setup by calling SshTunnel and SshAuthenticatePw (or SshAuthenticatePk), all underlying communcations with the SMTP or POP3 server use the SSH tunnel.  No changes in programming are required other than making two initial calls to setup the tunnel.
&lt;p&gt;
Note: Tunnels are setup separately for POP3 and SMTP.  The ARG1 indicates whether the tunnel is for SMTP or POP3.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; This method is deprecated.  Programs should instead call SshOpenTunnel. (The only change is in the name of the method.)</descrip>
            <args2>
                <arg name="bSmtp" type="bool" objcName="bSmtp" />
                <arg name="sshServerHostname" type="string" objcName="sshServerHostname" />
                <arg name="sshPort" type="int" objcName="sshServerPort" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="TransferMail" axId="239">
            <gType>EmailBundle</gType>
            <args />
            <descrip>Downloads and removes all email from a POP3 server.  A bundle containing the emails is returned.  A null reference is returned on failure.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="TransferMultipleMime" axId="240">
            <gType>StringArray</gType>
            <args>
                <arg>
                    <axType>StringArray</axType>
                    <dnType>StringArray</dnType>
                    <cppType>CkStringArray &amp;</cppType>
                    <argName>uidlArray</argName>
                    <objcName>uidlArray</objcName>
                </arg>
            </args>
            <descrip>Same as FetchMultipleMime except that the downloaded emails are also deleted from the server.  Returns a null reference on failure.</descrip>
            <args2>
                <arg name="uidlArray" type="StringArray" objcName="uidlArray" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="UnlockComponent" axId="241">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>code</argName>
                    <objcName>code</objcName>
                </arg>
            </args>
            <descrip>Unlocks the component.  This must be called once at the beginning of your program (or ASP / ASP.NET page).  It is very fast and has negligible overhead.  An arbitrary string, such as "Hello World" may be passed to automatically begin a fully-functional 30-day trial.
&lt;p&gt;
A valid purchased unlock code for this object will always included the substring "MAIL", or can be a Bundle unlock code.</descrip>
            <args2>
                <arg name="code" type="string" objcName="code" />
            </args2>
            <links2>
                <link linkType="external">
                    <text>Diagnosing UnlockComponent Problems</text>
                    <url>http://www.cknotes.com/?p=168</url>
                </link>
                <link linkType="external">
                    <text>UnlockComponent LastErrorText shows exact string passed to it.</text>
                    <url>http://www.cknotes.com/?p=315</url>
                </link>
                <link linkType="external">
                    <text>Verify UnlockComponent Success w/ Permanent Unlock Code</text>
                    <url>http://www.cknotes.com/?p=317</url>
                </link>
                <link linkType="external">
                    <text>LastErrorText Standard Information</text>
                    <url>http://www.cknotes.com/?p=316</url>
                </link>
            </links2>
        </method>
        <method name="UseCertVault" ax="1" cpp="1" dn="1" status="1" axId="254">
            <gType>bool</gType>
            <descrip>Adds an XML certificate vault to the object's internal list of sources to be searched for certificates and private keys when encrypting/decrypting or signing/verifying.  Unlike the AddPfxSourceData and AddPfxSourceFile methods, only a single XML certificate vault can be used.  If UseCertVault is called multiple times, only the last certificate vault will be used, as each call to UseCertVault will replace the certificate vault provided in previous calls.</descrip>
            <args>
                <arg>
                    <argName>vault</argName>
                    <cppType>CkXmlCertVault &amp;</cppType>
                    <dnType>XmlCertVault</dnType>
                    <axType>XmlCertVault</axType>
                    <objcName>vault</objcName>
                </arg>
            </args>
            <iversion>9.5.0.40</iversion>
            <args2>
                <arg name="vault" type="XmlCertVault" objcName="vault" />
            </args2>
            <links2 />
        </method>
        <method name="UseSsh" ax="1" cpp="1" dn="1" status="1" axId="272">
            <gType>bool</gType>
            <descrip>Uses an existing SSH tunnel for the connections to the POP3 andSMTP servers.  This method is identical to the UseSshTunnel method, except the SSH connection is obtained from an SSH object instead of a Socket object.
&lt;p&gt;
Uses an existing SSH tunnel.  This is useful for sharing an existing SSH tunnel connection wth other objects.  (SSH is a protocol where the tunnel contains many logical channels.  SMTP and POP3 connections can exist simultaneously within a single SSH tunnel as SSH channels.)</descrip>
            <iversion>9.5.0.55</iversion>
            <args>
                <arg>
                    <argName>ssh</argName>
                    <cppType>CkSsh &amp;</cppType>
                    <dnType>Ssh</dnType>
                    <axType>Ssh</axType>
                    <objcName>ssh</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>smtp_multiHopSsh.asp</url>
                    <text>SMTP over Multiple Hop SSH</text>
                </link>
                <link linkType="example">
                    <url>pop3_multiHopSsh.asp</url>
                    <text>POP3 over Multiple Hop SSH</text>
                </link>
            </links2>
            <args2>
                <arg name="ssh" type="Ssh" objcName="ssh" />
            </args2>
        </method>
        <method name="UseSshTunnel" axId="270" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Uses an existing SSH tunnel.  This is useful for sharing an existing SSH tunnel connection wth other objects.  (SSH is a protocol where the tunnel contains many logical channels.  SMTP and POP3 connections can exist simultaneously within a single SSH tunnel as SSH channels.)</descrip>
            <args>
                <arg>
                    <argName>tunnel</argName>
                    <cppType>CkSocket &amp;</cppType>
                    <dnType>Socket</dnType>
                    <axType>Socket</axType>
                    <objcName>tunnel</objcName>
                </arg>
            </args>
            <iversion>9.5.0.50</iversion>
            <args2>
                <arg name="tunnel" type="Socket" objcName="tunnel" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="VerifyPopConnection" axId="242">
            <gType>bool</gType>
            <args />
            <descrip>Return _TRUE_ if a TCP/IP connection can be established with the POP3 server, otherwise returns _FALSE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="VerifyPopLogin" axId="243">
            <gType>bool</gType>
            <args />
            <descrip>Return _TRUE_ if a TCP/IP connection and login is successful with the POP3 server. Otherwise return _FALSE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="VerifyRecips" axId="271" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <dnType>Email</dnType>
                    <cppType>CkEmail &amp;</cppType>
                    <argName>email</argName>
                    <objcName>email</objcName>
                    <axType>Email</axType>
                </arg>
                <arg>
                    <dnType>StringArray</dnType>
                    <cppType>CkStringArray &amp;</cppType>
                    <argName>badAddrs</argName>
                    <objcName>saBadAddrs</objcName>
                    <axType>StringArray</axType>
                </arg>
            </args>
            <descrip>Initiates sending an email, but aborts just after passing all recipients (TO, CC, BCC) to the SMTP server.  This allows your program to collect email addresses flagged as invalid by the SMTP server.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; Please read this blog post before using this method:  &lt;a href="http://www.cknotes.com/?p=249"&gt;http://www.cknotes.com/?p=249&lt;/a&gt;</descrip>
            <args2>
                <arg name="email" type="Email" objcName="email" />
                <arg name="badAddrs" type="StringArray" objcName="saBadAddrs" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="VerifySmtpConnection" axId="244">
            <gType>bool</gType>
            <args />
            <descrip>Return _TRUE_ if a TCP/IP connection can be established with the SMTP server, otherwise returns _FALSE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="VerifySmtpLogin" axId="245">
            <gType>bool</gType>
            <args />
            <descrip>Return _TRUE_ if a TCP/IP connection and login is successful with the SMTP server. Otherwise returns _FALSE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="RenderToMimeSb" axId="278" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="email" type="Email" objcName="email" />
                <arg name="renderedMime" type="StringBuilder" objcName="renderedMime" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>email_sign_rsassa_pss_sha256.asp</url>
                    <text>Sign Email using RSASSA-PSS with SHA256</text>
                </link>
                <link linkType="example">
                    <url>email_encrypt_rsaes_oaep_aes_128_sha256.asp</url>
                    <text>Encrypt Email using RSAES-OAEP with AES-128 CBC and SHA256</text>
                </link>
            </links2>
            <descrip>The same as RenderToMime, except the MIME is rendered into ARG2.    The rendered MIME is appended to ARG2.</descrip>
            <iversion>9.5.0.62</iversion>
        </method>
        <method name="RenderToMimeBd" axId="279" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="email" type="Email" objcName="email" />
                <arg name="renderedMime" type="BinData" objcName="renderedMime" />
            </args2>
            <links2 />
            <iversion>9.5.0.62</iversion>
            <descrip>The same as RenderToMimeBytes, except the MIME is rendered into ARG2.   The rendered MIME is appended to ARG2.</descrip>
        </method>
        <method name="LastJsonData" axId="281" ax="1" cpp="1" dn="1">
            <gType>JsonObject</gType>
            <args2 />
            <links2 />
            <iversion>9.5.0.69</iversion>
            <descrip>Provides information about what transpired in the last method called on this object instance.  For many methods, there is no information.  However, for some methods, details about what occurred can be obtained by getting the LastJsonData right after the method call returns.</descrip>
        </method>
    </methods>
    <genericName>MailMan</genericName>
    <events>
        <standard name="AbortCheck" />
        <event name="EmailReceived">
            <gType>event</gType>
            <dotNetArgsClass>EmailEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>subject</argName>
                    <objcName>subject</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg>
                    <argName>fromAddr</argName>
                    <objcName>fromAddr</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg>
                    <argName>fromName</argName>
                    <objcName>fromName</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg>
                    <argName>returnPath</argName>
                    <objcName>returnPath</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg>
                    <argName>date</argName>
                    <objcName>date</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg>
                    <argName>uidl</argName>
                    <objcName>uidl</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg>
                    <argName>sizeInBytes</argName>
                    <objcName>sizeInBytes</objcName>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                </arg>
            </args>
            <descrip>Called just after an email has been received.  This is useful for methods that download more than one email.</descrip>
            <args2>
                <arg name="subject" type="string" objcName="subject" />
                <arg name="fromAddr" type="string" objcName="fromAddr" />
                <arg name="fromName" type="string" objcName="fromName" />
                <arg name="returnPath" type="string" objcName="returnPath" />
                <arg name="date" type="string" objcName="date" />
                <arg name="uidl" type="string" objcName="uidl" />
                <arg name="sizeInBytes" type="int" objcName="sizeInBytes" />
            </args2>
            <links2 />
        </event>
        <standard name="PercentDone" />
        <standard name="ProgressInfo" />
        <standard name="TaskCompleted">
            <links2>
                <link linkType="external" lang="csharp">
                    <url>http://www.cknotes.com/c-taskcompleted-event-updating-the-ui-from-a-background-thread/</url>
                    <text>TaskCompleted Event Callback Example</text>
                </link>
            </links2>
        </standard>
    </events>
    <description>The Chilkat MailMan class is reponsible for sending email though SMTP and receiving/managing email on POP3 servers.</description>
    <clsid>10F9AFBB-94CF-4556-A066-DD457D3254CF</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidEvents>3AB70566-E8D9-474F-A244-5DA0260892C1</uuidEvents>
    <uuidMidl>7998B064-06E7-4960-ACEF-AAFF0A262487</uuidMidl>
    <nextAxId>282</nextAxId>
</class>
