<?xml version="1.0" encoding="utf-8" ?>
<class XojoModuleId="276290402" sourceXmlPath="c:/ck2000/appData/apiDef2/Ftp2.xml" license="Ftp2" hasEvents="1">
    <axName>ChilkatFtp2</axName>
    <dnName>Ftp2</dnName>
    <cppName>CkFtp2</cppName>
    <properties>
        <property name="AbortCurrent" read="1" write="1" ax="1" cpp="1" dn="1" axId="296">
            <gType>bool</gType>
            <descrip>When set to _TRUE_, causes the currently running method to abort.  Methods that always finish quickly (i.e.have no length file operations or network communications) are not affected.  If no method is running, then this property is automatically reset to _FALSE_ when the next method is called.  When the abort occurs, this property is reset to _FALSE_.  Both synchronous and asynchronous method calls can be aborted.  (A synchronous method call could be aborted by setting this property from a separate thread.)</descrip>
            <iversion>9.5.0.58</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="Account" axId="100" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Some FTP servers require an Account name in addition to login/password.  This property can be set for those servers with this requirement.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ActivePortRangeEnd" axId="101">
            <gType>int</gType>
            <descrip>When Active (i.e. PORT) mode is used (opposite of Passive), the client-side is responsible for choosing a random port for each data connection.  (Note: In the FTP protocol, each data transfer occurs on a separate TCP/IP connection.  Commands are sent over the control channel (port 21 for non-SSL, port 990 for SSL).)
&lt;p&gt;
This property, along with ActivePortRangeStart, allows the client to specify a range of ports for data connections.</descrip>
            <links>
                <link>
                    <text>more information about FTP port ranges</text>
                    <url>http://www.chilkatsoft.com/p/p_340.asp</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>more information about FTP port ranges</text>
                    <url>http://www.chilkatsoft.com/p/p_340.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ActivePortRangeStart" axId="102">
            <gType>int</gType>
            <descrip>This property, along with ActivePortRangeEnd, allows the client to specify a range of ports for data connections when in Active mode.</descrip>
            <links>
                <link>
                    <text>more information about FTP port ranges</text>
                    <url>http://www.chilkatsoft.com/p/p_340.asp</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>more information about FTP port ranges</text>
                    <url>http://www.chilkatsoft.com/p/p_340.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="AllocateSize" axId="103">
            <gType>unsigned long</gType>
            <descrip>If set to a non-zero value, causes an ALLO command, with this size as the parameter, to be automatically sent when uploading files to an FTP server. 
&lt;p&gt;
This command could be required by some servers to reserve sufficient storage space to accommodate the new file to be transferred.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AllowMlsd" axId="288" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If _TRUE_, then uses the MLSD command to fetch directory listings when the FTP server supports MLSD.   This property is _TRUE_ by default.
&lt;p&gt;
When MLSD is used, the GetPermissions method will return the "perm fact" for a given file or directory.  This is a different format than the more commonly recognized UNIX permissions string.   Note: MLSD provides more accurate and dependable file listings, especially for last-mod date/time information.  If usage of the MLSD command is turned off, it may adversely affect the quality and availability of other information.</descrip>
            <iversion>9.5.0.50</iversion>
            <links2>
                <link linkType="example">
                    <url>ftp_filePermissions.asp</url>
                    <text>Get FTP File Permissions</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="AsyncBytesReceived" axId="104" noxojo="1" read="1" ax="1" cpp="1" dn="1">
            <gType>unsigned long</gType>
            <descrip>The number of bytes received during an asynchronous FTP download.  This property is updated in real-time and an application may periodically fetch and display it's value while the download is in progress.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AsyncBytesReceived64" read="1" noxojo="1" axId="305" cpp="1" dn="1">
            <gType>int64</gType>
            <descrip>Same as AsyncBytesReceived, but returns the value as a 64-bit integer.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AsyncBytesReceivedStr" axId="105" noxojo="1" read="1" ax="1" cpp="1">
            <gType>string</gType>
            <descrip>The number of bytes received during an asynchronous FTP download.  This property is updated in real-time and an application may periodically fetch and display it's value while the download is in progress.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AsyncBytesSent" axId="106" read="1" noxojo="1" ax="1" cpp="1" dn="1">
            <gType>unsigned long</gType>
            <descrip>The number of bytes sent during an asynchronous FTP upload.  This property is updated in real-time and an application may periodically fetch and display it's value while the upload is in progress.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AsyncBytesSent64" noxojo="1" axId="306" read="1" cpp="1" dn="1">
            <gType>int64</gType>
            <descrip>Same as AsyncBytesSent, but returns the value as a 64-bit integer.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AsyncBytesSentStr" axId="107" noxojo="1" read="1" ax="1" cpp="1">
            <gType>string</gType>
            <descrip>The number of bytes sent during an asynchronous FTP upload.  This string property is updated in real-time and an application may periodically fetch and display it's value while the upload is in progress.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AsyncFinished" axId="108" noxojo="1" read="1" ax="1" cpp="1" dn="1" deprecated="1">
            <gType>bool</gType>
            <descrip>Set to _TRUE_ if the asynchronous transfer (download or upload) is finished.
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AsyncLog" axId="109" noxojo="1" read="1" ax="1" cpp="1" dn="1" deprecated="1">
            <gType>string</gType>
            <descrip>The last-error information for an asynchronous (background) file transfer.
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AsyncPercentDone" axId="278" read="1" noxojo="1" ax="1" cpp="1" dn="1" deprecated="1">
            <gType>unsigned long</gType>
            <descrip>The current percentage completed of an asynchronous FTP upload or download.  This property is updated in real-time and an application may periodically fetch and display it's value while the asynchronous data transfer is in progress.
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AsyncSuccess" axId="110" read="1" ax="1" cpp="1" dn="1" deprecated="1" noxojo="1">
            <gType>bool</gType>
            <descrip>Set to _TRUE_ if the asynchronous file transfer succeeded.
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AuthSsl" axId="111" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Same as AuthTls, except the command sent to the FTP server is "AUTH SSL" instead of "AUTH TLS".  Most FTP servers accept either.  AuthTls is more commonly used.  If a particular server has trouble with AuthTls, try AuthSsl instead.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="AuthTls" axId="112">
            <gType>bool</gType>
            <descrip>Set this to _TRUE_ to switch to a TLS 1.0 encrypted channel.   This property should be set prior to connecting.  If this property is set, the port typically remains at it's default (21) and the Ssl property should *not* be set.  When AuthTls is used, all control and data transmissions are encrypted.  If your FTP client is behind a network-address-translating router, you may need to call ClearControlChannel after connecting and authenticating (i.e. after calling the Connect method).  This keeps all data transmissions encrypted, but clears the control channel so that commands are sent unencrypted, thus allowing the router to translate network IP numbers in FTP commands.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AutoFeat" axId="113" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>When _TRUE_ (which is the default value), a "FEAT" command is automatically sent to the FTP server immediately after connecting.  This allows the Chilkat FTP2 component to know more about the server's capabilities and automatically adjust any applicable internal settings based on the response.  In rare cases, some FTP servers reject the "FEAT" command and close the connection.  Usually, if an FTP server does not implement FEAT, a harmless "command not understood" response is returned.
&lt;p&gt;
Set this property to _FALSE_ to prevent the FEAT command from being sent.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AutoFix" axId="114" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If _TRUE_, then the following will occur when a connection is made to an FTP server:&lt;p&gt;
1) If the Port property = 990, then sets AuthTls = _FALSE_, AuthSsl = _FALSE_, and Ssl = _TRUE_&lt;br&gt;
2) If the Port property = 21, sets Ssl = _FALSE_&lt;p&gt;
The default value of this property is _TRUE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="AutoGetSizeForProgress" axId="115">
            <gType>bool</gType>
            <descrip>Forces the component to retrieve each file's size prior to downloading for the purpose of monitoring percentage completion progress.  For many FTP servers, this is not required and therefore for performance reasons this property defaults to _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AutoOptsUtf8" read="1" write="1" ax="1" cpp="1" dn="1" axId="282">
            <gType>bool</gType>
            <descrip>When _TRUE_ (which is the default value), then an "OPTS UTF8 ON" command is automatically sent when connecting/authenticating if it is discovered via the FEAT command that the UTF8 option is supported.
&lt;p&gt;
Set this property to _FALSE_ to prevent the "OPTS UTF8 ON" command from being sent.</descrip>
            <iversion>9.5.0.47</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="AutoSetUseEpsv" read="1" write="1" ax="1" cpp="1" dn="1" axId="279">
            <gType>bool</gType>
            <descrip>If _TRUE_ then the UseEpsv property is automatically set upon connecting to the FTP server. The default value of this property is _FALSE_. 
&lt;p&gt; If the AutoFeat property is _TRUE_, and if the AutoSetUseEpsv property is _TRUE_, then the FTP server's features are automatically queried when connecting.  In this case, the UseEpsv property is automatically set to _TRUE_ if the FTP server supports EPSV.  
&lt;p&gt;Important: EPSV can cause problems with some deep-inspection firewalls.  If a passive data connection cannot be established, make sure to test with both the AutoSetUseEpsv and UseEpsv properties set equal to _FALSE_.</descrip>
            <iversion>9.5.0.44</iversion>
            <args2 />
            <links2 />
        </property>
        <property read="1" write="1" name="AutoSyst" axId="116" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>When _TRUE_ (which is the default value), a "SYST" command is automatically sent to the FTP server immediately after connecting.  This allows the Chilkat FTP2 component to know more about the server and automatically adjust any applicable internal settings based on the response.  If the SYST command causes trouble (which is rare), this behavior can be turned off by setting this property equal to _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="AutoXcrc" axId="117">
            <gType>bool</gType>
            <descrip>Many FTP servers support the XCRC command.   The Chilkat FTP component will automatically know if XCRC is supported because it automatically sends a FEAT command to the server immediately after connecting.  
&lt;p&gt;
If this property is set to _TRUE_, then all uploads will be automatically verified by sending an XCRC command immediately after the transfer completes.  If the CRC is not verified, the upload method (such as PutFile) will return a failed status.
&lt;p&gt;
To prevent XCRC checking, set this property to _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="BandwidthThrottleDown" axId="118">
            <gType>int</gType>
            <descrip>If set to a non-zero value, the FTP2 component will bandwidth throttle all downloads to this value.  
&lt;p&gt;
The default value of this property is 0.  The value should be specified in bytes/second.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; It is difficult to throttle very small downloads.  (For example, how do you bandwidth throttle a 1-byte download???)  As the downloaded file size gets larger, the transfer rate will better approximate this property's setting.</descrip>
            <links>
                <link>
                    <text>FTP Bandwidth Throttle for Downloads</text>
                    <url_asp>http://www.example-code.com/asp/ftp_bandwidthThrottle.asp</url_asp>
                    <url_sql>http://www.example-code.com/sql/ftp_bandwidthThrottle.asp</url_sql>
                    <url_cs>http://www.example-code.com/csharp/ftp_bandwidthThrottle.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/ftp_bandwidthThrottle.asp</url_cpp>
                    <url_delphi>http://www.example-code.com/delphi/ftp_bandwidthThrottle.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/ftp_bandwidthThrottle.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/ftp_bandwidthThrottle.asp</url_java>
                    <url_perl>http://www.example-code.com/perl/ftp_bandwidthThrottle.asp</url_perl>
                    <url_python>http://www.example-code.com/python/ftp_bandwidthThrottle.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/ftp_bandwidthThrottle.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/ftp_bandwidthThrottle.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/ftp_bandwidthThrottle.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/ftp_bandwidthThrottle.asp</url_vbscript>
                    <url_android>http://www.example-code.com/android/ftp_bandwidthThrottle.asp</url_android>
                    <url_objc>http://www.example-code.com/objc/ftp_bandwidthThrottle.asp</url_objc>
                    <url_ios>http://www.example-code.com/ios/ftp_bandwidthThrottle.asp</url_ios>
                    <url_phpext>http://www.example-code.com/phpExt/ftp_bandwidthThrottle.asp</url_phpext>
                    <url_php>http://www.example-code.com/php/ftp_bandwidthThrottle.asp</url_php>
                    <url_powershell>http://www.example-code.com/powershell/ftp_bandwidthThrottle.asp</url_powershell>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>FTP Bandwidth Throttle for Downloads</text>
                    <url>ftp_bandwidthThrottle.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="BandwidthThrottleUp" axId="119">
            <gType>int</gType>
            <descrip>If set to a non-zero value, the FTP2 component will bandwidth throttle all uploads to this value.  
&lt;p&gt;
The default value of this property is 0.  The value should be specified in bytes/second.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; It is difficult to throttle very small uploads.  (For example, how do you bandwidth throttle a 1-byte upload???)  As the uploaded file size gets larger, the transfer rate will better approximate this property's setting.</descrip>
            <links>
                <link>
                    <text>FTP Bandwidth Throttle for Upload</text>
                    <url_asp>http://www.example-code.com/asp/ftp_bandwidthThrottleUp.asp</url_asp>
                    <url_sql>http://www.example-code.com/sql/ftp_bandwidthThrottleUp.asp</url_sql>
                    <url_cs>http://www.example-code.com/csharp/ftp_bandwidthThrottleUp.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/ftp_bandwidthThrottleUp.asp</url_cpp>
                    <url_delphi>http://www.example-code.com/delphi/ftp_bandwidthThrottleUp.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/ftp_bandwidthThrottleUp.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/ftp_bandwidthThrottleUp.asp</url_java>
                    <url_perl>http://www.example-code.com/perl/ftp_bandwidthThrottleUp.asp</url_perl>
                    <url_python>http://www.example-code.com/python/ftp_bandwidthThrottleUp.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/ftp_bandwidthThrottleUp.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/ftp_bandwidthThrottleUp.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/ftp_bandwidthThrottleUp.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/ftp_bandwidthThrottleUp.asp</url_vbscript>
                    <url_android>http://www.example-code.com/android/ftp_bandwidthThrottleUp.asp</url_android>
                    <url_objc>http://www.example-code.com/objc/ftp_bandwidthThrottleUp.asp</url_objc>
                    <url_ios>http://www.example-code.com/ios/ftp_bandwidthThrottleUp.asp</url_ios>
                    <url_phpext>http://www.example-code.com/phpExt/ftp_bandwidthThrottleUp.asp</url_phpext>
                    <url_php>http://www.example-code.com/php/ftp_bandwidthThrottleUp.asp</url_php>
                    <url_powershell>http://www.example-code.com/powershell/ftp_bandwidthThrottleUp.asp</url_powershell>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>FTP Bandwidth Throttle for Upload</text>
                    <url>ftp_bandwidthThrottleUp.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ClientIpAddress" axId="120">
            <gType>string</gType>
            <descrip>The IP address to use for computers with multiple network interfaces or IP addresses.
For computers with a single network interface (i.e. most computers), this property should not be set.  For multihoming computers, the default IP address is automatically used if this property is not set.&lt;p&gt;
The IP address is a string such as in dotted notation using numbers, not domain names, such as "165.164.55.124".</descrip>
            <links>
                <link>
                    <text>Important Bind to Adapter Notes for Windows</text>
                    <url>http://www.cknotes.com/?p=376</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>Important Bind to Adapter Notes for Windows</text>
                    <url>http://www.cknotes.com/?p=376</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="CommandCharset" axId="121" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Indicates the charset to be used for commands sent to the FTP server.  The command charset must match what the FTP server is expecting in order to communicate non-English characters correctly.  The default value of this property is "ansi".
&lt;p&gt;
This property may be updated to "utf-8" after connecting because a "FEAT" command is automatically sent to get the features of the FTP server.  If UTF8 is indicated as a feature, then this property is automatically changed to "utf-8".</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="ConnectFailReason" axId="122" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>If the Connect method fails, this property can be checked to determine the reason for failure.
&lt;p&gt;
Possible values are:
&lt;pre&gt;
0 = success

Normal (non-TLS) sockets:
1 = empty hostname
2 = DNS lookup failed
3 = DNS timeout
4 = Aborted by application.
5 = Internal failure.
6 = Connect Timed Out
7 = Connect Rejected (or failed for some other reason)

SSL/TLS:
100 = TLS internal error.
101 = Failed to send client hello.
102 = Unexpected handshake message.
103 = Failed to read server hello.
104 = No server certificate.
105 = Unexpected TLS protocol version.
106 = Server certificate verify failed (the server certificate is expired or the cert's signature verification failed).
107 = Unacceptable TLS protocol version.
109 = Failed to read handshake messages.
110 = Failed to send client certificate handshake message.
111 = Failed to send client key exchange handshake message.
112 = Client certificate's private key not accessible.
113 = Failed to send client cert verify handshake message.
114 = Failed to send change cipher spec handshake message.
115 = Failed to send finished handshake message.
116 = Server's Finished message is invalid.

FTP:
200 = Connected, but failed to receive greeting from FTP server.
201 = Failed to do AUTH TLS or AUTH SSL.
Protocol/Component:
300 = asynch op in progress
301 = login failure.
&lt;/pre&gt;</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="ConnectTimeout" axId="123" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>Maximum number of seconds to wait when connecting to an FTP server.  The default is 30 seconds.  A value of 0 indicates the willingness to wait forever.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="ConnectVerified" axId="124">
            <gType>bool</gType>
            <descrip>True if the FTP2 component was able to establish a TCP/IP connection to the FTP server after calling Connect.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="CrlfMode" axId="125">
            <gType>int</gType>
            <descrip>Used to control CRLF line endings when downloading text files in ASCII mode.  The default value is 0.
&lt;p&gt;
Possible values are:
&lt;pre&gt;
0 = Do nothing.  The line-endings are not modified as received from the FTP server.
1 = Convert all line-endings to CR+LF
2 = Convert all line-endings to bare LF's
3 = Convert all line-endings to bare CR's
&lt;/pre&gt;</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="DataProtection" read="1" write="1" ax="1" cpp="1" dn="1" axId="294">
            <gType>string</gType>
            <descrip>Controls the data protection level for the data connections.  Possible values are "control", "clear", or "private".    
&lt;ul&gt;
&lt;li&gt;"control" is the default, and the data connections will be the same as for the control connection.  If the control connection is SSL/TLS, then the data connections are also SSL/TLS.  If the control connection is unencrypted, then the data connections will also be unencrypted.
&lt;li&gt;"clear" means that the data connections will always be unencrypted.
&lt;li&gt;"private" means that the data connections will always be encrypted.
&lt;/ul&gt;</descrip>
            <iversion>9.5.0.52</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="DirListingCharset" axId="126" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Indicates the charset of the directory listings received from the FTP server.  The FTP2 client must interpret the directory listing bytes using the correct character encoding in order to correctly receive non-English characters.  The default value of this property is "ansi".
&lt;p&gt;
This property may be updated to "utf-8" after connecting because a "FEAT" command is automatically sent to get the features of the FTP server.  If UTF8 is indicated as a feature, then this property is automatically changed to "utf-8".</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-charsets-character-encodings-supported/</url>
                    <text>Charsets Supported by Chilkat</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="DownloadTransferRate" axId="127">
            <gType>int</gType>
            <descrip>The average download rate in bytes/second.  This property is updated in real-time during any FTP download (asynchronous or synchronous).</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="ForcePortIpAddress" axId="128" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>If set, forces the IP address used in the PORT command for Active mode (i.e. non-passive) data transfers.  This string property should be set to the IP address in dotted notation, such as "233.190.65.31".
&lt;p&gt;
Note: This property can also be set to the special keyword "control" to force the PORT IP address to be the address of the control connection's peer.
&lt;p&gt;
Starting in v9.5.0.58, the IP address can be prefixed with the string "bind-".  For example, "bind-233.190.65.31".  When "bind-" is specified, the local data socket will be bound to the IP address when created.  Otherwise, the IP address is only used as the argument to the PORT command that is sent to the server.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="Greeting" axId="129">
            <gType>string</gType>
            <descrip>The initial greeting received from the FTP server after connecting.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="HasModeZ" axId="130">
            <gType>bool</gType>
            <descrip>Chilkat FTP2 supports MODE Z, which is a transfer mode implemented by some FTP servers. It allows for files to be uploaded and downloaded using compressed streams (using the zlib deflate algorithm).  This is a read-only property.  It will be set to _TRUE_ if the FTP2 component detects that your FTP server supports MODE Z.  Otherwise it is set to _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="HeartbeatMs" axId="131" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>This is the number of milliseconds between each AbortCheck event callback.  The AbortCheck callback allows an application to abort any FTP operation prior to completion.  If HeartbeatMs is 0, no AbortCheck event callbacks will occur.  Also, AbortCheck callbacks do not occur when doing asynchronous transfers.</descrip>
            <links>
                <link>
                    <text>HeartbeatMs and the AbortCheck Event</text>
                    <url_cs>http://www.cknotes.com/?p=149</url_cs>
                    <url_vb.net>http://www.cknotes.com/?p=149</url_vb.net>
                </link>
            </links>
            <links2>
                <link linkType="external" lang="csharp">
                    <text>HeartbeatMs and the AbortCheck Event</text>
                    <url>http://www.cknotes.com/?p=149</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Hostname" axId="132">
            <gType>string</gType>
            <descrip>The domain name of the FTP server.  May also use the IPv4 or IPv6 address in string format.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="HttpProxyAuthMethod" axId="133" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>If an HTTP proxy requiring authentication is to be used, set this property to the HTTP proxy authentication method name.  Valid choices are "Basic" or "NTLM".</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HttpProxyDomain" axId="134">
            <gType>string</gType>
            <descrip>If an HTTP proxy is used, and it uses NTLM authentication, then this optional property is the NTLM authentication domain.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HttpProxyHostname" axId="135">
            <gType>string</gType>
            <descrip>If an HTTP proxy is to be used, set this property to the HTTP proxy hostname or IPv4 address (in dotted decimal notation).</descrip>
            <links2>
                <link linkType="example">
                    <url>ftp_http_tunnel.asp</url>
                    <text>FTP over HTTP Proxy</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HttpProxyPassword" axId="136">
            <gType>string</gType>
            <descrip>If an HTTP proxy requiring authentication is to be used, set this property to the HTTP proxy password.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HttpProxyPort" axId="137">
            <gType>int</gType>
            <descrip>If an HTTP proxy is to be used, set this property to the HTTP proxy port number.  (Two commonly used HTTP proxy ports are 8080 and 3128.)</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HttpProxyUsername" axId="138">
            <gType>string</gType>
            <descrip>If an HTTP proxy requiring authentication is to be used, set this property to the HTTP proxy login name.</descrip>
            <links2>
                <link linkType="example">
                    <url>ftp_http_tunnel.asp</url>
                    <text>FTP over HTTP Proxy</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="IdleTimeoutMs" axId="139">
            <gType>int</gType>
            <descrip>Forces a timeout when a response is expected on the control channel, but no response arrives for this number of milliseconds.  Setting IdleTimeoutMs = 0 allows the application to wait indefinitely.   The default value is 60000 (i.e. 60 seconds).</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="IsConnected" axId="140" read="1" ax="1" cpp="1" dn="1" events="1">
            <gType>bool</gType>
            <descrip>&lt;b&gt;Important:&lt;/b&gt; This property is deprecated.  Applications should instead call the CheckConnection method.
&lt;p&gt;
Returns _TRUE_ if currently connected and logged into an FTP server, otherwise returns _FALSE_.
&lt;p&gt;
Note: Accessing this property may cause a NOOP command to be sent to the FTP server.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="KeepSessionLog" axId="141">
            <gType>bool</gType>
            <descrip>Turns the in-memory session logging on or off.  If on, the session log can be obtained via the SessionLog property.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="LastReply" axId="142">
            <gType>string</gType>
            <descrip>Contains the last control-channel reply.  For example: "550 Failed to change directory."  or "250 Directory successfully changed."   The control channel reply is typically formatted as an integer status code followed by a one-line description.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="ListPattern" axId="143" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>A wildcard pattern, defaulting to "*" that determines the files and directories included in the following properties and methods: GetDirCount, NumFilesAndDirs, GetCreateTime, GetFilename, GetIsDirectory, GetLastAccessTime, GetModifiedTime, GetSize.
&lt;p&gt;
Note: Do not include a directory path in the ListPattern.  For example, do not set the ListPattern equal to a string such as this:  "subdir/*.txt".  The correct solution is to first change the remote directory to "subdir" by calling ChangeRemoteDir, and then set the ListPattern equal to "*.txt".</descrip>
            <links>
                <link>
                    <text>How ListPattern can affect the Quality of Directory Information</text>
                    <url>http://www.cknotes.com/?p=427</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>How ListPattern can affect the Quality of Directory Information</text>
                    <url>http://www.cknotes.com/?p=427</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="LoginVerified" axId="144">
            <gType>bool</gType>
            <descrip>True if the FTP2 component was able to login to the FTP server after calling Connect.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="NumFilesAndDirs" axId="145" read="1" ax="1" cpp="1" dn="1" events="1" deprecated="1" noWinRT="1" noxojo="1">
            <gType>int</gType>
            <descrip>&lt;b&gt;Important:&lt;/b&gt; This property is deprecated.  Applications should instead call the GetDirCount method.
&lt;p&gt;
The number of files and sub-directories in the current remote directory that match the ListPattern. (The ListPattern defaults to "*", so unless changed, this is the total number of files and sub-directories.)
&lt;p&gt;
Important:  Accessing this property can cause the directory listing to be retrieved from the FTP server.  For FTP servers that doe not support the MLST/MLSD commands, this is technically a data transfer that requires a temporary data connection to be established in the same way as when uploading or downloading files.  If your program hangs while accessing NumFilesAndDirs, it probably means that the data connection could not be established.  The most common solution is to switch to using Passive mode by setting the Passive property = _TRUE_.  If this does not  help, examine the contents of the LastErrorText property after NumFilesAndDirs finally returns (after timing out).  Also, see &lt;a href="http://www.cknotes.com/?p=282"&gt;this Chilkat blog post about FTP connection settings&lt;/a&gt;.</descrip>
            <links>
                <link>
                    <text>Special considerations.</text>
                    <url>http://www.chilkatsoft.com/p/p_400.asp</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>Special considerations.</text>
                    <url>http://www.chilkatsoft.com/p/p_400.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="PartialTransfer" axId="146">
            <gType>bool</gType>
            <descrip>A read-only property that indicates whether a partial transfer was received in the last method call to download a file.   Set to _TRUE_ if a partial transfer was received.  Set to _FALSE_ if nothing was received, or if the full file was received.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Passive" axId="147">
            <gType>bool</gType>
            <descrip>Set to _TRUE_ for FTP to operate in passive mode, otherwise set to _FALSE_ for non-passive (.i.e. "active" or "port" mode).  The default value of this property is _TRUE_.</descrip>
            <links>
                <link>
                    <text>Passive vs. Active Mode Explained</text>
                    <url>http://www.chilkatsoft.com/p/p_272.asp</url>
                </link>
                <link>
                    <text>Determining FTP2 Connection Settings</text>
                    <url>http://www.cknotes.com/?p=282</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>Passive vs. Active Mode Explained</text>
                    <url>http://www.chilkatsoft.com/p/p_272.asp</url>
                </link>
                <link linkType="external">
                    <text>Determining FTP2 Connection Settings</text>
                    <url>http://www.cknotes.com/?p=282</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="PassiveUseHostAddr" axId="148">
            <gType>bool</gType>
            <descrip>This can handle problems that may arise when an FTP server is located behind a NAT router. FTP servers respond to the PASV command by sending the IP address and port where it will be listening for the data connection. If the control connection is SSL encrypted, the NAT router is not able to convert from an internal IP address (typically beginning with 192.168) to an external address. When set to _TRUE_, PassiveUseHostAddr property tells the FTP client to discard the IP address part of the PASV response and replace it with the IP address of the already-established control connection.  The default value of this property is _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="Password" axId="149" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Password for logging into the FTP server.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="PercentDoneScale" read="1" write="1" ax="1" cpp="1" dn="1" axId="284">
            <gType>int</gType>
            <descrip>This property is only valid in programming environment and languages that allow for event callbacks.
&lt;p&gt;
Sets the value to be defined as 100% complete for the purpose of PercentDone event callbacks.  The defaut value of 100 means that at most 100 event PercentDone callbacks will occur in a method that (1) is event enabled and (2) is such that it is possible to measure progress as a percentage completed.   This property may be set to larger numbers to get more fine-grained PercentDone callbacks.  For example, setting this property equal to 1000 will provide callbacks with .1 percent granularity.  For example, a value of 453 would indicate 45.3% competed.  This property is clamped to a minimum value of 10, and a maximum value of 100000.</descrip>
            <iversion>9.5.0.49</iversion>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Port" axId="150">
            <gType>int</gType>
            <descrip>Port number. Automatically defaults to the default port for the FTP service.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="PreferIpv6" read="1" write="1" ax="1" cpp="1" dn="1" axId="277">
            <gType>bool</gType>
            <descrip>If _TRUE_, then use IPv6 over IPv4 when both are supported for a particular domain.   The default value of this property is _FALSE_, which will choose IPv4 over IPv6.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="PreferNlst" axId="151">
            <gType>bool</gType>
            <descrip>If _TRUE_, the NLST command is used instead of LIST when fetching a directory listing.  This can help in very rare cases where the FTP server returns truncated filenames.  The drawback to using NLST is that it won't return size or date/time info (but it should return the full filename).
&lt;p&gt;The default value of this property is _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ProgressMonSize" axId="152">
            <gType>int</gType>
            <descrip>Progress monitoring for FTP downloads rely on the FTP server indicating the file size within the RETR response.  Some FTP servers however, do not indicate the file size and therefore it is not possible to monitor progress based on percentage completion.  This property allows the application to explicitly tell the FTP component the size of the file about to be downloaded for the next GetFile call.</descrip>
            <links>
                <link>
                    <text>ProgressMonSize (more info and example)</text>
                    <url_cs>http://www.example-code.com/csharp/ftp_progressMonSize.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/ftp_progressMonSize.asp</url_cpp>
                    <url_delphi>http://www.example-code.com/delphi/ftp_progressMonSize.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/ftp_progressMonSize.asp</url_foxpro>
                    <url_vb.net>http://www.example-code.com/vbdotnet/ftp_progressMonSize.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/ftp_progressMonSize.asp</url_vb6>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>ProgressMonSize (more info and example)</text>
                    <url>ftp_progressMonSize.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="0" read="1" write="1" name="ProgressMonSize64">
            <gType>int64</gType>
            <descrip>Same as ProgressMonSize, but allows for sizes greater than the 32-bit integer limit.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ProxyHostname" axId="153">
            <gType>string</gType>
            <descrip>The hostname of your FTP proxy, if a proxy server is used.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ProxyMethod" axId="154">
            <gType>int</gType>
            <descrip>The proxy scheme used by your FTP proxy server.  Valid values are 0 to 9.  The default value is 0 which indicates that no proxy server is used.  Supported proxy methods are as follows:&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; The ProxyHostname is the hostname of the firewall, if the proxy is a firewall.  Also, the ProxyUsername and ProxyPassword are the firewall username/password (if the proxy is a firewall).
&lt;blockquote&gt;
&lt;p&gt;&lt;b&gt;ProxyMethod = 1&lt;/b&gt; (SITE site)&lt;/p&gt;
&lt;blockquote&gt;
USER ProxyUsername&lt;br&gt;
PASS ProxyPassword&lt;br&gt;
SITE Hostname&lt;br&gt;
USER Username&lt;br&gt;
PASS Password
&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;ProxyMethod = 2&lt;/b&gt; (USER user@site)&lt;/p&gt;
&lt;blockquote&gt;
USER Username@Hostname:Port&lt;br&gt;
PASS Password
&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;ProxyMethod = 3&lt;/b&gt; (USER with login)&lt;/p&gt;
&lt;blockquote&gt;
USER ProxyUsername&lt;br&gt;
PASS ProxyPassword&lt;br&gt;
USER Username@Hostname:Port&lt;br&gt;
PASS Password
&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;ProxyMethod = 4&lt;/b&gt; (USER/PASS/ACCT)&lt;/p&gt;
&lt;blockquote&gt;
USER Username@Hostname:Port ProxyUsername&lt;br&gt;
PASS Password&lt;br&gt;
ACCT ProxyPassword
&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;ProxyMethod = 5&lt;/b&gt; (OPEN site)&lt;/p&gt;
&lt;blockquote&gt;
USER ProxyUsername&lt;br&gt;
PASS ProxyPassword&lt;br&gt;
OPEN Hostname&lt;br&gt;
USER Username&lt;br&gt;
PASS Password
&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;ProxyMethod = 6&lt;/b&gt; (firewallId@site)&lt;/p&gt;
&lt;blockquote&gt;
USER ProxyUsername@Hostname&lt;br&gt;
USER Username&lt;br&gt;
PASS Password
&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;ProxyMethod = 7&lt;/b&gt;&lt;/p&gt;
&lt;blockquote&gt;
USER ProxyUsername&lt;br&gt;
USER ProxyPassword&lt;br&gt;
SITE Hostname:Port
USER Username&lt;br&gt;
PASS Password
&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;ProxyMethod = 8&lt;/b&gt;&lt;/p&gt;
&lt;blockquote&gt;
USER Username@ProxyUsername@Hostname&lt;br&gt;
PASS Password@ProxyPassword
&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;ProxyMethod = 9&lt;/b&gt;&lt;/p&gt;
&lt;blockquote&gt;
ProxyUsername
ProxyPassword
Username
Password
&lt;/blockquote&gt;</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ProxyPassword" axId="155">
            <gType>string</gType>
            <descrip>The password for authenticating with the FTP proxy server.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ProxyPort" axId="156">
            <gType>int</gType>
            <descrip>If an FTP proxy server is used, this is the port number at which the proxy server is listening for connections.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ProxyUsername" axId="157">
            <gType>string</gType>
            <descrip>The username for authenticating with the FTP proxy server.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ReadTimeout" axId="158">
            <gType>int</gType>
            <descrip>Forces a timeout when incoming data is expected on a data channel, but no data arrives for this number of seconds.
The ReadTimeout is the amount of time that needs to elapse while no additional data is forthcoming.  During a long download, if the data stream halts for more than this amount, it will timeout.    Otherwise, there is no limit on the length of time for the entire download.
&lt;p&gt;
The default value is 60.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="RequireSslCertVerify" axId="159" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If _TRUE_, then the FTP2 client will verify the server's SSL certificate.  The server's certificate signature is verified with its issuer, and the issuer's cert is verified with its issuer, etc. up to the root CA cert.   If a signature verification fails, the connection is not allowed. Also, if the certificate is expired, or if the cert's signature is invalid, the connection is not allowed.  The default value of this property is _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="RestartNext" axId="160">
            <gType>bool</gType>
            <descrip>Both uploads and downloads may be resumed by simply setting this property = _TRUE_ and re-calling the upload or download method.</descrip>
            <links>
                <link>
                    <text>Example: Restart/Resume FTP Download</text>
                    <url_asp>http://www.example-code.com/asp/ftp_download_resume.asp</url_asp>
                    <url_cs>http://www.example-code.com/csharp/ftp_download_resume.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/ftp_download_resume.asp</url_cpp>
                    <url_delphi>http://www.example-code.com/delphi/ftp_download_resume.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/ftp_download_resume.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/ftp_download_resume.asp</url_java>
                    <url_perl>http://www.example-code.com/perl/ftp_download_resume.asp</url_perl>
                    <url_python>http://www.example-code.com/python/ftp_download_resume.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/ftp_download_resume.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/ftp_download_resume.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/ftp_download_resume.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/ftp_download_resume.asp</url_vbscript>
                    <url_android>http://www.example-code.com/android/ftp_download_resume.asp</url_android>
                    <url_objc>http://www.example-code.com/objc/ftp_download_resume.asp</url_objc>
                    <url_ios>http://www.example-code.com/ios/ftp_download_resume.asp</url_ios>
                    <url_phpext>http://www.example-code.com/phpExt/ftp_download_resume.asp</url_phpext>
                    <url_php>http://www.example-code.com/php/ftp_download_resume.asp</url_php>
                    <url_powershell>http://www.example-code.com/powershell/ftp_download_resume.asp</url_powershell>
                </link>
                <link>
                    <text>Example: Restart/Resume FTP Upload</text>
                    <url_asp>http://www.example-code.com/asp/ftp_upload_resume.asp</url_asp>
                    <url_cs>http://www.example-code.com/csharp/ftp_upload_resume.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/ftp_upload_resume.asp</url_cpp>
                    <url_delphi>http://www.example-code.com/delphi/ftp_upload_resume.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/ftp_upload_resume.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/ftp_upload_resume.asp</url_java>
                    <url_perl>http://www.example-code.com/perl/ftp_upload_resume.asp</url_perl>
                    <url_python>http://www.example-code.com/python/ftp_upload_resume.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/ftp_upload_resume.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/ftp_upload_resume.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/ftp_upload_resume.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/ftp_upload_resume.asp</url_vbscript>
                    <url_android>http://www.example-code.com/android/ftp_upload_resume.asp</url_android>
                    <url_objc>http://www.example-code.com/objc/ftp_upload_resume.asp</url_objc>
                    <url_ios>http://www.example-code.com/ios/ftp_upload_resume.asp</url_ios>
                    <url_phpext>http://www.example-code.com/phpExt/ftp_upload_resume.asp</url_phpext>
                    <url_php>http://www.example-code.com/php/ftp_upload_resume.asp</url_php>
                    <url_powershell>http://www.example-code.com/powershell/ftp_upload_resume.asp</url_powershell>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>Example: Restart/Resume FTP Download</text>
                    <url>ftp_download_resume.asp</url>
                </link>
                <link linkType="example">
                    <text>Example: Restart/Resume FTP Upload</text>
                    <url>ftp_upload_resume.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="SendBufferSize" axId="161" read="1" write="1" ax="1" cpp="1" dn="1" deprecated="1">
            <gType>int</gType>
            <descrip>This property is now deprecated, and has no effect in Chilkat versions 9.5.0.69 and greater.
&lt;p&gt;
In the past, it affected how often percent completion callbacks were made.  Setting it to a smaller value caused more frequent percentage completion event callbacks.   The default value is 65536 (64K) and should generally not be changed.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="SessionLog" axId="162">
            <gType>string</gType>
            <descrip>Contains the session log if KeepSessionLog is turned on.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="SkipFinalReply" axId="163" read="1" write="1" ax="1" cpp="1" dn="1" deprecated="1" noxojo="1">
            <gType>bool</gType>
            <descrip>This property is deprecated and has no effect.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SoRcvBuf" axId="164">
            <gType>int</gType>
            <descrip>Sets the receive buffer size socket option.   Normally, this property should be left unchanged.  The default value is 4194304.
&lt;p&gt;
This property can be increased if download performance seems slow.  It is recommended to be a multiple of 4096.
&lt;p&gt;
Note: This property only applies to FTP data connections.  The FTP control connection is not used for uploading or downloading files, and is therefore not performance sensitive.</descrip>
            <links>
                <link>
                    <text>More Information about TCP performance and Buffer Sizes</text>
                    <url>http://www.cknotes.com/?p=446</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>More Information about TCP performance and Buffer Sizes</text>
                    <url>http://www.cknotes.com/?p=446</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SoSndBuf" axId="165">
            <gType>int</gType>
            <descrip>Sets the send buffer size socket option.   Normally, this property should be left unchanged.  The default value is 262144.   
&lt;p&gt;
This property can be increased if upload performance seems slow.  It is recommended to be a multiple of 4096.  Testing with sizes such as 512K and 1MB is reasonable.
&lt;p&gt;
Note: This property only applies to FTP data connections.  The FTP control connection is not used for uploading or downloading files, and is therefore not performance sensitive.</descrip>
            <links>
                <link>
                    <text>More Information about TCP performance and Buffer Sizes</text>
                    <url>http://www.cknotes.com/?p=446</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>More Information about TCP performance and Buffer Sizes</text>
                    <url>http://www.cknotes.com/?p=446</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SocksHostname" axId="166">
            <gType>string</gType>
            <descrip>The SOCKS4/SOCKS5 hostname or IPv4 address (in dotted decimal notation).  This property is only used if the SocksVersion property is set to 4 or 5).</descrip>
            <links2>
                <link linkType="example">
                    <url>ftp_sshTunnel.asp</url>
                    <text>FTP through SSH Tunnel</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SocksPassword" axId="167">
            <gType>string</gType>
            <descrip>The SOCKS5 password (if required).  The SOCKS4 protocol does not include the use of a password, so this does not apply to SOCKS4.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SocksPort" axId="168">
            <gType>int</gType>
            <descrip>The SOCKS4/SOCKS5 proxy port.  The default value is 1080. 
This property only applies if a SOCKS proxy is used (if the SocksVersion property is set to 4 or 5).</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SocksUsername" axId="169">
            <gType>string</gType>
            <descrip>The SOCKS4/SOCKS5 proxy username.  This property is only used if the SocksVersion property is set to 4 or 5).</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SocksVersion" axId="170">
            <gType>int</gType>
            <descrip>SocksVersion
May be set to one of the following integer values:
&lt;p&gt;
&lt;b&gt;0&lt;/b&gt; - No SOCKS proxy is used.  This is the default.&lt;br&gt;
&lt;b&gt;4&lt;/b&gt; - Connect via a SOCKS4 proxy.&lt;br&gt;
&lt;b&gt;5&lt;/b&gt; - Connect via a SOCKS5 proxy.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Ssl" axId="171">
            <gType>bool</gType>
            <descrip>Use TLS/SSL for FTP connections.  You would typically set Ssl = _TRUE_ when connecting to port 990 on FTP servers that support TLS/SSL mode.  Note: It is more common to use AuthTls.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="SslAllowedCiphers" axId="283" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Provides a means for setting a list of ciphers that are allowed for SSL/TLS connections.  The default (empty string) indicates that all implemented ciphers are possible.  The TLS ciphers supported in Chilkat v9.5.0.55 and later are:
&lt;pre&gt;
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
TLS_DHE_RSA_WITH_AES_256_CBC_SHA
TLS_RSA_WITH_AES_256_CBC_SHA256
TLS_RSA_WITH_AES_256_GCM_SHA384
TLS_RSA_WITH_AES_256_CBC_SHA
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
TLS_DHE_RSA_WITH_AES_128_CBC_SHA
TLS_RSA_WITH_AES_128_CBC_SHA256
TLS_RSA_WITH_AES_128_GCM_SHA256
TLS_RSA_WITH_AES_128_CBC_SHA
TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
TLS_RSA_WITH_3DES_EDE_CBC_SHA
TLS_ECDHE_RSA_WITH_RC4_128_SHA
TLS_RSA_WITH_RC4_128_SHA
TLS_RSA_WITH_RC4_128_MD5
TLS_DHE_RSA_WITH_DES_CBC_SHA
TLS_RSA_WITH_DES_CBC_SHA
&lt;/pre&gt;
To restrict SSL/TLS connections to one or more specific ciphers, set this property to a comma-separated list of ciphers such as "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384".   The order should be in terms of preference, with the preferred algorithms listed first.  (Note that the client cannot specifically choose the algorithm is picked because it is the server that chooses.  The client simply provides the server with a list from which to choose.)
&lt;p&gt;
The property can also disallow connections with servers having certificates with RSA keys less than a certain size.  By default, server certificates having RSA keys of 512 bits or greater are allowed.  Add the keyword "rsa1024" to disallow connections with servers having keys smaller than 1024 bits.  Add the keyword "rsa2048"  to disallow connections with servers having keys smaller than 2048 bits.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; Prior to Chilkat v9.5.0.55, it was not possible to explicitly list allowed cipher suites.  The deprecated means for indicating allowed ciphers was both incomplete  and unprecise.  For example, the following keywords could be listed to allow matching ciphers: "aes256-cbc", "aes128-cbc", "3des-cbc", and "rc4".    These keywords will still be recognized, but programs should be updated to explicitly list the allowed ciphers.&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;secure-renegotiation:&lt;/b&gt; Starting in Chilkat v9.5.0.55, the keyword "secure-renegotiation" may be added to require that all renegotions be done securely (as per RFC 5746).&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;best-practices:&lt;/b&gt; Starting in Chilkat v9.5.0.55, this  property may be set to the single keyword "best-practices".  This will allow ciphers based on the current best practices.  As new versions of Chilkat are released, the best practices may change.  Changes will be noted here.  The current best practices are:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the server uses an RSA key, it must be 1024 bits or greater.&lt;/li&gt;
&lt;li&gt;All renegotations must be secure renegotiations.&lt;/li&gt;
&lt;li&gt;All ciphers using RC4, DES, or 3DES are disallowed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;b&gt;Example:&lt;/b&gt; The following string would restrict to 2 specific cipher suites, require RSA keys to be 1024 bits or greater, and require secure renegotiations: "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA, rsa1024, secure-renegotiation"&lt;/p&gt;</descrip>
            <iversion>9.5.0.48</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="SslProtocol" axId="172" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Selects the secure protocol to be used for secure (SSL/TLS) implicit and explicit (AUTH TLS / AUTH SSL) connections .  Possible values are:
&lt;blockquote&gt;
default&lt;br /&gt;
TLS 1.2&lt;br /&gt;
TLS 1.1&lt;br /&gt;
TLS 1.0&lt;br /&gt;
SSL 3.0&lt;br /&gt;
TLS 1.2 or higher&lt;br /&gt;
TLS 1.1 or higher&lt;br /&gt;
TLS 1.0 or higher&lt;br /&gt;
&lt;/blockquote&gt;
The default value is "default" which will choose the, which allows for the protocol to be selected dynamically at runtime based on the requirements of the server.  Choosing an exact protocol will cause the connection to fail unless that exact protocol is negotiated.  It is better to choose "X or higher" than an exact protocol.   The "default" is effectively "SSL 3.0 or higher".</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="SslServerCertVerified" axId="173">
            <gType>bool</gType>
            <descrip>Read-only property that returns _TRUE_ if the FTP server's digital certificate was verified when connecting via SSL / TLS.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="SyncMustMatch" axId="275" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Can contain a wildcarded list of file patterns separated by semicolons.  For example, "*.xml; *.txt; *.csv".  If set, the Sync* upload and download methods will only transfer files that match any one of these patterns.  Pattern matching is case-insensitive.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; Starting in version 9.5.0.47, this property also applies to the DownloadTree and DirTreeXml methods.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="SyncMustNotMatch" axId="276" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Can contain a wildcarded list of file patterns separated by semicolons.  For example, "*.xml; *.txt; *.csv".  If set, the Sync* upload and download methods will not  transfer files that match any one of these patterns.  Pattern matching is case-insensitive.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; Starting in version 9.5.0.47, this property also applies to the DownloadTree and DirTreeXml methods.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="SyncPreview" axId="174">
            <gType>string</gType>
            <descrip>Contains the list of files that would be transferred in a call to SyncRemoteTree2  when the previewOnly argument is set to _TRUE_.   This string property contains one filepath per line, separated by CRLF line endings.  After SyncRemoteTree2 is called, this property contains the filepaths of the local files that would be uploaded to the FTP server.</descrip>
            <links2>
                <link linkType="example">
                    <url>ftp_deleteLocalFiles.asp</url>
                    <text>Delete Local Files that Do Not Exist on the FTP Server</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="SyncedFiles" read="1" write="1" ax="1" cpp="1" dn="1" axId="293">
            <gType>string</gType>
            <descrip>The paths of the files uploaded or downloaded in the last call to SyncDeleteTree, SyncLocalDir, SyncLocalTree, SyncRemoteTree, or SyncRemoteTree2.  The paths are listed one per line.  In both cases (for upload and download) each line contains the paths relative to the root synced directory.</descrip>
            <iversion>9.5.0.51</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="TlsCipherSuite" read="1" ax="1" cpp="1" dn="1" axId="287">
            <gType>string</gType>
            <descrip>Contains the current or last negotiated TLS cipher suite.  If no TLS connection has yet to be established, or if a connection as attempted and failed, then this will be empty.  A sample cipher suite string looks like this:  TLS_DHE_RSA_WITH_AES_256_CBC_SHA256.</descrip>
            <iversion>9.5.0.49</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="TlsPinSet" read="1" write="1" ax="1" cpp="1" dn="1" axId="295">
            <gType>string</gType>
            <descrip>Specifies a set of pins for Public Key Pinning for TLS connections.  This property lists the expected SPKI fingerprints for the server certificates.  If the server's certificate (sent during the TLS handshake) does not match any of the SPKI fingerprints, then the TLS handshake is aborted and the connection fails. The format of this string property is as follows:
&lt;pre&gt;
hash_algorithm, encoding, SPKI_fingerprint_1, SPKI_fingerprint_2, ...
&lt;/pre&gt;
For example, the following string specifies a single sha256 base64-encoded SPKI fingerprint:
&lt;pre&gt;
"sha256, base64, lKg1SIqyhPSK19tlPbjl8s02yChsVTDklQpkMCHvsTE="
&lt;/pre&gt;
This example specifies two SPKI fingerprints:
&lt;pre&gt;
"sha256, base64, 4t37LpnGmrMEAG8HEz9yIrnvJV2euVRwCLb9EH5WZyI=, 68b0G5iqMvWVWvUCjMuhLEyekM5729PadtnU5tdXZKs="
&lt;/pre&gt;
Any of the following hash algorithms are allowed:.sha1, sha256, sha384, sha512, md2, md5, haval, ripemd128, ripemd160,ripemd256, or ripemd320.
&lt;p&gt;
The following encodings are allowed: base64, hex, and any of the encodings indicated in the link below.</descrip>
            <iversion>9.5.0.55</iversion>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Encodings Supported by Chilkat</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="TlsVersion" read="1" ax="1" cpp="1" dn="1" axId="286">
            <gType>string</gType>
            <descrip>Contains the current or last negotiated TLS protocol version.  If no TLS connection has yet to be established, or if a connection as attempted and failed, then this will be empty.  Possible values are "SSL 3.0", "TLS 1.0", "TLS 1.1", and "TLS 1.2".</descrip>
            <iversion>9.5.0.49</iversion>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="UploadTransferRate" axId="175">
            <gType>int</gType>
            <descrip>The average upload rate in bytes/second.  This property is updated in real-time during any FTP upload (asynchronous or synchronous).</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="UseEpsv" axId="176" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If _TRUE_, the FTP2 component will use the EPSV command instead of PASV for passive mode data transfers.  The default value of this property is _FALSE_.  (It is somewhat uncommon for FTP servers to support EPSV.)
&lt;p&gt;
Note: If the AutoFeat property is _TRUE_, then the FTP server's features are automatically queried after connecting.  In this case,  if the AutoSetUseEpsv property is also set to _TRUE_, the UseEpsv property is automatically set to _TRUE_ if the FTP server supports EPSV.   
&lt;p&gt;Important: EPSV can cause problems with some deep-inspection firewalls.  If a passive data connection cannot be established, make sure to test with both the AutoSetUseEpsv and UseEpsv properties set equal to _FALSE_.</descrip>
            <links>
                <link>
                    <text>EPSV Problems with some Firewalls</text>
                    <url>http://www.chilkatforum.com/questions/4983/ftp-epsv-with-some-firewalls</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>EPSV Problems with some Firewalls</text>
                    <url>http://www.chilkatforum.com/questions/4983/ftp-epsv-with-some-firewalls</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Username" axId="177">
            <gType>string</gType>
            <descrip>Username for logging into the FTP server. Defaults to "anonymous".</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="LargeFileMeasures" axId="303" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Enables internal features that can help when downloading extremely large files.  In some cases, if the time required to download a file is  long, the control connection is closed by the server or other network infrastructure because it was idle for so long.  Setting this property equal to _TRUE_ will keep the control connection very slightly used to prevent this from happening.  
&lt;p&gt;
The default value of this property is _FALSE_.  This property should only be set to _TRUE_ if this sort of problem is encountered.</descrip>
            <args2 />
            <links2 />
            <iversion>9.5.0.66</iversion>
        </property>
    </properties>
    <methods>
        <method name="AppendFile" axId="180" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localFilePath</argName>
                    <objcName>localPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilePath</argName>
                    <objcName>remoteFilename</objcName>
                </arg>
            </args>
            <descrip>Same as PutFile but the file on the FTP server is appended.
&lt;p&gt;
If the ARG2 contains non-English characters, it may be necessary to set the DirListingCharset property equal to "utf-8".  Please refer to the documentation for the DirListingCharset property.</descrip>
            <links2>
                <link linkType="external" lang="csharp">
                    <text>FTP Progress Monitoring Events</text>
                    <url>http://www.chilkatsoft.com/p/p_385.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="localFilePath" type="string" objcName="localPath" />
                <arg name="remoteFilePath" type="string" objcName="remoteFilename" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="AppendFileFromBinaryData" axId="181">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilename</argName>
                    <objcName>remoteFilename</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>content</argName>
                    <objcName>binaryData</objcName>
                </arg>
            </args>
            <descrip>Same as PutFileFromBinaryData, except the file on the FTP server is appended.</descrip>
            <links2>
                <link linkType="external" lang="csharp">
                    <text>FTP Progress Monitoring Events</text>
                    <url>http://www.chilkatsoft.com/p/p_385.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="remoteFilename" type="string" objcName="remoteFilename" />
                <arg name="content" type="bytes" objcName="binaryData" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="AppendFileFromTextData" axId="182">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilename</argName>
                    <objcName>remoteFilename</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>textData</argName>
                    <objcName>textData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
            </args>
            <descrip>Same as PutFileFromTextData, except the file on the FTP server is appended.</descrip>
            <links2>
                <link linkType="external" lang="csharp">
                    <text>FTP Progress Monitoring Events</text>
                    <url>http://www.chilkatsoft.com/p/p_385.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="remoteFilename" type="string" objcName="remoteFilename" />
                <arg name="textData" type="string" objcName="textData" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
        </method>
        <method name="AsyncAbort" axId="183" ax="1" cpp="1" dn="1" deprecated="1" noxojo="1">
            <gType>void</gType>
            <args />
            <descrip>Causes an asynchronous Get or Put to abort.
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="AsyncAppendFileStart" axId="184" ax="1" cpp="1" dn="1" deprecated="1" status="1" noxojo="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localFilename</argName>
                    <objcName>localPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilename</argName>
                    <objcName>remoteFilename</objcName>
                </arg>
            </args>
            <descrip>Initiates an asynchronous append.  The file is uploaded and appended to an existing file on the FTP server.  The append happens in a background thread and can be aborted by calling AsyncAbort.  The AsyncFinished property can be checked periodically to determine when the background transfer is finished.  The status of the transfer is available in the AsyncSuccess property.  The last-error information is available in the AsyncLog property.  The AsyncBytesSent property is updated in real time to reflect the current number of bytes sent while the transfer is in progress.  The UploadRate is also updated with the current upload rate in bytes/second.  While a transfer is in progress, a program may periodically read the UploadRate and AsyncBytesSent properties to display progress.
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2>
                <arg name="localFilename" type="string" objcName="localPath" />
                <arg name="remoteFilename" type="string" objcName="remoteFilename" />
            </args2>
            <links2 />
        </method>
        <method name="AsyncGetFileStart" axId="185" ax="1" cpp="1" dn="1" deprecated="1" status="1" noxojo="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilename</argName>
                    <objcName>remoteFilename</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localFilename</argName>
                    <objcName>localFilename</objcName>
                </arg>
            </args>
            <descrip>Initiates an asynchronous file download. The download happens in a background thread and can be aborted by calling AsyncAbort.  The AsyncFinished property can be checked periodically to determine when the background transfer is finished.  The status of the transfer is available in the AsyncSuccess property.  The last-error information is available in the AsyncLog property.  The AsyncBytesReceived property is updated in real time to reflect the current number of bytes received while the transfer is in progress.  The DownloadRate is also updated with the current download rate in bytes/second.  While a transfer is in progress, a program may periodically read the DownloadRate and AsyncBytesReceived properties to display progress.
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <links2>
                <link linkType="external" lang="csharp">
                    <text>About asynchronous progress monitoring</text>
                    <url>http://www.chilkatsoft.com/p/p_341.asp</url>
                </link>
                <link linkType="external" lang="csharp">
                    <text>Using synchronous methods in a background thread with progress monitoring</text>
                    <url>http://www.chilkatsoft.com/p/p_301.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="remoteFilename" type="string" objcName="remoteFilename" />
                <arg name="localFilename" type="string" objcName="localFilename" />
            </args2>
        </method>
        <method name="AsyncPutFileStart" axId="186" ax="1" cpp="1" dn="1" deprecated="1" status="1" noxojo="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localFilename</argName>
                    <objcName>localPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilename</argName>
                    <objcName>remoteFilename</objcName>
                </arg>
            </args>
            <descrip>Initiates an asynchronous file upload. The file is uploaded and creates a new file on the FTP server, or overwrites an existing file.  The upload happens in a background thread and can be aborted by calling AsyncAbort.  The AsyncFinished property can be checked periodically to determine when the background transfer is finished.  The status of the transfer is available in the AsyncSuccess property.  The last-error information is available in the AsyncLog property.  The AsyncBytesSent property is updated in real time to reflect the current number of bytes sent while the transfer is in progress.  The UploadRate is also updated with the current upload rate in bytes/second.  While a transfer is in progress, a program may periodically read the UploadRate and AsyncBytesSent properties to display progress.
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <links2>
                <link linkType="external" lang="csharp">
                    <text>About asynchronous progress monitoring</text>
                    <url>http://www.chilkatsoft.com/p/p_341.asp</url>
                </link>
                <link linkType="external" lang="csharp">
                    <text>Using synchronous methods in a background thread with progress monitoring</text>
                    <url>http://www.chilkatsoft.com/p/p_301.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="localFilename" type="string" objcName="localPath" />
                <arg name="remoteFilename" type="string" objcName="remoteFilename" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="ChangeRemoteDir" axId="187">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteDirPath</argName>
                    <objcName>relativeDirPath</objcName>
                </arg>
            </args>
            <descrip>Changes the current remote directory.   The ARG1 should be relative to the current remote directory, which is initially the HOME directory of the FTP user account.
&lt;p&gt;
If the ARG1 contains non-English characters, it may be necessary to set the DirListingCharset property equal to "utf-8".  Please refer to the documentation for the DirListingCharset property.</descrip>
            <args2>
                <arg name="remoteDirPath" type="string" objcName="relativeDirPath" />
            </args2>
            <links2 />
        </method>
        <method name="CheckConnection" ax="1" cpp="1" dn="1" events="1" status="1" axId="280">
            <gType>bool</gType>
            <descrip>Returns _TRUE_ if currently connected and logged into an FTP server, otherwise returns _FALSE_.
&lt;p&gt;
Note: This may cause a NOOP command to be sent to the FTP server.</descrip>
            <iversion>9.5.0.44</iversion>
            <args />
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="ClearControlChannel" axId="188">
            <gType>bool</gType>
            <args />
            <descrip>Reverts the FTP control channel from SSL/TLS to an unencrypted channel.  This may be required when using FTPS with AUTH TLS where the FTP client is behind a DSL or cable-modem router that performs NAT (network address translation).  If the control channel is encrypted, the router is unable to translate the IP address sent in the PORT command for data transfers.  By clearing the control channel, the data transfers will remain encrypted, but the FTP commands are passed unencrypted.  Your program would typically clear the control channel after authenticating.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="ClearDirCache" axId="189">
            <gType>void</gType>
            <args />
            <descrip>TheNumFilesAndDirs property returns the count of files and sub-directories in the current remote FTP directory, according to the ListPattern property. For example, if ListPattern is set to "*.xml", then NumFilesAndDirs returns the count of XML files in the remote directory.
&lt;p&gt;
The 1st time it is accessed, the component will (behind the scenes) fetch the directory listing from the FTP server. This information is cached in the component until (1) the current remote directory is changed, or (2) the ListPattern is changed, or (3) the this method (ClearDirCache) is called.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="ClearSessionLog" axId="190">
            <gType>void</gType>
            <args />
            <descrip>Clears the in-memory session log.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="Connect" axId="191" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args />
            <descrip>Connects and logs in to the FTP server using the username/password provided in the component properties.  Check the integer value of the ConnectFailReason if this method returns _FALSE_ (indicating failure).
&lt;p&gt;Note: To separately establish the connection and then authenticate (in separate method calls), call ConnectOnly followed by LoginAfterConnectOnly.
&lt;p&gt;
&lt;b&gt;Important: &lt;/b&gt; All TCP-based Internet communications, regardless of the protocol (such as HTTP, FTP, SSH, IMAP, POP3, SMTP, etc.), and regardless of SSL/TLS, begin with establishing a TCP connection to a remote host:port.  External security-related infrastructure such as software firewalls (Windows Firewall), hardware firewalls, anti-virus, at either source or destination (or both) can block the connection.  If the connection fails, make sure to check all potential external causes of blockage.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="ConnectOnly" axId="192" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args />
            <descrip>Connects to the FTP server, but does not authenticate.  The combination of calling this method followed by LoginAfterConnectOnly is the equivalent of calling the Connect method (which both connects and authenticates).
&lt;p&gt;
&lt;b&gt;Important: &lt;/b&gt; All TCP-based Internet communications, regardless of the protocol (such as HTTP, FTP, SSH, IMAP, POP3, SMTP, etc.), and regardless of SSL/TLS, begin with establishing a TCP connection to a remote host:port.  External security-related infrastructure such as software firewalls (Windows Firewall), hardware firewalls, anti-virus, at either source or destination (or both) can block the connection.  If the connection fails, make sure to check all potential external causes of blockage.</descrip>
            <links2>
                <link linkType="example">
                    <url>ftp_sshTunnel.asp</url>
                    <text>FTP through SSH Tunnel</text>
                </link>
                <link linkType="example">
                    <url>ftp_connect_examine_cert_authenticate.asp</url>
                    <text>FTP Connect, Examine Server Certificate, and then Authenticate</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method name="ConvertToTls" axId="193" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args />
            <descrip>Explicitly converts the control channel to a secure SSL/TLS connection. &lt;p&gt;
Note: If you initially connect with either the AuthTls or AuthSsl property set to _TRUE_, then DO NOT call ConvertToTls.  The control channel is automatically converted to SSL/TLS from within the Connect method when these properties are set.
&lt;p&gt;
Note: It is very uncommon for this method to be needed.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="CreatePlan" axId="194" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localDir</argName>
                    <objcName>localDir</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Creates an "FTP plan" that lists the FTP operations that would be performed when PutTree is called. Additionally, the PutPlan method executes an "FTP plan" and logs each successful operation to a plan log file. If a large-scale upload is interrupted, the PutPlan can be resumed, skipping over the operations already listed in the plan log file.</descrip>
            <links2>
                <link linkType="example">
                    <url>ftp_createPlan.asp</url>
                    <text>Upload Directory Tree using a Plan</text>
                </link>
            </links2>
            <args2>
                <arg name="localDir" type="string" objcName="localDir" />
            </args2>
        </method>
        <method name="CreateRemoteDir" axId="195" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteDirPath</argName>
                    <objcName>dir</objcName>
                </arg>
            </args>
            <descrip>Creates a directory on the FTP server.  If the directory already exists, a new one is not created and _FALSE_ is returned.
&lt;p&gt;
If the ARG1 contains non-English characters, it may be necessary to set the DirListingCharset property equal to "utf-8".  Please refer to the documentation for the DirListingCharset property.</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.chilkatforum.com/questions/10770/550-create-directory-operation-failed</url>
                    <text>Explaining 550 Create directory operation failed.</text>
                </link>
            </links2>
            <args2>
                <arg name="remoteDirPath" type="string" objcName="dir" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="DeleteMatching" axId="196">
            <gType>int</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remotePattern</argName>
                    <objcName>remotePattern</objcName>
                </arg>
            </args>
            <descrip>Deletes all the files in the current remote FTP directory matching the pattern. Returns the number of files deleted, or -1 for failure. The pattern is a string such as "*.txt", where any number of "*" wildcard characters can be used. "*" matches 0 or more of any character.</descrip>
            <args2>
                <arg name="remotePattern" type="string" objcName="remotePattern" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="DeleteRemoteFile" axId="197">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilePath</argName>
                    <objcName>filename</objcName>
                </arg>
            </args>
            <descrip>Deletes a file on the FTP server.
&lt;p&gt;
If the ARG1 contains non-English characters, it may be necessary to set the DirListingCharset property equal to "utf-8".  Please refer to the documentation for the DirListingCharset property.</descrip>
            <args2>
                <arg name="remoteFilePath" type="string" objcName="filename" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="DeleteTree" axId="198">
            <gType>bool</gType>
            <args />
            <descrip>Deletes the entire subtree and all files from the current remote FTP directory.  To delete a subtree on the FTP server, your program would first navigate to the root of the subtree to be deleted by calling ChangeRemoteDir, and then call DeleteTree.  There are two event callbacks: VerifyDeleteFile and VerifyDeleteDir.  Both are called prior to deleting each file or directory.  The arguments to the callback include the full filepath of the file or directory, and an output-only "skip" flag.  If your application sets the skip flag to true, the file or directory is NOT deleted.  If a directory is not deleted, all files and sub-directories will remain.  Example programs can be found at http://www.example-code.com/</descrip>
            <links2>
                <link linkType="example">
                    <text>Delete FTP Directory Tree</text>
                    <url>ftp_deleteTree.asp</url>
                </link>
            </links2>
            <args2 />
        </method>
        <method name="DetermineProxyMethod" axId="199" ax="1" cpp="1" dn="1" events="1">
            <gType>int</gType>
            <args />
            <descrip>Automatically determines the ProxyMethod that should be used with an FTP proxy server.  Tries each of the five possible ProxyMethod settings and returns the value (1-5) of the ProxyMethod that succeeded.  
&lt;p&gt;
This method may take a minute or two to complete.  Returns 0 if no proxy methods were successful.  Returns -1 to indicate an error (i.e. it was unable to test all proxy methods.)</descrip>
            <links2>
                <link linkType="example">
                    <text>Automatically Determine FTP Proxy Method</text>
                    <url>ftp_determineProxyMethod.asp</url>
                </link>
            </links2>
            <args2 />
        </method>
        <method name="DetermineSettings" axId="200" ax="1" cpp="1" dn="1" events="1" outArgName="outXmlReport">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outXmlReport</argName>
                    <objcName>outXmlReport</objcName>
                </arg>
            </args>
            <descrip>Discovers which combinations of FTP2 property settings result in successful data transfers. 
&lt;p&gt;
DetermineSettings tries 13 different combinations of these properties: 
&lt;pre&gt;
Ssl
AuthTls
AuthSsl
Port
Passive
PassiveUseHostAddr
&lt;/pre&gt;
Within the FTP protocol, the process of fetching a directory listing is also considered a "data transfer". The DetermineSettings method works by checking to see which combinations result in a successful directory listing download. The method takes no arguments and returns a string containing an XML report of the results. It is a blocking call that may take approximately a minute to run. If you are unsure about how to interpret the results, cut-and-paste it into an email and send it to support@chilkatsoft.com.</descrip>
            <links2>
                <link linkType="example">
                    <text>DetermineSettings Example</text>
                    <url>ftp_determineSettings.asp</url>
                </link>
            </links2>
            <args2 />
        </method>
        <method name="DirTreeXml" axId="201" outArgName="outStrXml" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrXml</argName>
                    <objcName>outStrXml</objcName>
                </arg>
            </args>
            <descrip>Recursively downloads the structure of a complete remote directory tree.  Returns an XML document with the directory structure. 
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; Starting in version 9.5.0.47, the SyncMustMatch and SyncMustNotMatch properties apply to this method.</descrip>
            <links2>
                <link linkType="example">
                    <text>Download Directory Tree Listing as XML</text>
                    <url>ftp_dirTreeXml.asp</url>
                </link>
            </links2>
            <args2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="Disconnect" axId="202">
            <gType>bool</gType>
            <args />
            <descrip>Disconnects from the FTP server, ending the current session.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="DownloadTree" axId="203" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localRoot</argName>
                    <objcName>localRoot</objcName>
                </arg>
            </args>
            <descrip>Downloads an entire tree from the FTP server and recreates the directory tree on the local filesystem.  
&lt;p&gt;
This method downloads all the files and subdirectories in the current remote directory.  An application would first navigate to the directory to be downloaded via ChangeRemoteDir and then call this method.  
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; Starting in version 9.5.0.47, the SyncMustMatch and SyncMustNotMatch properties apply to this method.</descrip>
            <links2>
                <link linkType="external" lang="csharp">
                    <text>C# FTP Events</text>
                    <url>http://www.chilkatsoft.com/p/p_385.asp</url>
                </link>
                <link linkType="example">
                    <text>Download Directory Tree Listing as XML</text>
                    <url>ftp_dirTreeXml.asp</url>
                </link>
                <link linkType="external">
                    <text>Determining Settings for FTP Data Connections</text>
                    <url>http://www.cknotes.com/?p=282</url>
                </link>
            </links2>
            <args2>
                <arg name="localRoot" type="string" objcName="localRoot" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="Feat" axId="204" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Sends a FEAT command to the FTP server and returns the response.  Returns a zero-length string to indicate failure.  Here is a typical response:
&lt;pre&gt;
211-Features:
 MDTM
 REST STREAM
 SIZE
 MLST type*;size*;modify*;
 MLSD
 AUTH SSL
 AUTH TLS
 UTF8
 CLNT
 MFMT
211 End
&lt;/pre&gt;</descrip>
            <links2>
                <link linkType="example">
                    <text>FTP FEAT Command</text>
                    <url>ftp_feat.asp</url>
                </link>
            </links2>
            <args2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetCreateDt" axId="205">
            <gType>CkDateTime</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>Returns the create date/time for the Nth file or sub-directory in the current remote directory. The first file/dir is at index 0, and the last one is at index (NumFilesAndDirs-1)</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetCreateDtByName" axId="206">
            <gType>CkDateTime</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>filename</objcName>
                </arg>
            </args>
            <descrip>Returns the file-creation date/time for a remote file by filename.
&lt;p&gt;
Note: The ARG1 passed to this method must NOT include a path.  Prior to calling this method, make sure to set the current remote directory (via the ChangeRemoteDir method) to the remote directory where this file exists.  
&lt;p&gt;
Note: Prior to calling this method, it should be ensured that the ListPattern property is set to a pattern that would match the requested ARG1.  (The default value of ListPattern is "*", which will match all filenames.)
&lt;p&gt;
Note: Linux/Unix type filesystems do not store "create" date/times.  Therefore, if the FTP server is on such as system, this method will return a date/time equal to the last-modified date/time.</descrip>
            <args2>
                <arg name="filename" type="string" objcName="filename" />
            </args2>
            <links2 />
        </method>
        <method name="GetCreateFTime" cpp="1" events="1" deprecated="1" noC="1" noObjC="1" noSwig="1" noxojo="1" outArgName="outFileTime">
            <gType filetime="1">date</gType>
            <args>
                <arg>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>FILETIME &amp;</cppType>
                    <argName>outFileTime</argName>
                    <objcName>outFileTime</objcName>
                </arg>
            </args>
            <descrip>Returns the create time for the Nth file or sub-directory in the current remote directory. The first file/dir is at index 0, and the last one is at index (NumFilesAndDirs-1)
&lt;p&gt;Note: The FILETIME is a Windows-based format.  See http://support.microsoft.com/kb/188768 for more information.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetCreateTime" axId="207" deprecated="1" noxojo="1" outArgName="outSysTime">
            <gType systemtime="1">date</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>SYSTEMTIME &amp;</cppType>
                    <argName>outSysTime</argName>
                    <objcName>outSysTime</objcName>
                </arg>
            </args>
            <descrip>Returns the create time for the Nth file or sub-directory in the current remote directory. The first file/dir is at index 0, and the last one is at index (NumFilesAndDirs-1)</descrip>
            <links2>
                <link linkType="external" lang="perl">
                    <text>More information about using SYSTEMTIME in Perl</text>
                    <url>http://www.cknotes.com/?p=122</url>
                </link>
                <link linkType="external" lang="python">
                    <text>More information about using SYSTEMTIME in Python</text>
                    <url>http://www.cknotes.com/?p=374</url>
                </link>
            </links2>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetCreateTimeByName" axId="208" deprecated="1" noxojo="1" outArgName="outSysTime">
            <gType systemtime="1">date</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>filename</objcName>
                </arg>
                <arg>
                    <cppType>SYSTEMTIME &amp;</cppType>
                    <argName>outSysTime</argName>
                    <objcName>outSysTime</objcName>
                </arg>
            </args>
            <descrip>Returns the file-creation date/time for a remote file by filename.
&lt;p&gt;
Note: The ARG1 passed to this method must NOT include a path.  Prior to calling this method, make sure to set the current remote directory (via the ChangeRemoteDir method) to the remote directory where this file exists.  
&lt;p&gt;
Note: Prior to calling this method, it should be ensured that the ListPattern property is set to a pattern that would match the requested ARG1.  (The default value of ListPattern is "*", which will match all filenames.)
&lt;p&gt;
Note: Linux/Unix type filesystems do not store "create" date/times.  If the FTP server is on such as system, this method will return a date/time equal to the last-modified date/time.</descrip>
            <links2>
                <link linkType="external" lang="perl">
                    <text>More information about using SYSTEMTIME in Perl</text>
                    <url>http://www.cknotes.com/?p=122</url>
                </link>
                <link linkType="external" lang="python">
                    <text>More information about using SYSTEMTIME in Python</text>
                    <url>http://www.cknotes.com/?p=374</url>
                </link>
            </links2>
            <args2>
                <arg name="filename" type="string" objcName="filename" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetCreateTimeByNameStr" axId="209" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>filename</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the file-creation date/time (in RFC822 string format, such as "Tue, 25 Sep 2012 12:25:32 -0500") for a remote file by filename.
&lt;p&gt;
Note: The ARG1 passed to this method must NOT include a path.  Prior to calling this method, make sure to set the current remote directory (via the ChangeRemoteDir method) to the remote directory where this file exists.  
&lt;p&gt;
Note: Prior to calling this method, it should be ensured that the ListPattern property is set to a pattern that would match the requested ARG1.  (The default value of ListPattern is "*", which will match all filenames.)
&lt;p&gt;
Note: Linux/Unix type filesystems do not store "create" date/times.  If the FTP server is on such as system, this method will return a date/time equal to the last-modified date/time.</descrip>
            <args2>
                <arg name="filename" type="string" objcName="filename" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetCreateTimeStr" axId="210" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the create time (in RFC822 string format, such as "Tue, 25 Sep 2012 12:25:32 -0500") for the Nth file or sub-directory in the current remote directory. The first file/dir is at index 0, and the last one is at index (NumFilesAndDirs-1)</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetCurrentRemoteDir" axId="211" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the current remote directory.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="GetDirCount" axId="281" ax="1" cpp="1" dn="1" events="1">
            <gType>int</gType>
            <descrip>Returns the number of files and sub-directories in the current remote directory that match the ListPattern property.
&lt;p&gt;
Important:  Calling this method may cause the directory listing to be retrieved from the FTP server.  For FTP servers that do not support the MLST/MLSD commands, this is technically a data transfer that requires a temporary data connection to be established in the same way as when uploading or downloading files.  If your program hangs while calling this method, it probably means that the data connection could not be established.  The most common solution is to switch to using Passive mode by setting the Passive property = _TRUE_, with the PassiveUseHostAddr property also set equal to _TRUE_.  If this does not  help, examine the contents of the LastErrorText property after this method  finally returns (after timing out).  Also, see &lt;a href="http://www.cknotes.com/?p=282"&gt;this Chilkat blog post about FTP connection settings&lt;/a&gt;.</descrip>
            <iversion>9.5.0.44</iversion>
            <args />
            <args2 />
            <links2 />
        </method>
        <method name="GetFile" axId="212" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilePath</argName>
                    <objcName>remoteFilename</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localFilePath</argName>
                    <objcName>localPath</objcName>
                </arg>
            </args>
            <descrip>Downloads a file from the FTP server to the local filesystem.
&lt;p&gt;
If the ARG1 contains non-English characters, it may be necessary to set the DirListingCharset property equal to "utf-8".  Please refer to the documentation for the DirListingCharset property.</descrip>
            <links2>
                <link linkType="example">
                    <url>ftp_download.asp</url>
                    <text>Simple FTP Download</text>
                </link>
                <link linkType="external" lang="csharp">
                    <text>Percent-Done FTP Progress Monitoring</text>
                    <url>http://www.cknotes.com/?p=319</url>
                </link>
                <link linkType="external" lang="csharp">
                    <text>FTP Progress Monitoring Events</text>
                    <url>http://www.chilkatsoft.com/p/p_385.asp</url>
                </link>
                <link linkType="external" lang="csharp">
                    <text>Failed with WSAEWOULDBLOCK?</text>
                    <url>http://www.cknotes.com/?p=282</url>
                </link>
                <link linkType="external">
                    <text>Determining Settings for FTP Data Connections</text>
                    <url>http://www.cknotes.com/?p=282</url>
                </link>
                <link linkType="external" lang="vbnet">
                    <url>http://www.example-code.com/vbdotnet/ftpDownloadProgressMonitor.asp</url>
                    <text>FTP Download File with Progress Monitoring</text>
                </link>
                <link linkType="example" async="1">
                    <url>async_ftp_progress.asp</url>
                    <text>Async FTP Progress Info</text>
                </link>
                <link linkType="example" events="1">
                    <url>ftp_download_with_progress.asp</url>
                    <text>FTP Download with Progress Event Callbacks</text>
                </link>
            </links2>
            <args2>
                <arg name="remoteFilePath" type="string" objcName="remoteFilename" />
                <arg name="localFilePath" type="string" objcName="localPath" />
            </args2>
        </method>
        <method name="GetFilename" axId="213" ax="1" cpp="1" dn="1" events="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the filename for the Nth file or sub-directory in the current remote directory. The first file/dir is at index 0, and the last one is at index (NumFilesAndDirs-1)</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="GetGroup" ax="1" cpp="1" dn="1" events="1" axId="292" outArgName="outStr">
            <gType>string</gType>
            <descrip>Returns group name, if available, for the Nth file.  If empty, then no group information is available. 
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; When MLSD is used to get directory listings, it is likely that the owner and group information is not transmitted.  In cases where the FTP server is on a UNIX/Linux system, the AllowMlsd property can be set to _FALSE_ to force UNIX directory listings instead of MLSD directory listings.  This should result in being able to obtain owner/group information.  However, it may sacrifice the quality and accuracy of the various date/time values that are returned.</descrip>
            <iversion>9.5.0.50</iversion>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetIsDirectory" axId="214">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>Returns _TRUE_ for a sub-directory and _FALSE_ for a file, for the Nth entry in the current remote directory. The first file/dir is at index 0, and the last one is at index (NumFilesAndDirs-1)</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetIsSymbolicLink" axId="215">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>Returns _TRUE_ if the remote file is a symbolic link.  (Symbolic links only exist on Unix/Linux systems, not on Windows filesystems.)</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="GetLastAccessDt" axId="216" ax="1" cpp="1" dn="1" events="1">
            <gType>CkDateTime</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>Returns the last access date/time for the Nth file or sub-directory in the current remote directory. The first file/dir is at index 0, and the last one is at index (NumFilesAndDirs-1)</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetLastAccessDtByName" axId="217">
            <gType>CkDateTime</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>filename</objcName>
                </arg>
            </args>
            <descrip>Returns a remote file's last-access date/time.
&lt;p&gt;
Note: The ARG1 passed to this method must NOT include a path.  Prior to calling this method, make sure to set the current remote directory (via the ChangeRemoteDir method) to the remote directory where this file exists.  
&lt;p&gt;
Note: Prior to calling this method, it should be ensured that the ListPattern property is set to a pattern that would match the requested ARG1.  (The default value of ListPattern is "*", which will match all filenames.)</descrip>
            <args2>
                <arg name="filename" type="string" objcName="filename" />
            </args2>
            <links2 />
        </method>
        <method name="GetLastAccessFTime" cpp="1" events="1" deprecated="1" noC="1" noObjC="1" noSwig="1" noxojo="1" outArgName="outFileTime">
            <gType filetime="1">date</gType>
            <args>
                <arg>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>FILETIME &amp;</cppType>
                    <argName>outFileTime</argName>
                    <objcName>outFileTime</objcName>
                </arg>
            </args>
            <descrip>Returns the last access date/time for the Nth file or sub-directory in the current remote directory. The first file/dir is at index 0, and the last one is at index (NumFilesAndDirs-1)
&lt;p&gt;Note: The FILETIME is a Windows-based format.  See http://support.microsoft.com/kb/188768 for more information.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetLastAccessTime" axId="218" deprecated="1" noxojo="1" outArgName="outSysTime">
            <gType systemtime="1">date</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>SYSTEMTIME &amp;</cppType>
                    <argName>outSysTime</argName>
                    <objcName>outSysTime</objcName>
                </arg>
            </args>
            <descrip>Returns the last access date/time for the Nth file or sub-directory in the current remote directory. The first file/dir is at index 0, and the last one is at index (NumFilesAndDirs-1)</descrip>
            <links2>
                <link linkType="external" lang="perl">
                    <text>More information about using SYSTEMTIME in Perl</text>
                    <url>http://www.cknotes.com/?p=122</url>
                </link>
                <link linkType="external" lang="python">
                    <text>More information about using SYSTEMTIME in Python</text>
                    <url>http://www.cknotes.com/?p=374</url>
                </link>
            </links2>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetLastAccessTimeByName" axId="219" deprecated="1" noxojo="1" outArgName="outSysTime">
            <gType systemtime="1">date</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>filename</objcName>
                </arg>
                <arg>
                    <cppType>SYSTEMTIME &amp;</cppType>
                    <argName>outSysTime</argName>
                    <objcName>outSysTime</objcName>
                </arg>
            </args>
            <descrip>Returns a remote file's last-access date/time.
&lt;p&gt;
Note: The ARG1 passed to this method must NOT include a path.  Prior to calling this method, make sure to set the current remote directory (via the ChangeRemoteDir method) to the remote directory where this file exists.  
&lt;p&gt;
Note: Prior to calling this method, it should be ensured that the ListPattern property is set to a pattern that would match the requested ARG1.  (The default value of ListPattern is "*", which will match all filenames.)</descrip>
            <links2>
                <link linkType="external" lang="perl">
                    <text>More information about using SYSTEMTIME in Perl</text>
                    <url>http://www.cknotes.com/?p=122</url>
                </link>
                <link linkType="external" lang="python">
                    <text>More information about using SYSTEMTIME in Python</text>
                    <url>http://www.cknotes.com/?p=374</url>
                </link>
            </links2>
            <args2>
                <arg name="filename" type="string" objcName="filename" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetLastAccessTimeByNameStr" axId="220" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>filename</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns a remote file's last-access date/time in RFC822 string format, such as "Tue, 25 Sep 2012 12:25:32 -0500".
&lt;p&gt;
Note: The ARG1 passed to this method must NOT include a path.  Prior to calling this method, make sure to set the current remote directory (via the ChangeRemoteDir method) to the remote directory where this file exists.  
&lt;p&gt;
Note: Prior to calling this method, it should be ensured that the ListPattern property is set to a pattern that would match the requested ARG1.  (The default value of ListPattern is "*", which will match all filenames.)</descrip>
            <args2>
                <arg name="filename" type="string" objcName="filename" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetLastAccessTimeStr" axId="221" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the last access date/time (in RFC822 string format, such as "Tue, 25 Sep 2012 12:25:32 -0500") for the Nth file or sub-directory in the current remote directory. The first file/dir is at index 0, and the last one is at index (NumFilesAndDirs-1)</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetLastModDt" axId="222">
            <gType>CkDateTime</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>Returns the last modified date/time for the Nth file or sub-directory in the current remote directory. The first file/dir is at index 0, and the last one is at index (NumFilesAndDirs-1)</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="GetLastModDtByName" axId="223" ax="1" cpp="1" dn="1" events="1">
            <gType>CkDateTime</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>filename</objcName>
                </arg>
            </args>
            <descrip>Returns the last-modified date/time for a remote file.
&lt;p&gt;
Note: The ARG1 passed to this method must NOT include a path.  Prior to calling this method, make sure to set the current remote directory (via the ChangeRemoteDir method) to the remote directory where this file exists.  
&lt;p&gt;
Note: Prior to calling this method, it should be ensured that the ListPattern property is set to a pattern that would match the requested ARG1.  (The default value of ListPattern is "*", which will match all filenames.)</descrip>
            <links2>
                <link linkType="external" lang="activex">
                    <url>http://www.chilkatforum.com/questions/10519/vb6-get-datetime-last-modified-stamp-of-a-file-on-the-ftp-server</url>
                    <text>VB6: Get Last Modified Date/Time of File</text>
                </link>
            </links2>
            <args2>
                <arg name="filename" type="string" objcName="filename" />
            </args2>
        </method>
        <method name="GetLastModifiedFTime" cpp="1" events="1" deprecated="1" noC="1" noObjC="1" noSwig="1" noxojo="1" outArgName="outFileTime">
            <gType filetime="1">date</gType>
            <args>
                <arg>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>FILETIME &amp;</cppType>
                    <argName>outFileTime</argName>
                    <objcName>outFileTime</objcName>
                </arg>
            </args>
            <descrip>Returns the last modified date/time for the Nth file or sub-directory in the current remote directory. The first file/dir is at index 0, and the last one is at index (NumFilesAndDirs-1)
&lt;p&gt;Note: The FILETIME is a Windows-based format.  See http://support.microsoft.com/kb/188768 for more information.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetLastModifiedTime" axId="224" deprecated="1" noxojo="1" outArgName="outSysTime">
            <gType systemtime="1">date</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>SYSTEMTIME &amp;</cppType>
                    <argName>outSysTime</argName>
                    <objcName>outSysTime</objcName>
                </arg>
            </args>
            <descrip>Returns the last modified date/time for the Nth file or sub-directory in the current remote directory. The first file/dir is at index 0, and the last one is at index (NumFilesAndDirs-1)</descrip>
            <links2>
                <link linkType="external" lang="perl">
                    <text>More information about using SYSTEMTIME in Perl</text>
                    <url>http://www.cknotes.com/?p=122</url>
                </link>
                <link linkType="external" lang="python">
                    <text>More information about using SYSTEMTIME in Python</text>
                    <url>http://www.cknotes.com/?p=374</url>
                </link>
            </links2>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetLastModifiedTimeByName" axId="225" deprecated="1" noxojo="1" outArgName="outSysTime">
            <gType systemtime="1">date</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>filename</objcName>
                </arg>
                <arg>
                    <cppType>SYSTEMTIME &amp;</cppType>
                    <argName>outSysTime</argName>
                    <objcName>outSysTime</objcName>
                </arg>
            </args>
            <descrip>Returns the last-modified date/time for a remote file.
&lt;p&gt;
Note: The ARG1 passed to this method must NOT include a path.  Prior to calling this method, make sure to set the current remote directory (via the ChangeRemoteDir method) to the remote directory where this file exists.  
&lt;p&gt;
Note: Prior to calling this method, it should be ensured that the ListPattern property is set to a pattern that would match the requested ARG1.  (The default value of ListPattern is "*", which will match all filenames.)</descrip>
            <links2>
                <link linkType="external" lang="perl">
                    <text>More information about using SYSTEMTIME in Perl</text>
                    <url>http://www.cknotes.com/?p=122</url>
                </link>
                <link linkType="external" lang="python">
                    <text>More information about using SYSTEMTIME in Python</text>
                    <url>http://www.cknotes.com/?p=374</url>
                </link>
            </links2>
            <args2>
                <arg name="filename" type="string" objcName="filename" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetLastModifiedTimeByNameStr" axId="226" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>filename</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns a remote file's last-modified date/time in RFC822 string format, such as "Tue, 25 Sep 2012 12:25:32 -0500".
&lt;p&gt;
Note: The ARG1 passed to this method must NOT include a path.  Prior to calling this method, make sure to set the current remote directory (via the ChangeRemoteDir method) to the remote directory where this file exists.  
&lt;p&gt;
Note: Prior to calling this method, it should be ensured that the ListPattern property is set to a pattern that would match the requested ARG1.  (The default value of ListPattern is "*", which will match all filenames.)</descrip>
            <args2>
                <arg name="filename" type="string" objcName="filename" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetLastModifiedTimeStr" axId="227" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the last modified date/time (in RFC822 string format, such as "Tue, 25 Sep 2012 12:25:32 -0500")  for the Nth file or sub-directory in the current remote directory. The first file/dir is at index 0, and the last one is at index (NumFilesAndDirs-1)</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="GetOwner" ax="1" cpp="1" dn="1" events="1" axId="291" outArgName="outStr">
            <gType>string</gType>
            <descrip>Returns owner name, if available, for the Nth file.  If empty, then no owner information is available. 
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; When MLSD is used to get directory listings, it is likely that the owner and group information is not transmitted.  In cases where the FTP server is on a UNIX/Linux system, the AllowMlsd property can be set to _FALSE_ to force UNIX directory listings instead of MLSD directory listings.  This should result in being able to obtain owner/group information.  However, it may sacrifice the quality and accuracy of the various date/time values that are returned.</descrip>
            <iversion>9.5.0.50</iversion>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="GetPermType" ax="1" cpp="1" dn="1" events="1" axId="289" outArgName="outStr">
            <gType>string</gType>
            <descrip>Returns the type of permissions information that is available for the Nth file.  If empty, then no permissions information is available.  The value returned by this method defines the content and format of the permissions string returned by the GetPermissions method.  Possible values are "mlsd", "unix", "netware", "openvms", and "batchStatusFlags".</descrip>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <iversion>9.5.0.50</iversion>
            <links2>
                <link linkType="example">
                    <url>ftp_filePermissions.asp</url>
                    <text>Get FTP File Permissions</text>
                </link>
            </links2>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
        </method>
        <method name="GetPermissions" axId="290" ax="1" cpp="1" dn="1" events="1" outArgName="outStr">
            <gType>string</gType>
            <descrip>Returns permissions information, if available, for the Nth file.  If empty, then no permissions information is available.  The value returned by the GetPermType method defines the content and format of the permissions string returned by this method.  Possible permission types are "mlsd", "unix", "netware", "openvms", and "batchStatusFlags".  The format of each permission type is as follows:
&lt;hr&gt;
&lt;p&gt;PermType: &lt;b&gt;mlsd:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;A "perm fact" is returned.  The format of the perm fact is defined in RFC 3659 as follows:
&lt;pre&gt;
  The perm fact is used to indicate access rights the current FTP user
   has over the object listed.  Its value is always an unordered
   sequence of alphabetic characters.

      perm-fact    = "Perm" "=" *pvals
      pvals        = "a" / "c" / "d" / "e" / "f" /
                     "l" / "m" / "p" / "r" / "w"

   There are ten permission indicators currently defined.  Many are
   meaningful only when used with a particular type of object.  The
   indicators are case independent, "d" and "D" are the same indicator.

   The "a" permission applies to objects of type=file, and indicates
   that the APPE (append) command may be applied to the file named.

   The "c" permission applies to objects of type=dir (and type=pdir,
   type=cdir).  It indicates that files may be created in the directory
   named.  That is, that a STOU command is likely to succeed, and that
   STOR and APPE commands might succeed if the file named did not
   previously exist, but is to be created in the directory object that
   has the "c" permission.  It also indicates that the RNTO command is
   likely to succeed for names in the directory.

   The "d" permission applies to all types.  It indicates that the
   object named may be deleted, that is, that the RMD command may be
   applied to it if it is a directory, and otherwise that the DELE
   command may be applied to it.

   The "e" permission applies to the directory types.  When set on an
   object of type=dir, type=cdir, or type=pdir it indicates that a CWD
   command naming the object should succeed, and the user should be able
   to enter the directory named.  For type=pdir it also indicates that
   the CDUP command may succeed (if this particular pathname is the one
   to which a CDUP would apply.)

   The "f" permission for objects indicates that the object named may be
   renamed - that is, may be the object of an RNFR command.

   The "l" permission applies to the directory file types, and indicates
   that the listing commands, LIST, NLST, and MLSD may be applied to the
   directory in question.

   The "m" permission applies to directory types, and indicates that the
   MKD command may be used to create a new directory within the
   directory under consideration.

   The "p" permission applies to directory types, and indicates that
   objects in the directory may be deleted, or (stretching naming a
   little) that the directory may be purged.  Note: it does not indicate
   that the RMD command may be used to remove the directory named
   itself, the "d" permission indicator indicates that.

   The "r" permission applies to type=file objects, and for some
   systems, perhaps to other types of objects, and indicates that the
   RETR command may be applied to that object.

   The "w" permission applies to type=file objects, and for some
   systems, perhaps to other types of objects, and indicates that the
   STOR command may be applied to the object named.

   Note: That a permission indicator is set can never imply that the
      appropriate command is guaranteed to work -- just that it might.
      Other system specific limitations, such as limitations on
      available space for storing files, may cause an operation to fail,
      where the permission flags may have indicated that it was likely
      to succeed.  The permissions are a guide only.

   Implementation note: The permissions are described here as they apply
      to FTP commands.  They may not map easily into particular
      permissions available on the server's operating system.  Servers
      are expected to synthesize these permission bits from the
      permission information available from operating system.  For
      example, to correctly determine whether the "D" permission bit
      should be set on a directory for a server running on the UNIX(TM)
      operating system, the server should check that the directory named
      is empty, and that the user has write permission on both the
      directory under consideration, and its parent directory.

      Some systems may have more specific permissions than those listed
      here, such systems should map those to the flags defined as best
      they are able.  Other systems may have only more broad access
      controls.  They will generally have just a few possible
      permutations of permission flags, however they should attempt to
      correctly represent what is permitted.
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;PermType: &lt;b&gt;unix:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;A Unix/Linux permissions string is returned ( such as "drwxr-xr-x" or "-rw-r--r--")
&lt;pre&gt;
    The UNIX permissions string is 10 characters. Each character has a specific meaning. If the first character is:
    d 	the entry is a directory.
    b 	the entry is a block special file.
    c 	the entry is a character special file.
    l 	the entry is a symbolic link. Either the -N flag was specified, or the symbolic link did not point to an existing file.
    p 	the entry is a first-in, first-out (FIFO) special file.
    s 	the entry is a local socket.
    - 	the entry is an ordinary file.

    The next nine characters are divided into three sets of three characters each. The first set of three characters show 
the owner's permission. The next set of three characters show the permission of the other users in the group. The last
set of three characters shows the permission of anyone else with access to the file. The three characters in each set 
indicate, respectively, read, write, and execute permission of the file. With execute permission of a directory, you can search 
a directory for a specified file. Permissions are indicated like this:

    r 	read
    w 	write (edit)
    x 	execute (search)
    - 	corresponding permission not granted 
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;PermType: &lt;b&gt;netware:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Contains the NetWare rights string from a NetWare FTP server directory listing format.  For example "-WCE---S" or "RWCEAFMS".
&lt;pre&gt;
Directory Rights	Description
----------------	-------------------------------
Read (R)		Read data from an existing file.
Write (W)		Write data to an existing file.
Create (C)		Create a new file or subdirectory.
Erase (E)		Delete an existing files or directory.
Modify (M)	Rename and change attributes of a file.
File Scan (F)	List the contents of a directory.
Access Control (A)	Control the rights of other users to access files or directories.
Supervisor (S)	Automatically allowed all rights.
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;PermType: &lt;b&gt;openvms:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Contains the OpenVMS permissions string.  For example "(RWED,RWED,RWED,RWED)",  "(RWED,RWED,,)", "(RWED,RWED,R,R)", etc.
&lt;hr&gt;
&lt;p&gt;PermType: &lt;b&gt;batchStatusFlags:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Contains the batch status flags from a Connect:Enterprise Server.  Such as "-CR--M----" or "-ART------".
&lt;pre&gt;
The Batch Status Flags  is a 10-character string where each character describes an attribute of the batch. 
A dash indicates that flag is turned off and therefore has no meaning to the 
batch in question. The flags are always displayed in the same order: 

1) I  -- Incomplete batch which will NOT be processed. 
2) A or C -- Added or Collected
3) R -- Requestable by partner 
4) T -- Transmitted to partner 
5) E -- Extracted (inbound file processed by McLane) 
6) M -- Multi-transmittable 
7) U -- Un-extractable 
8) N -- Non-transmittable 
9) P -- In Progress 
10) - -- Always a dash.
&lt;/pre&gt;</descrip>
            <iversion>9.5.0.50</iversion>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>ftp_filePermissions.asp</url>
                    <text>Get FTP File Permissions</text>
                </link>
            </links2>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetRemoteFileBinaryData" axId="228" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilename</argName>
                    <objcName>remoteFilename</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Downloads the contents of a remote file into a byte array.</descrip>
            <links2>
                <link linkType="external" lang="csharp">
                    <text>Percent-Done FTP Progress Monitoring</text>
                    <url>http://www.cknotes.com/?p=319</url>
                </link>
                <link linkType="external">
                    <text>Determining Settings for FTP Data Connections</text>
                    <url>http://www.cknotes.com/?p=282</url>
                </link>
            </links2>
            <args2>
                <arg name="remoteFilename" type="string" objcName="remoteFilename" />
            </args2>
        </method>
        <method name="GetRemoteFileTextC" axId="229" ax="1" cpp="1" dn="1" events="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilename</argName>
                    <objcName>remoteFilename</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Downloads a text file directly into a string variable.  The character encoding of the text file is specified by the ARG2 argument, which is a value such as utf-8, iso-8859-1, Shift_JIS, etc.</descrip>
            <links2>
                <link linkType="external" lang="csharp">
                    <text>Percent-Done FTP Progress Monitoring</text>
                    <url>http://www.cknotes.com/?p=319</url>
                </link>
                <link linkType="example">
                    <url>ftp_downloadIntoString.asp</url>
                    <text>Download Text File into String Variable</text>
                </link>
                <link linkType="external" lang="activex">
                    <url>http://www.chilkatforum.com/questions/9342/sql-server-methods-that-return-long-strings</url>
                    <text>Long Strings Returned by ActiveX Methods in SQL Server</text>
                </link>
            </links2>
            <args2>
                <arg name="remoteFilename" type="string" objcName="remoteFilename" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
        </method>
        <method name="GetRemoteFileTextData" axId="230" ax="1" cpp="1" dn="1" events="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilename</argName>
                    <objcName>remoteFilename</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Downloads the content of a remote text file directly into an in-memory string.
&lt;p&gt;
Note: If the remote text file does not use the ANSI character encoding, call GetRemoteFileTextC instead, which allows for the character encoding to be specified so that characters are properly interpreted.</descrip>
            <links2>
                <link linkType="external" lang="csharp">
                    <text>Percent-Done FTP Progress Monitoring</text>
                    <url>http://www.cknotes.com/?p=319</url>
                </link>
                <link linkType="external">
                    <text>Determining Settings for FTP Data Connections</text>
                    <url>http://www.cknotes.com/?p=282</url>
                </link>
                <link linkType="example">
                    <url>ftp_downloadIntoString.asp</url>
                    <text>Download Text File into String Variable</text>
                </link>
                <link linkType="external" lang="activex">
                    <url>http://www.chilkatforum.com/questions/9342/sql-server-methods-that-return-long-strings</url>
                    <text>Long Strings Returned by ActiveX Methods in SQL Server</text>
                </link>
            </links2>
            <args2>
                <arg name="remoteFilename" type="string" objcName="remoteFilename" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetSize" axId="231">
            <gType>int</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>Returns the size of the Nth remote file in the current directory.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="0" events="1" name="GetSize64">
            <gType>int64</gType>
            <args>
                <arg>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>Returns the size of the Nth remote file in the current directory as a 64-bit integer.  Returns -1 if the file does not exist.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetSizeByName" axId="232">
            <gType>int</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>filname</objcName>
                </arg>
            </args>
            <descrip>Returns a remote file's size in bytes.  Returns -1 if the file does not exist.
&lt;p&gt;
Note: The ARG1 passed to this method must NOT include a path.  Prior to calling this method, make sure to set the current remote directory (via the ChangeRemoteDir method) to the remote directory where this file exists.  
&lt;p&gt;
Note: Prior to calling this method, it should be ensured that the ListPattern property is set to a pattern that would match the requested ARG1.  (The default value of ListPattern is "*", which will match all filenames.)</descrip>
            <args2>
                <arg name="filename" type="string" objcName="filname" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="0" events="1" name="GetSizeByName64">
            <gType>int64</gType>
            <args>
                <arg>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>filename</objcName>
                </arg>
            </args>
            <descrip>Returns a remote file's size in bytes as a 64-bit integer.
&lt;p&gt;
Note: The ARG1 passed to this method must NOT include a path.  Prior to calling this method, make sure to set the current remote directory (via the ChangeRemoteDir method) to the remote directory where this file exists.  
&lt;p&gt;
Note: Prior to calling this method, it should be ensured that the ListPattern property is set to a pattern that would match the requested ARG1.  (The default value of ListPattern is "*", which will match all filenames.)</descrip>
            <args2>
                <arg name="filename" type="string" objcName="filename" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetSizeStr" axId="233" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the size in decimal string format of the Nth remote file in the current directory.  This is helpful for cases when the file size (in bytes) is greater than what can fit in a 32-bit integer.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetSizeStrByName" axId="234" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>filename</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the size of a remote file as a string.  This is helpful when file a file size is greater than what can fit in a 32-bit integer.
&lt;p&gt;
Note: The ARG1 passed to this method must NOT include a path.  Prior to calling this method, make sure to set the current remote directory (via the ChangeRemoteDir method) to the remote directory where this file exists.  
&lt;p&gt;
Note: Prior to calling this method, it should be ensured that the ListPattern property is set to a pattern that would match the requested ARG1.  (The default value of ListPattern is "*", which will match all filenames.)</descrip>
            <args2>
                <arg name="filename" type="string" objcName="filename" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetSslServerCert" axId="235">
            <gType>Cert</gType>
            <args />
            <descrip>Returns the FTP server's digital certificate (for SSL / TLS connections).</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>ftp_connect_examine_cert_authenticate.asp</url>
                    <text>FTP Connect, Examine Server Certificate, and then Authenticate</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetTextDirListing" axId="236" outArgName="outStrRawListing">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pattern</argName>
                    <objcName>pattern</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrRawListing</argName>
                    <objcName>outStrRawListing</objcName>
                </arg>
            </args>
            <descrip>Returns a listing of the files and directories in the current directory matching the pattern. Passing "*.*" will return all the files and directories.</descrip>
            <links2>
                <link linkType="external">
                    <text>Determining Settings for FTP Data Connections</text>
                    <url>http://www.cknotes.com/?p=282</url>
                </link>
            </links2>
            <args2>
                <arg name="pattern" type="string" objcName="pattern" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetXmlDirListing" axId="237" outArgName="outStrXmlListing">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pattern</argName>
                    <objcName>pattern</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrXmlListing</argName>
                    <objcName>outStrXmlListing</objcName>
                </arg>
            </args>
            <descrip>Returns (in XML format) the files and directories in the current directory matching the pattern. Passing "*.*" will return all the files and directories.</descrip>
            <links2>
                <link linkType="external">
                    <text>Determining Settings for FTP Data Connections</text>
                    <url>http://www.cknotes.com/?p=282</url>
                </link>
                <link linkType="example">
                    <url>ftp_getXmlDirListing.asp</url>
                    <text>Get FTP Directory Listing as XML</text>
                </link>
            </links2>
            <args2>
                <arg name="pattern" type="string" objcName="pattern" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="IsUnlocked" axId="238">
            <gType>bool</gType>
            <args />
            <descrip>Return true if the component is already unlocked.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="LargeFileUpload" axId="298" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>This is the same as PutFile, but designed to work around the following potential problem associated with an upload that is extremely large.   
&lt;p&gt;
FTP uses two TCP (or TLS) connections:  a control connection to submit commands and receive replies, and a data connection for actual file transfers. 
It is the nature of FTP that during a transfer the control connection stays completely idle. 
Many routers and firewalls automatically close idle connections after a certain period of time.   
Worse, they often don't notify the user, but just silently drop the connection. 
&lt;p&gt;
 For FTP, this means that during a long transfer the control connection can get dropped because it is detected as idle, but neither client nor server are notified.
When all data has been transferred, the server assumes the control connection is alive 
and it sends the transfer confirmation reply. 
&lt;p&gt;
Likewise, the client thinks the control connection is alive and it waits for the reply from the server. 
But since the control connection got dropped without notification, 
the reply never arrives and eventually the connection will timeout.
&lt;p&gt;
&lt;b&gt;The Solution: &lt;/b&gt;This method uploads the file in chunks, where each chunk appends to the remote file.  This way, each chunk is a separate FTP upload that does not take too long to complete.  
The ARG3 specifies the number of bytes to upload in each chunk.  The size should be based on the amount of memory available (because each chunk will reside in memory as it's being uploaded), the transfer rate, and the total size of the file being uploaded.  For example, if a 4GB file is uploaded, and the ARG3 is set to 1MB (1,048,576 bytes), then 4000 separate chunks would be required.  This is likely not a good choice for ARG3.  A more appropriate ARG3 might be 20MB, in which case the upload would complete in 200 separate chunks.  The application would temporarily be using a 20MB buffer for uploading chunks.  The tradeoff is between the number of chunks (the more chunks, the larger the overall time to upload), the amount of memory that is reasonable for the temporary buffer, and the amount of time required to upload each chunk (if the chunk size is too large, then the problem described above  is not solved).</descrip>
            <args>
                <arg>
                    <argName>localPath</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>localPath</objcName>
                </arg>
                <arg>
                    <argName>remotePath</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>remotePath</objcName>
                </arg>
                <arg>
                    <argName>chunkSize</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>chunkSize</objcName>
                </arg>
            </args>
            <iversion>9.5.0.58</iversion>
            <links2>
                <link linkType="example">
                    <url>ftp_large_file_upload.asp</url>
                    <text>FTP Large File Upload</text>
                </link>
            </links2>
            <args2>
                <arg name="localPath" type="string" objcName="localPath" />
                <arg name="remotePath" type="string" objcName="remotePath" />
                <arg name="chunkSize" type="int" objcName="chunkSize" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="LoginAfterConnectOnly" axId="239">
            <gType>bool</gType>
            <args />
            <descrip>Authenticates with the FTP server using the values provided in the Username, Password, and/or other properties.  This can be called after establishing the connection via the ConnectOnly method.  (The Connect method both connects and authenticates.)  The combination of calling ConnectOnly followed by LoginAfterConnectOnly is the equivalent of calling the Connect method.
&lt;p&gt;Note: After successful authentication, the FEAT and SYST commands are automatically sent to help the client understand what is supported by the FTP server.  To prevent these commands from being sent, set the AutoFeat and/or AutoSyst properties equal to _FALSE_.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>ftp_connect_examine_cert_authenticate.asp</url>
                    <text>FTP Connect, Examine Server Certificate, and then Authenticate</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="MGetFiles" axId="240">
            <gType>int</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remotePattern</argName>
                    <objcName>remotePattern</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localDir</argName>
                    <objcName>localDir</objcName>
                </arg>
            </args>
            <descrip>Copies all the files in the current remote FTP directory to a local directory. To copy all the files in a remote directory, set remotePattern to "*.*" The pattern can contain any number of "*"characters, where "*" matches 0 or more of any character. The return value is the number of files transferred, and on error, a value of -1 is returned. Detailed information about the transfer can be obtained from the last-error information (LastErrorText/LastErrorHtml/LastErrorXml/SaveLastError).
&lt;p&gt;
About case sensitivity:  The MGetFiles command works by sending the "LIST" command to the FTP server.  For example:  "LIST *.txt".   The FTP server responds with a directory listing of the files matching the wildcarded pattern, and it is these files that are downloaded.  Case sensitivity depends on the case-sensitivity of the remote file system.  If the FTP server is running on a Windows-based computer, it is likely to be case insensitive.  However, if the FTP server is running on Linux, MAC OS X, etc.  it is likely to be case sensitive.  There is no good way to force case-insensitivity if the remote filesystem is case-sensitive because it is not possible for the FTP client to send a LIST command indicating that it wants the matching to be case-insensitive.</descrip>
            <links2>
                <link linkType="external" lang="csharp">
                    <text>FTP Progress Monitoring Events</text>
                    <url>http://www.chilkatsoft.com/p/p_385.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="remotePattern" type="string" objcName="remotePattern" />
                <arg name="localDir" type="string" objcName="localDir" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="MPutFiles" axId="241">
            <gType>int</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pattern</argName>
                    <objcName>pattern</objcName>
                </arg>
            </args>
            <descrip>Uploads all the files matching pattern on the local computer to the current remote FTP directory. The pattern parameter can include directory information, such as "C:/my_dir/*.txt" or it can simply be a pattern such as "*.*" that matches the files in the application's current directory. Subdirectories are not recursed. The return value is the number of files copied, with a value of -1 returned for errors. Detailed information about the transfer can be obtained from the XML log.[</descrip>
            <args2>
                <arg name="pattern" type="string" objcName="pattern" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="NlstXml" axId="242" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteDirPattern</argName>
                    <objcName>pattern</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Sends an NLST command to the FTP server and returns the results in XML format. The NLST command returns a list of filenames in the given directory (matching the pattern).  The ARG1 should be a pattern such as "*", "*.*", "*.txt", "subDir/*.xml", etc.
&lt;p&gt;
The format of the XML returned is:
&lt;pre&gt;
&amp;lt;nlst&amp;gt;
&amp;lt;e&amp;gt;filename_or_dir_1&amp;lt;/e&amp;gt;
&amp;lt;e&amp;gt;filename_or_dir_2&amp;lt;/e&amp;gt;
&amp;lt;e&amp;gt;filename_or_dir_3&amp;lt;/e&amp;gt;
&amp;lt;e&amp;gt;filename_or_dir_4&amp;lt;/e&amp;gt;
...
&amp;lt;/nlst&amp;gt;
&lt;/pre&gt;</descrip>
            <args2>
                <arg name="remoteDirPattern" type="string" objcName="pattern" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="Noop" axId="243">
            <gType>bool</gType>
            <args />
            <descrip>Issues a no-op command to the FTP server.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="PutFile" axId="244" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localFilePath</argName>
                    <objcName>localPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilePath</argName>
                    <objcName>remoteFilename</objcName>
                </arg>
            </args>
            <descrip>Uploads a local file to the current directory on the FTP server.
&lt;p&gt;
If the ARG2 contains non-English characters, it may be necessary to set the DirListingCharset property equal to "utf-8".  Please refer to the documentation for the DirListingCharset property.</descrip>
            <links2>
                <link linkType="example">
                    <url>ftp_upload.asp</url>
                    <text>Simple FTP Upload</text>
                </link>
                <link linkType="external" lang="csharp">
                    <text>Percent-Done FTP Progress Monitoring</text>
                    <url>http://www.cknotes.com/?p=319</url>
                </link>
                <link linkType="external" lang="csharp">
                    <text>FTP Progress Monitoring Events</text>
                    <url>http://www.chilkatsoft.com/p/p_385.asp</url>
                </link>
                <link linkType="external" lang="csharp">
                    <text>Failed with WSAEWOULDBLOCK?</text>
                    <url>http://www.cknotes.com/?p=282</url>
                </link>
                <link linkType="external">
                    <text>Determining Settings for FTP Data Connections</text>
                    <url>http://www.cknotes.com/?p=282</url>
                </link>
                <link linkType="external" lang="vbnet">
                    <url>http://www.example-code.com/vbdotnet/ftpUploadProgressMonitor.asp</url>
                    <text>FTP Upload File with Progress Monitoring</text>
                </link>
            </links2>
            <args2>
                <arg name="localFilePath" type="string" objcName="localPath" />
                <arg name="remoteFilePath" type="string" objcName="remoteFilename" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="PutFileFromBinaryData" axId="245">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilename</argName>
                    <objcName>remoteFilename</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>content</argName>
                    <objcName>binaryData</objcName>
                </arg>
            </args>
            <descrip>Creates a file on the remote server containing the data passed in a byte array.</descrip>
            <links2>
                <link linkType="external" lang="csharp">
                    <text>Percent-Done FTP Progress Monitoring</text>
                    <url>http://www.cknotes.com/?p=319</url>
                </link>
                <link linkType="external" lang="csharp">
                    <text>FTP Progress Monitoring Events</text>
                    <url>http://www.chilkatsoft.com/p/p_385.asp</url>
                </link>
                <link linkType="external">
                    <text>Determining Settings for FTP Data Connections</text>
                    <url>http://www.cknotes.com/?p=282</url>
                </link>
            </links2>
            <args2>
                <arg name="remoteFilename" type="string" objcName="remoteFilename" />
                <arg name="content" type="bytes" objcName="binaryData" />
            </args2>
        </method>
        <method name="PutFileFromTextData" axId="246" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilename</argName>
                    <objcName>remoteFilename</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>textData</argName>
                    <objcName>textData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
            </args>
            <descrip>Creates a file on the remote server containing the data passed in a string.</descrip>
            <links2>
                <link linkType="external" lang="csharp">
                    <text>Percent-Done FTP Progress Monitoring</text>
                    <url>http://www.cknotes.com/?p=319</url>
                </link>
                <link linkType="external" lang="csharp">
                    <text>FTP Progress Monitoring Events</text>
                    <url>http://www.chilkatsoft.com/p/p_385.asp</url>
                </link>
                <link linkType="external">
                    <text>Determining Settings for FTP Data Connections</text>
                    <url>http://www.cknotes.com/?p=282</url>
                </link>
            </links2>
            <args2>
                <arg name="remoteFilename" type="string" objcName="remoteFilename" />
                <arg name="textData" type="string" objcName="textData" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="PutPlan" axId="247">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>plan</argName>
                    <objcName>planUtf8</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>alreadyDoneFilename</argName>
                    <objcName>planLogFilePath</objcName>
                </arg>
            </args>
            <descrip>Executes an "FTP plan" (created by the CreatePlan method) and logs each successful operation to a plan log file. If a large-scale upload is interrupted, the PutPlan can be resumed, skipping over the operations already listed in the plan log file.  When resuming an interrupted PutPlan method, use the same log file.  All completed operations found
in the already-existing log will automatically be skipped.</descrip>
            <links2>
                <link linkType="example">
                    <url>ftp_createPlan.asp</url>
                    <text>Upload Directory Tree using a Plan</text>
                </link>
            </links2>
            <args2>
                <arg name="plan" type="string" objcName="planUtf8" />
                <arg name="alreadyDoneFilename" type="string" objcName="planLogFilePath" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="PutTree" axId="248">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localDir</argName>
                    <objcName>localDir</objcName>
                </arg>
            </args>
            <descrip>Uploads an entire directory tree from the local filesystem to the remote FTP server, recreating the directory tree on the server. The PutTree method copies a directory tree to the current remote directory on the FTP server.</descrip>
            <links2>
                <link linkType="external" lang="csharp">
                    <text>FTP Progress Monitoring Events</text>
                    <url>http://www.chilkatsoft.com/p/p_385.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="localDir" type="string" objcName="localDir" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="Quote" axId="249">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>cmd</argName>
                    <objcName>cmd</objcName>
                </arg>
            </args>
            <descrip>Sends an arbitrary (raw) command to the FTP server.</descrip>
            <links2>
                <link linkType="example">
                    <text>Quote Example</text>
                    <url>ftp_quote_send_command.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="cmd" type="string" objcName="cmd" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="RemoveRemoteDir" axId="250">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteDirPath</argName>
                    <objcName>dir</objcName>
                </arg>
            </args>
            <descrip>Removes a directory from the FTP server.
&lt;p&gt;
If the ARG1 contains non-English characters, it may be necessary to set the DirListingCharset property equal to "utf-8".  Please refer to the documentation for the DirListingCharset property.</descrip>
            <args2>
                <arg name="remoteDirPath" type="string" objcName="dir" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="RenameRemoteFile" axId="251">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>existingRemoteFilePath</argName>
                    <objcName>existingFilename</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>newRemoteFilePath</argName>
                    <objcName>newFilename</objcName>
                </arg>
            </args>
            <descrip>Renames a file or directory on the FTP server.  To move a file from one directory to another on a remote FTP server, call this method and include the source and destination directory filepath.
&lt;p&gt;
If the ARG1 or ARG2 contains non-English characters, it may be necessary to set the DirListingCharset property equal to "utf-8".  Please refer to the documentation for the DirListingCharset property.</descrip>
            <args2>
                <arg name="existingRemoteFilePath" type="string" objcName="existingFilename" />
                <arg name="newRemoteFilePath" type="string" objcName="newFilename" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="SendCommand" axId="252" outArgName="outReply">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>cmd</argName>
                    <objcName>cmd</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outReply</argName>
                    <objcName>outReply</objcName>
                </arg>
            </args>
            <descrip>Sends an raw command to the FTP server and returns the raw response.</descrip>
            <links2>
                <link linkType="example">
                    <text>SendCommand Example</text>
                    <url>ftp_quote_send_command.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="cmd" type="string" objcName="cmd" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="SetModeZ" axId="253">
            <gType>bool</gType>
            <args />
            <descrip>Chilkat FTP2 supports MODE Z, which is a transfer mode implemented by some FTP servers. It allows for files to be uploaded and downloaded using compressed streams (using the zlib deflate algorithm).  
&lt;p&gt;
Call this method after connecting to enable Mode Z. Once enabled, all transfers (uploads, downloads, and directory listings) are compressed.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="SetOldestDate" axId="254" deprecated="1" noxojo="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>date</axType>
                    <dnType>date</dnType>
                    <cppType>SYSTEMTIME &amp;</cppType>
                    <argName>oldestDateTime</argName>
                    <objcName>oldestDateTime</objcName>
                </arg>
            </args>
            <descrip>Used in conjunction with the DownloadTree method.  Call this method prior to calling DownloadTree to set the oldest date for a file to be downloaded.  When DownloadTree is called, any file older than this date will not be downloaded.</descrip>
            <links2>
                <link linkType="external" lang="perl">
                    <text>More information about using SYSTEMTIME in Perl</text>
                    <url>http://www.cknotes.com/?p=122</url>
                </link>
                <link linkType="external" lang="python">
                    <text>More information about using SYSTEMTIME in Python</text>
                    <url>http://www.cknotes.com/?p=374</url>
                </link>
            </links2>
            <args2>
                <arg name="oldestDateTime" type="date" objcName="oldestDateTime" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="SetOldestDateStr" axId="255">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>oldestDateTimeStr</argName>
                    <objcName>oldestDateTimeStr</objcName>
                </arg>
            </args>
            <descrip>Used in conjunction with the DownloadTree method.  Call this method prior to calling DownloadTree to set the oldest date for a file to be downloaded.  When DownloadTree is called, any file older than this date will not be downloaded.
&lt;p&gt;
The ARG1 should be a date/time string in RFC822 format, such as "Tue, 25 Sep 2012 12:25:32 -0500".</descrip>
            <args2>
                <arg name="oldestDateTimeStr" type="string" objcName="oldestDateTimeStr" />
            </args2>
            <links2 />
        </method>
        <method name="SetOption" ax="1" cpp="1" dn="1" status="1" axId="297">
            <gType>bool</gType>
            <descrip>This is a general purpose method to set miscellaneous options that might arise due to buggy or quirky FTP servers.  The ARG1 is a string describing the option.  The current  list of possible options are:
&lt;ul&gt;
&lt;li&gt;"Microsoft-TLS-1.2-Workaround" -- This is to force the data connection to use TLS 1.0 instead of the default.  It works around the Microsoft FTP server bug found here: https://support.microsoft.com/en-us/kb/2888853&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To turn off an option, prepend the string "No-".  For example "No-Microsoft-TLS-1.2-Workaround".   All options are turned off by default.</descrip>
            <args>
                <arg>
                    <argName>option</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>option</objcName>
                </arg>
            </args>
            <iversion>9.5.0.57</iversion>
            <args2>
                <arg name="option" type="string" objcName="option" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="SetRemoteFileDateTime" axId="256" deprecated="1" noxojo="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>date</axType>
                    <dnType>date</dnType>
                    <cppType>SYSTEMTIME &amp;</cppType>
                    <argName>dt</argName>
                    <objcName>dateTime</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilename</argName>
                    <objcName>remoteFilename</objcName>
                </arg>
            </args>
            <descrip>Sets the last-modified date/time of a file on the FTP server.  &lt;b&gt;Important:&lt;/b&gt; Not all FTP servers support this functionality.  Please see the information at the Chilkat blog below:</descrip>
            <links2>
                <link linkType="external">
                    <text>Setting FTP date/time not supported by all FTP servers.</text>
                    <url>http://www.cknotes.com/?p=153</url>
                </link>
                <link linkType="external" lang="perl">
                    <text>More information about using SYSTEMTIME in Perl</text>
                    <url>http://www.cknotes.com/?p=122</url>
                </link>
                <link linkType="external" lang="python">
                    <text>More information about using SYSTEMTIME in Python</text>
                    <url>http://www.cknotes.com/?p=374</url>
                </link>
            </links2>
            <args2>
                <arg name="dt" type="date" objcName="dateTime" />
                <arg name="remoteFilename" type="string" objcName="remoteFilename" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="SetRemoteFileDateTimeStr" axId="257">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dateTimeStr</argName>
                    <objcName>dateTimeStr</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilename</argName>
                    <objcName>remoteFilename</objcName>
                </arg>
            </args>
            <descrip>Sets the last-modified date/time of a file on the FTP server.  The ARG1 should be a date/time string in RFC822 format, such as "Tue, 25 Sep 2012 12:25:32 -0500".&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; Not all FTP servers support this functionality.  Please see the information at the Chilkat blog below:</descrip>
            <links2>
                <link linkType="external">
                    <text>Setting FTP date/time not supported by all FTP servers.</text>
                    <url>http://www.cknotes.com/?p=153</url>
                </link>
            </links2>
            <args2>
                <arg name="dateTimeStr" type="string" objcName="dateTimeStr" />
                <arg name="remoteFilename" type="string" objcName="remoteFilename" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="SetRemoteFileDt" axId="258">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>CkDateTime</axType>
                    <dnType>CkDateTime</dnType>
                    <cppType>CkDateTime &amp;</cppType>
                    <argName>dt</argName>
                    <objcName>dt</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilename</argName>
                    <objcName>remoteFilename</objcName>
                </arg>
            </args>
            <descrip>Sets the last-modified date/time of a file on the FTP server.  &lt;b&gt;Important:&lt;/b&gt; Not all FTP servers support this functionality.  Please see the information at the Chilkat blog below:</descrip>
            <links2>
                <link linkType="external">
                    <text>Setting FTP date/time not supported by all FTP servers.</text>
                    <url>http://www.cknotes.com/?p=153</url>
                </link>
                <link linkType="example">
                    <url>ftp_setRemoteFileDt.asp</url>
                    <text>FTP Set Remote File Date/Time Equal to Local File's Last-Modified Date/Time</text>
                </link>
            </links2>
            <args2>
                <arg name="dt" type="CkDateTime" objcName="dt" />
                <arg name="remoteFilename" type="string" objcName="remoteFilename" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="SetSslCertRequirement" axId="259">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>reqName</argName>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>reqValue</argName>
                    <objcName>value</objcName>
                </arg>
            </args>
            <descrip>Enforces a requirement on the FTP server's certificate.  The ARG1 can be "SubjectDN", "SubjectCN", "IssuerDN", or "IssuerCN".  The ARG1 specifies the part of the certificate, and the ARG2 is the value that it must match (exactly).  If the FTP server's certificate does not match, the SSL / TLS connection is aborted.</descrip>
            <args2>
                <arg name="reqName" type="string" objcName="name" />
                <arg name="reqValue" type="string" objcName="value" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetSslClientCert" axId="260">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <descrip>Allows for a client-side certificate to be used for the SSL / TLS connection.</descrip>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
            <links2 />
        </method>
        <method name="SetSslClientCertPem" axId="261" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pemDataOrFilename</argName>
                    <objcName>pemDataOrFilename</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pemPassword</argName>
                    <objcName>pemPassword</objcName>
                </arg>
            </args>
            <descrip>Allows for a client-side certificate to be used for the SSL / TLS connection.  If the PEM requires no password, pass an empty string in ARG2.   If the PEM is in a file, pass the path to the file in ARG1.  If the PEM is already loaded into a string variable, then pass the string containing the contents of the PEM in ARG1.</descrip>
            <links2>
                <link linkType="external">
                    <text>How to Create a PEM that Contains Certificates and a Private Key</text>
                    <url>http://www.chilkatforum.com/questions/356/how-to-use-a-client-side-certificate-and-private-key-for-an-ssltls-connection</url>
                </link>
            </links2>
            <args2>
                <arg name="pemDataOrFilename" type="string" objcName="pemDataOrFilename" />
                <arg name="pemPassword" type="string" objcName="pemPassword" />
            </args2>
        </method>
        <method name="SetSslClientCertPfx" axId="262" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pfxFilename</argName>
                    <objcName>pfxPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pfxPassword</argName>
                    <objcName>pfxPassword</objcName>
                </arg>
            </args>
            <descrip>Allows for a client-side certificate to be used for the SSL / TLS connection.</descrip>
            <args2>
                <arg name="pfxFilename" type="string" objcName="pfxPath" />
                <arg name="pfxPassword" type="string" objcName="pfxPassword" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="SetTypeAscii" axId="263">
            <gType>bool</gType>
            <args />
            <descrip>Set the FTP transfer mode to us-ascii.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="SetTypeBinary" axId="264">
            <gType>bool</gType>
            <args />
            <descrip>Set the FTP transfer mode to binary.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="Site" axId="265">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>siteCommand</argName>
                    <objcName>siteCommand</objcName>
                </arg>
            </args>
            <descrip>Sends an arbitrary "site" command to the FTP server.  The params argument should contain the parameters to the site command as they would appear on a command line.  For example: "recfm=fb lrecl=600".</descrip>
            <args2>
                <arg name="siteCommand" type="string" objcName="siteCommand" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="SleepMs" axId="266">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>millisec</argName>
                    <objcName>millisec</objcName>
                </arg>
            </args>
            <descrip>Causes the calling process to sleep for a number of milliseconds.</descrip>
            <args2>
                <arg name="millisec" type="int" objcName="millisec" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="Stat" axId="267" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Sends a STAT command to the FTP server and returns the server's reply.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="SyncDeleteRemote" axId="268" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localRoot</argName>
                    <objcName>localRoot</objcName>
                </arg>
            </args>
            <descrip>Delete remote files that do not exist locally.  The remote directory tree rooted at the current remote directory is traversed and remote files that have no corresponding local file are deleted.
&lt;p&gt;&lt;b&gt;Note: &lt;/b&gt;In v9.5.0.51 and higher, the list of deleted files is available in the SyncedFiles property.</descrip>
            <args2>
                <arg name="localRoot" type="string" objcName="localRoot" />
            </args2>
            <links2 />
        </method>
        <method name="SyncLocalDir" axId="269" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localRoot</argName>
                    <objcName>localRoot</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>mode</argName>
                    <objcName>mode</objcName>
                </arg>
            </args>
            <descrip>The same as SyncLocalTree, except the sub-directories are not traversed.  The files in the current remote directory are synchronized (downloaded) with the files in ARG1.  For possible ARG2 settings, see SyncLocalTree.
&lt;p&gt;&lt;b&gt;Note: &lt;/b&gt;In v9.5.0.51 and higher, the list of downloaded files is available in the SyncedFiles property.</descrip>
            <args2>
                <arg name="localRoot" type="string" objcName="localRoot" />
                <arg name="mode" type="int" objcName="mode" />
            </args2>
            <links2 />
        </method>
        <method name="SyncLocalTree" axId="270" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localRoot</argName>
                    <objcName>localRoot</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>mode</argName>
                    <objcName>mode</objcName>
                </arg>
            </args>
            <descrip>Downloads files from the FTP server to a local directory tree.  Synchronization modes include:&lt;p&gt;&lt;blockquote&gt;
mode=0: Download all files&lt;br&gt;
mode=1: Download all files that do not exist on the local filesystem.&lt;br&gt;
mode=2: Download newer or non-existant files.&lt;br&gt;
mode=3: Download only newer files.  If a file does not already exist on the local filesystem, it is not downloaded from the server.&lt;br&gt;
mode=5: Download only missing files or files with size differences.&lt;br&gt;
mode=6: Same as mode 5, but also download newer files.&lt;br&gt;
mode=99: Do not download files, but instead delete remote files that do not exist locally.&lt;br&gt;
* There is no mode #4.  It is a mode used internally by the DirTreeXml method.&lt;br&gt;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Note: &lt;/b&gt;In v9.5.0.51 and higher, the list of downloaded (or deleted) files is available in the SyncedFiles property.</descrip>
            <links2>
                <link linkType="example">
                    <text>Example: Synchronize Local Directory Tree</text>
                    <url>ftp_syncLocalTree.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="localRoot" type="string" objcName="localRoot" />
                <arg name="mode" type="int" objcName="mode" />
            </args2>
        </method>
        <method name="SyncRemoteTree" axId="271" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localRoot</argName>
                    <objcName>localRoot</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>mode</argName>
                    <objcName>mode</objcName>
                </arg>
            </args>
            <descrip>Uploads a directory tree from the local filesystem to the FTP server.  Synchronization modes include:&lt;p&gt;&lt;blockquote&gt;
mode=0: Upload all files&lt;br&gt;
mode=1: Upload all files that do not exist on the FTP server.&lt;br&gt;
mode=2: Upload newer or non-existant files.&lt;br&gt;
mode=3: Upload only newer files.  If a file does not already exist on the FTP server, it is not uploaded.&lt;br&gt;
mode=4: transfer missing files or files with size differences.&lt;br&gt;
mode=5: same as mode 4, but also newer files.
&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Note: &lt;/b&gt;In v9.5.0.51 and higher, the list of uploaded files is available in the SyncedFiles property.</descrip>
            <links2>
                <link linkType="example">
                    <text>Example: Synchronize Remote Directory Tree</text>
                    <url>ftp_syncRemoteTree.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="localRoot" type="string" objcName="localRoot" />
                <arg name="mode" type="int" objcName="mode" />
            </args2>
        </method>
        <method name="SyncRemoteTree2" axId="272" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localDirPath</argName>
                    <objcName>localRoot</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>mode</argName>
                    <objcName>mode</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bDescend</argName>
                    <objcName>bDescend</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bPreviewOnly</argName>
                    <objcName>bPreviewOnly</objcName>
                </arg>
            </args>
            <descrip>Same as SyncRemoteTree, except two extra arguments are added to allow for more flexibility.  If ARG3 is _FALSE_, then the directory tree is not descended and only the files in ARG1 are synchronized.  If ARG4 is _TRUE_ then no files are transferred and instead the files that would've been transferred (had ARG4 been set to _FALSE_) are listed in the SyncPreview property.  
&lt;p&gt;
Note: If ARG4 is set to _TRUE_, the remote directories (if they do not exist) are created.  It is only the files that are not uploaded.
&lt;p&gt;&lt;b&gt;Note: &lt;/b&gt;In v9.5.0.51 and higher, the list of uploaded files is available in the SyncedFiles property.</descrip>
            <links2>
                <link linkType="example">
                    <url>ftp_deleteLocalFiles.asp</url>
                    <text>Delete Local Files that Do Not Exist on the FTP Server</text>
                </link>
            </links2>
            <args2>
                <arg name="localDirPath" type="string" objcName="localRoot" />
                <arg name="mode" type="int" objcName="mode" />
                <arg name="bDescend" type="bool" objcName="bDescend" />
                <arg name="bPreviewOnly" type="bool" objcName="bPreviewOnly" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="Syst" axId="273" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Sends a SYST command to the FTP server to find out the type of operating
system at the server.  The method returns the FTP server's response string. Refer to RFC 959 for details.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="UnlockComponent" axId="274">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>unlockCode</argName>
                    <objcName>code</objcName>
                </arg>
            </args>
            <descrip>Unlocks the component. This must be called once prior to calling any other method.  A purchased unlock code for FTP2 should contain the substring "FTP", or can be a Bundle unlock code.</descrip>
            <args2>
                <arg name="unlockCode" type="string" objcName="code" />
            </args2>
            <links2>
                <link linkType="external">
                    <text>Diagnosing UnlockComponent Problems</text>
                    <url>http://www.cknotes.com/?p=168</url>
                </link>
                <link linkType="external">
                    <text>UnlockComponent LastErrorText shows exact string passed to it.</text>
                    <url>http://www.cknotes.com/?p=315</url>
                </link>
                <link linkType="external">
                    <text>Verify UnlockComponent Success w/ Permanent Unlock Code</text>
                    <url>http://www.cknotes.com/?p=317</url>
                </link>
                <link linkType="external">
                    <text>LastErrorText Standard Information</text>
                    <url>http://www.cknotes.com/?p=316</url>
                </link>
            </links2>
        </method>
        <method name="GetFileBd" axId="299" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Downloads a file from the FTP server into a BinData object.
&lt;p&gt;
If the ARG1 contains non-English characters, it may be necessary to set the DirListingCharset property equal to "utf-8".  Please refer to the documentation for the DirListingCharset property.</descrip>
            <args2>
                <arg name="remoteFilePath" type="string" objcName="remoteFilePath" />
                <arg name="binData" type="BinData" objcName="binData" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>ftp_getFileBd.asp</url>
                    <text>FTP Upload / Download to a BinData Object</text>
                </link>
            </links2>
            <iversion>9.5.0.62</iversion>
        </method>
        <method name="GetFileSb" axId="300" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Downloads a file from the FTP server into a StringBuilder object.
&lt;p&gt;
If the ARG1 contains non-English characters, it may be necessary to set the DirListingCharset property equal to "utf-8".  Please refer to the documentation for the DirListingCharset property.</descrip>
            <args2>
                <arg name="remoteFilePath" type="string" objcName="remoteFilePath" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="sb" type="StringBuilder" objcName="sb" />
            </args2>
            <iversion>9.5.0.62</iversion>
            <links2>
                <link linkType="example">
                    <url>ftp_getFileSb.asp</url>
                    <text>FTP Upload / Download to StringBuilder</text>
                </link>
            </links2>
        </method>
        <method name="PutFileBd" axId="301" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Uploads the contents of a BinData to a remote file.
&lt;p&gt;
If the ARG2 contains non-English characters, it may be necessary to set the DirListingCharset property equal to "utf-8".  Please refer to the documentation for the DirListingCharset property.</descrip>
            <args2>
                <arg name="binData" type="BinData" objcName="binData" />
                <arg name="remoteFilePath" type="string" objcName="remoteFilePath" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>ftp_getFileBd.asp</url>
                    <text>FTP Upload / Download to a BinData Object</text>
                </link>
            </links2>
            <iversion>9.5.0.62</iversion>
        </method>
        <method name="PutFileSb" axId="302" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Uploads the contents of a StringBuilder to a remote file.
&lt;p&gt;
If the ARG2 contains non-English characters, it may be necessary to set the DirListingCharset property equal to "utf-8".  Please refer to the documentation for the DirListingCharset property.</descrip>
            <args2>
                <arg name="sb" type="StringBuilder" objcName="sb" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="includeBom" type="bool" objcName="includeBom" />
                <arg name="remoteFilePath" type="string" objcName="remoteFilePath" />
            </args2>
            <iversion>9.5.0.62</iversion>
            <links2>
                <link linkType="example">
                    <url>ftp_getFileSb.asp</url>
                    <text>FTP Upload / Download to StringBuilder</text>
                </link>
            </links2>
        </method>
        <method name="GetFileToStream" axId="304" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="remoteFilePath" type="string" objcName="remoteFilePath" />
                <arg name="toStream" type="Stream" objcName="toStream" />
            </args2>
            <iversion>9.5.0.67</iversion>
            <links2>
                <link linkType="example" async="1">
                    <url>ftp_download_text_file_to_stream.asp</url>
                    <text>FTP Download Text File to a Stream</text>
                </link>
                <link linkType="example" async="1">
                    <url>ftp_download_binary_file_to_stream.asp</url>
                    <text>FTP Download Binary File to a Stream</text>
                </link>
            </links2>
            <descrip>Downloads a file to a stream.  If called synchronously, the ARG1 must have a sink, such as a file or another stream object.  If called asynchronously, then the foreground thread can read the stream.</descrip>
        </method>
    </methods>
    <genericName>Ftp2</genericName>
    <events>
        <standard name="AbortCheck" />
        <event name="BeginDownloadFile">
            <gType>event</gType>
            <dotNetArgsClass>FtpTreeEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>path</argName>
                    <objcName>path</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg out="1">
                    <argName>skip</argName>
                    <objcName>skip</objcName>
                    <axType>int</axType>
                    <dnType>bool</dnType>
                    <cppType>bool *</cppType>
                </arg>
            </args>
            <descrip>Called just before a file is to be downloaded.  
&lt;nonSwig&gt;The file can be skipped by setting the ARG2 output-only argument equal to _TRUE_.&lt;/nonSwig&gt;
&lt;swig&gt;Return _TRUE_ to skip this file; return _FALSE_ to not skip.&lt;/swig&gt;</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="skip" type="bool" objcName="skip" ref="1" />
            </args2>
            <links2 />
        </event>
        <event name="BeginUploadFile">
            <gType>event</gType>
            <dotNetArgsClass>FtpTreeEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>path</argName>
                    <objcName>path</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg out="1">
                    <argName>skip</argName>
                    <objcName>skip</objcName>
                    <axType>int</axType>
                    <dnType>bool</dnType>
                    <cppType>bool *</cppType>
                </arg>
            </args>
            <descrip>Called just prior to uploading a file.  
&lt;nonSwig&gt;The file can be skipped by setting the ARG2 output-only argument equal to _TRUE_.&lt;/nonSwig&gt;
&lt;swig&gt;Return _TRUE_ to skip this file; return _FALSE_ to not skip.&lt;/swig&gt;</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="skip" type="bool" objcName="skip" ref="1" />
            </args2>
            <links2 />
        </event>
        <standard name="BinaryData" />
        <event name="DownloadRate">
            <gType>event</gType>
            <dotNetArgsClass>DataRateEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>byteCount</argName>
                    <objcName>byteCount</objcName>
                    <axType>int</axType>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                </arg>
                <arg>
                    <argName>bytesPerSec</argName>
                    <objcName>bytesPerSec</objcName>
                    <axType>int</axType>
                    <dnType>unsigned long</dnType>
                    <cppType>unsigned long</cppType>
                </arg>
            </args>
            <descrip>Called periodically with download progress information:  The ARG1 is the cumulative number of bytes downloaded so far.  The ARG2 is the current transfer rate in bytes per second.</descrip>
            <args2>
                <arg name="byteCount" type="int64" objcName="byteCount" />
                <arg name="bytesPerSec" type="unsigned long" objcName="bytesPerSec" />
            </args2>
            <links2 />
        </event>
        <event name="EndDownloadFile">
            <gType>event</gType>
            <dotNetArgsClass>FtpTreeEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>path</argName>
                    <objcName>path</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg>
                    <argName>byteCount</argName>
                    <objcName>byteCount</objcName>
                    <axType>int</axType>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                </arg>
            </args>
            <descrip>Called just after a file download has completed.</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="byteCount" type="int64" objcName="byteCount" />
            </args2>
            <links2 />
        </event>
        <event name="EndUploadFile">
            <gType>event</gType>
            <dotNetArgsClass>FtpTreeEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>path</argName>
                    <objcName>path</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg>
                    <argName>byteCount</argName>
                    <objcName>byteCount</objcName>
                    <axType>int</axType>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                </arg>
            </args>
            <descrip>Called just after a file upload has completed.</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="byteCount" type="int64" objcName="byteCount" />
            </args2>
            <links2 />
        </event>
        <standard name="PercentDone" />
        <standard name="ProgressInfo" />
        <standard name="TaskCompleted" />
        <standard name="TextData" />
        <event name="UploadRate">
            <gType>event</gType>
            <dotNetArgsClass>DataRateEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>byteCount</argName>
                    <objcName>byteCount</objcName>
                    <axType>int</axType>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                </arg>
                <arg>
                    <argName>bytesPerSec</argName>
                    <objcName>bytesPerSec</objcName>
                    <axType>int</axType>
                    <dnType>unsigned long</dnType>
                    <cppType>unsigned long</cppType>
                </arg>
            </args>
            <descrip>Called periodically with upload progress information:  The ARG1 is the cumulative number of bytes uploaded so far.  The ARG2 is the current transfer rate in bytes per second.</descrip>
            <args2>
                <arg name="byteCount" type="int64" objcName="byteCount" />
                <arg name="bytesPerSec" type="unsigned long" objcName="bytesPerSec" />
            </args2>
            <links2 />
        </event>
        <event name="VerifyDeleteDir">
            <gType>event</gType>
            <dotNetArgsClass>FtpTreeEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>path</argName>
                    <objcName>path</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg out="1">
                    <argName>skip</argName>
                    <objcName>skip</objcName>
                    <axType>int</axType>
                    <dnType>bool</dnType>
                    <cppType>bool *</cppType>
                </arg>
            </args>
            <descrip>Fired just prior to recursively descending into a remote directory tree for deleting.  
&lt;nonSwig&gt;The subtree can be skipped by setting the ARG2 output-only argument equal to _TRUE_.&lt;/nonSwig&gt;
&lt;swig&gt;Return _TRUE_ to skip this file; return _FALSE_ to not skip.&lt;/swig&gt;</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="skip" type="bool" objcName="skip" ref="1" />
            </args2>
            <links2 />
        </event>
        <event name="VerifyDeleteFile">
            <gType>event</gType>
            <dotNetArgsClass>FtpTreeEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>path</argName>
                    <objcName>path</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg out="1">
                    <argName>skip</argName>
                    <objcName>skip</objcName>
                    <axType>int</axType>
                    <dnType>bool</dnType>
                    <cppType>bool *</cppType>
                </arg>
            </args>
            <descrip>Fired just prior to deleting a remote file.  
&lt;nonSwig&gt;The delete can be skipped by setting the ARG2 output-only argument equal to _TRUE_.&lt;/nonSwig&gt;
&lt;swig&gt;Return _TRUE_ to skip this file; return _FALSE_ to not skip.&lt;/swig&gt;</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="skip" type="bool" objcName="skip" ref="1" />
            </args2>
            <links2 />
        </event>
        <event name="VerifyDownloadDir">
            <gType>event</gType>
            <dotNetArgsClass>FtpTreeEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>path</argName>
                    <objcName>path</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg out="1">
                    <argName>skip</argName>
                    <objcName>skip</objcName>
                    <axType>int</axType>
                    <dnType>bool</dnType>
                    <cppType>bool *</cppType>
                </arg>
            </args>
            <descrip>Fired just prior to recursively descending into a directory tree for downloading.  
&lt;nonSwig&gt;The subtree can be skipped by setting the ARG2 output-only argument equal to _TRUE_.&lt;/nonSwig&gt;
&lt;swig&gt;Return _TRUE_ to skip this file; return _FALSE_ to not skip.&lt;/swig&gt;</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="skip" type="bool" objcName="skip" ref="1" />
            </args2>
            <links2 />
        </event>
        <event name="VerifyUploadDir">
            <gType>event</gType>
            <dotNetArgsClass>FtpTreeEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>path</argName>
                    <objcName>path</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg out="1">
                    <argName>skip</argName>
                    <objcName>skip</objcName>
                    <axType>int</axType>
                    <dnType>bool</dnType>
                    <cppType>bool *</cppType>
                </arg>
            </args>
            <descrip>Fired just prior to recursively descending into a directory tree for uploading.  
&lt;nonSwig&gt;The subtree can be skipped by setting the ARG2 output-only argument equal to _TRUE_.&lt;/nonSwig&gt;
&lt;swig&gt;Return _TRUE_ to skip this file; return _FALSE_ to not skip.&lt;/swig&gt;</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="skip" type="bool" objcName="skip" ref="1" />
            </args2>
            <links2 />
        </event>
    </events>
    <description>Commercial File Transfer Protocol (FTP) Component.</description>
    <clsid>32BD32D3-66EA-4EE6-A684-20CE86F757C1</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidEvents>D57DD27C-0065-41FA-ACB5-EBD8AB552A1E</uuidEvents>
    <uuidMidl>3A2BC588-F8E2-4BE3-A154-A3A99CF51E9F</uuidMidl>
    <nextAxId>307</nextAxId>
</class>
