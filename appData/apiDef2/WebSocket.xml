<?xml version="1.0" encoding="utf-8" ?>
<class sourceXmlPath="c:/ck2000/appData/apiDef2/WebSocket.xml" license="Bundle" hasEvents="1" baseProgress="1">
    <methods>
        <method name="UseConnection" read="1" write="1" axId="101" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Initializes the connection for a WebSocket session.  All WebSocket sessions begin with a call to UseConnection.  A Chilkat REST object is used for the connection because the WebSocket handshake begins with an HTTP GET request.  The Chilkat REST API provides the ability to add custom headers, authentication, etc. to the opening GET handshake.  It also provides the ability to establish connections over TLS or SSH and to benefit from the rich set of features already present relating to  HTTP proxies, SOCKS proxies, bandwidth throttling, IPv6, socket options, etc.</descrip>
            <args2>
                <arg name="connection" type="Rest" objcName="connection" />
            </args2>
            <iversion>9.5.0.70</iversion>
            <links2>
                <link linkType="example">
                    <url>websocket_connect.asp</url>
                    <text>WebSocket Connect</text>
                </link>
                <link linkType="example">
                    <url>websocket_tls.asp</url>
                    <text>WebSocket over TLS</text>
                </link>
                <link linkType="example">
                    <url>websocket_sshtunnel.asp</url>
                    <text>WebSocket through SSH Tunnel</text>
                </link>
            </links2>
        </method>
        <method name="AddClientHeaders" axId="105" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args2 />
            <iversion>9.5.0.70</iversion>
            <links2>
                <link linkType="example">
                    <url>websocket_connect.asp</url>
                    <text>WebSocket Connect</text>
                </link>
            </links2>
            <descrip>Adds the required WebSocket client-side open handshake headers.  The headers specifically added to the previously specified REST object (in the call to UseConnection) are:
&lt;pre&gt;
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: ...
Sec-WebSocket-Version: 13
&lt;/pre&gt;</descrip>
        </method>
        <method name="ValidateServerHandshake" axId="106" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args2 />
            <iversion>9.5.0.70</iversion>
            <links2>
                <link linkType="example">
                    <url>websocket_connect.asp</url>
                    <text>WebSocket Connect</text>
                </link>
            </links2>
            <descrip>Called after sending the opening handshake from the Rest object.   Validates the server's response to the opening handshake message.  If validation is successful, the application may begin sending and receiving data and control frames.</descrip>
        </method>
        <method name="SendFrame" axId="108" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="stringToSend" type="string" objcName="stringToSend" />
                <arg name="finalFrame" type="bool" objcName="finalFrame" />
            </args2>
            <iversion>9.5.0.70</iversion>
            <links2>
                <link linkType="example">
                    <url>websocket_send_receive_frames.asp</url>
                    <text>Send and Receive WebSocket Frame</text>
                </link>
                <link linkType="example">
                    <url>websocket_send_receive_messages.asp</url>
                    <text>Send and Receive WebSocket Messages</text>
                </link>
            </links2>
            <descrip>Sends a single data frame containing a string.   If this is the final frame in a message, then ARG2 should be set to _TRUE_. Otherwise set ARG2 equal to _FALSE_.</descrip>
        </method>
        <method name="ReadFrame" read="1" write="1" axId="111" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>websocket_send_receive_frames.asp</url>
                    <text>Send and Receive WebSocket Frame</text>
                </link>
                <link linkType="example">
                    <url>websocket_send_receive_messages.asp</url>
                    <text>Send and Receive WebSocket Messages</text>
                </link>
            </links2>
            <descrip>Reads a single frame from the connected websocket.  If a frame was successfuly received, then the following properties are set:  FrameOpcode, FrameDataLen, FinalFrame, and the received frame data can be retrieved by calling GetFrameData, GetFrameDataSb, or GetFrameDataBd.</descrip>
            <iversion>9.5.0.70</iversion>
        </method>
        <method name="GetFrameData" read="1" axId="115" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2 />
            <iversion>9.5.0.70</iversion>
            <links2 />
            <descrip>Returns the accumulated received frame data as a string.  Calling GetFrameData clears the internal receive buffer.</descrip>
        </method>
        <method name="GetFrameDataBd" axId="116" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Returns the accumulated received frame data in a BinData object.   The received data is appended to the ARG1.
&lt;p&gt;Calling this method clears the internal receive buffer.</descrip>
            <args2>
                <arg name="binData" type="BinData" objcName="binData" />
            </args2>
            <iversion>9.5.0.70</iversion>
            <links2>
                <link linkType="example">
                    <url>websocket_binary.asp</url>
                    <text>WebSocket Send/Receive Binary Data</text>
                </link>
            </links2>
        </method>
        <method name="GetFrameDataSb" axId="117" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Returns the accumulated received frame data in a StringBuilder object.   The received data is appended to the ARG1.
&lt;p&gt;Calling this method clears the internal receive buffer.</descrip>
            <args2>
                <arg name="sb" type="StringBuilder" objcName="sb" />
            </args2>
            <iversion>9.5.0.70</iversion>
            <links2 />
        </method>
        <method name="SendFrameSb" axId="118" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Sends a single data frame containing a string (the contents of ARG1).   If this is the final frame in a message, then ARG2 should be set to _TRUE_. Otherwise set ARG2 equal to _FALSE_.</descrip>
            <args2>
                <arg name="sbToSend" type="StringBuilder" objcName="sbToSend" />
                <arg name="finalFrame" type="bool" objcName="finalFrame" />
            </args2>
            <iversion>9.5.0.70</iversion>
            <links2 />
        </method>
        <method name="SendFrameBd" axId="119" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Sends a single data frame containing binary data (the contents of ARG1).   If this is the final frame in a message, then ARG2 should be set to _TRUE_. Otherwise set ARG2 equal to _FALSE_.</descrip>
            <args2>
                <arg name="bdToSend" type="BinData" objcName="bdToSend" />
                <arg name="finalFrame" type="bool" objcName="finalFrame" />
            </args2>
            <iversion>9.5.0.70</iversion>
            <links2>
                <link linkType="example">
                    <url>websocket_binary.asp</url>
                    <text>WebSocket Send/Receive Binary Data</text>
                </link>
            </links2>
        </method>
        <method name="PollDataAvailable" axId="121" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <args2 />
            <links2 />
            <descrip>Check to see if data is available for reading on the websocket.  Returns _TRUE_ if data is waiting and _FALSE_ if no data is waiting to be read.</descrip>
            <iversion>9.5.0.70</iversion>
        </method>
        <method name="SendPing" axId="128" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Sends a Ping control frame, optionally including text data.   If ARG1 is non-empty, the utf-8 representation of the string must be 125 bytes or less.  Chilkat will automatically truncate the ARG1 to 125 bytes if necessary.</descrip>
            <args2>
                <arg name="pingData" type="string" objcName="pingData" />
            </args2>
            <iversion>9.5.0.70</iversion>
            <links2>
                <link linkType="example">
                    <url>websocket_ping.asp</url>
                    <text>Send a WebSocket Ping Control Frame</text>
                </link>
            </links2>
        </method>
        <method name="SendPong" axId="129" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Sends a Pong control frame.  If this Pong frame is sent to satisfy an unresponded-to Ping frame, then the previously received Ping data is automatically sent in this Pong frame.</descrip>
            <args2 />
            <iversion>9.5.0.70</iversion>
            <links2 />
        </method>
        <method name="SendClose" axId="130" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Sends a Close control frame.   If ARG1 is _TRUE_, then the ARG2 is sent in the application data part of the Close frame.  A Close ARG3 may be provided only if ARG1 is _TRUE_.   If this Close was sent to satisfy an already-received Close frame, then the underlying connection will also automatically be closed.
&lt;p&gt;
Note: If a status code and reason are provided, the utf-8 representation of the reason string must be 123 bytes or less.  Chilkat will automatically truncate the ARG3 to 123 bytes if necessary.  Also, the status code must be an integer in the range 0 to 16383.
&lt;p&gt;
The WebSocket protocol specifies some pre-defined status codes at &lt;a href="https://tools.ietf.org/html/rfc6455#section-7.4.1"&gt;WebSocket Status Codes&lt;/a&gt;.  For a normal closure, a status code value of 1000 should be used.  The reason can be any string, as long as it is 123 bytes or less.</descrip>
            <args2>
                <arg name="includeStatus" type="bool" objcName="includeStatus" />
                <arg name="statusCode" type="int" objcName="statusCode" />
                <arg name="reason" type="string" objcName="reason" />
            </args2>
            <iversion>9.5.0.70</iversion>
            <links2 />
        </method>
        <method name="CloseConnection" axId="131" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args2 />
            <iversion>9.5.0.70</iversion>
            <links2 />
            <descrip>Forcibly closes the underlying connection.  This is a non-clean way to close the connection, but may be used if needed.  The clean way to close a websocket is to send a Close frame, and then receive the Close response.</descrip>
        </method>
    </methods>
    <properties>
        <property name="IdleTimeoutMs" axId="107" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <args2 />
            <links2 />
            <descrip>The maximum amount of time to wait for additional incoming data when receiving, or the max time to wait to send additional data.   The default value  is 30000 (30 seconds).  This is not an overall max timeout.  Rather, it is the maximum time to wait when receiving or sending has halted.</descrip>
        </property>
        <property name="FrameOpcode" axId="112" read="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2 />
            <links2 />
            <iversion>9.5.0.70</iversion>
            <descrip>Indicates the type of frame received in the last call to ReadFrame.  Possible values are "Continuation", "Text", "Binary", "Close", "Ping", or "Pong".  Initially this property is set to the empty string because nothing has yet been received.</descrip>
        </property>
        <property name="FrameDataLen" axId="113" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <args2 />
            <iversion>9.5.0.70</iversion>
            <links2 />
            <descrip>The number of bytes accumulated from one or more calls to ReadFrame.  Accumulated incoming frame data can be retrieved by calling GetFrameData, GetFrameDataSb, or GetFrameDataBd.</descrip>
        </property>
        <property name="FinalFrame" axId="114" read="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <args2 />
            <iversion>9.5.0.70</iversion>
            <links2 />
            <descrip>_TRUE_ if the last data frame received by calling ReadFrame was a final frame.  Otherwise _FALSE_.</descrip>
        </property>
        <property name="IsConnected" axId="120" read="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <args2 />
            <iversion>9.5.0.70</iversion>
            <links2 />
            <descrip>Returns _TRUE_ if the websocket is connected.  Otherwise returns _FALSE_.</descrip>
        </property>
        <property name="CloseAutoRespond" axId="122" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <args2 />
            <iversion>9.5.0.70</iversion>
            <links2 />
            <descrip>If _TRUE_, then a Close control frame is automatically sent in response to receiving a Close control frame (assuming that we did not initiate the Close in the first place).   When the Close frame has both been received and sent, the underlying connection is automatically closed (as per the WebSocket protocol RFC specifications).  Thus, if this property is _TRUE_, then two things automatically happen when a Close frame is received: (1) a Close frame is sent in response, and (2) the connection is closed.
&lt;p&gt;
The default value of this property is _TRUE_.</descrip>
        </property>
        <property name="PingAutoRespond" axId="123" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If _TRUE_, then a Pong frame is automatically sent when a Ping frame is received.  If set to _FALSE_, then the application may check the NeedSendPong property to determine if a Pong response is needed, and if so, may call the SendPong method to send a Pong.
&lt;p&gt;
Note: If this property is _TRUE_, then the ReadFrame method will auto-consume incoming Ping frames.  In other words, ReadFrame will continue with reading the next incoming frame (thus Ping frames will never be returned to the application).  This relieves the application from having to worry about receiving and handling spurious Ping frames.
&lt;p&gt;
The default value is _TRUE_.</descrip>
            <args2 />
            <iversion>9.5.0.70</iversion>
            <links2 />
        </property>
        <property name="NeedSendPong" axId="124" read="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If _TRUE_, then a Ping frame was received, but no Pong frame has yet been sent in response.  The application should send a Pong frame by calling SendPong as soon as possible.</descrip>
            <args2 />
            <iversion>9.5.0.70</iversion>
            <links2 />
        </property>
        <property name="CloseReceived" axId="125" read="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If _TRUE_, then a Close frame was already received on this websocket connection.   If CloseAutoRespond is _FALSE_, then an application can check this property value to determine if a Close frame should be sent in response.</descrip>
            <args2 />
            <iversion>9.5.0.70</iversion>
            <links2 />
        </property>
        <property name="CloseStatusCode" axId="126" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <args2 />
            <iversion>9.5.0.70</iversion>
            <links2 />
            <descrip>The status code received with the Close frame.  If no status code was provided, or no Close frame has yet been received, then this property will be 0.</descrip>
        </property>
        <property name="CloseReason" axId="127" read="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The reason string received with the Close frame, if any.</descrip>
            <args2 />
            <iversion>9.5.0.70</iversion>
            <links2 />
        </property>
        <property name="PongAutoConsume" axId="132" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If _TRUE_, then incoming Pong frames are automatically consumed, and a call to ReadFrame  will continue reading until it receives a non-Pong frame.  The PongConsumed property can be checked to see if the last ReadFrame method call auto-consumed a Pong frame.
&lt;p&gt;
The default value is _TRUE_.</descrip>
            <args2 />
            <iversion>9.5.0.70</iversion>
            <links2 />
        </property>
        <property name="PongConsumed" axId="133" read="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Is _TRUE_ if the last call to ReadFrame  auto-consumed a Pong frame.  This property is reset to _FALSE_ each time a ReadFrame method is called, and will get set to _TRUE_ if (1) the PongAutoConsume property is _TRUE_ and (2) a Pong frame was consumed within the ReadFrame method.  
&lt;p&gt;
The purpose of PongAutoConsume and PongConsumed is to eliminate the concern for unanticipated Pong frames in the stream.  In the websocket protocol, both sides (client and server) may send Pong frames at any time.  In addition, if a Ping frame is sent, the corresponding Pong response frame can arrive at some unanticipated point later in the conversation.  It's also possible, if several Ping frames are sent, that a Pong response frame is only sent for the most recent Ping frame.  The default behavior of Chilkat's WebSocket API is to auto-consume incoming Pong frames and set this property to _TRUE_.  This allows the application to call a ReadFrame method for whatever application data frame it may be expecting, without needing to be concerned if the next incoming frame is a Pong frame.</descrip>
            <args2 />
            <iversion>9.5.0.70</iversion>
            <links2 />
        </property>
        <property name="ReadFrameFailReason" axId="134" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <args2 />
            <iversion>9.5.0.70</iversion>
            <links2 />
            <descrip>If the ReadFrame method returns _FALSE_, this property holds the fail reason.  It can have one of the following values:
&lt;pre&gt;
0 - No failure.
1 - Read Timeout.
2 - Aborted by Application Callback.
3 - Fatal Socket Error (Lost Connection).
4 - Received invalid WebSocket frame bytes.
99 - A catch-all for any unknown failure.  (Should not ever occur.  If it does, contact Chilkat.)
&lt;/pre&gt;</descrip>
        </property>
        <property name="FrameOpcodeInt" axId="135" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>The integer value of the opcode (type of frame) received in the last call to ReadFrame.  Possible values are:
&lt;pre&gt;
0 - Continuation
1 - Text
2 - Binary
8 - Close
9 - Ping
10 - Pong
&lt;/pre&gt;</descrip>
            <args2 />
            <iversion>9.5.0.70</iversion>
            <links2 />
        </property>
    </properties>
    <events />
    <genericName>WebSocket</genericName>
    <cppName>CkWebSocket</cppName>
    <dnName>WebSocket</dnName>
    <axName>ChilkatWebSocket</axName>
    <description>Provides an API for implementing  the client side of the WebSocket protocol.</description>
    <nextAxId>136</nextAxId>
    <clsid>5968F990-ECED-40C1-B461-C0C8540BF607</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidEvents>796E2012-849B-4AF5-B795-90D49F851325</uuidEvents>
    <uuidMidl>01A80A1C-F3CB-4837-B577-2C67E275D441</uuidMidl>
</class>
