<?xml version="1.0" encoding="utf-8" ?>
<class sourceXmlPath="c:/ck2000/appData/apiDef2/Jwe.xml" license="Bundle">
    <methods>
        <method name="SetProtectedHeader" axId="101" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="json" type="JsonObject" objcName="json" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>jwe_rsaes_oaep_aes_gcm.asp</url>
                    <text>JWE using RSAES-OAEP and AES GCM</text>
                </link>
                <link linkType="example">
                    <url>jwe_deflate_compression.asp</url>
                    <text>JWE with DEFLATE Compression</text>
                </link>
            </links2>
            <iversion>9.5.0.66</iversion>
            <descrip>Sets the JWE Protected Header.</descrip>
        </method>
        <method name="SetUnprotectedHeader" axId="102" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Sets the JWE Shared Unprotected Header.</descrip>
            <args2>
                <arg name="json" type="JsonObject" objcName="json" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2 />
        </method>
        <method name="SetRecipientHeader" axId="103" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Sets a per-recipient unprotected header.  This method would only be called if the JWE is for multiple recipients.   The 1st recipient is at index 0.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="json" type="JsonObject" objcName="json" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2 />
        </method>
        <method name="SetPrivateKey" axId="104" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="privKey" type="PrivateKey" objcName="privKey" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>jwe_rsaes_oaep_aes_gcm.asp</url>
                    <text>JWE using RSAES-OAEP and AES GCM</text>
                </link>
            </links2>
            <descrip>Sets a private key for RSA key unwrapping/decryption.  This is for the case where the content encryption key (CEK) is encrypted using RSA.  An RSA private key should be used for decrypting in the cases where the "alg" header parameter value is equal to one of the following:
&lt;pre&gt;
RSA1_5
RSA-OAEP
RSA-OAEP-256
RSA-OAEP-384  (added in Chilkat v9.5.0.71)
RSA-OAEP-512  (added in Chilkat v9.5.0.71)
&lt;/pre&gt;
The ARG1 is the index of the recipient, where the 1st recipient is at index 0.  (The typical use case for JWEs is for a single recipient.)</descrip>
        </method>
        <method name="SetPublicKey" axId="105" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Sets a public key for RSA key wrapping encryption.  This is for the case where the content encryption key (CEK) is encrypted using RSA.  An RSA public key should be used when encrypting for the cases where the "alg" header parameter value is equal to one of the following:
&lt;pre&gt;
RSA1_5
RSA-OAEP
RSA-OAEP-256
&lt;/pre&gt;
The ARG1 is the index of the recipient, where the 1st recipient is at index 0.  (The typical use case for JWEs is for a single recipient.)</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="pubKey" type="PublicKey" objcName="pubKey" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>jwe_rsaes_oaep_aes_gcm.asp</url>
                    <text>JWE using RSAES-OAEP and AES GCM</text>
                </link>
            </links2>
        </method>
        <method name="SetWrappingKey" axId="106" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Sets the AES wrapping key for encryption or decryption.  This is for the case where the content encryption key (CEK) is encrypted using AES Key Wrap or AES GCM.  An AES key should be used  in the cases where the "alg" header parameter value is equal to one of the following:
&lt;pre&gt;
A128KW
A192KW
A256KW
A128GCMKW
A192GCMKW
A256GCMKW
dir
&lt;/pre&gt;
The ARG1 is the index of the recipient, where the 1st recipient is at index 0.  (The typical use case for JWEs is for a single recipient.)
&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method also sets the shared direct symmetric key for the case when the "alg" is equal to "dir".   In this case, the key specified is not actualy a key encryption key, but is the direct content encryption key.
&lt;p&gt;The ARG3 indicates the representation, such as "base64", "hex", "base64url", etc. of the ARG2.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="encodedKey" type="string" objcName="encodedKey" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>jwe_aes_key_wrap.asp</url>
                    <text>JWE using AES Key Wrap and AES_128_CBC_HMAC_SHA_256</text>
                </link>
            </links2>
        </method>
        <method name="SetPassword" axId="107" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Sets the PBES2 password for key encryption or decryption.  This is for the case where the content encryption key (CEK) is encrypted using PBES2.  An PBES2 password should be used  in the cases where the "alg" header parameter value is equal to one of the following:
&lt;pre&gt;
PBES2-HS256+A128KW
PBES2-HS384+A192KW
PBES2-HS512+A256KW
&lt;/pre&gt;
The ARG1 is the index of the recipient, where the 1st recipient is at index 0.  (The typical use case for JWEs is for a single recipient.)</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="password" type="string" objcName="password" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2 />
        </method>
        <method name="Encrypt" axId="108" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2>
                <arg name="content" type="string" objcName="content" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>jwe_rsaes_oaep_aes_gcm.asp</url>
                    <text>JWE using RSAES-OAEP and AES GCM</text>
                </link>
                <link linkType="example">
                    <url>jwe_rsaes_pkcs15_aes_cbc_hmac_sha256.asp</url>
                    <text>JWE using RSAES-PKCS1-v1_5 and AES_128_CBC_HMAC_SHA_256</text>
                </link>
                <link linkType="example">
                    <url>jwe_general_json_serialization.asp</url>
                    <text>JWE Using General JWE JSON Serialization</text>
                </link>
            </links2>
            <descrip>Encrypts string content to produce a JWE.  The byte representation of the ARG1 is indicated by ARG2 (such as "utf-8").
&lt;p&gt;
&lt;b&gt;Supported Algorithms:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;RSAES OAEP 256 (using SHA-256 and MGF1 with SHA-256) encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM
&lt;li&gt;RSAES OAEP (using SHA-1 and MGF1 with SHA-1) encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM
&lt;li&gt;RSAES-PKCS1-V1_5 encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM
&lt;li&gt;Direct symmetric key encryption with pre-shared key A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM and A256GCM
&lt;li&gt;A128KW, A192KW, A256KW encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM
&lt;li&gt;A128GCMKW, A192GCMKW, A256GCMKW encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM
&lt;li&gt;PBES2-HS256+A128KW, PBES2-HS384+A192KW, PBES2-HS512+A256KW with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM
&lt;/ul&gt;</descrip>
        </method>
        <method name="EncryptSb" axId="109" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Encrypts the contents of ARG1 to produce a JWE that is appended to the contents of ARG3.  The byte representation of the string to be encrypted is indicated by ARG2 (such as "utf-8").</descrip>
            <args2>
                <arg name="contentSb" type="StringBuilder" objcName="contentSb" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="jweSb" type="StringBuilder" objcName="jweSb" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>jwe_deflate_compression.asp</url>
                    <text>JWE with DEFLATE Compression</text>
                </link>
            </links2>
        </method>
        <method name="EncryptBd" axId="110" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Encrypts the contents of ARG1 to produce a JWE that is appended to the contents of ARG2.   (This method provides the means to produce a JWE from binary content.)</descrip>
            <args2>
                <arg name="contentBd" type="BinData" objcName="contentBd" />
                <arg name="jweSb" type="StringBuilder" objcName="jweSb" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>jwe_binary_data.asp</url>
                    <text>JWE with Binary Data</text>
                </link>
            </links2>
        </method>
        <method name="Decrypt" axId="111" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Decrypts a JWE and returns the original (decrypted) string content.  The byte representation of the decrypted bytes is indicated by ARG2 (such as "utf-8").  (The ARG2 tells Chilkat how to intepret the decrypted bytes as characters.)
&lt;p&gt;
The ARG1 specifies which recipient key is used for decryption.  (Most JWEs have only a single recipent, and thus the ARG1 is typically 0.)
&lt;p&gt;
&lt;b&gt;Supported Algorithms:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;RSAES OAEP 256 (using SHA-256 and MGF1 with SHA-256) encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM
&lt;li&gt;RSAES OAEP (using SHA-1 and MGF1 with SHA-1) encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM
&lt;li&gt;RSAES-PKCS1-V1_5 encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM
&lt;li&gt;Direct symmetric key encryption with pre-shared key A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM and A256GCM
&lt;li&gt;A128KW, A192KW, A256KW encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM
&lt;li&gt;A128GCMKW, A192GCMKW, A256GCMKW encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM
&lt;li&gt;PBES2-HS256+A128KW, PBES2-HS384+A192KW, PBES2-HS512+A256KW with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM
&lt;/ul&gt;</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>jwe_rsaes_oaep_aes_gcm.asp</url>
                    <text>JWE using RSAES-OAEP and AES GCM</text>
                </link>
                <link linkType="example">
                    <url>jwe_pbes2.asp</url>
                    <text>JWE using PBES2 Key Wrapping</text>
                </link>
            </links2>
        </method>
        <method name="DecryptSb" axId="112" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Decrypts the loaded JWE and appends the decrypted content to ARG3.  The byte representation of the decrypted bytes is indicated by ARG2 (such as "utf-8").  (This tells Chilkat how to interpret the bytes as characters.)
&lt;p&gt;
The ARG1 specifies which recipient key is used for decryption.  (Most JWEs have only a single recipent, and thus the ARG1 is typically 0.)</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="contentSb" type="StringBuilder" objcName="contentSb" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>jwe_deflate_compression.asp</url>
                    <text>JWE with DEFLATE Compression</text>
                </link>
            </links2>
        </method>
        <method name="DecryptBd" axId="113" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Decrypts the loaded JWE and appends the decrypted bytes to the contents of ARG2.   The ARG1 specifies which recipient key is used for decryption.  (Most JWEs have only a single recipent, and thus the ARG1 is typically 0.)</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="bd" type="BinData" objcName="bd" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>jwe_binary_data.asp</url>
                    <text>JWE with Binary Data</text>
                </link>
            </links2>
        </method>
        <method name="LoadJwe" axId="114" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="jwe" type="string" objcName="jwe" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>jwe_rsaes_oaep_aes_gcm.asp</url>
                    <text>JWE using RSAES-OAEP and AES GCM</text>
                </link>
            </links2>
            <descrip>Loads the contents of a JWE.</descrip>
        </method>
        <method name="LoadJweSb" axId="115" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Loads the contents of a JWE from a StringBuilder object.</descrip>
            <args2>
                <arg name="sb" type="StringBuilder" objcName="sb" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>jwe_rsaes_oaep_aes_gcm.asp</url>
                    <text>JWE using RSAES-OAEP and AES GCM</text>
                </link>
            </links2>
        </method>
        <method name="SetAad" axId="117" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Sets the optional Additional Authenticated Data.  This is only used for non-compact serializations.  The ARG2 specifies the character encoding (such as "utf-8") to be used for the byte representation for the additional authenticated data.</descrip>
            <args2>
                <arg name="aad" type="string" objcName="aad" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2 />
        </method>
        <method name="SetAadBd" axId="118" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Sets the optional Additional Authenticated Data.  This is only used for non-compact serializations.  This method provides a way for binary (non-text) additional authenticated data to be used.</descrip>
            <args2>
                <arg name="aad" type="BinData" objcName="aad" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2 />
        </method>
        <method name="FindRecipient" axId="121" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>Finds the index of the recipient with a header parameter (ARG1) equal to a specified value (ARG2).   Returns -1 if no recipient contains a header with the given name/value.   If ARG3 is _TRUE_, then the header param name/value comparisons are case sensitive.  Otherwise it is case insensitive.
&lt;p&gt;
The procedure for decrypting a JWE with multiple recipients is the following:
&lt;ol&gt;
&lt;li&gt;Load the JWE via one of the Load* methods.
&lt;li&gt;Find the recipient index by some identifying header paramter.  The typical case is via the "kid" header parameter. ("kid" is an arbitrary key ID applications can assign to identify keys.)
&lt;li&gt;Set the key for decryption at the found index by calling SetPrivateKey, SetWrappingKey, or SetPassword, depending on the type of key wrapping that is employed.
&lt;li&gt;Call Decrypt, DecryptSb, or DecryptBd to decrypt for the recipient (and key) at the given index.
&lt;/ol&gt;</descrip>
            <args2>
                <arg name="paramName" type="string" objcName="paramName" />
                <arg name="paramValue" type="string" objcName="paramValue" />
                <arg name="caseSensitive" type="bool" objcName="caseSensitive" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>jwe_general_json_serialization.asp</url>
                    <text>JWE Using General JWE JSON Serialization</text>
                </link>
            </links2>
        </method>
    </methods>
    <properties>
        <property name="NumRecipients" axId="116" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <args2 />
            <iversion>9.5.0.66</iversion>
            <links2 />
            <descrip>The number of recipients for this JWE.</descrip>
        </property>
        <property name="PreferCompact" axId="119" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Controls whether  the JWE Compact Serialization or JWE JSON Serialization is preferred when creating JWEs.  The default value is _TRUE_, which is to use compact serialization when possible.  If multiple recipients exist, or if any unprotected headers exist, then JWE JSON Serialization is used regardless of this property setting.</descrip>
            <args2 />
            <iversion>9.5.0.66</iversion>
            <links2 />
        </property>
        <property name="PreferFlattened" axId="120" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Controls whether  the flattened serialization is preferred when JWE JSON Serialization is used.  The default value is _TRUE_, which is to use the flattened serialization when possible.  If multiple recipients exist, then the general (non-flattened) JWE JSON Serialization is used regardless of this property setting.</descrip>
            <args2 />
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>jwe_flattened_serialization.asp</url>
                    <text>JWE Using Flattened JWE JSON Serialization</text>
                </link>
            </links2>
        </property>
    </properties>
    <events />
    <genericName>Jwe</genericName>
    <cppName>CkJwe</cppName>
    <dnName>Jwe</dnName>
    <axName>ChilkatJwe</axName>
    <description>An API for JSON Web Encryption (JWE).  Provides the ability to create (encrypt) and decrypt JWE's.&lt;p&gt;
&lt;b&gt;Supported Algorithms:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;RSAES OAEP 256 (using SHA-256 and MGF1 with SHA-256) encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM
&lt;li&gt;RSAES OAEP (using SHA-1 and MGF1 with SHA-1) encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM
&lt;li&gt;RSAES-PKCS1-V1_5 encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM
&lt;li&gt;Direct symmetric key encryption with pre-shared key A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM and A256GCM
&lt;li&gt;A128KW, A192KW, A256KW encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM
&lt;li&gt;A128GCMKW, A192GCMKW, A256GCMKW encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM
&lt;li&gt;PBES2-HS256+A128KW, PBES2-HS384+A192KW, PBES2-HS512+A256KW with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM
&lt;/ul&gt;</description>
    <nextAxId>122</nextAxId>
    <clsid>FF4DF009-0001-41ED-BABB-5B4967515601</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidMidl>C7309141-CCF2-45D0-A672-FFB26648B94F</uuidMidl>
</class>
