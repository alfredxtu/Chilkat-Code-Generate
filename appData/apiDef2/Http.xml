<?xml version="1.0" encoding="utf-8" ?>
<class XojoModuleId="185062996" sourceXmlPath="c:/ck2000/appData/apiDef2/Http.xml" license="Http" hasEvents="1">
    <axName>ChilkatHttp</axName>
    <dnName>Http</dnName>
    <cppName>CkHttp</cppName>
    <properties>
        <property name="AbortCurrent" read="1" write="1" ax="1" cpp="1" dn="1" axId="277">
            <gType>bool</gType>
            <descrip>When set to _TRUE_, causes the currently running method to abort.  Methods that always finish quickly (i.e.have no length file operations or network communications) are not affected.  If no method is running, then this property is automatically reset to _FALSE_ when the next method is called.  When the abort occurs, this property is reset to _FALSE_.  Both synchronous and asynchronous method calls can be aborted.  (A synchronous method call could be aborted by setting this property from a separate thread.)</descrip>
            <iversion>9.5.0.58</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="Accept" axId="100" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The Accept header field to be automatically included with GET requests issued by QuickGet or QuickGetStr. The default value is "*/*".</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="AcceptCharset" axId="101">
            <gType>string</gType>
            <descrip>The AcceptCharset header field to be automatically included with GET requests issued by QuickGet or QuickGetStr. The default value is "ISO-8859-1,utf-8;q=0.7,*;q=0.7".</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="AcceptLanguage" axId="102">
            <gType>string</gType>
            <descrip>The AcceptLanguage header field to be automatically included with GET requests issued by QuickGet or QuickGetStr. The default value is "en-us,en;q=0.5".</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AllowGzip" axId="103" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Controls whether the "Accept-Encoding: gzip" header is added to HTTP requests sent via any method that sends an HTTP request without using the HttpRequest object (such as QuickGetStr).  If _FALSE_, then the empty Accept-Encoding header is added which means the server response should contain the uncompressed content.  The default value is _TRUE_, which means the server, if it chooses, may send a gzipped response.</descrip>
            <args2 />
            <links2 />
        </property>
        <property read="1" write="1" name="AutoAddHostHeader" axId="104" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If set to true, the "Host" header field will automatically be added to the request header for any QuickGet or QuickGetStr method calls.  The value of the Host header field is taken from the hostname part of the URL passed to QuickGet/QuickGetStr.</descrip>
            <args2 />
            <links2 />
        </property>
        <property read="1" write="1" name="AwsAccessKey" axId="105" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The AWS Access Key to be used with the Amazon S3 methods listed below.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AwsEndpoint" axId="106" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The regional endpoint (domain) to be used for Amazon S3 method calls.  The default value is "s3.amazonaws.com".  This can be set to any valid Amazon S3 endpoint, such as "s3-eu-west-1.amazonaws.com", or the endpoints for S3-API compatible services from other different providers.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AwsRegion" read="1" write="1" ax="1" cpp="1" dn="1" axId="276">
            <gType>string</gType>
            <descrip>The AWS (S3) region, such as "us-east-1", "us-west-2", "eu-west-1", "eu-central-1", etc.  This propery defaults to "us-east-1".  It is only used when the AwsSignatureVersion property is set to 4.  When the AwsSignatureVersion property is set to 2, then this property is unused.</descrip>
            <iversion>9.5.0.56</iversion>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="AwsSecretKey" axId="107">
            <gType>string</gType>
            <descrip>The AWS Secret Key to be used with the Amazon S3 methods listed below.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AwsSignatureVersion" read="1" write="1" ax="1" cpp="1" dn="1" axId="275">
            <gType>int</gType>
            <descrip>Selects the AWS Signature Version algorithm.  The default value is 2.  May be set to 4 to select AWS Signature Version 4.</descrip>
            <iversion>9.5.0.56</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="AwsSubResources" axId="108" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The AWS sub-resources to be used with the Amazon S3 methods listed below.
&lt;p&gt;
If the S3 request needs to address a sub-resource, like ?versioning, ?policy, ?location, ?acl, or ?torrent, or ?versionid append the sub-resource and its value if it has one. Note that in case of multiple sub-resources, sub-resources must be lexicographically sorted by sub-resource name and separated by '&amp;'. e.g. "acl&amp;versionId=value"
&lt;p&gt;
The list of sub-resources that can be included are: acl, location, logging, notification, partNumber, policy, requestPayment, torrent, uploadId, uploads, versionId, versioning, versions and website.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="BandwidthThrottleDown" read="1" write="1" ax="1" cpp="1" dn="1" noWinRT="1" axId="266">
            <gType>int</gType>
            <descrip>If non-zero, limits (throttles) the download bandwidth to approximately this maximum number of bytes per second.  The default value of this property is 0.</descrip>
            <iversion>9.5.0.49</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="BandwidthThrottleUp" read="1" write="1" ax="1" cpp="1" dn="1" noWinRT="1" axId="265">
            <gType>int</gType>
            <descrip>If non-zero, limits (throttles) the upload bandwidth to approximately this maximum number of bytes per second.  The default value of this property is 0.</descrip>
            <iversion>9.5.0.49</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="BasicAuth" axId="252" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If HTTP basic authentication is needed, this property must be set to _TRUE_.  The HTTP protocol allows for several different types of authentication schemes, such as NTLM, Digest, OAuth1, etc.  A given server will support (or allow) certain authentication schemes (also known as authentication methods).   Except for the "Basic" authentication method, the other forms of authentication do not involve sending the login and password in plain unencrypted text over the connection.  The Basic authentication method is insecure in that it sends the login/password for all to see. If the connection is SSL/TLS, then this might be considered OK.  Chilkat takes the safe approach and will not allow Basic authentication unless this property has been explicitly set to _TRUE_.  The default value of this property is _FALSE_.
&lt;p&gt;Note: It is not required to know the authentication methods accepted by the server beforehand (except for the case of Basic authentication).  When authentication is required, Chilkat will first send the request without the Authorization header, receive back the 401 Authorization Required response along with information about what authentication methods are accepted, and then re-send with an accepted authentication method.  If the authentication method is known in advance, then an application may set the appropriate property, such as NtlmAuth to _TRUE_ so that the extra (internal) round-trip is not required.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="BgLastErrorText" axId="109" read="1" ax="1" cpp="1" dn="1" deprecated="1" noWinRT="1" noxojo="1">
            <gType>string</gType>
            <descrip>When a background-enabled method is run asynchronously in a background thread, the last-error information is saved here and not in the LastErrorText property. If the background method fails, this will contain information about what transpired. (This property also contains information when the background method succeeds.)
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="BgPercentDone" axId="110" read="1" ax="1" cpp="1" dn="1" deprecated="1" noWinRT="1" noxojo="1">
            <gType>int</gType>
            <descrip>The integer percent completed for a background HTTP method call.  The value will be between 0 and 100 while a background method call is in progress.  Otherwise, the value is meaningless.    The BgPercentDone only applies in cases where it is possible to track completion by a percentage.  If an HTTP response is chunked, then there is no way of knowing how much response data is forthcoming, and therefore it is not possible to track the percentage completed.
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="BgResultData" axId="111" read="1" ax="1" cpp="1" dn="1" deprecated="1" noWinRT="1" noxojo="1">
            <gType>bytes</gType>
            <descrip>If a backgrounded method returns a byte array, the returned data is found here.
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="BgResultInt" axId="112" read="1" ax="1" cpp="1" dn="1" deprecated="1" noWinRT="1" noxojo="1">
            <gType>int</gType>
            <descrip>If a backgrounded method returns an integer, the return value is found here.
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="BgResultString" axId="113" read="1" ax="1" cpp="1" dn="1" deprecated="1" noWinRT="1" noxojo="1">
            <gType>string</gType>
            <descrip>If a backgrounded method returns a string, the return value is found here.
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="BgTaskFinished" axId="114" read="1" ax="1" cpp="1" dn="1" deprecated="1" noWinRT="1" noxojo="1">
            <gType>bool</gType>
            <descrip>Becomes _TRUE_ when the background method completes. Your application would periodically check for this condition.
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="BgTaskRunning" axId="115" read="1" ax="1" cpp="1" dn="1" deprecated="1" noWinRT="1" noxojo="1">
            <gType>bool</gType>
            <descrip>If _TRUE_ then the object instance already has a backgrounded method running. Another backgrounded method cannot be started until the 1st completes. (Multiple simultaneous background methods may run by using multiple object instances.)
&lt;p&gt;
If _FALSE_, then no method is currently running in a background thread.
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="BgTaskSuccess" axId="116" read="1" ax="1" cpp="1" dn="1" deprecated="1" noWinRT="1" noxojo="1">
            <gType>bool</gType>
            <descrip>This property's value is only meaningful (_TRUE_ or _FALSE_) after a backgrounded method completes.
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ClientIpAddress" axId="117">
            <gType>string</gType>
            <descrip>The IP address to use for computers with multiple network interfaces or IP addresses.
For computers with a single network interface (i.e. most computers), this property should not be set.  For multihoming computers, the default IP address is automatically used if this property is not set.&lt;p&gt;
The IP address is a string such as in dotted notation using numbers, not domain names, such as "165.164.55.124".</descrip>
            <links>
                <link>
                    <text>Important Bind to Adapter Notes for Windows</text>
                    <url>http://www.cknotes.com/?p=376</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>Important Bind to Adapter Notes for Windows</text>
                    <url>http://www.cknotes.com/?p=376</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="ConnectFailReason" axId="274" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>This property will be set to the status of the last HTTP connection made (or failed to be made) by any HTTP method.
&lt;p&gt;
Possible values are:
&lt;pre&gt;
0 = success

Normal (non-TLS) sockets:
1 = empty hostname
2 = DNS lookup failed
3 = DNS timeout
4 = Aborted by application.
5 = Internal failure.
6 = Connect Timed Out
7 = Connect Rejected (or failed for some other reason)
50 = HTTP proxy authentication failure.
98 = Async operation in progress.
99 = Product is not unlocked.

SSL/TLS:
100 = TLS internal error.
101 = Failed to send client hello.
102 = Unexpected handshake message.
103 = Failed to read server hello.
104 = No server certificate.
105 = Unexpected TLS protocol version.
106 = Server certificate verify failed (the server certificate is expired or the cert's signature verification failed).
107 = Unacceptable TLS protocol version.
109 = Failed to read handshake messages.
110 = Failed to send client certificate handshake message.
111 = Failed to send client key exchange handshake message.
112 = Client certificate's private key not accessible.
113 = Failed to send client cert verify handshake message.
114 = Failed to send change cipher spec handshake message.
115 = Failed to send finished handshake message.
116 = Server's Finished message is invalid.
&lt;/pre&gt;</descrip>
            <iversion>9.5.0.56</iversion>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ConnectTimeout" axId="118">
            <gType>int</gType>
            <descrip>The amount of time in seconds to wait before timing out when connecting to an HTTP server.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Connection" axId="119">
            <gType>string</gType>
            <descrip>The Connection header field to be automatically included with GET requests issued by QuickGet or QuickGetStr. The default value is "Keep-Alive".  To prevent the Connection header from being added to the HTTP header, set this property to the empty string.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="CookieDir" axId="120" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Specifies a directory where cookies are automatically persisted if the Http.SaveCookies property is turned on.  Cookies are stored in XML formatted files, one per domain, to main it easy for other programs to understand and parse.   May be set to the string "memory" to cache cookies in memory.</descrip>
            <links>
                <link>
                    <text>Saving Cookies to XML Files</text>
                    <url_asp>http://www.example-code.com/asp/saving_http_cookies.asp</url_asp>
                    <url_cs>http://www.example-code.com/csharp/saving_http_cookies.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/saving_http_cookies.asp</url_cpp>
                    <url_delphi>http://www.example-code.com/delphi/saving_http_cookies.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/saving_http_cookies.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/saving_http_cookies.asp</url_java>
                    <url_perl>http://www.example-code.com/perl/saving_http_cookies.asp</url_perl>
                    <url_python>http://www.example-code.com/python/saving_http_cookies.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/saving_http_cookies.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/saving_http_cookies.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/saving_http_cookies.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/saving_http_cookies.asp</url_vbscript>
                    <url_php>http://www.example-code.com/php/saving_http_cookies.asp</url_php>
                </link>
                <link>
                    <text>Caching cookies in-memory.</text>
                    <url_asp>http://www.example-code.com/asp/http_memory_cookies.asp</url_asp>
                    <url_sql>http://www.example-code.com/sql/http_memory_cookies.asp</url_sql>
                    <url_cs>http://www.example-code.com/csharp/http_memory_cookies.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/http_memory_cookies.asp</url_cpp>
                    <url_objc>http://www.example-code.com/objc/http_memory_cookies.asp</url_objc>
                    <url_ios>http://www.example-code.com/ios/http_memory_cookies.asp</url_ios>
                    <url_powershell>http://www.example-code.com/powershell/http_memory_cookies.asp</url_powershell>
                    <url_mfc>http://www.example-code.com/mfc/http_memory_cookies.asp</url_mfc>
                    <url_c>http://www.example-code.com/C/http_memory_cookies.asp</url_c>
                    <url_delphi>http://www.example-code.com/delphi/http_memory_cookies.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/http_memory_cookies.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/http_memory_cookies.asp</url_java>
                    <url_android>http://www.example-code.com/android/http_memory_cookies.asp</url_android>
                    <url_perl>http://www.example-code.com/perl/http_memory_cookies.asp</url_perl>
                    <url_php>http://www.example-code.com/php/http_memory_cookies.asp</url_php>
                    <url_phpext>http://www.example-code.com/phpExt/http_memory_cookies.asp</url_phpext>
                    <url_python>http://www.example-code.com/python/http_memory_cookies.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/http_memory_cookies.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/http_memory_cookies.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/http_memory_cookies.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/http_memory_cookies.asp</url_vbscript>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>Saving Cookies to XML Files</text>
                    <url>saving_http_cookies.asp</url>
                </link>
                <link linkType="example">
                    <text>Caching cookies in-memory.</text>
                    <url>http_memory_cookies.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="DefaultFreshPeriod" axId="121">
            <gType>int</gType>
            <descrip>The default freshness period (in minutes) for cached documents when the FreshnessAlgorithm property is set to 0.  The default value is 10080 (1 week).</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="DigestAuth" axId="122">
            <gType>bool</gType>
            <descrip>Setting this property to _TRUE_ causes the HTTP component to use digest authentication.  The default value is _FALSE_.</descrip>
            <links>
                <link>
                    <text>HTTP Authentication (Basic, NTLM, Digest, Negotiate/Kerberos)</text>
                    <url_asp>http://www.example-code.com/asp/http_authentication.asp</url_asp>
                    <url_sql>http://www.example-code.com/sql/http_authentication.asp</url_sql>
                    <url_cs>http://www.example-code.com/csharp/http_authentication.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/http_authentication.asp</url_cpp>
                    <url_objc>http://www.example-code.com/objc/http_authentication.asp</url_objc>
                    <url_ios>http://www.example-code.com/ios/http_authentication.asp</url_ios>
                    <url_powershell>http://www.example-code.com/powershell/http_authentication.asp</url_powershell>
                    <url_mfc>http://www.example-code.com/mfc/http_authentication.asp</url_mfc>
                    <url_c>http://www.example-code.com/C/http_authentication.asp</url_c>
                    <url_delphi>http://www.example-code.com/delphi/http_authentication.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/http_authentication.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/http_authentication.asp</url_java>
                    <url_android>http://www.example-code.com/android/http_authentication.asp</url_android>
                    <url_perl>http://www.example-code.com/perl/http_authentication.asp</url_perl>
                    <url_php>http://www.example-code.com/php/http_authentication.asp</url_php>
                    <url_phpext>http://www.example-code.com/phpExt/http_authentication.asp</url_phpext>
                    <url_python>http://www.example-code.com/python/http_authentication.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/http_authentication.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/http_authentication.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/http_authentication.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/http_authentication.asp</url_vbscript>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>HTTP Authentication (Basic, NTLM, Digest, Negotiate/Kerberos)</text>
                    <url>http_authentication.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="EventLogCount" axId="123" read="1" ax="1" cpp="1" dn="1" deprecated="1" noWinRT="1" noxojo="1">
            <gType>int</gType>
            <descrip>If the KeepEventLog property is set to _TRUE_, then this property will contain the number of events that have accumulated in the in-memory event log.  The events are indexed from 0 to EventLogCount-1.  The ClearEventLog method may be called to clear the event log.  The name and value of each event can be retrieved via the EventLogName and EventLogValue methods.
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="FetchFromCache" axId="124">
            <gType>bool</gType>
            <descrip>Set to true if pages should be fetched from cache when possible.  Only HTTP GET requests are cached.   HTTP responses that include Set-Cookie headers are not cached.  A page is fetched from the disk cache if it is present and it is "fresh" according to the FreshnessAlgorithm property.  If a page exists in cache but is not fresh, the HTTP component will issue a revalidate request and update the cache appropriately according to the response.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="FinalRedirectUrl" axId="125" read="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>If an HTTP GET was redirected (as indicated by the WasRedirected property), this property will contain the final redirect URL, assuming the FollowRedirects property is _TRUE_.
&lt;p&gt;Note: Starting in v9.5.0.49, this property will contain the redirect URL for 301/302 responses even if FollowRedirects is not set to _TRUE_.</descrip>
            <links>
                <link>
                    <text>Tracing HTTP Redirects</text>
                    <url_asp>http://www.example-code.com/asp/http_traceRedirects.asp</url_asp>
                    <url_sql>http://www.example-code.com/sql/http_traceRedirects.asp</url_sql>
                    <url_cs>http://www.example-code.com/csharp/http_traceRedirects.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/http_traceRedirects.asp</url_cpp>
                    <url_mfc>http://www.example-code.com/mfc/http_traceRedirects.asp</url_mfc>
                    <url_c>http://www.example-code.com/C/http_traceRedirects.asp</url_c>
                    <url_delphi>http://www.example-code.com/delphi/http_traceRedirects.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/http_traceRedirects.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/http_traceRedirects.asp</url_java>
                    <url_perl>http://www.example-code.com/perl/http_traceRedirects.asp</url_perl>
                    <url_php>http://www.example-code.com/php/http_traceRedirects.asp</url_php>
                    <url_python>http://www.example-code.com/python/http_traceRedirects.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/http_traceRedirects.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/http_traceRedirects.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/http_traceRedirects.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/http_traceRedirects.asp</url_vbscript>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>Tracing HTTP Redirects</text>
                    <url>http_traceRedirects.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="FollowRedirects" axId="126" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If true, then 301, 302, 303, and 307 redirects are automatically followed when calling QuickGet and QuickGetStr.  FollowRedirects is true by default.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="FreshnessAlgorithm" axId="127">
            <gType>int</gType>
            <descrip>The freshness algorithm to use when determining the freshness of a cached HTTP GET response.  A value of 1 causes an LM-factor algorithm to be used.  This is the default.  The LMFactor property is a value between 1 and 100 indicating the percentage of time based on the last-modified date of the HTML page.  For example, if the LMFactor is 50, and an HTML page was modified 10 days ago, then the page will expire (i.e. no longer be fresh) in 5 days (50% of 10 days).  This only applies to HTTP responses that do not have page expiration information.  If the FreshnessAlgorithm = 0, then a constant expire time period determined by the DefaultFreshPeriod property is used.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="HeartbeatMs" axId="128" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>This property is only valid in programming environment and languages that allow for event callbacks.
&lt;p&gt;Specifies the time interval in milliseconds between AbortCheck events.  A value of 0 (the default) indicate that no AbortCheck events will fire. Any HTTP operation can be aborted via the AbortCheck event.</descrip>
            <links>
                <link>
                    <text>HeartbeatMs and the AbortCheck Event</text>
                    <url_cs>http://www.cknotes.com/?p=149</url_cs>
                    <url_vb.net>http://www.cknotes.com/?p=149</url_vb.net>
                </link>
            </links>
            <links2>
                <link linkType="external" lang="csharp">
                    <text>HeartbeatMs and the AbortCheck Event</text>
                    <url>http://www.cknotes.com/?p=149</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="IgnoreMustRevalidate" axId="129">
            <gType>bool</gType>
            <descrip>Some HTTP responses contain a "Cache-Control: must-revalidate" header.  If this is present, the server is requesting that the client always issue a revalidate HTTP request instead of serving the page directly from cache.  If IgnoreMustRevalidate is set to _TRUE_, then Chilkat HTTP will serve the page directly from cache without revalidating until the page is no longer fresh.
&lt;p&gt;The default value of this property is _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="IgnoreNoCache" axId="130">
            <gType>bool</gType>
            <descrip>Some HTTP responses contain headers of various types that indicate that the page should not be cached.  Chilkat HTTP will adhere to this unless this property is set to _TRUE_.
&lt;p&gt;The default value of this property is _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="KeepEventLog" axId="131" read="1" write="1" ax="1" cpp="1" dn="1" deprecated="1" noWinRT="1" noxojo="1">
            <gType>bool</gType>
            <descrip>If _TRUE_, an in-memory event log is kept for any method that communicates with an HTTP server (such as Download, PostUrlEncoded, QuickGetStr, SynchronousRequest, etc.).   When HTTP methods are called asynchronously, the event log can be checked while the HTTP operation is in in progress.  This is done by examining the EventLogCount property and then fetching each event's name and value via the EventLogName and EventLogValue methods.  See this example:  &lt;a href="http://www.cknotes.com/?p=271"&gt;Asynchronous HTTP&lt;/a&gt;.&lt;p&gt;
The ClearBgEventLog method may be called to clear the in-memory event log.
&lt;p&gt;
&lt;b&gt;Important&lt;/b&gt;: If event logging  is enabled, make sure to clear the event log after each HTTP method call.  Otherwise the log will continue to grow without bounds.  
&lt;p&gt;
The default value of this property is _FALSE_.
&lt;p&gt;
The following items may be found in the event log:&lt;div id=reftab&gt;
&lt;table&gt;
&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Value&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SocketConnect&lt;/td&gt;&lt;td&gt;hostname:port, called when initiating a connection.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SocketConnected&lt;/td&gt;&lt;td&gt;hostname:port, called after successfully connected.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;HttpProxyConnect&lt;/td&gt;&lt;td&gt;hostname:port&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SslHandshake &lt;/td&gt;&lt;td&gt;"Starting"/"Finished"&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;HttpGetBegin&lt;/td&gt;&lt;td&gt;URL&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;HttpCacheHit&lt;/td&gt;&lt;td&gt;"Returning page from cache."&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;HttpInfo&lt;/td&gt;&lt;td&gt;various conditions...&lt;br&gt;
	"Begin reading response"    -- called when beginning to read the response.&lt;br&gt;
	"Finished reading response"&lt;br&gt;
	"Existing connection with HTTP server no longer open, restarting GET with new connection."&lt;br&gt;
	"Reading chunked response."&lt;br&gt;
	"UnGzipping response data"&lt;br&gt;
	"Connection:close header is present"&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GetRequest&lt;/td&gt;&lt;td&gt;the full HTTP GET request to be sent to the server.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ResponseHeader&lt;/td&gt;&lt;td&gt;the header of the HTTP response.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;HttpStatusCode&lt;/td&gt;&lt;td&gt;HTTP response status code (integer)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ChunkSize&lt;/td&gt;&lt;td&gt;Size (in bytes) of next chunk in response.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ResponseContentLength&lt;/td&gt;&lt;td&gt;Non-chunked response size in bytes.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;UnGzippedLength&lt;/td&gt;&lt;td&gt;If the response was gzip compressed, this is the uncompressed size.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;HostnameResolve&lt;/td&gt;&lt;td&gt;hostname, Called when starting to resolve a hostname (to an IP address)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ResolvedToIp&lt;/td&gt;&lt;td&gt;dotted IP address, called after hostname is resolved.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;HttpAuth&lt;/td&gt;&lt;td&gt;one of the following strings:&lt;br&gt;
	    "Starting Negotiate Authentication"&lt;br&gt;
	    "Starting NTLM Authentication"&lt;br&gt;
	    "Adding Basic Authentication Header"&lt;br&gt;
	    "Adding Proxy Authentication Header"&lt;br&gt;
	    "Starting Proxy NTLM Authentication"&lt;br&gt;
	    "Starting Digest Authentication"&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CookieToSend&lt;/td&gt;&lt;td&gt;Value of a Set-Cookie header field to be added to the outgoing request.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SavingCookie&lt;/td&gt;&lt;td&gt; XML of cookie being persisted.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;HttpRedirect&lt;/td&gt;&lt;td&gt;Redirect URL&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Socks4Connect&lt;/td&gt;&lt;td&gt;domain:port&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Socks5Connect&lt;/td&gt;&lt;td&gt;domain:port&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;HttpRequestBegin&lt;/td&gt;&lt;td&gt;Verb (such as POST, GET, PUT), domain:port/path&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;RequestHeader&lt;/td&gt;&lt;td&gt;The full HTTP request header to be sent.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;StartSendingRequest&lt;/td&gt;&lt;td&gt;Size of entire request, including header, in number of bytes. (Not called for QuickGet)
	For uploads, this is the size of the entire upload (headers and all files combined)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SubPartHeader&lt;/td&gt;&lt;td&gt;The header for one of the parts within a multipart request.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;UploadFilename&lt;/td&gt;&lt;td&gt;The file about to be uploaded (streamed from file to socket..)&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="KeepResponseBody" read="1" write="1" ax="1" cpp="1" dn="1" axId="272">
            <gType>bool</gType>
            <descrip>If _TRUE_, then the response body, if text, is saved to the LastResponseBody property for all methods that do not return an HttpResponse object.  The default value of this property is _FALSE_.</descrip>
            <iversion>9.5.0.55</iversion>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="LMFactor" axId="132">
            <gType>int</gType>
            <descrip>An integer between 1 and 100 that indicates the percentage of time from the HTTP page's last-modified date that will be used for the freshness period.  The default value is 25.  For example, if a page is fetched with a last-modified date of 4 weeks ago, and the LMFactor = 25, then the page will be considered fresh in the cache for 1 week (25% of 4 weeks).</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="LastContentType" axId="133">
            <gType>string</gType>
            <descrip>The content-type of the last HTTP response received by the HTTP component.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="LastHeader" axId="134">
            <gType>string</gType>
            <descrip>The text of the last HTTP header sent by any of this class's methods.  The purpose of this property is to allow the developer to examine the exact HTTP header for debugging purposes.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="LastModDate" axId="135">
            <gType>string</gType>
            <descrip>The value of the Last-Modified header in the last HTTP response received by the HTTP component.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="LastResponseBody" axId="271" read="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The response body of the last HTTP response received by the HTTP component (for methods that do not return an HttpResponse object).  The last response body is only saved to this property IF the KeepResponseBody property is set to _TRUE_.</descrip>
            <iversion>9.5.0.55</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="LastResponseHeader" axId="136" read="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The entire response header for the last HTTP response received by the HTTP component (for methods that do not return an HttpResponse object).</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="LastStatus" axId="137">
            <gType>int</gType>
            <descrip>The last HTTP status value received by the HTTP component.  This only applies to methods that do not return an HTTP response object.  For methods that return an HTTP response object, such as SynchronousRequest, the status code is found in the StatusCode property of the response object.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="Login" axId="138" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The HTTP login for pages requiring a login/password.  Chilkat HTTP can do Basic, Digest, and NTLM HTTP authentication.  (NTLM is also known as SPA (or Windows Integrated Authentication).  To use Basic authentication, the BasicAuth property must be set equal to _TRUE_.   It is not necessary to set the NtlmAuth or DigestAuth  properties beforehand if NTLM or Digest authentication is needed.  However, it is most efficient to pre-set these properties when the type of authentication is known in advance.</descrip>
            <links>
                <link>
                    <text>HTTP Authentication (Basic, NTLM, Digest, Negotiate/Kerberos)</text>
                    <url_asp>http://www.example-code.com/asp/http_authentication.asp</url_asp>
                    <url_sql>http://www.example-code.com/sql/http_authentication.asp</url_sql>
                    <url_cs>http://www.example-code.com/csharp/http_authentication.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/http_authentication.asp</url_cpp>
                    <url_objc>http://www.example-code.com/objc/http_authentication.asp</url_objc>
                    <url_ios>http://www.example-code.com/ios/http_authentication.asp</url_ios>
                    <url_powershell>http://www.example-code.com/powershell/http_authentication.asp</url_powershell>
                    <url_mfc>http://www.example-code.com/mfc/http_authentication.asp</url_mfc>
                    <url_c>http://www.example-code.com/C/http_authentication.asp</url_c>
                    <url_delphi>http://www.example-code.com/delphi/http_authentication.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/http_authentication.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/http_authentication.asp</url_java>
                    <url_android>http://www.example-code.com/android/http_authentication.asp</url_android>
                    <url_perl>http://www.example-code.com/perl/http_authentication.asp</url_perl>
                    <url_php>http://www.example-code.com/php/http_authentication.asp</url_php>
                    <url_phpext>http://www.example-code.com/phpExt/http_authentication.asp</url_phpext>
                    <url_python>http://www.example-code.com/python/http_authentication.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/http_authentication.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/http_authentication.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/http_authentication.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/http_authentication.asp</url_vbscript>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>HTTP Authentication (Basic, NTLM, Digest, Negotiate/Kerberos)</text>
                    <url>http_authentication.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="LoginDomain" axId="139">
            <gType>string</gType>
            <descrip>The optional domain name to be used with NTLM / Kerberos / Negotiate authentication.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="MaxConnections" axId="140">
            <gType>int</gType>
            <descrip>The maximum number of simultaneous open HTTP connections managed by the HTTP component.  The Chilkat HTTP component automatically manages HTTP connections.  If the number of open HTTP connections is about to be exceeded, the connection with the least recent activity is automatically closed.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="MaxFreshPeriod" axId="141">
            <gType>int</gType>
            <descrip>Limits the amount of time a document can be kept "fresh" in the cache.  The MaxFreshPeriod is specified in minutes, and the default value is 525600 which is equal to 1 year.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="MaxResponseSize" axId="142">
            <gType>unsigned long</gType>
            <descrip>The maximum HTTP response size to be accepted by the calling program.  A value of 0 (the default) indicates that there is no maximum value.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="MaxUrlLen" axId="143">
            <gType>int</gType>
            <descrip>The Http class will automatically fail any URL longer than this length.  The default MaxUrlLen is 800 characters.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="MimicFireFox" axId="144">
            <gType>bool</gType>
            <descrip>If set to _TRUE_, then the appropriate headers to mimic Mozilla/FireFox are automatically added to requests sent via the QuickGet and QuickGetStr methods.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="MimicIE" axId="145">
            <gType>bool</gType>
            <descrip>If set to _TRUE_, then the appropriate headers to mimic Internet Explorer are automatically added to requests sent via the QuickGet and QuickGetStr methods.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="MinFreshPeriod" axId="146">
            <gType>int</gType>
            <descrip>The freshness period for a document in cache will not be less than this value (in minutes).  The default value is 30.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="NegotiateAuth" axId="147">
            <gType>bool</gType>
            <descrip>Set this property equal to _TRUE_ for Negotiate authentication.  Negotiate authentication will dynamically select Kerberos or NTLM authentication depending on what the server requires.
&lt;p&gt;
Note: The NegotiateAuth property is only available for the Microsoft Windows operating system.</descrip>
            <links>
                <link>
                    <text>HTTP Authentication (Basic, NTLM, Digest, Negotiate/Kerberos)</text>
                    <url_asp>http://www.example-code.com/asp/http_authentication.asp</url_asp>
                    <url_sql>http://www.example-code.com/sql/http_authentication.asp</url_sql>
                    <url_cs>http://www.example-code.com/csharp/http_authentication.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/http_authentication.asp</url_cpp>
                    <url_objc>http://www.example-code.com/objc/http_authentication.asp</url_objc>
                    <url_ios>http://www.example-code.com/ios/http_authentication.asp</url_ios>
                    <url_powershell>http://www.example-code.com/powershell/http_authentication.asp</url_powershell>
                    <url_mfc>http://www.example-code.com/mfc/http_authentication.asp</url_mfc>
                    <url_c>http://www.example-code.com/C/http_authentication.asp</url_c>
                    <url_delphi>http://www.example-code.com/delphi/http_authentication.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/http_authentication.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/http_authentication.asp</url_java>
                    <url_android>http://www.example-code.com/android/http_authentication.asp</url_android>
                    <url_perl>http://www.example-code.com/perl/http_authentication.asp</url_perl>
                    <url_php>http://www.example-code.com/php/http_authentication.asp</url_php>
                    <url_phpext>http://www.example-code.com/phpExt/http_authentication.asp</url_phpext>
                    <url_python>http://www.example-code.com/python/http_authentication.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/http_authentication.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/http_authentication.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/http_authentication.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/http_authentication.asp</url_vbscript>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>HTTP Authentication (Basic, NTLM, Digest, Negotiate/Kerberos)</text>
                    <url>http_authentication.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="NtlmAuth" axId="148">
            <gType>bool</gType>
            <descrip>Setting this property to _TRUE_ causes the HTTP component to use NTLM authentication (also known as IWA -- or Integrated Windows Authentication) when authentication with an HTTP server.  The default value is _FALSE_.</descrip>
            <links>
                <link>
                    <text>HTTP Authentication (Basic, NTLM, Digest, Negotiate/Kerberos)</text>
                    <url_asp>http://www.example-code.com/asp/http_authentication.asp</url_asp>
                    <url_sql>http://www.example-code.com/sql/http_authentication.asp</url_sql>
                    <url_cs>http://www.example-code.com/csharp/http_authentication.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/http_authentication.asp</url_cpp>
                    <url_objc>http://www.example-code.com/objc/http_authentication.asp</url_objc>
                    <url_ios>http://www.example-code.com/ios/http_authentication.asp</url_ios>
                    <url_powershell>http://www.example-code.com/powershell/http_authentication.asp</url_powershell>
                    <url_mfc>http://www.example-code.com/mfc/http_authentication.asp</url_mfc>
                    <url_c>http://www.example-code.com/C/http_authentication.asp</url_c>
                    <url_delphi>http://www.example-code.com/delphi/http_authentication.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/http_authentication.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/http_authentication.asp</url_java>
                    <url_android>http://www.example-code.com/android/http_authentication.asp</url_android>
                    <url_perl>http://www.example-code.com/perl/http_authentication.asp</url_perl>
                    <url_php>http://www.example-code.com/php/http_authentication.asp</url_php>
                    <url_phpext>http://www.example-code.com/phpExt/http_authentication.asp</url_phpext>
                    <url_python>http://www.example-code.com/python/http_authentication.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/http_authentication.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/http_authentication.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/http_authentication.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/http_authentication.asp</url_vbscript>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>HTTP Authentication (Basic, NTLM, Digest, Negotiate/Kerberos)</text>
                    <url>http_authentication.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="NumCacheLevels" axId="149">
            <gType>int</gType>
            <descrip>The number of directory levels to be used under each cache root.  The default is 0, meaning that each cached HTML page is stored in a cache root directory.  A value of 1 causes each cached page to be stored in one of 255 subdirectories named "0","1", "2", ..."255"  under a cache root.  A value of 2 causes two levels of subdirectories ("0..255/0..255") under each cache root.  The HTTP control automatically creates subdirectories as needed.  The reason for mutliple levels is to alleviate problems that may arise with unrelated software when huge numbers of files are stored in a single directory.  For example, Windows Explorer does not behave well when trying to display the contents of directories with thousands of files.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="NumCacheRoots" axId="150">
            <gType>int</gType>
            <descrip>The number of cache roots to be used for the HTTP cache.  This allows the disk cache spread out over multiple disk drives.  Each cache root is a string indicating the drive letter and directory path.  For example, "E:\Cache".  An example of a very large low-cost cache might be four USB external drives.  To create a cache with four roots, call AddCacheRoot once for each directory root.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="OAuth1" axId="151" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If _TRUE_ then causes an OAuth Authorization header to be added to any request sent by the HTTP object.  For example:
&lt;pre&gt;
Authorization: OAuth realm="http://sp.example.com/",
                oauth_consumer_key="0685bd9184jfhq22",
                oauth_token="ad180jjd733klru7",
                oauth_signature_method="HMAC-SHA1",
                oauth_signature="wOJIO9A2W5mFwDgiDvZbTSMK%2FPY%3D",
                oauth_timestamp="137131200",
                oauth_nonce="4572616e48616d6d65724c61686176",
                oauth_version="1.0"
&lt;/pre&gt;
The information used to compute the OAuth Authorization header is obtained from the other OAuth* properties, such as OAuthConsumerKey, OAuthConsumerSecret, OAuthRealm, etc.</descrip>
            <links2>
                <link linkType="external" lang="activex">
                    <url>https://github.com/chilkatsoft/OAuth1-Quickbooks-Classic-ASP</url>
                    <text>OAuth1.0a Authorization for Quickbooks in Classic ASP</text>
                </link>
                <link linkType="example">
                    <text>Twitter OAuth -- Tweet to Your Own Account</text>
                    <url>http_twitter_oauth.asp</url>
                </link>
                <link linkType="external" lang="csharp">
                    <url>https://github.com/chilkatsoft/OAuth1-CSharp-Desktop</url>
                    <text>OAuth1.0a C# Desktop 3-Legged Authorization for Twitter, Quickbooks, Xero, and Magento</text>
                </link>
                <link linkType="external" lang="activex">
                    <url>https://github.com/chilkatsoft/OAuth1-Classic-ASP</url>
                    <text>(Classic ASP) OAuth1.0a Authorization Example for Twitter, Quickbooks, and Xero</text>
                </link>
                <link linkType="example">
                    <url>quickbooks_oauth1.asp</url>
                    <text>Quickbooks OAuth1 Authorization (3-legged)</text>
                </link>
                <link linkType="example">
                    <url>twitter_oauth1.asp</url>
                    <text>Twitter OAuth1 Authorization (3-legged)</text>
                </link>
                <link linkType="example">
                    <url>xero_oauth1.asp</url>
                    <text>Xero OAuth1 Authorization (3-legged)</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="OAuthCallback" read="1" write="1" ax="1" cpp="1" dn="1" axId="270">
            <gType>string</gType>
            <descrip>The OAuth 1.0 callback URL.  Defaults to "oob".</descrip>
            <iversion>9.5.0.53</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="OAuthConsumerKey" axId="152" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The OAuth consumer key to be used in the Authorization header.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="OAuthConsumerSecret" axId="153">
            <gType>string</gType>
            <descrip>The OAuth consumer secret to be used in computing the contents of the Authorization header.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="OAuthRealm" axId="154">
            <gType>string</gType>
            <descrip>The OAuth realm to be used in the Authorization header.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="OAuthSigMethod" axId="155" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The OAuth signature method, such as "HMAC-SHA1" to be used in the Authorization header.   The default is "HMAC-SHA1".   It is also possible to choose "HMAC-SHA256", "RSA-SHA1" or "RSA-SHA2".   For RSA algorithms, an RSA private key would need to be provided via the SetOAuthRsaKey method.
&lt;p&gt;
Note: RSA-SHA2 is supported starting in Chilkat v9.5.0.56</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="OAuthToken" axId="156">
            <gType>string</gType>
            <descrip>The OAuth token to be used in the Authorization header.</descrip>
            <links>
                <link>
                    <text>Twitter OAuth -- Tweet to Your Own Account</text>
                    <url_asp>http://www.example-code.com/asp/http_twitter_oauth.asp</url_asp>
                    <url_sql>http://www.example-code.com/sql/http_twitter_oauth.asp</url_sql>
                    <url_cs>http://www.example-code.com/csharp/http_twitter_oauth.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/http_twitter_oauth.asp</url_cpp>
                    <url_unicode cpp="">http://www.example-code.com/UnicodeCpp/http_twitter_oauth.asp</url_unicode>
                    <url_objc>http://www.example-code.com/objc/http_twitter_oauth.asp</url_objc>
                    <url_ios>http://www.example-code.com/ios/http_twitter_oauth.asp</url_ios>
                    <url_powershell>http://www.example-code.com/powershell/http_twitter_oauth.asp</url_powershell>
                    <url_mfc>http://www.example-code.com/mfc/http_twitter_oauth.asp</url_mfc>
                    <url_c>http://www.example-code.com/C/http_twitter_oauth.asp</url_c>
                    <url_unicode c="">http://www.example-code.com/UnicodeC/http_twitter_oauth.asp</url_unicode>
                    <url_delphi>http://www.example-code.com/delphi/http_twitter_oauth.asp</url_delphi>
                    <url_dd>http://www.example-code.com/delphiDll/http_twitter_oauth.asp</url_dd>
                    <url_foxpro>http://www.example-code.com/foxpro/http_twitter_oauth.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/http_twitter_oauth.asp</url_java>
                    <url_android>http://www.example-code.com/android/http_twitter_oauth.asp</url_android>
                    <url_perl>http://www.example-code.com/perl/http_twitter_oauth.asp</url_perl>
                    <url_php>http://www.example-code.com/php/http_twitter_oauth.asp</url_php>
                    <url_phpext>http://www.example-code.com/phpExt/http_twitter_oauth.asp</url_phpext>
                    <url_python>http://www.example-code.com/python/http_twitter_oauth.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/http_twitter_oauth.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/http_twitter_oauth.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/http_twitter_oauth.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/http_twitter_oauth.asp</url_vbscript>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>Twitter OAuth -- Tweet to Your Own Account</text>
                    <url>http_twitter_oauth.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="OAuthTokenSecret" axId="157">
            <gType>string</gType>
            <descrip>The OAuth token secret to be used in computing the Authorization header.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="OAuthVerifier" axId="158">
            <gType>string</gType>
            <descrip>The OAuth verifier to be used in the Authorization header.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="Password" axId="159" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The HTTP password for pages requiring a login/password. Chilkat HTTP can do Basic, Digest, and NTLM HTTP authentication.  (NTLM is also known as SPA (or Windows Integrated Authentication).  To use Basic authentication, the BasicAuth property must be set equal to _TRUE_.   It is not necessary to set the NtlmAuth or DigestAuth  properties beforehand if NTLM or Digest authentication is needed.  However, it is most efficient to pre-set these properties when the type of authentication is known in advance.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="PercentDoneScale" read="1" write="1" ax="1" cpp="1" dn="1" axId="264">
            <gType>int</gType>
            <descrip>This property is only valid in programming environment and languages that allow for event callbacks.
&lt;p&gt;
Sets the value to be defined as 100% complete for the purpose of PercentDone event callbacks.  The defaut value of 100 means that at most 100 event PercentDone callbacks will occur in a method that (1) is event enabled and (2) is such that it is possible to measure progress as a percentage completed.   This property may be set to larger numbers to get more fine-grained PercentDone callbacks.  For example, setting this property equal to 1000 will provide callbacks with .1 percent granularity.  For example, a value of 453 would indicate 45.3% competed.  This property is clamped to a minimum value of 10, and a maximum value of 100000.</descrip>
            <iversion>9.5.0.49</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="PreferIpv6" axId="256" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If _TRUE_, then use IPv6 over IPv4 when both are supported for a particular domain.   The default value of this property is _FALSE_, which will choose IPv4 over IPv6.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="ProxyAuthMethod" axId="160" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Set this to "basic" if you know in advance that Basic authentication is to be used for the HTTP proxy.  Otherwise leave this property unset.   Note: It is not necessary to set this property.  The HTTP component will automatically handle proxy authentication for any of the supported authentication methods:  NTLM, Digest, or Basic.  Setting this property equal to "basic" prevents the 407 response which is automatically handled internal to Chilkat and never seen by your application.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; If NTLM authentication does not succeed, set the Global.DefaultNtlmVersion property equal to 1 and then retry.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ProxyDomain" axId="161">
            <gType>string</gType>
            <descrip>The domain name of a proxy host if an HTTP proxy is used.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ProxyLogin" axId="162">
            <gType>string</gType>
            <descrip>If an HTTP proxy is used and it requires authentication, this property specifies the HTTP proxy login.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ProxyLoginDomain" axId="163">
            <gType>string</gType>
            <descrip>The NTLM authentication domain (optional) if NTLM authentication is used.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ProxyPassword" axId="164">
            <gType>string</gType>
            <descrip>If an HTTP proxy is used and it requires authentication, this property specifies the HTTP proxy password.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ProxyPort" axId="165">
            <gType>int</gType>
            <descrip>The port number of a proxy server if an HTTP proxy is used.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ReadTimeout" axId="166">
            <gType>int</gType>
            <descrip>The amount of time in seconds to wait before timing out when reading from an HTTP server.  The ReadTimeout is the amount of time that needs to elapse while no additional data is forthcoming.  During a long download, if the data stream halts for more than this amount, it will timeout.    Otherwise, there is no limit on the length of time for the entire download.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="RedirectVerb" axId="167" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Indicates the HTTP verb, such as GET, POST, PUT, etc. to be used for a redirect when the FollowRedirects property is set to _TRUE_.   The default value of this property is "GET".  This will produce the same behavior as a web browser (such as FireFox).   If this property is set to the empty string, then it will cause the same verb as the original HTTP request to be used.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; Prior to version 9.5.0.44, the default value of this property was the empty string.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Referer" axId="168">
            <gType>string</gType>
            <descrip>The Referer header field to be automatically included with GET requests issued by QuickGet or QuickGetStr. The default value is the empty string which causes the Referer field to be omitted from the request header.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="RequireSslCertVerify" axId="253" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If _TRUE_, then the HTTP client will verify the server's SSL certificate.  The certificate is expired, or if the cert's signature is invalid, the connection is not allowed.  The default value of this property is _FALSE_.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>http_requireSslCertVerify.asp</url>
                    <text>Require that the Web Server's SSL Certificate is Non-Expired and the Signature is Valid</text>
                </link>
            </links2>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="RequiredContentType" axId="169">
            <gType>string</gType>
            <descrip>If set, then any HTTP response to any POST or GET, including downloads, will be rejected if the content-type in the response header does not match this setting.  If the content-type does not match, only the header of the HTTP response is read, the connection to the HTTP server is closed, and the remainder of the response is never read.
&lt;p&gt;
This property is empty (zero-length string) by default.
&lt;p&gt;
Some typical content-types are "text/html", "text/xml", "image/gif", "image/jpeg", "application/zip", "application/msword", "application/pdf", etc.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="S3Ssl" axId="170" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If _TRUE_, then all S3_* methods will use a secure SSL/TLS connection for communications.  (If _TRUE_, Chilkat uses TLS 1.2) The default value is _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="SaveCookies" axId="171" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If this property is _TRUE_, cookies are automatically persisted to XML files in the directory specified by the CookiesDir property (or in memory if CookieDir = "memory").  Both CookiesDir and SaveCookies must be set for cookies to be persisted.</descrip>
            <links>
                <link>
                    <text>Saving Cookies to XML Files</text>
                    <url_asp>http://www.example-code.com/asp/saving_http_cookies.asp</url_asp>
                    <url_cs>http://www.example-code.com/csharp/saving_http_cookies.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/saving_http_cookies.asp</url_cpp>
                    <url_delphi>http://www.example-code.com/delphi/saving_http_cookies.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/saving_http_cookies.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/saving_http_cookies.asp</url_java>
                    <url_perl>http://www.example-code.com/perl/saving_http_cookies.asp</url_perl>
                    <url_python>http://www.example-code.com/python/saving_http_cookies.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/saving_http_cookies.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/saving_http_cookies.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/saving_http_cookies.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/saving_http_cookies.asp</url_vbscript>
                    <url_php>http://www.example-code.com/php/saving_http_cookies.asp</url_php>
                </link>
                <link>
                    <text>Caching cookies in-memory.</text>
                    <url_asp>http://www.example-code.com/asp/http_memory_cookies.asp</url_asp>
                    <url_sql>http://www.example-code.com/sql/http_memory_cookies.asp</url_sql>
                    <url_cs>http://www.example-code.com/csharp/http_memory_cookies.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/http_memory_cookies.asp</url_cpp>
                    <url_objc>http://www.example-code.com/objc/http_memory_cookies.asp</url_objc>
                    <url_ios>http://www.example-code.com/ios/http_memory_cookies.asp</url_ios>
                    <url_powershell>http://www.example-code.com/powershell/http_memory_cookies.asp</url_powershell>
                    <url_mfc>http://www.example-code.com/mfc/http_memory_cookies.asp</url_mfc>
                    <url_c>http://www.example-code.com/C/http_memory_cookies.asp</url_c>
                    <url_delphi>http://www.example-code.com/delphi/http_memory_cookies.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/http_memory_cookies.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/http_memory_cookies.asp</url_java>
                    <url_android>http://www.example-code.com/android/http_memory_cookies.asp</url_android>
                    <url_perl>http://www.example-code.com/perl/http_memory_cookies.asp</url_perl>
                    <url_php>http://www.example-code.com/php/http_memory_cookies.asp</url_php>
                    <url_phpext>http://www.example-code.com/phpExt/http_memory_cookies.asp</url_phpext>
                    <url_python>http://www.example-code.com/python/http_memory_cookies.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/http_memory_cookies.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/http_memory_cookies.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/http_memory_cookies.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/http_memory_cookies.asp</url_vbscript>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>Caching cookies in-memory.</text>
                    <url>http_memory_cookies.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SendBufferSize" axId="172">
            <gType>int</gType>
            <descrip>The buffer size to be used with the underlying TCP/IP socket for sending.  The default value is 65535.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SendCookies" axId="173">
            <gType>bool</gType>
            <descrip>If _TRUE_, then cookies previously persisted to the CookiesDir are automatically added to all HTTP requests.  Only cookies matching the domain and path are added.</descrip>
            <links>
                <link>
                    <text>Caching cookies in-memory.</text>
                    <url_asp>http://www.example-code.com/asp/http_memory_cookies.asp</url_asp>
                    <url_sql>http://www.example-code.com/sql/http_memory_cookies.asp</url_sql>
                    <url_cs>http://www.example-code.com/csharp/http_memory_cookies.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/http_memory_cookies.asp</url_cpp>
                    <url_objc>http://www.example-code.com/objc/http_memory_cookies.asp</url_objc>
                    <url_ios>http://www.example-code.com/ios/http_memory_cookies.asp</url_ios>
                    <url_powershell>http://www.example-code.com/powershell/http_memory_cookies.asp</url_powershell>
                    <url_mfc>http://www.example-code.com/mfc/http_memory_cookies.asp</url_mfc>
                    <url_c>http://www.example-code.com/C/http_memory_cookies.asp</url_c>
                    <url_delphi>http://www.example-code.com/delphi/http_memory_cookies.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/http_memory_cookies.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/http_memory_cookies.asp</url_java>
                    <url_android>http://www.example-code.com/android/http_memory_cookies.asp</url_android>
                    <url_perl>http://www.example-code.com/perl/http_memory_cookies.asp</url_perl>
                    <url_php>http://www.example-code.com/php/http_memory_cookies.asp</url_php>
                    <url_phpext>http://www.example-code.com/phpExt/http_memory_cookies.asp</url_phpext>
                    <url_python>http://www.example-code.com/python/http_memory_cookies.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/http_memory_cookies.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/http_memory_cookies.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/http_memory_cookies.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/http_memory_cookies.asp</url_vbscript>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>Caching cookies in-memory.</text>
                    <url>http_memory_cookies.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SessionLogFilename" axId="174">
            <gType>string</gType>
            <descrip>Enables file-based session logging.  If set to a filename (or relative/absolute filepath), then the exact HTTP requests and responses are logged to a file.  The file is created if it does not already exist, otherwise it is appended.</descrip>
            <links>
                <link>
                    <text>Debugging HTTP</text>
                    <url_asp>http://www.example-code.com/asp/http_debugging.asp</url_asp>
                    <url_sql>http://www.example-code.com/sql/http_debugging.asp</url_sql>
                    <url_cs>http://www.example-code.com/csharp/http_debugging.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/http_debugging.asp</url_cpp>
                    <url_objc>http://www.example-code.com/objc/http_debugging.asp</url_objc>
                    <url_ios>http://www.example-code.com/ios/http_debugging.asp</url_ios>
                    <url_powershell>http://www.example-code.com/powershell/http_debugging.asp</url_powershell>
                    <url_mfc>http://www.example-code.com/mfc/http_debugging.asp</url_mfc>
                    <url_c>http://www.example-code.com/C/http_debugging.asp</url_c>
                    <url_delphi>http://www.example-code.com/delphi/http_debugging.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/http_debugging.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/http_debugging.asp</url_java>
                    <url_android>http://www.example-code.com/android/http_debugging.asp</url_android>
                    <url_perl>http://www.example-code.com/perl/http_debugging.asp</url_perl>
                    <url_php>http://www.example-code.com/php/http_debugging.asp</url_php>
                    <url_phpext>http://www.example-code.com/phpExt/http_debugging.asp</url_phpext>
                    <url_python>http://www.example-code.com/python/http_debugging.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/http_debugging.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/http_debugging.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/http_debugging.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/http_debugging.asp</url_vbscript>
                </link>
                <link>
                    <text>HTTP Session Logging</text>
                    <url_asp>http://www.example-code.com/asp/http_sessionLog.asp</url_asp>
                    <url_sql>http://www.example-code.com/sql/http_sessionLog.asp</url_sql>
                    <url_cs>http://www.example-code.com/csharp/http_sessionLog.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/http_sessionLog.asp</url_cpp>
                    <url_mfc>http://www.example-code.com/mfc/http_sessionLog.asp</url_mfc>
                    <url_c>http://www.example-code.com/C/http_sessionLog.asp</url_c>
                    <url_delphi>http://www.example-code.com/delphi/http_sessionLog.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/http_sessionLog.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/http_sessionLog.asp</url_java>
                    <url_perl>http://www.example-code.com/perl/http_sessionLog.asp</url_perl>
                    <url_php>http://www.example-code.com/php/http_sessionLog.asp</url_php>
                    <url_python>http://www.example-code.com/python/http_sessionLog.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/http_sessionLog.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/http_sessionLog.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/http_sessionLog.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/http_sessionLog.asp</url_vbscript>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>Debugging HTTP</text>
                    <url>http_debugging.asp</url>
                </link>
                <link linkType="example">
                    <text>HTTP Session Logging</text>
                    <url>http_sessionLog.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SoRcvBuf" axId="175">
            <gType>int</gType>
            <descrip>Sets the receive buffer size socket option.   Normally, this property should be left unchanged.  The default value is 4194304.
&lt;p&gt;
This property can be increased if download performance seems slow.  It is recommended to be a multiple of 4096.</descrip>
            <links>
                <link>
                    <text>More Information about TCP performance and Buffer Sizes</text>
                    <url>http://www.cknotes.com/?p=446</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>More Information about TCP performance and Buffer Sizes</text>
                    <url>http://www.cknotes.com/?p=446</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="SoSndBuf" axId="176" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>Sets the send buffer size socket option.   Normally, this property should be left unchanged.  The default value is 262144.   
&lt;p&gt;
This property can be increased if upload performance seems slow.  It is recommended to be a multiple of 4096.  Testing with sizes such as 512K and 1MB is reasonable.</descrip>
            <links>
                <link>
                    <text>More Information about TCP performance and Buffer Sizes</text>
                    <url>http://www.cknotes.com/?p=446</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>More Information about TCP performance and Buffer Sizes</text>
                    <url>http://www.cknotes.com/?p=446</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SocksHostname" axId="177">
            <gType>string</gType>
            <descrip>The SOCKS4/SOCKS5 hostname or IPv4 address (in dotted decimal notation).  This property is only used if the SocksVersion property is set to 4 or 5).</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>http_socks5_proxy.asp</url>
                    <text>HTTP/HTTPS using SOCKS5 Proxy</text>
                </link>
                <link linkType="example">
                    <url>http_socks4_proxy.asp</url>
                    <text>HTTP/HTTPS using SOCKS4 Proxy</text>
                </link>
            </links2>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SocksPassword" axId="178">
            <gType>string</gType>
            <descrip>The SOCKS5 password (if required).  The SOCKS4 protocol does not include the use of a password, so this does not apply to SOCKS4.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SocksPort" axId="179">
            <gType>int</gType>
            <descrip>The SOCKS4/SOCKS5 proxy port.  The default value is 1080. 
This property only applies if a SOCKS proxy is used (if the SocksVersion property is set to 4 or 5).</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SocksUsername" axId="180">
            <gType>string</gType>
            <descrip>The SOCKS4/SOCKS5 proxy username.  This property is only used if the SocksVersion property is set to 4 or 5).</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>http_socks5_proxy.asp</url>
                    <text>HTTP/HTTPS using SOCKS5 Proxy</text>
                </link>
                <link linkType="example">
                    <url>http_socks4_proxy.asp</url>
                    <text>HTTP/HTTPS using SOCKS4 Proxy</text>
                </link>
            </links2>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SocksVersion" axId="181">
            <gType>int</gType>
            <descrip>SocksVersion
May be set to one of the following integer values:
&lt;p&gt;
&lt;b&gt;0&lt;/b&gt; - No SOCKS proxy is used.  This is the default.&lt;br&gt;
&lt;b&gt;4&lt;/b&gt; - Connect via a SOCKS4 proxy.&lt;br&gt;
&lt;b&gt;5&lt;/b&gt; - Connect via a SOCKS5 proxy.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>http_socks5_proxy.asp</url>
                    <text>HTTP/HTTPS using SOCKS5 Proxy</text>
                </link>
                <link linkType="example">
                    <url>http_socks4_proxy.asp</url>
                    <text>HTTP/HTTPS using SOCKS4 Proxy</text>
                </link>
            </links2>
        </property>
        <property name="SslAllowedCiphers" axId="262" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Provides a means for setting a list of ciphers that are allowed for SSL/TLS connections.  The default (empty string) indicates that all implemented ciphers are possible.  The TLS ciphers supported in Chilkat v9.5.0.55 and later are:
&lt;pre&gt;
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
TLS_DHE_RSA_WITH_AES_256_CBC_SHA
TLS_RSA_WITH_AES_256_CBC_SHA256
TLS_RSA_WITH_AES_256_GCM_SHA384
TLS_RSA_WITH_AES_256_CBC_SHA
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
TLS_DHE_RSA_WITH_AES_128_CBC_SHA
TLS_RSA_WITH_AES_128_CBC_SHA256
TLS_RSA_WITH_AES_128_GCM_SHA256
TLS_RSA_WITH_AES_128_CBC_SHA
TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
TLS_RSA_WITH_3DES_EDE_CBC_SHA
TLS_ECDHE_RSA_WITH_RC4_128_SHA
TLS_RSA_WITH_RC4_128_SHA
TLS_RSA_WITH_RC4_128_MD5
TLS_DHE_RSA_WITH_DES_CBC_SHA
TLS_RSA_WITH_DES_CBC_SHA
&lt;/pre&gt;
To restrict SSL/TLS connections to one or more specific ciphers, set this property to a comma-separated list of ciphers such as "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384".   The order should be in terms of preference, with the preferred algorithms listed first.  (Note that the client cannot specifically choose the algorithm is picked because it is the server that chooses.  The client simply provides the server with a list from which to choose.)
&lt;p&gt;
The property can also disallow connections with servers having certificates with RSA keys less than a certain size.  By default, server certificates having RSA keys of 512 bits or greater are allowed.  Add the keyword "rsa1024" to disallow connections with servers having keys smaller than 1024 bits.  Add the keyword "rsa2048"  to disallow connections with servers having keys smaller than 2048 bits.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; Prior to Chilkat v9.5.0.55, it was not possible to explicitly list allowed cipher suites.  The deprecated means for indicating allowed ciphers was both incomplete  and unprecise.  For example, the following keywords could be listed to allow matching ciphers: "aes256-cbc", "aes128-cbc", "3des-cbc", and "rc4".    These keywords will still be recognized, but programs should be updated to explicitly list the allowed ciphers.&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;secure-renegotiation:&lt;/b&gt; Starting in Chilkat v9.5.0.55, the keyword "secure-renegotiation" may be added to require that all renegotions be done securely (as per RFC 5746).&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;best-practices:&lt;/b&gt; Starting in Chilkat v9.5.0.55, this  property may be set to the single keyword "best-practices".  This will allow ciphers based on the current best practices.  As new versions of Chilkat are released, the best practices may change.  Changes will be noted here.  The current best practices are:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the server uses an RSA key, it must be 1024 bits or greater.&lt;/li&gt;
&lt;li&gt;All renegotations must be secure renegotiations.&lt;/li&gt;
&lt;li&gt;All ciphers using RC4, DES, or 3DES are disallowed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;b&gt;Example:&lt;/b&gt; The following string would restrict to 2 specific cipher suites, require RSA keys to be 1024 bits or greater, and require secure renegotiations: "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA, rsa1024, secure-renegotiation"&lt;/p&gt;</descrip>
            <iversion>9.5.0.48</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="SslProtocol" axId="182" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Selects the secure protocol to be used for secure (SSL/TLS) connections.  Possible values are:
&lt;blockquote&gt;
default&lt;br /&gt;
TLS 1.2&lt;br /&gt;
TLS 1.1&lt;br /&gt;
TLS 1.0&lt;br /&gt;
SSL 3.0&lt;br /&gt;
TLS 1.2 or higher&lt;br /&gt;
TLS 1.1 or higher&lt;br /&gt;
TLS 1.0 or higher&lt;br /&gt;
&lt;/blockquote&gt;
The default value is "default" which will choose the, which allows for the protocol to be selected dynamically at runtime based on the requirements of the server.  Choosing an exact protocol will cause the connection to fail unless that exact protocol is negotiated.  It is better to choose "X or higher" than an exact protocol.   The "default" is effectively "SSL 3.0 or higher".</descrip>
            <iversion>9.5.0.46</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="StreamResponseBodyPath" read="1" write="1" ax="1" cpp="1" dn="1" axId="263">
            <gType>string</gType>
            <descrip>Allows for the HTTP response body to be streamed directly into a file.   If this property is set, then any method returning an HTTP response object will stream the response body directly to the file path specified.  The HTTP response object will still contain the response header.  (This property is useful when the HTTP response is too large to fit into memory.)</descrip>
            <iversion>9.5.0.49</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="TlsCipherSuite" read="1" ax="1" cpp="1" dn="1" axId="268">
            <gType>string</gType>
            <descrip>Contains the current or last negotiated TLS cipher suite.  If no TLS connection has yet to be established, or if a connection as attempted and failed, then this will be empty.  A sample cipher suite string looks like this:  TLS_DHE_RSA_WITH_AES_256_CBC_SHA256.</descrip>
            <iversion>9.5.0.49</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="TlsPinSet" read="1" write="1" ax="1" cpp="1" dn="1" axId="273">
            <gType>string</gType>
            <descrip>Specifies a set of pins for Public Key Pinning for TLS connections.  This property lists the expected SPKI fingerprints for the server certificates.  If the server's certificate (sent during the TLS handshake) does not match any of the SPKI fingerprints, then the TLS handshake is aborted and the connection fails. The format of this string property is as follows:
&lt;pre&gt;
hash_algorithm, encoding, SPKI_fingerprint_1, SPKI_fingerprint_2, ...
&lt;/pre&gt;
For example, the following string specifies a single sha256 base64-encoded SPKI fingerprint:
&lt;pre&gt;
"sha256, base64, lKg1SIqyhPSK19tlPbjl8s02yChsVTDklQpkMCHvsTE="
&lt;/pre&gt;
This example specifies two SPKI fingerprints:
&lt;pre&gt;
"sha256, base64, 4t37LpnGmrMEAG8HEz9yIrnvJV2euVRwCLb9EH5WZyI=, 68b0G5iqMvWVWvUCjMuhLEyekM5729PadtnU5tdXZKs="
&lt;/pre&gt;
Any of the following hash algorithms are allowed:.sha1, sha256, sha384, sha512, md2, md5, haval, ripemd128, ripemd160,ripemd256, or ripemd320.
&lt;p&gt;
The following encodings are allowed: base64, hex, and any of the encodings indicated in the link below.</descrip>
            <iversion>9.5.0.55</iversion>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Encodings Supported by Chilkat</text>
                </link>
                <link linkType="example">
                    <url>http_public_key_pinning.asp</url>
                    <text>HTTP Public Key Pinning</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="TlsVersion" read="1" ax="1" cpp="1" dn="1" axId="267">
            <gType>string</gType>
            <descrip>Contains the current or last negotiated TLS protocol version.  If no TLS connection has yet to be established, or if a connection as attempted and failed, then this will be empty.  Possible values are "SSL 3.0", "TLS 1.0", "TLS 1.1", and "TLS 1.2".</descrip>
            <iversion>9.5.0.49</iversion>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="UpdateCache" axId="183">
            <gType>bool</gType>
            <descrip>Controls whether the cache is automatically updated with the responses from HTTP GET requests.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="UseBgThread" axId="184" read="1" write="1" ax="1" cpp="1" dn="1" deprecated="1" noWinRT="1" noxojo="1">
            <gType>bool</gType>
            <descrip>If _TRUE_, then background-enabled methods will run in a background thread. Normally, a method will return after its work is completed. However, when UseBgThread is true, the method will return immediately and a background thread is started to carry out the method's task.
&lt;p&gt;
Background-enabled HTTP methods are:
&lt;ul&gt;
&lt;li&gt;Download&lt;/li&gt;
&lt;li&gt;DownloadAppend&lt;/li&gt;
&lt;li&gt;GetHead&lt;/li&gt;
&lt;li&gt;PostBinary&lt;/li&gt;
&lt;li&gt;PostMime&lt;/li&gt;
&lt;li&gt;PostUrlEncoded&lt;/li&gt;
&lt;li&gt;PostXml&lt;/li&gt;
&lt;li&gt;PutText&lt;/li&gt;
&lt;li&gt;QuickDeleteStr&lt;/li&gt;
&lt;li&gt;QuickGet&lt;/li&gt;
&lt;li&gt;QuickGetObj&lt;/li&gt;
&lt;li&gt;QuickGetStr&lt;/li&gt;
&lt;li&gt;QuickPutStr&lt;/li&gt;
&lt;li&gt;ResumeDownload&lt;/li&gt;
&lt;li&gt;SynchronousRequest&lt;/li&gt;
&lt;li&gt;XmlRpc&lt;/li&gt;
&lt;li&gt;XmlRpcPut&lt;/li&gt;
&lt;/li&gt;
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="UseIEProxy" axId="185">
            <gType>bool</gType>
            <descrip>If _TRUE_, the proxy host/port used by Internet Explorer will also be used by Chilkat HTTP.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="UserAgent" axId="186" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The UserAgent header field to be automatically included with GET requests issued by QuickGet or QuickGetStr. The default value is "Mozilla/5.0 (Windows NT 6.3; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0".  The reason for this default is to get the same server behavior for a recent version of a typical and popular browser.  Some sites may respond differently depending on the User-Agent, and the goal is to avoid strange responses that are different than what a typical browser would receive.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="WasRedirected" axId="187">
            <gType>bool</gType>
            <descrip>Indicates whether the last HTTP GET was redirected.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="AllowHeaderFolding" axId="280" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <args2 />
            <links2 />
            <descrip>If this property is set to _FALSE_, then no MIME header folding will be automatically applied to any request header.  The default is _TRUE_.</descrip>
            <iversion>9.5.0.63</iversion>
        </property>
        <property name="AuthToken" axId="286" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2 />
            <links2 />
            <iversion>9.5.0.67</iversion>
            <descrip>If set, then automatically adds the "Authorization: Bearer &lt;auth_token&gt;" header to all requests.</descrip>
        </property>
    </properties>
    <methods>
        <method name="AddCacheRoot" axId="188" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dir</argName>
                    <objcName>dir</objcName>
                </arg>
            </args>
            <descrip>This method must be called at least once if disk caching is to be used.  The file path (including drive letter) such as "E:\MyHttpCache\" is passed to AddCacheRoot to specify the root directory.  The cache can be spread across multiple disk drives by calling AddCacheRoot multiple times, each with a directory path on a separate disk drive.</descrip>
            <links2 />
            <args2>
                <arg name="dir" type="string" objcName="dir" />
            </args2>
        </method>
        <method name="AddQuickHeader" axId="189" ax="1" cpp="1" dn="1" deprecated="1" status="1" noxojo="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>headerFieldName</argName>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>headerFieldValue</argName>
                    <objcName>value</objcName>
                </arg>
            </args>
            <descrip>Adds a custom header field to any HTTP request sent by a method that does not use the HTTP request object.  These methods include Download, DownloadAppend, GetHead, PostBinary, PostMime, PostXml, PutBinary, PutText, QuickDeleteStr, QuickGet, QuickGetObj, QuickGetStr, QuickPutStr, XmlRpc, and XmlRpcPut.  
&lt;p&gt;
Cookies may be explictly added by calling this method passing  "Cookie" for the ARG1.  
&lt;p&gt;
The RemoveQuickHeader method can be called to remove a custom header.
&lt;p&gt;
* Note: This method is deprecated.  It is identical to the SetRequestHeader method.  The SetRequestHeader method should be called instead because AddQuickHeader will be removed in a future version.</descrip>
            <links2>
                <link linkType="example">
                    <text>Adding Cookies to an HTTP Request</text>
                    <url>http_addCookie.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="headerFieldName" type="string" objcName="name" />
                <arg name="headerFieldValue" type="string" objcName="value" />
            </args2>
        </method>
        <method name="BgResponseObject" axId="190" ax="1" cpp="1" dn="1" deprecated="1" noWinRT="1" noxojo="1">
            <gType>HttpResponse</gType>
            <args />
            <descrip>If a backgrounded method returns an Http response object, it may be retrieved by calling this method.
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="BgTaskAbort" axId="191" ax="1" cpp="1" dn="1" deprecated="1" noWinRT="1" noxojo="1">
            <gType>void</gType>
            <args />
            <descrip>Call this to force the currently running backgrounded method to abort.
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="ClearBgEventLog" axId="192" ax="1" cpp="1" dn="1" deprecated="1" noWinRT="1" noxojo="1">
            <gType>void</gType>
            <args />
            <descrip>Clears the in-memory event log (which is enabled by setting the KeepEventLog property = _TRUE_).
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="ClearInMemoryCookies" axId="193">
            <gType>void</gType>
            <args />
            <descrip>Clears all cookies cached in memory.  Calling this only makes sense if the CookieDir property is set to the string "memory".</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="CloseAllConnections" ax="1" cpp="1" dn="1" events="1" status="1" axId="194">
            <gType>bool</gType>
            <args />
            <descrip>Closes all connections still open from previous HTTP requests. &lt;p&gt;
An HTTP object instance will maintain up to 10 connections.  If the HTTP server's response does not include a "Connection: Close" header, the connection will remain open and will be re-used if possible for the next HTTP request to the same hostname:port.    (It uses the IP address (in string form) or the domain name, whichever is used in the URL provided by the application.)
If 10 connections are already open and another is needed, the object will close the least recently used connection.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="DnsCacheClear" ax="1" cpp="1" dn="1" axId="254">
            <gType>void</gType>
            <descrip>Clears the Chilkat-wide in-memory hostname-to-IP address DNS cache.   Chilkat automatically maintains this in-memory cache to prevent redundant DNS lookups.  If the TTL on the DNS A records being accessed are short and/or these DNS records change frequently, then this method can be called clear the internal cache.  Note: The DNS cache is used/shared among all Chilkat objects in a program, and clearing the cache affects all Chilkat objects.</descrip>
            <args />
            <iversion>9.5.0.38</iversion>
            <args2 />
            <links2 />
        </method>
        <method name="Download" axId="195" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localFilePath</argName>
                    <objcName>saveToPath</objcName>
                </arg>
            </args>
            <descrip>Retrieves the content at a URL and saves to a file.  All content is saved in streaming mode such that the memory footprint is small and steady.  HTTPS is fully supported, as it is with all the methods of this class.</descrip>
            <links2>
                <link linkType="example">
                    <text>HTTP Download any Type of File (binary or text)</text>
                    <url>http_downloadFile.asp</url>
                </link>
                <link linkType="example">
                    <text>Debugging HTTP</text>
                    <url>http_debugging.asp</url>
                </link>
                <link linkType="external" lang="activex">
                    <url>https://github.com/chilkatsoft/VB6-Zip-and-HTTPS-with-Progress-Events</url>
                    <text>VB6 Sample Project for Zip and HTTPS with Progress Events</text>
                </link>
            </links2>
            <args2>
                <arg name="url" type="string" objcName="url" />
                <arg name="localFilePath" type="string" objcName="saveToPath" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="DownloadAppend" axId="196">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>appendToPath</objcName>
                </arg>
            </args>
            <descrip>Same as the Download method, but the output file is open for append.</descrip>
            <args2>
                <arg name="url" type="string" objcName="url" />
                <arg name="filename" type="string" objcName="appendToPath" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="DownloadHash" axId="197" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>hashAlgorithm</argName>
                    <objcName>hashAlgorithm</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encoding</argName>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Retrieves the content at a URL and computes and returns a hash of the content.   The hash is returned as an encoded string according to the ARG3, which may be "Base64", "modBase64", "Base32", "UU", "QP" (for quoted-printable), "URL" (for url-encoding), "Hex", "Q", "B", "url_oath", "url_rfc1738", "url_rfc2396", and "url_rfc3986".   The ARG2 may be "sha1", "sha256", "sha384", "sha512", "md2", "md5", "haval", "ripemd128", "ripemd160","ripemd256", or "ripemd320".</descrip>
            <args2>
                <arg name="url" type="string" objcName="url" />
                <arg name="hashAlgorithm" type="string" objcName="hashAlgorithm" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
            <links2 />
        </method>
        <method name="EventLogName" axId="198" ax="1" cpp="1" dn="1" deprecated="1" noWinRT="1" noxojo="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the name of the Nth event in the in-memory event log.  Refer to the documentation for the KeepEventLog property for the full list of event names.   Indexing is from 0 to EventLogCount-1.
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="EventLogValue" axId="199" ax="1" cpp="1" dn="1" deprecated="1" noWinRT="1" noxojo="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the value of the Nth event in the in-memory event log.   Indexing is from 0 to EventLogCount-1.
&lt;p&gt;
This  functionality is replaced by the new model for asynchronous programming introduced in Chilkat v9.5.0.52.  Applications should use the new model, which is identified by methods having names ending with "Async" and return a task object.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="ExtractMetaRefreshUrl" axId="200" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>htmlContent</argName>
                    <objcName>html</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Convenience method for extracting the META refresh URL from HTML.  For example, if the ARG1 contains a META refresh tag, such as:
&lt;pre&gt;
&amp;lt;meta http-equiv="refresh" content="5;URL='http://example.com/'"&gt;
&lt;/pre&gt;
Then the return value of this method would be "http://example.com/".</descrip>
            <args2>
                <arg name="htmlContent" type="string" objcName="html" />
            </args2>
            <links2 />
        </method>
        <method name="G_SvcOauthAccessToken" axId="257" ax="1" cpp="1" dn="1" events="1" outArgName="outStr">
            <gType>string</gType>
            <descrip>Makes an access token request to obtain a Google API OAuth2 access token for a service account. 
Access tokens issued by the Google OAuth 2.0 Authorization Server expire one hour after they are issued. When an access token expires, then the application should generate another JWT, sign it, and request another access token. The ARG1 is the service account email address of the application making the access token request.   The ARG2 is a space-delimited list of the permissions that the application requests.  (See https://developers.google.com/accounts/docs/OAuth2ServiceAccount )
&lt;p&gt;
 The ARG3 is the email address of the user for which the application is requesting delegated access.  The ARG3 may be left empty if there is no such email address.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>iss</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>iss</objcName>
                </arg>
                <arg>
                    <argName>scope</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>scope</objcName>
                </arg>
                <arg>
                    <argName>subEmail</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>subEmail</objcName>
                </arg>
                <arg>
                    <argName>numSec</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>numSec</objcName>
                </arg>
                <arg>
                    <argName>cert</argName>
                    <cppType>CkCert &amp;</cppType>
                    <dnType>Cert</dnType>
                    <axType>Cert</axType>
                    <objcName>cert</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <text>Get XOAUTH2 Access Token from Google OAuth 2.0 Authorization Server</text>
                    <url>http_xoauth2_access_token.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="iss" type="string" objcName="iss" />
                <arg name="scope" type="string" objcName="scope" />
                <arg name="subEmail" type="string" objcName="subEmail" />
                <arg name="numSec" type="int" objcName="numSec" />
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
        </method>
        <method name="G_SvcOauthAccessToken2" axId="269" ax="1" cpp="1" dn="1" events="1" outArgName="outStr">
            <gType>string</gType>
            <descrip>The same as the G_SvcOauthAccessToken method, but with added flexibility for more customization.  The 1st three args of the G_SvcOauthAccessToken are replaced with ARG1 allowing for future expansion of name-value params.  See the example below.</descrip>
            <iversion>9.5.0.51</iversion>
            <args>
                <arg>
                    <argName>claimParams</argName>
                    <cppType>CkHashtable &amp;</cppType>
                    <dnType>Hashtable</dnType>
                    <axType>Hashtable</axType>
                    <objcName>claimParams</objcName>
                </arg>
                <arg>
                    <argName>numSec</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>numSec</objcName>
                </arg>
                <arg>
                    <argName>cert</argName>
                    <cppType>CkCert &amp;</cppType>
                    <dnType>Cert</dnType>
                    <axType>Cert</axType>
                    <objcName>cert</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>http_G_SvcOauthAccessToken2.asp</url>
                    <text>Get OAuth 2.0 Access Token using G_SvcOauthAccessToken2</text>
                </link>
            </links2>
            <args2>
                <arg name="claimParams" type="Hashtable" objcName="claimParams" />
                <arg name="numSec" type="int" objcName="numSec" />
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GenTimeStamp" axId="201" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the current GMT (also known as UTC) date/time in a string that is compliant with RFC 2616 format.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetCacheRoot" axId="202" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the Nth cache root (indexing begins at 0).  Cache roots are set by calling AddCacheRoot one or more times.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetCookieXml" axId="203" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>domain</argName>
                    <objcName>domain</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the cookies in XML format for a specific domain.  Cookies are only persisted if the SaveCookies property is set to _TRUE_.  If the CookieDir property is set to the keyword "memory", then cookies are saved in-memory.</descrip>
            <args2>
                <arg name="domain" type="string" objcName="domain" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>http_get_cookies.asp</url>
                    <text>Demonstrates how to Get Cookies Sent by the HTTP Server</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetDomain" axId="204" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Utility method for extracting the domain name from a full URL.  For example, if "http://www.chilkatsoft.com/default.asp" is the URL passed in, then "www.chilkatsoft.com" is returned.</descrip>
            <args2>
                <arg name="url" type="string" objcName="url" />
            </args2>
            <links2 />
        </method>
        <method name="GetHead" axId="205" ax="1" cpp="1" dn="1" events="1">
            <gType>HttpResponse</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
            </args>
            <descrip>Sends an HTTP HEAD request for a URL and returns a response object.  (Note: HEAD requests will never automatically follow redirects.)</descrip>
            <args2>
                <arg name="url" type="string" objcName="url" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>http_head_request.asp</url>
                    <text>HTTP HEAD Request</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetRequestHeader" axId="206" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>name</argName>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the value of a header field that has been pre-defined to be sent with all HTTP GET requests issued by the QuickGet and QuickGetStr methods.  By default, this includes header fields such as Accept, AcceptCharset, AcceptLanguage, Connection, UserAgent, etc.</descrip>
            <args2>
                <arg name="name" type="string" objcName="name" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetServerSslCert" axId="207">
            <gType>Cert</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>domain</argName>
                    <objcName>domain</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>port</argName>
                    <objcName>port</objcName>
                </arg>
            </args>
            <descrip>Establishes an SSL/TLS connection with a web server for the purpose of retrieving the server's SSL certificate (public-key only of course...).   Nothing is retrieved from the web server.  This method simply makes a connection, gets the certificate information, and closes the connection.</descrip>
            <links2>
                <link linkType="example">
                    <url>http_getServerCert.asp</url>
                    <text>Get the Server Certificate, Certificate Chain, and Root CA Certificate</text>
                </link>
                <link linkType="example">
                    <url>http_spki_fingerprint.asp</url>
                    <text>Get Web Server's SPKI Fingerprint</text>
                </link>
            </links2>
            <args2>
                <arg name="domain" type="string" objcName="domain" />
                <arg name="port" type="int" objcName="port" />
            </args2>
        </method>
        <method name="GetUrlPath" axId="208" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the path part of a URL.  The syntax of a URL is _LT_scheme&gt;://_LT_user&gt;:_LT_password&gt;@_LT_host&gt;:_LT_port&gt;/_LT_path&gt;;_LT_params&gt;?_LT_query&gt;#_LT_frag&gt;.  This method returns the "path" part.</descrip>
            <args2>
                <arg name="url" type="string" objcName="url" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="HasRequestHeader" axId="209">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>name</argName>
                    <objcName>name</objcName>
                </arg>
            </args>
            <descrip>Returns true if the specified header field is defined such that it will be sent with all GET requests issued by the QuickGet and QuickGetStr methods.</descrip>
            <args2>
                <arg name="name" type="string" objcName="name" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsUnlocked" axId="210">
            <gType>bool</gType>
            <args />
            <descrip>Returns true if the Http class has been unlocked.  It is necessary to call Http.UnlockComponent before calling any other methods.  Passing any string to UnlockComponent will automatically activate a 30-day trial period.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="PBinary" axId="258" ax="1" cpp="1" dn="1" events="1">
            <gType>HttpResponse</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>verb</argName>
                    <objcName>verb</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>byteData</argName>
                    <objcName>byteData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>contentType</argName>
                    <objcName>contentType</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>md5</argName>
                    <objcName>md5</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>gzip</argName>
                    <objcName>gzip</objcName>
                </arg>
            </args>
            <descrip>Sends an HTTP request to the ARG2.  The ARG1 can be "POST" or "PUT".  The body of the HTTP request contains the bytes passed in ARG3.  The ARG4 is a content type such as "image/gif", "application/pdf", etc.  If ARG5 is _TRUE_, then a Content-MD5 header is added with the base64 MD5 hash of the ARG3.  Servers aware of the Content-MD5 header will perform a message integrity check to ensure that the data has not been corrupted.  If ARG6 is _TRUE_, the ARG3 is compressed using the gzip algorithm.  The HTTP request body will contain the GZIP compressed data, and a "Content-Encoding: gzip" header is automatically added to indicate that the request data needs to be ungzipped when received (at the server).</descrip>
            <iversion>9.5.0.45</iversion>
            <args2>
                <arg name="verb" type="string" objcName="verb" />
                <arg name="url" type="string" objcName="url" />
                <arg name="byteData" type="bytes" objcName="byteData" />
                <arg name="contentType" type="string" objcName="contentType" />
                <arg name="md5" type="bool" objcName="md5" />
                <arg name="gzip" type="bool" objcName="gzip" />
            </args2>
            <links2 />
        </method>
        <method name="PText" axId="259" ax="1" cpp="1" dn="1" events="1">
            <gType>HttpResponse</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>verb</argName>
                    <objcName>verb</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>textData</argName>
                    <objcName>textData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>contentType</argName>
                    <objcName>contentType</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>md5</argName>
                    <objcName>md5</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>gzip</argName>
                    <objcName>gzip</objcName>
                </arg>
            </args>
            <descrip>Sends an HTTP request to the ARG2.  The ARG1 can be "POST" or "PUT".  The body of the HTTP request contains the text  passed in ARG3.  The ARG5 is a content type such as "text/xml", "application/json", etc.  If ARG6 is _TRUE_, then a Content-MD5 header is added with the base64 MD5 hash of the ARG3.  Servers aware of the Content-MD5 header will perform a message integrity check to ensure that the data has not been corrupted.  If ARG7 is _TRUE_, the ARG5 is compressed using the gzip algorithm.  The HTTP request body will contain the GZIP compressed data, and a "Content-Encoding: gzip" header is automatically added to indicate that the request data needs to be ungzipped when received (at the server).</descrip>
            <iversion>9.5.0.46</iversion>
            <args2>
                <arg name="verb" type="string" objcName="verb" />
                <arg name="url" type="string" objcName="url" />
                <arg name="textData" type="string" objcName="textData" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="contentType" type="string" objcName="contentType" />
                <arg name="md5" type="bool" objcName="md5" />
                <arg name="gzip" type="bool" objcName="gzip" />
            </args2>
            <links2 />
        </method>
        <method name="PostBinary" axId="211" ax="1" cpp="1" dn="1" events="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>byteData</argName>
                    <objcName>byteData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>contentType</argName>
                    <objcName>contentType</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>md5</argName>
                    <objcName>md5</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>gzip</argName>
                    <objcName>gzip</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Sends an HTTP  POST request to the ARG1.  The body of the HTTP request contains the bytes passed in ARG2.  The ARG3 is a content type such as "image/gif", "application/pdf", etc.  If ARG4 is _TRUE_, then a Content-MD5 header is added with the base64 MD5 hash of the ARG2.  Servers aware of the Content-MD5 header will perform a message integrity check to ensure that the data has not been corrupted.  If ARG5 is _TRUE_, the ARG2 is compressed using the gzip algorithm.  The HTTP request body will contain the GZIP compressed data, and a "Content-Encoding: gzip" header is automatically added to indicate that the request data needs to be ungzipped when received (at the server).
&lt;p&gt;Returns the text body of the HTTP response if the HTTP response has a success status code.  Otherwise the method is considered to have failed.  If more details of the HTTP response are required, call PBinary instead (which returns the HTTP response object).
&lt;p&gt;Note: The HTTP response code is available in the LastStatus property.  Other properties having information include LastResponseHeader, LastResponseBody, LastModDate, LastContentType, etc.&lt;/p&gt;</descrip>
            <args2>
                <arg name="url" type="string" objcName="url" />
                <arg name="byteData" type="bytes" objcName="byteData" />
                <arg name="contentType" type="string" objcName="contentType" />
                <arg name="md5" type="bool" objcName="md5" />
                <arg name="gzip" type="bool" objcName="gzip" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="PostJson" axId="212">
            <gType>HttpResponse</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>jsonText</argName>
                    <objcName>jsonText</objcName>
                </arg>
            </args>
            <descrip>A simplified way of sending a JSON POST and receiving the JSON response.   The HTTP response is returned in an HTTP response object.   The content type of the HTTP request is "applicatoin/jsonrequest".  To send a JSON POST using "application/json", call the PostJson2 method where the content type can be explicitly provided.</descrip>
            <links2>
                <link linkType="example">
                    <text>HTTP POST JSON</text>
                    <url>http_post_json.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="url" type="string" objcName="url" />
                <arg name="jsonText" type="string" objcName="jsonText" />
            </args2>
        </method>
        <method name="PostJson2" axId="213" ax="1" cpp="1" dn="1" events="1">
            <gType>HttpResponse</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>contentType</argName>
                    <objcName>contentType</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>jsonText</argName>
                    <objcName>jsonText</objcName>
                </arg>
            </args>
            <descrip>The same as PostJson,except it allows for the content type to be explicitly provided.  The PostJson method automatically uses "application/jsonrequest".  If the application needs for the content type to be "application/json", or some other content type, then PostJson2 provides the means.</descrip>
            <links2>
                <link linkType="example">
                    <url>http_post_json2.asp</url>
                    <text>HTTP POST JSON (application/json)</text>
                </link>
            </links2>
            <args2>
                <arg name="url" type="string" objcName="url" />
                <arg name="contentType" type="string" objcName="contentType" />
                <arg name="jsonText" type="string" objcName="jsonText" />
            </args2>
        </method>
        <method name="PostUrlEncoded" axId="215" ax="1" cpp="1" dn="1" events="1">
            <gType>HttpResponse</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
                <arg>
                    <axType>HttpRequest</axType>
                    <dnType>HttpRequest</dnType>
                    <cppType>CkHttpRequest &amp;</cppType>
                    <argName>req</argName>
                    <objcName>req</objcName>
                </arg>
            </args>
            <descrip>Sends a simple URL encoded POST.  The form parameters are sent in the body of the HTTP request in x-www-form-urlencoded format.  The content-type is "application/x-www-form-urlencoded".</descrip>
            <links2>
                <link linkType="example">
                    <text>Duplicating a Simple HTML Form Submission (POST)</text>
                    <url>http_formSubmitPost.asp</url>
                </link>
                <link linkType="example">
                    <text>HTTP POST x-www-form-urlencoded</text>
                    <url>http_postUrlEncoded.asp</url>
                </link>
                <link linkType="example">
                    <text>Debugging HTTP</text>
                    <url>http_debugging.asp</url>
                </link>
                <link linkType="example">
                    <url>http_postUrlEncoded_clarified.asp</url>
                    <text>PostUrlEncoded Clarified</text>
                </link>
            </links2>
            <args2>
                <arg name="url" type="string" objcName="url" />
                <arg name="req" type="HttpRequest" objcName="req" />
            </args2>
        </method>
        <method name="PostXml" axId="216" ax="1" cpp="1" dn="1" events="1">
            <gType>HttpResponse</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>endpointUrl</argName>
                    <objcName>url</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>xmlContent</argName>
                    <objcName>xmlDoc</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>xmlCharset</argName>
                    <objcName>charset</objcName>
                </arg>
            </args>
            <descrip>A simplified way of posting XML content to a web server.  This method is good for making SOAP calls using HTTP POST.  The ARG3 should match the character encoding used in the ARG2, which is typically "utf-8".   The HTTP response is returned in an HTTP response object.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt;  This method sends the POST with a "Content-Type" header value of "text/xml".  Sometimes a server might require the Content-Type header to be "application/xml".   To use "application/xml" instead of the default "text/xml", call &lt;b&gt;SetRequestHeader("Content-Type","application/xml")&lt;/b&gt; prior to calling this method.
&lt;p&gt;
&lt;b&gt;To use HTTPS &lt;/b&gt; simply pass an ARG1 beginning with "https://" instead of "http://". This applies to any Chilkat method where a URL is passed as an argument.</descrip>
            <links2>
                <link linkType="example">
                    <text>Send XMLHttpRequest and Get Response</text>
                    <url>http_xmlHttpRequest.asp</url>
                </link>
                <link linkType="example">
                    <text>Calling a SOAP Web Service using PostXml</text>
                    <url>soap_web_service.asp</url>
                </link>
                <link linkType="example">
                    <text>Debugging HTTP</text>
                    <url>http_debugging.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="endpointUrl" type="string" objcName="url" />
                <arg name="xmlContent" type="string" objcName="xmlDoc" />
                <arg name="xmlCharset" type="string" objcName="charset" />
            </args2>
        </method>
        <method name="PutBinary" axId="217" ax="1" cpp="1" dn="1" events="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>byteData</argName>
                    <objcName>byteData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>contentType</argName>
                    <objcName>contentType</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>md5</argName>
                    <objcName>md5</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>gzip</argName>
                    <objcName>gzip</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Sends an HTTP PUT request to the ARG1.  The body of the HTTP request is ARG2.  The ARG3 is a content type such as "image/gif", "application/pdf", etc.  If ARG4 is _TRUE_, then a Content-MD5 header is added with the base64 MD5 hash of the ARG2.  Servers aware of the Content-MD5 header will perform a message integrity check to ensure that the data has not been corrupted.  If ARG5 is _TRUE_, the ARG2 is compressed using the gzip algorithm.  The HTTP request body will contain the GZIP compressed data, and a "Content-Encoding: gzip" header is automatically added to indicate that the request data needs to be ungzipped when received (at the server).
&lt;p&gt;Returns the text body of the HTTP response if the HTTP response has a success status code.  Otherwise the method is considered to have failed.  If more details of the HTTP response are required, call PBinary instead (which returns the HTTP response object).</descrip>
            <args2>
                <arg name="url" type="string" objcName="url" />
                <arg name="byteData" type="bytes" objcName="byteData" />
                <arg name="contentType" type="string" objcName="contentType" />
                <arg name="md5" type="bool" objcName="md5" />
                <arg name="gzip" type="bool" objcName="gzip" />
            </args2>
            <links2 />
        </method>
        <method name="PutText" axId="218" ax="1" cpp="1" dn="1" events="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>textData</argName>
                    <objcName>textData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>contentType</argName>
                    <objcName>contentType</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>md5</argName>
                    <objcName>md5</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>gzip</argName>
                    <objcName>gzip</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Sends an HTTP PUT request to the ARG1.  The body of the HTTP request is ARG2.  The ARG3 should be set to a charset name such as "iso-8859-1", "windows-1252", "Shift_JIS", "utf-8", etc.  The string "ansi" may also be used as a charset name.  The ARG4 is a content type such as "text/plain", "text/xml", etc.  If ARG5 is _TRUE_, then a Content-MD5 header is added with the base64 MD5 hash of the ARG2.  Servers aware of the Content-MD5 header will perform a message integrity check to ensure that the data has not been corrupted.  If ARG6 is _TRUE_, the ARG2 is compressed using the gzip algorithm.  The HTTP request body will contain the GZIP compressed data, and a "Content-Encoding: gzip" header is automatically added to indicate that the request data needs to be ungzipped when received (at the server).
&lt;p&gt;Returns the text body of the HTTP response if the HTTP response has a success status code.  Otherwise the method is considered to have failed.  If more details of the HTTP response are required, call PText instead (which returns the HTTP response object).</descrip>
            <links2>
                <link linkType="example">
                    <text>HTTP PUT JSON</text>
                    <url>http_put_json.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="url" type="string" objcName="url" />
                <arg name="textData" type="string" objcName="textData" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="contentType" type="string" objcName="contentType" />
                <arg name="md5" type="bool" objcName="md5" />
                <arg name="gzip" type="bool" objcName="gzip" />
            </args2>
        </method>
        <method name="QuickDeleteStr" axId="219" ax="1" cpp="1" dn="1" events="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Same as QuickGetStr, but uses the HTTP DELETE method instead of the GET method.
&lt;p&gt;Note: The HTTP response code is available in the LastStatus property.  Other properties having information include LastResponseHeader, LastResponseBody, LastModDate, LastContentType, etc.&lt;/p&gt;</descrip>
            <links2>
                <link linkType="example">
                    <text>Debugging HTTP</text>
                    <url>http_debugging.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="url" type="string" objcName="url" />
            </args2>
        </method>
        <method name="QuickGet" axId="220" ax="1" cpp="1" dn="1" events="1" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Sends an HTTP GET request for a URL and returns the response body as a byte array.  The URL may contain query parameters.  If the SendCookies property is true, matching cookies previously persisted to the CookiesDir are automatically included in the request.  If the FetchFromCache property is true, the page may be fetched directly from cache.  Because the URL can specify any type of resource (HTML page, GIF image, etc.) the return value is a byte array.  If the resource is known to be a string, such as with an HTML page, you may call QuickGetStr instead.  If the HTTP request fails, a zero-length byte array is returned and error information can be found in the LastErrorText, LastErrorXml, or LastErrorHtml properties.
&lt;p&gt;Note: The HTTP response code is available in the LastStatus property.  Other properties having information include LastResponseHeader, LastResponseBody, LastModDate, LastContentType, etc.&lt;/p&gt;</descrip>
            <args2>
                <arg name="url" type="string" objcName="url" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>facebook_download_all_photos.asp</url>
                    <text>Facebook Download all Photos to Local Files</text>
                </link>
                <link linkType="example">
                    <url>zip_openFromMemory.asp</url>
                    <text>Download a Zip from a URL and OpenFromMemory. (No .zip fie is created)</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="QuickGetObj" axId="221">
            <gType>HttpResponse</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
            </args>
            <descrip>Sends an HTTP GET request for a URL and returns the response object.  If the SendCookies property is  _TRUE_, matching cookies previously persisted to the CookiesDir are automatically included in the request.  If the FetchFromCache property is _TRUE_, the page could be fetched directly from cache.</descrip>
            <links2>
                <link linkType="example">
                    <url>async_http_response.asp</url>
                    <text>Getting the HTTP Response after an Asynchronous HTTP Request Completes</text>
                </link>
            </links2>
            <args2>
                <arg name="url" type="string" objcName="url" />
            </args2>
        </method>
        <method name="QuickGetStr" axId="222" outArgName="outStr" ax="1" cpp="1" dn="1" events="1">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Sends an HTTP GET request for a URL and returns the response body as a string.  The URL may contain query parameters.  If the SendCookies property is _TRUE_, matching cookies previously persisted to the CookiesDir are automatically included in the request.  If the FetchFromCache property is _TRUE_, the page could be fetched directly from cache.   If the HTTP request fails, a _NULL_ value is returned and error information can be found in the LastErrorText, LastErrorXml, or LastErrorHtml properties.
&lt;p&gt;Note: The HTTP response code is available in the LastStatus property.  Other properties having information include LastResponseHeader, LastResponseBody, LastModDate, LastContentType, etc.&lt;/p&gt;</descrip>
            <links2>
                <link linkType="example">
                    <text>HTTP GET - Download HTML or any Text Content to a String</text>
                    <url>http_quickgetstr.asp</url>
                </link>
                <link linkType="example">
                    <text>HTTPS GET using SSL/TLS</text>
                    <url>http_get_using_ssl_tls.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="url" type="string" objcName="url" />
            </args2>
        </method>
        <method name="QuickPutStr" axId="223" ax="1" cpp="1" dn="1" events="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Same as QuickGetStr, but uses the HTTP PUT method instead of the GET method.
&lt;p&gt;Note: The HTTP response code is available in the LastStatus property.  Other properties having information include LastResponseHeader, LastResponseBody, LastModDate, LastContentType, etc.&lt;/p&gt;</descrip>
            <links2>
                <link linkType="example">
                    <text>Debugging HTTP</text>
                    <url>http_debugging.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="url" type="string" objcName="url" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="RemoveQuickHeader" axId="224">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>headerFieldName</argName>
                    <objcName>name</objcName>
                </arg>
            </args>
            <descrip>Removes a header from the internal list of custom header field name/value pairs to be automatically added when HTTP requests are sent via methods that do not use the HTTP request object.  (The AddQuickHeader method is called to add custom header fields.)
&lt;p&gt;
* Note: This method is deprecated.  It is identical to the RemoveRequestHeader method.  The RemoveRequestHeader method should be called instead because this method will be removed in a future version.</descrip>
            <args2>
                <arg name="headerFieldName" type="string" objcName="name" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="RemoveRequestHeader" axId="225">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>name</argName>
                    <objcName>name</objcName>
                </arg>
            </args>
            <descrip>Removes a header from the internal list of custom header field name/value pairs to be automatically added when HTTP requests are sent via methods that do not use the HTTP request object.  (The SetRequestHeader method is called to add custom header fields.)</descrip>
            <args2>
                <arg name="name" type="string" objcName="name" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="RenderGet" axId="226" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Same as QuickGet, but does not send the HTTP GET.  Instead, it builds
the HTTP request that would've been sent and returns it.</descrip>
            <args2>
                <arg name="url" type="string" objcName="url" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="ResumeDownload" axId="227">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>targetFilename</argName>
                    <objcName>appendToPath</objcName>
                </arg>
            </args>
            <descrip>Same as the Download method, except a failed download may be resumed.  The ARG2 is automatically checked and if it exists, the download will resume at the point where it previously failed.  ResumeDownload may be called any number of times until the full download is complete.</descrip>
            <args2>
                <arg name="url" type="string" objcName="url" />
                <arg name="targetFilename" type="string" objcName="appendToPath" />
            </args2>
            <links2 />
        </method>
        <method name="S3_CreateBucket" axId="228" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>bucketPath</argName>
                    <objcName>bucketName</objcName>
                </arg>
            </args>
            <descrip>Creates a new Amazon S3 bucket.
&lt;p&gt;Note: x-amz-* headers, including metadata, can be added to any S3 request by adding each header with a call to SetRequestHeader.  This applies to all S3 methods, even if not explicitly stated.</descrip>
            <links2>
                <link linkType="example">
                    <text>S3 Create Bucket Example</text>
                    <url>s3_createBucket.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="bucketPath" type="string" objcName="bucketName" />
            </args2>
        </method>
        <method name="S3_DeleteBucket" axId="229" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>bucketPath</argName>
                    <objcName>bucketName</objcName>
                </arg>
            </args>
            <descrip>Deletes an Amazon S3 bucket.</descrip>
            <links2>
                <link linkType="example">
                    <text>S3 Delete Bucket</text>
                    <url>s3_deleteBucket.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="bucketPath" type="string" objcName="bucketName" />
            </args2>
        </method>
        <method name="S3_DeleteMultipleObjects" axId="261" ax="1" cpp="1" dn="1" events="1">
            <gType>HttpResponse</gType>
            <descrip>Deletes multiple objects from a bucket using a single HTTP request.  The ARG1 contains the names (also known as "keys") of the objects to be deleted.  To delete a specific version of an object, append a versionId attribute to the object name.  For example: "SampleDocument.txt; VersionId="OYcLXagmS.WaD..oyH4KRguB95_YhLs7""</descrip>
            <iversion>9.5.0.47</iversion>
            <args>
                <arg>
                    <argName>bucketName</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>bucketName</objcName>
                </arg>
                <arg>
                    <argName>objectNames</argName>
                    <cppType>CkStringArray &amp;</cppType>
                    <dnType>StringArray</dnType>
                    <axType>StringArray</axType>
                    <objcName>objectNames</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>s3_deleteMultipleObjects.asp</url>
                    <text>Delete Multiple Objects Example</text>
                </link>
            </links2>
            <args2>
                <arg name="bucketName" type="string" objcName="bucketName" />
                <arg name="objectNames" type="StringArray" objcName="objectNames" />
            </args2>
        </method>
        <method name="S3_DeleteObject" axId="230" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>bucketPath</argName>
                    <objcName>bucketName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>objectName</argName>
                    <objcName>objectName</objcName>
                </arg>
            </args>
            <descrip>Deletes a remote file (object) on the Amazon S3 service.</descrip>
            <links2>
                <link linkType="example">
                    <text>S3 Delete File</text>
                    <url>s3_deleteFile.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="bucketPath" type="string" objcName="bucketName" />
                <arg name="objectName" type="string" objcName="objectName" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="S3_DownloadBytes" axId="231" outArgName="outBytes">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>bucketPath</argName>
                    <objcName>bucketName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>objectName</argName>
                    <objcName>objectName</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>The same as DownloadFile, except the file data is returned directly in-memory instead of being written to a local file.</descrip>
            <args2>
                <arg name="bucketPath" type="string" objcName="bucketName" />
                <arg name="objectName" type="string" objcName="objectName" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>http_s3_downloadBytes.asp</url>
                    <text>Demonstrate S3_DownloadBytes</text>
                </link>
            </links2>
        </method>
        <method name="S3_DownloadFile" axId="232" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>bucketPath</argName>
                    <objcName>bucketName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>objectName</argName>
                    <objcName>objectName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localFilePath</argName>
                    <objcName>localFilePath</objcName>
                </arg>
            </args>
            <descrip>Downloads a file from the Amazon S3 service.</descrip>
            <links2>
                <link linkType="example">
                    <text>S3 Download File Example</text>
                    <url>s3_downloadFile.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="bucketPath" type="string" objcName="bucketName" />
                <arg name="objectName" type="string" objcName="objectName" />
                <arg name="localFilePath" type="string" objcName="localFilePath" />
            </args2>
        </method>
        <method name="S3_DownloadString" axId="233" ax="1" cpp="1" dn="1" events="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>bucketPath</argName>
                    <objcName>bucketName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>objectName</argName>
                    <objcName>objectName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Downloads a text file (object) from the Amazon S3 service directly into a string variable.  The ARG3 specifies the character encoding, such as "utf-8", of the remote text object.</descrip>
            <links2>
                <link linkType="example">
                    <text>S3 Download String Object</text>
                    <url>s3_downloadString.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="bucketPath" type="string" objcName="bucketName" />
                <arg name="objectName" type="string" objcName="objectName" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="S3_FileExists" axId="234">
            <gType>int</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>bucketPath</argName>
                    <objcName>bucketName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>objectName</argName>
                    <objcName>objectName</objcName>
                </arg>
            </args>
            <descrip>Determines if a remote object (file) exists.  Returns 1 if the file exists, 0 if it does not exist, -1 if there was a failure in checking, or 2 if using in asynchronous mode to indicate that the background task was successfully started.</descrip>
            <args2>
                <arg name="bucketPath" type="string" objcName="bucketName" />
                <arg name="objectName" type="string" objcName="objectName" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>s3_get_user_metadata.asp</url>
                    <text>Read S3 Object Metadata of File Already Uploaded to S3</text>
                </link>
            </links2>
        </method>
        <method name="S3_GenerateUrl" axId="260" outArgName="outStr" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Generates a temporary pre-signed URL for Amazon S3 using AWS Signature V2.   (Call S3_GenerateUrlV4 to generate AWS Signature V4 pre-signed URLs.) Requires that the AwsSecretKey and AwsAccessKey be set to valid values prior to calling this method.</descrip>
            <iversion>9.5.0.46</iversion>
            <args>
                <arg>
                    <argName>bucket</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>bucket</objcName>
                </arg>
                <arg>
                    <argName>path</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>path</objcName>
                </arg>
                <arg>
                    <argName>expire</argName>
                    <cppType>CkDateTime &amp;</cppType>
                    <dnType>CkDateTime</dnType>
                    <axType>CkDateTime</axType>
                    <objcName>expire</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <text>Generate S3 Signed URL</text>
                    <url>s3_signed_url.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="bucket" type="string" objcName="bucket" />
                <arg name="path" type="string" objcName="path" />
                <arg name="expire" type="CkDateTime" objcName="expire" />
            </args2>
        </method>
        <method name="S3_ListBucketObjects" axId="235" ax="1" cpp="1" dn="1" events="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>bucketPath</argName>
                    <objcName>bucketName</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Retrieves the XML listing of the objects contained within an Amazon S3 bucket.  (This is like a directory listing, but in XML format.)
&lt;p&gt;
The ARG1 name may  be qualified with URL-encoded params. For example, to list
the objects in a bucket named "ChilkatABC" with max-keys = 2000 and marker = "xyz", call S3_ListBucketObject passing the following string for ARG1:  "ChilkatABC?max-keys=2000&amp;marker=xyz"
&lt;p&gt;
The S3_ListBucketObjects method recognized all params listed in the AWS documentation for listing objects in a bucket: delimiter, marker, max-keys, and prefix. See Amazon's AWS online documentation for more information.</descrip>
            <links2>
                <link linkType="example">
                    <text>S3 List Objects in Bucket</text>
                    <url>s3_listBucketObjects.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="bucketPath" type="string" objcName="bucketName" />
            </args2>
        </method>
        <method name="S3_ListBuckets" axId="236" ax="1" cpp="1" dn="1" events="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Retrieves the XML listing of the buckets for an Amazon S3 account.</descrip>
            <links2>
                <link linkType="example">
                    <text>S3 List Buckets Example</text>
                    <url>s3_listBuckets.asp</url>
                </link>
            </links2>
            <args2 />
        </method>
        <method name="S3_UploadBytes" axId="237" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>contentBytes</argName>
                    <objcName>objectContent</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>contentType</argName>
                    <objcName>contentType</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>bucketPath</argName>
                    <objcName>bucketName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>objectName</argName>
                    <objcName>objectName</objcName>
                </arg>
            </args>
            <descrip>The same as S3_UploadFile, except the contents of the file come from ARG1 instead of a local file.
&lt;p&gt;Note: x-amz-* headers, including metadata, can be added to any S3 request by adding each header with a call to SetRequestHeader.  This applies to all S3 methods, even if not explicitly stated.</descrip>
            <args2>
                <arg name="contentBytes" type="bytes" objcName="objectContent" />
                <arg name="contentType" type="string" objcName="contentType" />
                <arg name="bucketPath" type="string" objcName="bucketName" />
                <arg name="objectName" type="string" objcName="objectName" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>s3_http_upload_bytes.asp</url>
                    <text>Demonstrate S3_UploadBytes</text>
                </link>
            </links2>
        </method>
        <method name="S3_UploadFile" axId="238" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localFilePath</argName>
                    <objcName>localFilePath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>contentType</argName>
                    <objcName>contentType</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>bucketPath</argName>
                    <objcName>bucketName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>objectName</argName>
                    <objcName>ObjectName</objcName>
                </arg>
            </args>
            <descrip>Uploads a file to the Amazon S3 service.
&lt;p&gt;Note: x-amz-* headers, including metadata, can be added to any S3 request by adding each header with a call to SetRequestHeader.  This applies to all S3 methods, even if not explicitly stated.</descrip>
            <links2>
                <link linkType="example">
                    <text>S3 Upload File</text>
                    <url>s3_uploadFile.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="localFilePath" type="string" objcName="localFilePath" />
                <arg name="contentType" type="string" objcName="contentType" />
                <arg name="bucketPath" type="string" objcName="bucketName" />
                <arg name="objectName" type="string" objcName="ObjectName" />
            </args2>
        </method>
        <method name="S3_UploadString" axId="239" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>objectContent</argName>
                    <objcName>objectContent</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>contentType</argName>
                    <objcName>contentType</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>bucketPath</argName>
                    <objcName>bucketName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>objectName</argName>
                    <objcName>ObjectName</objcName>
                </arg>
            </args>
            <descrip>Uploads an in-memory string to the Amazon S3 service.  This is the same as UploadFile, except that the file contents are from an in-memory string instead of a local file.  Internal to this method, the ARG1 is converted to the character encoding specified by ARG2 prior to uploading.
&lt;p&gt;Note: x-amz-* headers, including metadata, can be added to any S3 request by adding each header with a call to SetRequestHeader.  This applies to all S3 methods, even if not explicitly stated.</descrip>
            <links2>
                <link linkType="example">
                    <text>S3 Upload String</text>
                    <url>s3_uploadString.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="objectContent" type="string" objcName="objectContent" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="contentType" type="string" objcName="contentType" />
                <arg name="bucketPath" type="string" objcName="bucketName" />
                <arg name="objectName" type="string" objcName="ObjectName" />
            </args2>
        </method>
        <method name="SetCookieXml" axId="240" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>domain</argName>
                    <objcName>domain</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>cookieXml</argName>
                    <objcName>cookieXml</objcName>
                </arg>
            </args>
            <descrip>Restores cookies for a particular domain.  It is assumed that the cookie XML was previously retrieved via the GetCookieXml method, and saved to some sort of persistent storage, such as within a database table.  It is then possible for an application to restore the cookies by calling this method.</descrip>
            <args2>
                <arg name="domain" type="string" objcName="domain" />
                <arg name="cookieXml" type="string" objcName="cookieXml" />
            </args2>
            <links2 />
        </method>
        <method name="SetOAuthRsaKey" ax="1" cpp="1" dn="1" status="1" axId="255">
            <gType>bool</gType>
            <descrip>Sets the RSA key to be used with OAuth authentication when the RSA-SHA1 OAuth signature method is used (see the OAuthSigMethod property).</descrip>
            <args>
                <arg>
                    <argName>privKey</argName>
                    <cppType>CkPrivateKey &amp;</cppType>
                    <dnType>PrivateKey</dnType>
                    <axType>PrivateKey</axType>
                    <objcName>privKey</objcName>
                </arg>
            </args>
            <iversion>9.5.0.39</iversion>
            <args2>
                <arg name="privKey" type="PrivateKey" objcName="privKey" />
            </args2>
            <links2 />
        </method>
        <method name="SetRequestHeader" axId="241" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>headerFieldName</argName>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>headerFieldValue</argName>
                    <objcName>value</objcName>
                </arg>
            </args>
            <descrip>Adds a custom header field to any HTTP request sent by a method that does not use the HTTP request object.  These methods include Download, DownloadAppend, GetHead, PostBinary, PostMime, PostXml, PutBinary, PutText, QuickDeleteStr, QuickGet, QuickGetObj, QuickGetStr, QuickPutStr, XmlRpc, and XmlRpcPut.  
&lt;p&gt;
Cookies may be explictly added by calling this method passing  "Cookie" for the ARG1.  
&lt;p&gt;
The RemoveRequestHeader method can be called to remove a custom header.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; Never explicitly set the Content-Length header field.  Chilkat will automatically compute the correct length and add the Content-Length header to all POST, PUT, or any other request where the Content-Length needs to be specified.  (GET requests always have a 0 length body, and therefore never need a Content-Length header field.)</descrip>
            <links2>
                <link linkType="example">
                    <url>http_addHeaderToGet.asp</url>
                    <text>Add Custom Header to HTTP GET</text>
                </link>
            </links2>
            <args2>
                <arg name="headerFieldName" type="string" objcName="name" />
                <arg name="headerFieldValue" type="string" objcName="value" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetSslClientCert" axId="242">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <descrip>Allows for a client-side certificate to be used for an SSL connection.</descrip>
            <links2>
                <link linkType="example">
                    <url>http_tlsMutualAuthentication.asp</url>
                    <text>HTTP TLS Mutual Authentication (Client-Side Certificate)</text>
                </link>
            </links2>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetSslClientCertPem" axId="243">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pemDataOrPath</argName>
                    <objcName>pemDataOrPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pemPassword</argName>
                    <objcName>pemPassword</objcName>
                </arg>
            </args>
            <descrip>Allows for a client-side certificate + private key to be used for the SSL / TLS connection (often called 2-way SSL).</descrip>
            <links2>
                <link linkType="external">
                    <text>How to Create a PEM that Contains Certificates and a Private Key</text>
                    <url>http://www.chilkatforum.com/questions/356/how-to-use-a-client-side-certificate-and-private-key-for-an-ssltls-connection</url>
                </link>
                <link linkType="example">
                    <url>http_tlsMutualAuthentication.asp</url>
                    <text>HTTP TLS Mutual Authentication (Client-Side Certificate)</text>
                </link>
            </links2>
            <args2>
                <arg name="pemDataOrPath" type="string" objcName="pemDataOrPath" />
                <arg name="pemPassword" type="string" objcName="pemPassword" />
            </args2>
        </method>
        <method name="SetSslClientCertPfx" axId="244" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pfxPath</argName>
                    <objcName>pfxPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pfxPassword</argName>
                    <objcName>pfxPassword</objcName>
                </arg>
            </args>
            <descrip>Allows for a client-side certificate + private key to be used for the SSL / TLS connection (often called 2-way SSL).</descrip>
            <links2>
                <link linkType="example">
                    <url>http_tlsMutualAuthentication.asp</url>
                    <text>HTTP TLS Mutual Authentication (Client-Side Certificate)</text>
                </link>
            </links2>
            <args2>
                <arg name="pfxPath" type="string" objcName="pfxPath" />
                <arg name="pfxPassword" type="string" objcName="pfxPassword" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="SleepMs" axId="245">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>millisec</argName>
                    <objcName>millisec</objcName>
                </arg>
            </args>
            <descrip>Convenience method to force the calling process to sleep for a number of milliseconds.</descrip>
            <args2>
                <arg name="millisec" type="int" objcName="millisec" />
            </args2>
            <links2 />
        </method>
        <method name="SynchronousRequest" axId="246" ax="1" cpp="1" dn="1" events="1">
            <gType>HttpResponse</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>domain</argName>
                    <objcName>domain</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>port</argName>
                    <objcName>port</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>ssl</argName>
                    <objcName>ssl</objcName>
                </arg>
                <arg>
                    <axType>HttpRequest</axType>
                    <dnType>HttpRequest</dnType>
                    <cppType>CkHttpRequest &amp;</cppType>
                    <argName>req</argName>
                    <objcName>req</objcName>
                </arg>
            </args>
            <descrip>Sends an explicit HttpRequest to an HTTP server and returns an HttpResponse object. The HttpResponse object provides full access to the response including all headers and the response body. This method may be used to send POST requests, as well as GET, HEAD, file uploads, and XMLHTTP.  To send via HTTPS (i.e. TLS), set the ARG3 property = _TRUE_.  Otherwise set it to _FALSE_.</descrip>
            <links2>
                <link linkType="external">
                    <text>How URL Syntax Relates to SynchronousRequest</text>
                    <url>http://www.cknotes.com/?p=425</url>
                </link>
                <link linkType="example">
                    <text>WebDAV PROPFIND using SynchronousRequest</text>
                    <url>http_webdav_propfind.asp</url>
                </link>
                <link linkType="example">
                    <text>Simple HTTP POST</text>
                    <url>http_post_simple.asp</url>
                </link>
                <link linkType="example">
                    <text>Debugging HTTP</text>
                    <url>http_debugging.asp</url>
                </link>
                <link linkType="example">
                    <text>Send XMLHttpRequest using PUT, GET, DELETE, or any HTTP Request Method</text>
                    <url>http_xmlHttpRequestVerbs.asp</url>
                </link>
                <link linkType="example">
                    <text>Adding Cookies to an HTTP Request</text>
                    <url>http_addCookie.asp</url>
                </link>
                <link linkType="example">
                    <url>http_multipart_form_data_upload.ckx</url>
                    <text>HTTP multipart/form-data Upload</text>
                </link>
                <link linkType="example">
                    <url>parse_url.asp</url>
                    <text>Parse a URL into its Component Parts</text>
                </link>
                <link linkType="example">
                    <url>mtom_xop_attachment.asp</url>
                    <text>SOAP with MTOM XOP Attachment</text>
                </link>
                <link linkType="example" async="1" events="1">
                    <url>http_soapPost12_async.asp</url>
                    <text>Asynchronous HTTP SOAP 1.2 Request and Response using POST</text>
                </link>
            </links2>
            <args2>
                <arg name="domain" type="string" objcName="domain" />
                <arg name="port" type="int" objcName="port" />
                <arg name="ssl" type="bool" objcName="ssl" />
                <arg name="req" type="HttpRequest" objcName="req" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="UnlockComponent" axId="247">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>unlockCode</argName>
                    <objcName>unlockCode</objcName>
                </arg>
            </args>
            <descrip>Unlocks the Http class/component.  It is necessary to call Http.UnlockComponent before calling any other methods.  Passing any string to UnlockComponent will automatically activate a 30-day trial period.</descrip>
            <args2>
                <arg name="unlockCode" type="string" objcName="unlockCode" />
            </args2>
            <links2>
                <link linkType="external">
                    <text>Diagnosing UnlockComponent Problems</text>
                    <url>http://www.cknotes.com/?p=168</url>
                </link>
                <link linkType="external">
                    <text>UnlockComponent LastErrorText shows exact string passed to it.</text>
                    <url>http://www.cknotes.com/?p=315</url>
                </link>
                <link linkType="external">
                    <text>Verify UnlockComponent Success w/ Permanent Unlock Code</text>
                    <url>http://www.cknotes.com/?p=317</url>
                </link>
                <link linkType="external">
                    <text>LastErrorText Standard Information</text>
                    <url>http://www.cknotes.com/?p=316</url>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="UrlDecode" axId="248" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>URL decodes a string.</descrip>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="UrlEncode" axId="249" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>URL encodes a string.</descrip>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="XmlRpc" axId="250" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>urlEndpoint</argName>
                    <objcName>urlEndpoint</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>xmlIn</argName>
                    <objcName>xmlIn</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Makes an XML RPC call to a URL endpoint.  The XML string is passed in an HTTP POST, and the XML response is returned.</descrip>
            <links2>
                <link linkType="example">
                    <text>HTTP XMLRPC Example</text>
                    <url>http_xmlrpc.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="urlEndpoint" type="string" objcName="urlEndpoint" />
                <arg name="xmlIn" type="string" objcName="xmlIn" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="XmlRpcPut" axId="251" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>urlEndpoint</argName>
                    <objcName>urlEndpoint</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>xmlIn</argName>
                    <objcName>xmlIn</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Same as XmlRpc, but uses the HTTP PUT method instead of the POST method.</descrip>
            <args2>
                <arg name="urlEndpoint" type="string" objcName="urlEndpoint" />
                <arg name="xmlIn" type="string" objcName="xmlIn" />
            </args2>
            <links2 />
        </method>
        <method name="DownloadBd" axId="278" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="url" type="string" objcName="url" />
                <arg name="binData" type="BinData" objcName="binData" />
            </args2>
            <links2 />
            <iversion>9.5.0.63</iversion>
            <descrip>Downloads the content at the ARG1 into a BinData object.</descrip>
        </method>
        <method name="DownloadSb" axId="279" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Downloads the content at the ARG1 into a Chilkat StringBuilder object.  The ARG2 tells Chilkat how to interpret the bytes received.   The ARG3 is appended with the downloaded text data.</descrip>
            <args2>
                <arg name="url" type="string" objcName="url" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="sb" type="StringBuilder" objcName="sb" />
            </args2>
            <iversion>9.5.0.63</iversion>
            <links2 />
        </method>
        <method name="QuickGetSb" axId="281" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="url" type="string" objcName="url" />
                <arg name="sbContent" type="StringBuilder" objcName="sbContent" />
            </args2>
            <links2 />
            <iversion>9.5.0.64</iversion>
            <descrip>The same as QuickGetStr, but returns the content in a Chilkat StringBuilder object.   The existing content of ARG2, if any, is cleared and replaced with the downloaded content.</descrip>
        </method>
        <method name="QuickGetBd" axId="282" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>The same as QuickGet, but returns the content in a Chilkat BinData object.   The existing content of ARG2, if any, is cleared and replaced with the downloaded content.</descrip>
            <args2>
                <arg name="url" type="string" objcName="url" />
                <arg name="binData" type="BinData" objcName="binData" />
            </args2>
            <iversion>9.5.0.64</iversion>
            <links2 />
        </method>
        <method name="S3_GenerateUrlV4" axId="283" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Generates a temporary pre-signed URL for Amazon S3 using AWS Signature V4.   (Call S3_GenerateUrl  to generate AWS Signature V2 pre-signed URLs.) Requires that the AwsSecretKey, AwsAccessKey, and AwsRegion properties be set to valid values prior to calling this method.   Also requires the AwsEndpoint property to be set if the endpoint is different than "s3.amazonaws.com".   
&lt;p&gt;
The URL that is generated has this format:
&lt;pre&gt;
https://&lt;AwsEndpoint&gt;/&lt;bucket_name&gt;/&lt;path&gt;
?X-Amz-Algorithm=AWS4-HMAC-SHA256
&amp;X-Amz-Credential=&lt;AwsAccessKey&gt;/&lt;currentDate&gt;/&lt;AwsRegion&gt;/&lt;awsService&gt;/aws4_request
&amp;X-Amz-Date=&lt;currentDateTime&gt;
&amp;X-Amz-Expires=&lt;numSecondsValid&gt;
&amp;X-Amz-SignedHeaders=host
&amp;X-Amz-Signature=&lt;signature-value&gt;  
&lt;/pre&gt;
&lt;p&gt;The ARG4 is a string naming the AWS service, such as "s3".   If ARG1 is _TRUE_, then the URL begins with "https://", otherwise it begins with "http://".</descrip>
            <args2>
                <arg name="useHttps" type="bool" objcName="useHttps" />
                <arg name="bucketName" type="string" objcName="bucketName" />
                <arg name="path" type="string" objcName="path" />
                <arg name="numSecondsValid" type="int" objcName="numSecondsValid" />
                <arg name="awsService" type="string" objcName="awsService" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>aws_pre_signed_url_v4.asp</url>
                    <text>Generate an AWS (S3) Pre-Signed URL using Signature V4</text>
                </link>
            </links2>
        </method>
        <method name="SetUrlVar" axId="284" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="name" type="string" objcName="name" />
                <arg name="value" type="string" objcName="value" />
            </args2>
            <links2 />
            <iversion>9.5.0.67</iversion>
            <descrip>Sets the value of a variable for substitutions in URLs passed  to any method.  Variables can appear in URLs in the following format:  {$varName}.   For example:  https://graph.microsoft.com/v1.0/users/{$id}</descrip>
        </method>
        <method name="ClearUrlVars" axId="285" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <args2 />
            <iversion>9.5.0.67</iversion>
            <links2 />
            <descrip>Clears all URL variable values previously set by one or more calls to SetUrlVar.</descrip>
        </method>
        <method name="PostJson3" axId="287" ax="1" cpp="1" dn="1" events="1">
            <gType>HttpResponse</gType>
            <descrip>The same as PostJson2,except a JSON object is passed in for the request body.</descrip>
            <args2>
                <arg name="url" type="string" objcName="url" />
                <arg name="contentType" type="string" objcName="contentType" />
                <arg name="json" type="JsonObject" objcName="json" />
            </args2>
            <links2 />
            <iversion>9.5.0.68</iversion>
        </method>
    </methods>
    <genericName>Http</genericName>
    <events>
        <standard name="AbortCheck" />
        <standard name="BinaryData" />
        <event name="HttpBeginReceive">
            <gType>event</gType>
            <dotNetArgsClass>EventArgs</dotNetArgsClass>
            <args />
            <descrip>This event is fired just before beginning to read the HTTP response.</descrip>
            <args2 />
            <links2 />
        </event>
        <event name="HttpBeginSend">
            <gType>event</gType>
            <dotNetArgsClass>EventArgs</dotNetArgsClass>
            <args />
            <descrip>This event is fired just before the HTTP request is about to be sent.</descrip>
            <args2 />
            <links2 />
        </event>
        <event name="HttpChunked">
            <gType>event</gType>
            <dotNetArgsClass>EventArgs</dotNetArgsClass>
            <args />
            <descrip>Called when the received response is in chunked format.</descrip>
            <args2 />
            <links2 />
        </event>
        <event name="HttpEndReceive">
            <gType>event</gType>
            <dotNetArgsClass>StatusEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>success</argName>
                    <objcName>success</objcName>
                    <axType>int</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                </arg>
            </args>
            <descrip>This event is fired after the complete HTTP response has been received.</descrip>
            <args2>
                <arg name="success" type="bool" objcName="success" />
            </args2>
            <links2 />
        </event>
        <event name="HttpEndSend">
            <gType>event</gType>
            <dotNetArgsClass>StatusEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>success</argName>
                    <objcName>success</objcName>
                    <axType>int</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                </arg>
            </args>
            <descrip>This event is fired after the complete HTTP request has been sent.</descrip>
            <args2>
                <arg name="success" type="bool" objcName="success" />
            </args2>
            <links2 />
        </event>
        <event name="HttpRedirect">
            <gType>event</gType>
            <dotNetArgsClass>HttpRedirectEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>originalUrl</argName>
                    <objcName>originalUrl</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg>
                    <argName>redirectUrl</argName>
                    <objcName>redirectUrl</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg out="1">
                    <argName>abort</argName>
                    <objcName>abort</objcName>
                    <axType>int</axType>
                    <dnType>bool</dnType>
                    <cppType>bool *</cppType>
                </arg>
            </args>
            <descrip>Called for each redirect that is followed. 
&lt;nonSwig&gt; The ARG3 may be set to _TRUE_ to abort the HTTP request.&lt;/nonSwig&gt;
&lt;swig&gt;Return _TRUE_ to abort; return _FALSE_ to follow the redirect.&lt;/swig&gt;</descrip>
            <args2>
                <arg name="originalUrl" type="string" objcName="originalUrl" />
                <arg name="redirectUrl" type="string" objcName="redirectUrl" />
                <arg name="abort" type="bool" objcName="abort" ref="1" />
            </args2>
            <links2 />
        </event>
        <standard name="PercentDone" />
        <standard name="ProgressInfo" />
        <event name="ReceiveRate">
            <gType>event</gType>
            <dotNetArgsClass>DataRateEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>byteCount</argName>
                    <objcName>byteCount</objcName>
                    <axType>int</axType>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                </arg>
                <arg>
                    <argName>bytesPerSec</argName>
                    <objcName>bytesPerSec</objcName>
                    <axType>int</axType>
                    <dnType>unsigned long</dnType>
                    <cppType>unsigned long</cppType>
                </arg>
            </args>
            <descrip>Periodicallly called with information about the download performance (i.e. the receiving  of the HTTP response).  The ARG1 is the cumulative number of bytes downloaded so far.  The ARG2 is the current transfer rate in bytes per second.</descrip>
            <args2>
                <arg name="byteCount" type="int64" objcName="byteCount" />
                <arg name="bytesPerSec" type="unsigned long" objcName="bytesPerSec" />
            </args2>
            <links2 />
        </event>
        <event name="SendRate">
            <gType>event</gType>
            <dotNetArgsClass>DataRateEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>byteCount</argName>
                    <objcName>byteCount</objcName>
                    <axType>int</axType>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                </arg>
                <arg>
                    <argName>bytesPerSec</argName>
                    <objcName>bytesPerSec</objcName>
                    <axType>int</axType>
                    <dnType>unsigned long</dnType>
                    <cppType>unsigned long</cppType>
                </arg>
            </args>
            <descrip>Called periodically with upload progress information:  The ARG1 is the cumulative number of bytes uploaded so far.  The ARG2 is the current transfer rate in bytes per second.</descrip>
            <args2>
                <arg name="byteCount" type="int64" objcName="byteCount" />
                <arg name="bytesPerSec" type="unsigned long" objcName="bytesPerSec" />
            </args2>
            <links2 />
        </event>
        <standard name="TaskCompleted" />
        <standard name="TextData" />
    </events>
    <description>Class for sending HTTP requests and receiving server responses.
    &lt;p&gt;&lt;ul&gt;&lt;li&gt;Supports GET, POST, HEAD, PUT, DELETE, WebDav, and custom HTTP request methods.&lt;/li&gt;
    &lt;li&gt;HTTP Authentication: Basic, NTLM, Digest, Negotiate&lt;/li&gt;
    &lt;li&gt;HTTPS (SSL/TLS) with client-side certificate capabilities.&lt;/li&gt;
    &lt;li&gt;Cookie caching, auto-resend, persisting to XML files.&lt;/li&gt;
    &lt;li&gt;Content caching.&lt;/li&gt;
    &lt;li&gt;Supports HTTP proxies&lt;/li&gt;
    &lt;li&gt;Auto-follow redirects if desired.&lt;/li&gt;
    &lt;li&gt;Amazon S3 methods.&lt;/li&gt;
    &lt;li&gt;XML HTTP Request&lt;/li&gt;
    &lt;li&gt;HTTP file upload capabilities&lt;/li&gt;
    &lt;li&gt;Asynchronous features -- putting HTTP requests in background threads.&lt;/li&gt;
    &lt;li&gt;Supports SOCK5/SOCKS4 proxies.&lt;/li&gt;
    &lt;li&gt;IPv6 capable.&lt;/li&gt;
    &lt;/ul&gt;</description>
    <clsid>A74C26D2-2429-4099-8672-2250B15E327F</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidEvents>A02D931E-49CC-4D6F-85F5-2D74AB061990</uuidEvents>
    <uuidMidl>C754C4B4-6B0A-4664-ADDD-45467F0BCB7E</uuidMidl>
    <nextAxId>288</nextAxId>
</class>
