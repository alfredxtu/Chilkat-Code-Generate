<?xml version="1.0" encoding="utf-8" ?>
<class XojoModuleId="790934615" sourceXmlPath="c:/ck2000/appData/apiDef2/ZipEntry.xml" license="Zip" hasEvents="1" baseProgress="1">
    <axName>ChilkatZipEntry</axName>
    <dnName>ZipEntry</dnName>
    <cppName>CkZipEntry</cppName>
    <properties>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Comment" axId="100">
            <gType>string</gType>
            <descrip>The comment stored within the Zip for this entry.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="CompressedLength" axId="101">
            <gType>unsigned long</gType>
            <descrip>The size in bytes of this entry's file data when compression is applied</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="0" noObjC="1" read="1" write="0" name="CompressedLength64">
            <gType>int64</gType>
            <descrip>The size in bytes of this entry's file data when compression is applied</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="0" ax="1" read="1" write="0" name="CompressedLengthStr" axId="102">
            <gType>string</gType>
            <descrip>The size in decimal string format of this file when Zip compression is applied.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="CompressionLevel" axId="103">
            <gType>int</gType>
            <descrip>The compression level. 0 = no compression, while 9 = maximum compression. The default is 6.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="CompressionMethod" axId="104">
            <gType>int</gType>
            <descrip>Set to 0 for no compression, or 8 for the Deflate algorithm. The Deflate algorithm is the default algorithm of the most popular Zip utility programs, such as WinZip</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="Crc" axId="105">
            <gType>int</gType>
            <descrip>The CRC for the zip entry.  For AES encrypted entries, the CRC value will be 0.  (See http://www.winzip.com/aes_info.htm#CRC )</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="EntryID" axId="106">
            <gType>int</gType>
            <descrip>The unique ID assigned by Zip.NET while the object is instantiated in memory.</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="EntryType" axId="107" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>Indicates the origin of the entry. There are three possible values:
&lt;ol start="0"&gt;
&lt;li&gt; Mapped Entry: An entry in an existing Zip file.
&lt;li&gt; File Entry: A file not yet in memory, but referenced.  These entries are added by calling AppendFiles, AppendFilesEx, AppendOneFileOrDir, etc.
&lt;li&gt; Data Entry: An entry containing uncompressed data from memory.  These entries are added by calling AppendData, AppendString, etc.
&lt;li&gt; Null Entry: An entry that no longer exists in the .zip.
&lt;li&gt; New Directory Entry: A directory entry added by calling AppendNewDir.
&lt;/ol&gt;
When the zip is written by calling WriteZip or WriteToMemory, all of the zip entries are transformed into mapped entries.  They become entries that contain the compressed data within the .zip that was just created.  (The WriteZip method call effectively writes the zip and then opens it, replacing all of the existing entries with mapped entries.)</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="FileDateTime" axId="108" deprecated="1" noxojo="1">
            <gType>date</gType>
            <descrip>The local last-modified date/time.</descrip>
            <links>
                <link>
                    <text>More information about using SYSTEMTIME in Perl</text>
                    <url_perl>http://www.cknotes.com/?p=122</url_perl>
                </link>
                <link>
                    <text>More information about using SYSTEMTIME in Python</text>
                    <url_python>http://www.cknotes.com/?p=374</url_python>
                </link>
            </links>
            <links2>
                <link linkType="external" lang="perl">
                    <text>More information about using SYSTEMTIME in Perl</text>
                    <url>http://www.cknotes.com/?p=122</url>
                </link>
                <link linkType="external" lang="python">
                    <text>More information about using SYSTEMTIME in Python</text>
                    <url>http://www.cknotes.com/?p=374</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="FileDateTimeStr" axId="109">
            <gType>string</gType>
            <descrip>The local last-modified date/time in RFC822 string format.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="FileName" axId="110">
            <gType>string</gType>
            <descrip>The file name of the Zip entry.</descrip>
            <links2>
                <link linkType="example">
                    <url>zip_set_entry_filepath.asp</url>
                    <text>Set Entry Filepath (in output Zip) when Zipping</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="FileNameHex" read="1" ax="1" cpp="1" dn="1" axId="133">
            <gType>string</gType>
            <descrip>A  string containing the hex encoded raw filename bytes found in the Zip entry.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HeartbeatMs" axId="111">
            <gType>int</gType>
            <descrip>The number of milliseconds between each AbortCheck event callback.  The AbortCheck callback allows an application to abort inflate/extract/unzip calls prior to completion.  If HeartbeatMs is 0 (the default), no AbortCheck event callbacks will fire.</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="IsDirectory" axId="112" read="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>True if the Zip entry is a directory, false if it is a file.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="TextFlag" axId="113">
            <gType>bool</gType>
            <descrip>Controls whether the "text flag" of the internal file attributes for this entry within the zip is set.  This is a bit flag that indicates whether the file contents are text or binary.  It is for informational use and it is not imperative that this bit flag is accurately set.  The ability to set this bit flag is only provided to satisfy certain cases where another application might be sensitive to the flag.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="UncompressedLength" axId="114">
            <gType>unsigned long</gType>
            <descrip>The size in bytes of this entry's file data when uncompressed.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="0" noObjC="1" read="1" write="0" name="UncompressedLength64">
            <gType>int64</gType>
            <descrip>The size in bytes of this entry's file data when uncompressed.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="0" ax="1" read="1" write="0" name="UncompressedLengthStr" axId="115">
            <gType>string</gType>
            <descrip>The size in bytes (in decimal string format) of this zip entry's data when uncompressed.</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="IsAesEncrypted" axId="138" read="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <args2 />
            <links2 />
            <iversion>9.5.0.69</iversion>
            <descrip>_TRUE_ if the entry is AES encrypted.  This property can only be _TRUE_ for entries already contained in a .zip (i.e. entries obtained from a zip archive that was opened via OpenZip, OpenBd, OpenFromMemory, etc.)   The property is _FALSE_ if the entry contained in the zip is not AES encrypted.</descrip>
        </property>
        <property name="EncryptionKeyLen" axId="139" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <args2 />
            <iversion>9.5.0.69</iversion>
            <links2 />
            <descrip>If this entry is AES encrypted, then this property contains the AES key length (128, 192, or 256).  If the entry is not AES encrypted, then the value is 0.</descrip>
        </property>
    </properties>
    <methods>
        <method name="AppendData" axId="116" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>bdata</objcName>
                </arg>
            </args>
            <descrip>Appends binary data to the zip entry's file contents.</descrip>
            <args2>
                <arg name="inData" type="bytes" objcName="bdata" />
            </args2>
            <links2 />
        </method>
        <method name="AppendString" axId="117" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>strContent</argName>
                    <objcName>inStr</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
            </args>
            <descrip>Appends text data to the zip entry's file contents.  The text is appended using the character encoding specified by the ARG2, which can be "utf-8", "ansi", etc.</descrip>
            <args2>
                <arg name="strContent" type="string" objcName="inStr" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method name="Copy" axId="118" ax="1" cpp="1" dn="1" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Returns the compressed data as a byte array.
&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; The Copy method can only be called if the zip entry already contains compressed data (i.e. it is a "mapped entry").  This is the case when an existing .zip is opened (from memory or from a file), or after the .zip has been written (by calling WriteZip or WriteToMemory).   If a zip entry is created via AppendData, AppendFiles, etc., then it does not yet contain compressed data.  When the zip is written, each entry becomes a "mapped entry" (The value of the EntryType property becomes 0.)</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="CopyToBase64" axId="119" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the compressed data as a Base64-encoded string. It is only possible to retrieve the compressed data from a pre-existing .zip that has been opened or after writing the .zip but not closing it.
&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; The CopyToBase64 method can only be called if the zip entry already contains compressed data (i.e. it is a "mapped entry").</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="CopyToHex" axId="120" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the compressed data as a hexidecimal encoded string.  It is only possible to retrieve the compressed data from a pre-existing .zip that has been opened or after writing the .zip but not closing it.
&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; The CopyToBase64 method can only be called if the zip entry already contains compressed data (i.e. it is a "mapped entry").</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="Extract" axId="121" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dirPath</argName>
                    <objcName>dirPath</objcName>
                </arg>
            </args>
            <descrip>Unzips this entry into the specified base directory. The file is unzipped to the subdirectory according to the relative path stored with the entry in the Zip.			Use ExtractInto to unzip into a specific directory regardless of the path information stored in the Zip.</descrip>
            <args2>
                <arg name="dirPath" type="string" objcName="dirPath" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="ExtractInto" axId="122">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dirPath</argName>
                    <objcName>dirPath</objcName>
                </arg>
            </args>
            <descrip>Unzip a file into a specific directory</descrip>
            <args2>
                <arg name="dirPath" type="string" objcName="dirPath" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetDt" axId="123">
            <gType>CkDateTime</gType>
            <args />
            <descrip>Returns the last-modified date/time of this zip entry.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="Inflate" axId="124" outArgName="outData" ax="1" cpp="1" dn="1" events="1">
            <gType>bytes</gType>
            <args>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Inflate a file within a Zip directly into memory.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="NextEntry" axId="125">
            <gType>ZipEntry</gType>
            <args />
            <descrip>Return the next entry (file or directory) within the Zip</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="NextMatchingEntry" ax="1" cpp="1" dn="1" status="1" axId="134">
            <gType>ZipEntry</gType>
            <descrip>Returns the next entry having a filename matching the ARG1.  The "*" characters matches 0 or more of any character.  The full filename, including path, is used when matching against the pattern.</descrip>
            <args>
                <arg>
                    <argName>matchStr</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>matchStr</objcName>
                </arg>
            </args>
            <iversion>9.5.0.50</iversion>
            <links2>
                <link linkType="example">
                    <url>zip_IterateMatching.asp</url>
                    <text>Iterate over Matching Filenames</text>
                </link>
            </links2>
            <args2>
                <arg name="matchStr" type="string" objcName="matchStr" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="ReplaceData" axId="126">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>bdata</objcName>
                </arg>
            </args>
            <descrip>Replaces the zip entry's existing contents with new data.</descrip>
            <args2>
                <arg name="inData" type="bytes" objcName="bdata" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="ReplaceString" axId="127">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>strContent</argName>
                    <objcName>inStr</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
            </args>
            <descrip>Replaces the zip entry's existing contents with new text data.  The text will be stored using the character encoding as specified by ARG2, which can be "utf-8", "ansi", etc.</descrip>
            <args2>
                <arg name="strContent" type="string" objcName="inStr" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>zip_update_file.asp</url>
                    <text>Replace/Update a FIle in a .zip</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="SetDt" axId="128">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>CkDateTime</axType>
                    <dnType>CkDateTime</dnType>
                    <cppType>CkDateTime &amp;</cppType>
                    <argName>dt</argName>
                    <objcName>dt</objcName>
                </arg>
            </args>
            <descrip>Sets the last-modified date/time for this zip entry.</descrip>
            <args2>
                <arg name="dt" type="CkDateTime" objcName="dt" />
            </args2>
            <links2 />
        </method>
        <method name="UnzipToString" axId="129" outArgName="outStr" ax="1" cpp="1" dn="1" events="1">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>lineEndingBehavior</argName>
                    <objcName>lineEndingBehavior</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>srcCharset</argName>
                    <objcName>srcCharset</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Inflate and return the uncompressed data as a string  The ARG1 is as follows:&lt;br&gt;
&lt;br&gt;
0 = leave unchanged.&lt;br&gt;
1 = convert all to bare LF's&lt;br&gt;
2 = convert all to CRLF's&lt;br&gt;
&lt;br&gt;
The ARG2 tells the component how to interpret the bytes of the uncompressed file -- i.e. as utf-8, utf-16, windows-1252, etc.</descrip>
            <links2>
                <link linkType="example">
                    <url>zip_IterateMatching.asp</url>
                    <text>Iterate over Matching Filenames</text>
                </link>
                <link linkType="example">
                    <url>zip_openFromMemory.asp</url>
                    <text>Download a Zip from a URL and OpenFromMemory. (No .zip fie is created)</text>
                </link>
            </links2>
            <args2>
                <arg name="lineEndingBehavior" type="int" objcName="lineEndingBehavior" />
                <arg name="srcCharset" type="string" objcName="srcCharset" />
            </args2>
        </method>
        <method name="UnzipToStream" axId="135" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Unzips a file within a Zip to a stream.  If called synchronously, the ARG1 must have a sink, such as a file or another stream object.  If called asynchronously, then the foreground thread can read the stream.</descrip>
            <args2>
                <arg name="toStream" type="Stream" objcName="toStream" />
            </args2>
            <links2>
                <link linkType="example" async="1">
                    <url>unzip_to_stream.asp</url>
                    <text>Unzip One File to a Stream</text>
                </link>
                <link linkType="example">
                    <url>unzip_binary_to_stream.asp</url>
                    <text async="1">Unzip Binary File to Stream</text>
                </link>
            </links2>
            <iversion>9.5.0.67</iversion>
        </method>
        <method name="UnzipToBd" axId="136" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Unzips the entry contents into the ARG1.</descrip>
            <args2>
                <arg name="binData" type="BinData" objcName="binData" />
            </args2>
            <iversion>9.5.0.67</iversion>
            <links2 />
        </method>
        <method name="UnzipToSb" axId="137" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Unzips a text file to the ARG3.  The contents of ARG3 are appended with the unzipped file. The ARG1 is as follows:&lt;br&gt;
&lt;br&gt;
0 = leave unchanged.&lt;br&gt;
1 = convert all to bare LF's&lt;br&gt;
2 = convert all to CRLF's&lt;br&gt;
&lt;br&gt;
The ARG2 tells the component how to interpret the bytes of the uncompressed file -- i.e. as utf-8, utf-16, windows-1252, etc.</descrip>
            <args2>
                <arg name="lineEndingBehavior" type="int" objcName="lineEndingBehavior" />
                <arg name="srcCharset" type="string" objcName="srcCharset" />
                <arg name="sb" type="StringBuilder" objcName="sb" />
            </args2>
            <iversion>9.5.0.67</iversion>
            <links2 />
        </method>
    </methods>
    <genericName>ZipEntry</genericName>
    <events>
        <standard name="AbortCheck" />
        <standard name="PercentDone" />
        <standard name="ProgressInfo" />
        <standard name="TaskCompleted" />
    </events>
    <description>Represents a single file or directory entry within a Chilkat Zip object.     A zip entry can be one of 5 types (see the description of the EntryType property below).</description>
    <clsid>69E3A666-7F49-4B53-A77F-A8D14217E442</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidEvents>6E032EEB-93BE-4DF6-B7A7-F7D582903936</uuidEvents>
    <uuidMidl>C68497C9-2779-48A4-9062-6DAD6EA5E1C6</uuidMidl>
    <nextAxId>140</nextAxId>
</class>
