<?xml version="1.0" encoding="UTF-8"?>
<events>
    <event name="AbortCheck" standard="1">
    	<dotNetArgsClass>AbortCheckEventArgs</dotNetArgsClass>
        <gType>event</gType>
        <cppType>event</cppType>
        <args>
            <arg out="1" ref="1">
                <argName>abort</argName>
                <objcName>abort</objcName>
                <axType>int</axType>
                <dnType>bool</dnType>
                <cppType>bool *</cppType>
            </arg>
        </args>
        <args2>
            <arg name="abort" type="bool" ref="1" objcName="abort" />
        </args2>
        <descrip>Provides the opportunity for a method call to be aborted.  The AbortCheck event is fired periodically based on the value of the HeartbeatMs property.   If HeartbeatMs is 0, then no AbortCheck events will fire.  As an example, to fire 5 AbortCheck events per second, set the HeartbeatMs property equal to 200. &lt;swig&gt;Return _TRUE_ to abort; return _FALSE_ to continue (not abort)&lt;/swig&gt;</descrip>
    </event>
    <event name="ProgressInfo" standard="1">
        <gType>event</gType>
        <cppType>event</cppType>
    	<dotNetArgsClass>ProgressInfoEventArgs</dotNetArgsClass>
        <args>
            <arg>
                <argName>name</argName>
                <objcName>name</objcName>
                <axType>string</axType>
                <dnType>string</dnType>
                <cppType>const char *</cppType>
            </arg>
            <arg>
                <argName>value</argName>
                <objcName>value</objcName>
                <axType>string</axType>
                <dnType>string</dnType>
                <cppType>const char *</cppType>
            </arg>
        </args>
        <args2>
            <arg name="name" type="string" objcName="name" />
            <arg name="value" type="string" objcName="value" />
        </args2>
        <descrip>A general name/value event that provides information about what is happening during a method call.  To find out what information is available, write code to handle this event and log the name/value pairs.  Most are self-explanatory.</descrip>
    </event>
    <event name="TextData" standard="1">
        <gType>event</gType>
        <cppType>event</cppType>
    	<dotNetArgsClass>TextDataEventArgs</dotNetArgsClass>
        <args>
            <arg>
                <argName>data</argName>
                <objcName>data</objcName>
                <axType>string</axType>
                <dnType>string</dnType>
                <cppType>const char *</cppType>
            </arg>
        </args>
        <args2>
            <arg name="data" type="string" objcName="data" />
        </args2>
        <descrip>Text data provided by certain methods.</descrip>
    </event>
    <event name="BinaryData" standard="1">
        <gType>event</gType>
        <cppType>event</cppType>
    	<dotNetArgsClass>BinaryDataEventArgs</dotNetArgsClass>
        <args>
            <arg>
                <argName>data</argName>
                <objcName>data</objcName>
                <axType>bytes</axType>
                <dnType>bytes</dnType>
                <cppType>const unsigned char *</cppType>
            </arg>
            <arg>
                <argName>length</argName>
                <objcName>length</objcName>
                <note>The axType is intentionally omitted, because there is no 2nd arg for ActiveX</note>
                <dnType>int</dnType>
                <cppType>int</cppType>
            </arg>
        </args>
        <args2>
            <arg name="data" type="cppBytes" objcName="data" />
            <arg name="length" type="szCppBytes" objcName="length" />
        </args2>
        <descrip>Binary data provided by certain methods.</descrip>
    </event>
    <event name="PercentDone" standard="1">
        <gType>event</gType>
        <cppType>event</cppType>
    	<dotNetArgsClass>PercentDoneEventArgs</dotNetArgsClass>
        <args>
            <arg>
                <argName>pctDone</argName>
                <objcName>pctDone</objcName>
                <axType>int</axType>
                <dnType>int</dnType>
                <cppType>int</cppType>
            </arg>
            <arg out="1" ref="1">
                <argName>abort</argName>
                <objcName>abort</objcName>
                <axType>int</axType>
                <dnType>bool</dnType>
                <cppType>bool *</cppType>
            </arg>
        </args>
        <args2>
            <arg name="pctDone" type="int" objcName="pctDone" />
            <arg name="abort" type="bool" ref="1" objcName="abort" />
        </args2>
        <descrip>Provides the percentage completed for any method that involves network communications or time-consuming processing (assuming it is a method where a percentage completion can be measured).  This event is only fired when it is possible to know a percentage completion, and when it makes sense to express the operation as a percentage completed.  The ARG1 argument will have a value from 1 to 100.  For operations (Chilkat method calls) that complete very quickly, the number of PercentDone callbacks will vary, but the final callback should have a value of 100.   For long running operations, no more than one callback per percentage point will occur (for example: 1, 2, 3, ... 98, 99, 100).   &lt;p&gt;The PercentDone callback counts as an AbortCheck event.  For method calls that complete quickly such that PercentDone events fire, it may be that AbortCheck events don't fire because the opportunity to abort is already provided in the PercentDone callback.   For time consuming operations, where the amount of time between PercentDone callbacks are long, AbortCheck callbacks may be used to allow for the operation to be aborted in a more responsive manner.&lt;p&gt;
        &lt;nonSwig&gt;The ARG2 output argument provides a means for aborting the operation.  Setting it to _TRUE_ will cause the method to abort and return a failed status (or whatever return value indicates failure).&lt;/nonSwig&gt;
&lt;swig&gt;Return _TRUE_ to abort; return _FALSE_ to continue (not abort)&lt;/swig&gt;
</descrip>
    </event>
    <event name="TaskCompleted" standard="1">
        <gType>event</gType>
        <cppType>event</cppType>
    	<dotNetArgsClass>TaskCompletedEventArgs</dotNetArgsClass>
        <args>
            <arg>
                <argName>task</argName>
                <objcName>task</objcName>
                <axType>Task</axType>
                <dnType>Task</dnType>
                <cppType>CkTask &amp;</cppType>
            </arg>
        </args>
        <args2>
            <arg name="task" type="Task" objcName="task" />
        </args2>
        <descrip>Called in the background thread when an asynchronous task completes.</descrip>
    <links2>
        <link linkType="external" lang="csharp">
            <url>http://www.cknotes.com/c-taskcompleted-event-updating-the-ui-from-a-background-thread/</url>
            <text>C# TaskCompleted Event Callback Example</text>
        </link>
        <link linkType="external" lang="delphix">
            <url>http://www.cknotes.com/delphi-taskcompleted-event-using-the-chilkat-activex/</url>
            <text>Delphi TaskCompleted Event Callback Example</text>
        </link>
        <link linkType="external" lang="vbnet">
            <url>http://www.cknotes.com/vb-net-taskcompleted-event-for-asynchronous-method-call/</url>
            <text>VB.NET TaskCompleted Event Callback Example</text>
        </link>
        
    </links2>
    </event>
</events>

