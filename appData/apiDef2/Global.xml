<?xml version="1.0" encoding="utf-8" ?>
<class XojoModuleId="428071739" sourceXmlPath="c:/ck2000/appData/apiDef2/Global.xml" license="Free">
    <genericName>Global</genericName>
    <cppName>CkGlobal</cppName>
    <dnName>Global</dnName>
    <axName>ChilkatGlobal</axName>
    <description>Provides a means for updating global settings that affect all types of Chilkat objects across all instances.</description>
    <methods>
        <method name="DnsClearCache" read="1" write="1" axId="104" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Clears the global DNS cache.</descrip>
            <iversion>9.5.0.49</iversion>
            <args />
            <args2 />
            <links2 />
        </method>
        <method name="FinalizeThreadPool" axId="111" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Called to stop and finalize all threads in the thread pool, and causes the thread pool thread to exit.
&lt;p&gt;
The following behaviors exist in &lt;b&gt;v9.5.0.64 and later&lt;/b&gt;:
&lt;ul&gt;
&lt;li&gt;All remaining asynchronous tasks are automatically canceled.&lt;/li&gt;
&lt;li&gt;Restores the thread pool to it's pristine state where no background threads are running.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
It is a good idea to call this method at the very end of a program, just before it exits.   This is especially true for programs written in VBScript and VB6.</descrip>
            <iversion>9.5.0.56</iversion>
            <args />
            <args2 />
            <links2>
                <link linkType="example" async="1">
                    <url>async_finalize_thread_pool_on_exit.asp</url>
                    <text>Finalize Thread Pool on Program Exit</text>
                </link>
            </links2>
        </method>
        <method name="UnlockBundle" axId="105" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Unlocks the entire Chilkat API for all classes.  This should be called once at the beginning of a program.  Once unlocked, objects of any Chilkat class may be instantiated and used.  To unlock in fully-functional 30-day trial mode, pass any string, such as "Hello", in ARG1.  If a license is purchased, then replace the "Hello" with the purchased unlock code.  
&lt;p&gt;
After calling UnlockComponent once, the instance of the CLASS_NAME object may be discarded/deleted (assuming the programming language requires explicit deletes).  Multiple calls to UnlockComponent are harmless.  If the Chilkat API  is already unlocked, the duplicate calls to UnlockComponent are no-ops.
&lt;p&gt;
&lt;b&gt;Note: &lt;/b&gt;The CLASS_NAME's UnlockBundle method should only be called with a Bundle unlock code.  If an individual product license was purchased, the UnlockComponent method in the specifically licensed class should be called instead.</descrip>
            <iversion>9.5.0.49</iversion>
            <args>
                <arg>
                    <argName>bundleUnlockCode</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>bundleUnlockCode</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="external">
                    <url>http://www.chilkatforum.com/questions/9740/chilkatglobals-unlockbundle-method-in-a-c-class-library</url>
                    <text>Call UnlockBundle Only Once at the Beginning of a Program</text>
                </link>
                <link linkType="example">
                    <url>global_unlock.asp</url>
                    <text>Global Unlock</text>
                </link>
            </links2>
            <args2>
                <arg name="bundleUnlockCode" type="string" objcName="bundleUnlockCode" />
            </args2>
        </method>
    </methods>
    <properties>
        <property name="AnsiCodePage" axId="103" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>The default ANSI code page is determined at runtime based on the computer where the application happens to be running.  For example, the ANSI code page for an application running on a Japanese computer is likely to be Shift_JIS (code page 932), whereas on a US-English computer it would be iso-8859-1 (or Windows-1252 which is essentially a superset of iso-8859-1).
&lt;p&gt;
If there is a desire for the Chilkat library to use a specific ANSI code page regardless of locale, then this property should be set to the desired code page.  The default value of this property is the ANSI code page of the local computer.</descrip>
            <iversion>9.5.0.49</iversion>
            <links2 />
            <args2 />
        </property>
        <property name="DefaultNtlmVersion" read="1" write="1" ax="1" cpp="1" dn="1" axId="109">
            <gType>int</gType>
            <descrip>Selects the default NTLM protocol version to use for NTLM authentication for HTTP, POP3, IMAP, SMTP, and HTTP proxies.  The default value is 2.  This property may optionally be set to 1.</descrip>
            <iversion>9.5.0.52</iversion>
            <links2>
                <link linkType="example">
                    <url>ntlm_set_default_version.asp</url>
                    <text>Set Default NTLM Protocol Version (v1 or v2)</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="DefaultUtf8" axId="102" read="1" write="1" ax="1" cpp="1" dn="1" noWinRT="1">
            <gType>bool</gType>
            <descrip>Applies only to programming languages where each class has the Utf8 property, and where strings are passed and returned as multibyte (null-terminated sequences of bytes).   This includes the multibyte C/C++ API, Perl, Python 2.* (not Python 3.*), Ruby, and PHP.   This does not include Java, Objective-C, or Python 3.* as all strings in these languages are utf-8.  This property has no effect in programming languages or APIs that return Unicode or strings as objects (such as .NET).
&lt;p&gt;
A Chilkat class's Utf8 property controls whether strings are returned as utf-8 or ANSI.  It also controls how Chilkat is to interpret the bytes of passed-in arguments.  It must be set to _FALSE_ if the application is passing ANSI strings (i.e. the byte representation is ANSI), and must be set to _TRUE_ if the application is passing string arguments using the utf-8 representation.
&lt;p&gt;
This global Utf8 property controls the default setting of the Utf8 property for all Chilkat objects.  Thus it allows for an application to be entirely in "utf-8 mode" or "ANSI mode" without needing to explicity set the Utf8 property of every Chilkat object instance.</descrip>
            <iversion>9.5.0.49</iversion>
            <links2 />
            <args2 />
        </property>
        <property name="DnsTimeToLive" axId="101" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>If DNS caching is enabled, this is the time-to-live (in seconds) for a cached DNS lookup. A DNS lookup result older than this expiration time is discarded, and causes a new DNS lookup to occur.  A value of 0 indicates an infinite time-to-live.  The default value of this property is 0.</descrip>
            <iversion>9.5.0.49</iversion>
            <links2 />
            <args2 />
        </property>
        <property name="EnableDnsCaching" read="1" write="1" axId="100" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Controls whether DNS domain lookups (to resolve to IP addresses) are cached in memory.  The default value is _FALSE_, meaning that DNS caching is disabled.</descrip>
            <iversion>9.5.0.49</iversion>
            <links2 />
            <args2 />
        </property>
        <property name="KeepBinaryResult" read="1" write="1" ax="1" axId="110" noWinRT="1">
            <gType>bool</gType>
            <descrip>If set to _TRUE_, then the binary data  returned by any method will be persisted in memory in the LastBinaryResult property.  This allows for an ActiveX running in the SQL Server environment to access large varbinary return values via temp tables. The method would be called, and then the LastBinaryResult property would be fetched to get the full contents of the returned string.</descrip>
            <iversion>9.5.0.53</iversion>
            <links2 />
            <args2 />
        </property>
        <property name="KeepStringResult" axId="108" read="1" write="1" ax="1" noWinRT="1">
            <gType>bool</gType>
            <descrip>If set to _TRUE_, then the string returned by any method will be persisted in memory in the LastStringResult property.  This allows for an ActiveX running in the SQL Server environment to access large string return values via temp tables. The method would be called, and then the LastStringResult property would be fetched to get the full contents of the returned string.</descrip>
            <iversion>9.5.0.52</iversion>
            <links2 />
            <args2 />
        </property>
        <property name="MaxThreads" axId="106" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>The maximum number of thread pool threads.  The default value is 100.  The maximum value is 500.  Note: Asynchronous worker threads are created on as needed up to the maximum.</descrip>
            <iversion>9.5.0.52</iversion>
            <links2>
                <link linkType="example">
                    <url>async_threadPoolSize.asp</url>
                    <text>Thread Pool Size</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="ThreadPoolLogPath" axId="107" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>If set, indicates the path of a log file to be used by the thread pool thread and each of the pool worker threads for logging async activity.</descrip>
            <iversion>9.5.0.52</iversion>
            <links2>
                <link linkType="example">
                    <url>async_threadPoolSize.asp</url>
                    <text>Thread Pool Size</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="UnlockStatus" axId="112" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <args2 />
            <iversion>9.5.0.62</iversion>
            <links2 />
            <descrip>Indicates the unlocked status for the last call to UnlockBundle, or any UnlockComponent call.  The possible values are:
&lt;ol start="0"&gt;
&lt;li&gt;Not unlocked.  (Still in locked state.)&lt;/li&gt;
&lt;li&gt;Unlocked with in fully-functional trial mode.&lt;/li&gt;
&lt;li&gt;Unlocked using a valid purchased unlock code.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: If UnlockComponent or UnlockBundle is called with a purchased unlock code, the UnlockStatus is correctly set to the value 2.  This value is intentionally sticky.  If a subsequent and redundant call to UnlockComponent (or UnlockBundle)  happens, it is effectively a "No-Op" because the library is already unlocked.  The UnlockStatus will not change.
&lt;p&gt;If however, if the 1st call resulted  in UnlockStatus = 1, and THEN the unlock method is called again with a purchased unlock code, the UnlockStatus should change from 1 to 2.</descrip>
        </property>
    </properties>
    <events />
    <clsid>B2429147-23BE-4A55-8EAE-2AFF2635815B</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidMidl>4995C839-42F3-4D4F-8A08-1BA24B5F5E8F</uuidMidl>
    <nextAxId>113</nextAxId>
</class>
