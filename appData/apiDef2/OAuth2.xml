<?xml version="1.0" encoding="utf-8" ?>
<class sourceXmlPath="c:/ck2000/appData/apiDef2/OAuth2.xml" license="Bundle" hasEvents="1" baseProgress="1">
    <methods>
        <method name="StartAuth" read="1" write="1" axId="112" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Initiates the three-legged OAuth2 flow.  The various properties, such as ClientId, ClientSecret, Scope, CodeChallenge, AuthorizationEndpoint, and TokenEndpoint, should be set prior to calling this method.
&lt;p&gt;
This method does two things:
&lt;ol&gt;
&lt;li&gt;Forms and returns a URL that is to be loaded in a browser. 
&lt;li&gt;Starts a background thread that listens on a randomly selected unused port to receive the redirect request from the browser.  The receiving of the request from the browser, and the sending of the HTTP request to complete the three-legged OAuth2 flow is done entirely in the background thread.  The application controls this behavior by setting the various properties beforehand.  
&lt;/ol&gt;
The return value is the URL to be loaded (navigated to) in a popup or embedded browser.</descrip>
            <args2 />
            <iversion>9.5.0.59</iversion>
            <links2>
                <link linkType="external" lang="csharp">
                    <url>https://github.com/chilkatsoft/OAuth2-CSharp-Desktop</url>
                    <text>OAuth2 Sample C# Desktop App for Facebook, Google, LinkedIn, Salesforce, and GitHub</text>
                </link>
                <link linkType="external" lang="vbnet">
                    <url>https://github.com/chilkatsoft/OAuth2-VBNet-Desktop</url>
                    <text>OAuth2 for VB.NET Desktop Applications for Facebook, Google, LinkedIn, Salesforce, and GitHub</text>
                </link>
                <link linkType="example">
                    <url>facebook_oauth2_access_token.asp</url>
                    <text>Facebook OAuth2 Access Token</text>
                </link>
                <link linkType="example">
                    <url>google_oauth2_access_token.asp</url>
                    <text>Google OAuth2 Access Token</text>
                </link>
                <link linkType="example">
                    <url>linkedin_oauth2_access_token.asp</url>
                    <text>LinkedIn OAuth2 Access Token</text>
                </link>
                <link linkType="example">
                    <url>salesforce_oauth2_access_token.asp</url>
                    <text>Salesforce OAuth2 Access Token</text>
                </link>
                <link linkType="example">
                    <url>github_oauth2_access_token.asp</url>
                    <text>GitHub OAuth2 Access Token</text>
                </link>
            </links2>
        </method>
        <method name="Cancel" read="1" write="1" axId="110" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Cancels an OAuth2 authorization flow that is in progress.</descrip>
            <args2 />
            <iversion>9.5.0.59</iversion>
            <links2 />
        </method>
        <method name="Monitor" axId="111" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Monitors an already started OAuth2 authorization flow and returns when it is finished.
&lt;p&gt;
&lt;b&gt;Note: &lt;/b&gt;It rarely makes sense to call this method.  If this programming language supports callbacks, then MonitorAsync is a better choice.  (See the Oauth2 project repositories at https://github.com/chilkatsoft for samples.)   If a programming language does not have callbacks, a better choice is to periodically check the AuthFlowState property for a value &gt;= 3.   If there is no response from the browser, the background thread (that is waiting on the browser) can be cancelled by calling the Cancel method.</descrip>
            <args2 />
            <iversion>9.5.0.59</iversion>
            <links2 />
        </method>
        <method name="SleepMs" ax="1" cpp="1" dn="1" axId="115">
            <gType>void</gType>
            <args2>
                <arg name="millisec" type="int" objcName="millisec" />
            </args2>
            <iversion>9.5.0.59</iversion>
            <descrip>Convenience method to force the calling thread to sleep for a number of milliseconds.</descrip>
            <links2 />
        </method>
        <method name="RefreshAccessToken" axId="119" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args2 />
            <iversion>9.5.0.59</iversion>
            <descrip>Sends a refresh request to the token endpoint to obtain a new access token.   After a successful refresh request, the AccessToken and RefreshToken properties will be updated with new values.  
&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method can only be called if the ClientId, ClientSecret, RefreshToken and TokenEndpoint properties contain valid values.</descrip>
            <links2>
                <link linkType="example">
                    <url>google_oauth2_refresh_access_token.asp</url>
                    <text>Google OAuth2 Refresh Access Token</text>
                </link>
            </links2>
        </method>
        <method name="UseConnection" axId="120" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="sock" type="Socket" objcName="sock" />
            </args2>
            <iversion>9.5.0.59</iversion>
            <descrip>Calling this method is optional, and is only required if a proxy (HTTP or SOCKS), an SSH tunnel, or if special connection related socket  options need to be used.   When UseConnection is not called, the connection to the token endpoint is a direct connection using TLS (or not) based on the TokenEndpoint.  (If the TokenEndpoint begins with "https://", then TLS is used.)
&lt;p&gt;
This method sets the socket object to be used for sending the requests to the token endpoint in the background thread. The ARG1 can be an already-connected socket, or a socket object that is not yet connected.  In some cases, such as for a connection through an SSH tunnel, the ARG1 must already be connected.  In other cases, an unconnected ARG1 can be provided because the purpose for providing the socket object is to specify settings such as for HTTP or SOCKS proxies.</descrip>
            <links2 />
        </method>
        <method name="GetRedirectRequestParam" axId="126" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2>
                <arg name="paramName" type="string" objcName="paramName" />
            </args2>
            <iversion>9.5.0.69</iversion>
            <links2 />
            <descrip>Some OAuth2 providers can provide additional parameters in the redirect request sent to the local listener (i.e. the Chilkat background thread).  One such case is for QuickBooks, It contains a realmId parameter such as the following:
&lt;pre&gt;
http://localhost:55568/?state=xxxxxxxxxxxx&amp;code=xxxxxxxxxxxx&amp;realmId=1234567890
&lt;/pre&gt;
&lt;p&gt;After the OAuth2 authentication is completed, an application can call this method to get any of the parameter values.  For example, to get the realmId value, pass "realmId" in ARG1.</descrip>
        </method>
    </methods>
    <properties>
        <property name="AuthorizationEndpoint" read="1" write="1" axId="102" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2 />
            <descrip>The URL used to obtain an authorization grant.  For example, the Google APIs authorization endpoint is "https://accounts.google.com/o/oauth2/v2/auth".   (In three-legged OAuth2, this is the very first point of contact that begins the OAuth2 authentication flow.)</descrip>
            <iversion>9.5.0.59</iversion>
            <links2 />
        </property>
        <property name="TokenEndpoint" axId="109" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The URL for exchanging an authorization grant for an access token.   For example, the Google APIs token endpoint is "https://www.googleapis.com/oauth2/v4/token".   (In three-legged OAuth2, this is the very last point of contact that ends the OAuth2 authentication flow.)</descrip>
            <args2 />
            <iversion>9.5.0.59</iversion>
            <links2>
                <link linkType="external" lang="csharp">
                    <url>https://github.com/chilkatsoft/OAuth2-CSharp-Desktop</url>
                    <text>OAuth2 Sample C# Desktop App for Facebook, Google, LinkedIn, Salesforce, and GitHub</text>
                </link>
                <link linkType="external" lang="vbnet">
                    <url>https://github.com/chilkatsoft/OAuth2-VBNet-Desktop</url>
                    <text>OAuth2 for VB.NET Desktop Applications for Facebook, Google, LinkedIn, Salesforce, and GitHub</text>
                </link>
                <link linkType="example">
                    <url>facebook_oauth2_access_token.asp</url>
                    <text>Facebook OAuth2 Access Token</text>
                </link>
                <link linkType="example">
                    <url>google_oauth2_access_token.asp</url>
                    <text>Google OAuth2 Access Token</text>
                </link>
                <link linkType="example">
                    <url>linkedin_oauth2_access_token.asp</url>
                    <text>LinkedIn OAuth2 Access Token</text>
                </link>
                <link linkType="example">
                    <url>salesforce_oauth2_access_token.asp</url>
                    <text>Salesforce OAuth2 Access Token</text>
                </link>
                <link linkType="example">
                    <url>github_oauth2_access_token.asp</url>
                    <text>GitHub OAuth2 Access Token</text>
                </link>
            </links2>
        </property>
        <property name="ClientId" axId="103" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2 />
            <iversion>9.5.0.59</iversion>
            <descrip>The "client_id" that identifies the application.  
&lt;p&gt;
For example, if creating an app to use a Google API, one would create a client ID by:
&lt;ol&gt;
&lt;li&gt;Logging into the Google API Console (https://console.developers.google.com).
&lt;li&gt;Navigate to "Credentials".
&lt;li&gt;Click on "Create Credentials"
&lt;li&gt;Choose "OAuth client ID"
&lt;li&gt;Select the "Other" application type.
&lt;li&gt;Name your app and click "Create", and a client_id and client_secret will be generated.
&lt;/ol&gt;
Other API's, such as Facebook, should have something similar for generating a client ID and client secret.</descrip>
            <links2>
                <link linkType="external" lang="csharp">
                    <url>https://github.com/chilkatsoft/OAuth2-CSharp-Desktop</url>
                    <text>OAuth2 Sample C# Desktop App for Facebook, Google, LinkedIn, Salesforce, and GitHub</text>
                </link>
                <link linkType="external" lang="vbnet">
                    <url>https://github.com/chilkatsoft/OAuth2-VBNet-Desktop</url>
                    <text>OAuth2 for VB.NET Desktop Applications for Facebook, Google, LinkedIn, Salesforce, and GitHub</text>
                </link>
                <link linkType="example">
                    <url>facebook_oauth2_access_token.asp</url>
                    <text>Facebook OAuth2 Access Token</text>
                </link>
                <link linkType="example">
                    <url>google_oauth2_access_token.asp</url>
                    <text>Google OAuth2 Access Token</text>
                </link>
                <link linkType="example">
                    <url>linkedin_oauth2_access_token.asp</url>
                    <text>LinkedIn OAuth2 Access Token</text>
                </link>
                <link linkType="example">
                    <url>salesforce_oauth2_access_token.asp</url>
                    <text>Salesforce OAuth2 Access Token</text>
                </link>
                <link linkType="example">
                    <url>github_oauth2_access_token.asp</url>
                    <text>GitHub OAuth2 Access Token</text>
                </link>
            </links2>
        </property>
        <property name="ClientSecret" read="1" write="1" ax="1" cpp="1" dn="1" axId="104">
            <gType>string</gType>
            <descrip>The "client_secret" for the application.   Application credentials (i.e. what identifies the application) consist of a client_id and client_secret.  See the ClientId property for more information.
&lt;p&gt;
&lt;b&gt;Is the Client Secret Really a Secret?&lt;/b&gt;
&lt;p&gt;
This deserves some explanation.  For a web-based application (where the code is on the web server) and the user interacts with the application in a browser, then YES, the client secret MUST be kept secret at all times.  One does not want to be interacting with a site that claims to be "Application XYZ" but is actually an impersonator.   But the Chilkat OAuth2 class is for desktop applications and scripts (i.e. things that run on the local computer, not in a browser).
&lt;p&gt;
Consider Mozilla Thunderbird.  It is an application installed on your computer.   Thunderbird uses OAuth2 authentication for GMail accounts in the same way as this OAuth2 API.   When you add a GMail account and need to authenticate for the 1st time, you'll get a popup window (a browser) where you interactively grant authorization to Thunderbird.  You implicitly know the Thunderbird application is running because you started it.  There can be no impersonation unless your computer has already been hacked and when you thought you started Thunderbird, you actually started some rogue app.  But if you already started some rogue app, then all has already been lost. 
&lt;p&gt;It is essentially impossible for desktop applications to embed a secret key (such as the client secret) and assure confidentiality (i.e. that the key cannot be obtained by some hacker.  An application can hide the secret, and can make it difficult to access, but in the end the secret cannot be assumed to be safe.  Therefore, the client_secret, for desktop (installed) applications is not actually secret.  One should still take care to shroud the client secret to some extent, but know that whatever is done cannot be deemed secure.  But this is OK.  The reason it is OK is that implicitly, when a person starts an application (such as Thunderbird), the identity of the application is known.  If a fake Thunderbird was started, then all has already been lost.  The security of the system is in preventing the fake/rogue applications in the 1st place. If that security has already been breached, then nothing else really matters.</descrip>
            <args2 />
            <iversion>9.5.0.59</iversion>
            <links2 />
        </property>
        <property name="Scope" read="1" write="1" axId="108" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2 />
            <iversion>9.5.0.59</iversion>
            <descrip>This is an optional setting that defines the scope of access.  For example, Google API scopes are listed here:  https://developers.google.com/identity/protocols/googlescopes
&lt;p&gt;
For example, if wishing to grant OAuth2 authorization for Google Drive, one would set this property to "https://www.googleapis.com/auth/drive".</descrip>
            <links2 />
        </property>
        <property name="CodeChallenge" read="1" write="1" axId="105" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <args2 />
            <iversion>9.5.0.59</iversion>
            <descrip>Optional.  Set this to _TRUE_ to send a code_challenge (as per RFC 7636) with the authorization request.  The default value is _FALSE_.</descrip>
            <links2 />
        </property>
        <property name="CodeChallengeMethod" read="1" write="1" axId="106" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Optional. Only applies when the CodeChallenge property is set to _TRUE_.  Possible values are "plain" or "S256".  The default is "S256".</descrip>
            <args2 />
            <iversion>9.5.0.59</iversion>
            <links2 />
        </property>
        <property name="AccessTokenResponse" axId="100" read="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2 />
            <iversion>9.5.0.59</iversion>
            <descrip>When the OAuth2 three-legged authorization has completed in the background thread, this property contains the response that contains the access_token, the optional refresh_token, and any other information included in the final response.  If the authorization was denied, then this contains the error response.
&lt;p&gt;
For example, a successful JSON response for a Google API looks like this:
&lt;pre&gt;
 {
             "access_token": "ya29.Ci9ZA-Z0Q7vtnch8xxxxxxxxxxxxxxgDVOOV97-IBvTt958xxxxxx1sasw",
             "token_type": "Bearer",

            "expires_in": 3600,

            "refresh_token": "1/fYjEVR-3Oq9xxxxxxxxxxxxxxLzPtlNOeQ"
}
&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; Not all responses are JSON.  A successful Facebook response is plain text and looks like this:
&lt;pre&gt;
access_token=EAAZALuOC1wAwBAKH6FKnxOkjfEP ... UBZBhYD5hSVBETBx6AZD&amp;expires=5134653
&lt;/pre&gt;</descrip>
            <links2 />
        </property>
        <property name="AuthFlowState" axId="101" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <args2 />
            <iversion>9.5.0.59</iversion>
            <descrip>Indicates the current progress of the OAuth2 three-legged authorization flow.   Possible values are:
&lt;p&gt;
&lt;b&gt;0: &lt;/b&gt;Idle.  No OAuth2 has yet been attempted.&lt;br&gt;
&lt;b&gt;1: &lt;/b&gt;Waiting for Redirect.  The OAuth2 background thread is waiting to receive the redirect HTTP request from the browser.&lt;br&gt;
&lt;b&gt;2: &lt;/b&gt;Waiting for Final Response.  The OAuth2 background thread is waiting for the final access token response.&lt;br&gt;
&lt;b&gt;3: &lt;/b&gt;Completed with Success.  The OAuth2 flow has completed, the background thread exited, and the successful JSON response is available in AccessTokenResponse property.&lt;br&gt;
&lt;b&gt;4: &lt;/b&gt;Completed with Access Denied.  The OAuth2 flow has completed, the background thread exited, and the error JSON  is available in AccessTokenResponse property.&lt;br&gt;
&lt;b&gt;5: &lt;/b&gt;Failed Prior to Completion.  The OAuth2 flow failed to complete, the background thread exited, and the error information is available in the FailureInfo property.&lt;br&gt;</descrip>
            <links2 />
        </property>
        <property name="FailureInfo" axId="107" read="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>If the OAuth2 three-legged authorization failed prior to completion (the AuthFlowState = 5), then information about the failure is contained in this property.  This property is automatically cleared when OAuth2 authorization starts (i.e. when StartAuth is called).</descrip>
            <args2 />
            <iversion>9.5.0.59</iversion>
            <links2 />
        </property>
        <property name="RedirectAllowHtml" read="1" write="1" ax="1" cpp="1" dn="1" axId="113">
            <gType>string</gType>
            <args2 />
            <iversion>9.5.0.59</iversion>
            <descrip>The HTML returned to the browser when access is allowed by the end-user.  The default value is HTMl that contains a META refresh to https://www.chilkatsoft.com/oauth2_allowed.html.   Your application should set this property to display whatever HTML is desired when access is granted.</descrip>
            <links2 />
        </property>
        <property name="RedirectDenyHtml" read="1" write="1" ax="1" cpp="1" dn="1" axId="114">
            <gType>string</gType>
            <descrip>The HTML returned to the browser when access is denied by the end-user.  The default value is HTMl that contains a META refresh to https://www.chilkatsoft.com/oauth2_denied.html.   Your application should set this property to display whatever HTML is desired when access is denied.</descrip>
            <args2 />
            <iversion>9.5.0.59</iversion>
            <links2 />
        </property>
        <property name="AccessToken" axId="116" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>When the OAuth2 three-legged authorization has successfully completed in the background thread, this property contains the access_token.
&lt;p&gt;
For example, a successful Google API JSON response looks like this:
&lt;pre&gt;
 {
             "access_token": "ya29.Ci9ZA-Z0Q7vtnch8xxxxxxxxxxxxxxgDVOOV97-IBvTt958xxxxxx1sasw",
             "token_type": "Bearer",

            "expires_in": 3600,

            "refresh_token": "1/fYjEVR-3Oq9xxxxxxxxxxxxxxLzPtlNOeQ"
}
&lt;/pre&gt;</descrip>
            <args2 />
            <iversion>9.5.0.59</iversion>
            <links2>
                <link linkType="external" lang="vbnet">
                    <url>https://github.com/chilkatsoft/OAuth2-VBNet-Desktop</url>
                    <text>OAuth2 for VB.NET Desktop Applications for Facebook, Google, LinkedIn, Salesforce, and GitHub</text>
                </link>
                <link linkType="external" lang="csharp">
                    <url>https://github.com/chilkatsoft/OAuth2-CSharp-Desktop</url>
                    <text>OAuth2 Sample C# Desktop App for Facebook, Google, LinkedIn, Salesforce, and GitHub</text>
                </link>
                <link linkType="example">
                    <url>facebook_oauth2_access_token.asp</url>
                    <text>Facebook OAuth2 Access Token</text>
                </link>
                <link linkType="example">
                    <url>google_oauth2_access_token.asp</url>
                    <text>Google OAuth2 Access Token</text>
                </link>
                <link linkType="example">
                    <url>linkedin_oauth2_access_token.asp</url>
                    <text>LinkedIn OAuth2 Access Token</text>
                </link>
                <link linkType="example">
                    <url>salesforce_oauth2_access_token.asp</url>
                    <text>Salesforce OAuth2 Access Token</text>
                </link>
                <link linkType="example">
                    <url>github_oauth2_access_token.asp</url>
                    <text>GitHub OAuth2 Access Token</text>
                </link>
            </links2>
        </property>
        <property name="TokenType" axId="117" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>When the OAuth2 three-legged authorization has successfully completed in the background thread, this property contains the token_type, if present.
&lt;p&gt;
A successful Google API JSON response looks like this:
&lt;pre&gt;
 {
             "access_token": "ya29.Ci9ZA-Z0Q7vtnch8xxxxxxxxxxxxxxgDVOOV97-IBvTt958xxxxxx1sasw",
             "token_type": "Bearer",

            "expires_in": 3600,

            "refresh_token": "1/fYjEVR-3Oq9xxxxxxxxxxxxxxLzPtlNOeQ"
}
&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; Some responses may not included a "token_type" param.  In that case, this property will remain empty.&lt;/p&gt;</descrip>
            <args2 />
            <iversion>9.5.0.59</iversion>
            <links2 />
        </property>
        <property name="RefreshToken" axId="118" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>When the OAuth2 three-legged authorization has successfully completed in the background thread, this property contains the refresh_token, if present.
&lt;p&gt;
For example, a successful Google API JSON response looks like this:
&lt;pre&gt;
 {
             "access_token": "ya29.Ci9ZA-Z0Q7vtnch8xxxxxxxxxxxxxxgDVOOV97-IBvTt958xxxxxx1sasw",
             "token_type": "Bearer",

            "expires_in": 3600,

            "refresh_token": "1/fYjEVR-3Oq9xxxxxxxxxxxxxxLzPtlNOeQ"
}
&lt;/pre&gt;</descrip>
            <args2 />
            <iversion>9.5.0.59</iversion>
            <links2 />
        </property>
        <property name="ListenPort" axId="121" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <args2 />
            <iversion>9.5.0.59</iversion>
            <descrip>The port number to listen for the redirect URI request sent by the browser.  If set to 0, then a random unused port is used.   The default value of this property is 0.  
&lt;p&gt;
In most cases, using a random unused port is the best choice.  In some OAuth2 situations, such as with Facebook, a specific port number must be chosen.  This is due to the fact that Facebook requires an APP to have a Site URL, which must exactly match the redirect_uri used in OAuth2 authorization.  For example, the Facebook Site URL might be "http://localhost:3017/" if port 3017 is the listen port.</descrip>
            <links2 />
        </property>
        <property name="LocalHost" axId="122" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2 />
            <iversion>9.5.0.59</iversion>
            <descrip>Defaults to "localhost".  This should typically remain at the default value.  It is the loopback domain or IP address used for the redirect_uri.  For example, "http://localhost:2012/".   (assuming 2012 was used or randomly chosen as the listen port number)   If the desired redirect_uri is to be "http://127.0.0.1:2012/", then set this property equal to "127.0.0.1".</descrip>
            <links2 />
        </property>
        <property name="Resource" axId="124" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>This is an optional setting that defines the "resource" query parameter.  For example, to call the Microsoft Graph API, set this property value to "https://graph.microsoft.com/".</descrip>
            <args2 />
            <iversion>9.5.0.67</iversion>
            <links2 />
        </property>
        <property name="ListenPortRangeEnd" axId="125" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>If set, then an unused port will be chosen in the range from the ListenPort property to this property.  Some OAuth2 services, such as Google, require that callback URL's, including port numbers, be selected in advance.  This feature allows for a range of callback URL's to be specified to cope with the possibility that another application on the same computer might be using a particular port.
&lt;p&gt;
For example, a Google ClientID might be configured with a set of authorized callback URI's such as:
&lt;ul&gt;
&lt;li&gt;http://localhost:55110/&lt;/li&gt;
&lt;li&gt;http://localhost:55112/&lt;/li&gt;
&lt;li&gt;http://localhost:55113/&lt;/li&gt;
&lt;li&gt;http://localhost:55114/&lt;/li&gt;
&lt;li&gt;http://localhost:55115/&lt;/li&gt;
&lt;li&gt;http://localhost:55116/&lt;/li&gt;
&lt;li&gt;http://localhost:55117/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In which case the ListenPort property would be set to 55110, and this property would be set to 55117.</descrip>
            <args2 />
            <iversion>9.5.0.69</iversion>
            <links2 />
        </property>
    </properties>
    <events />
    <genericName>OAuth2</genericName>
    <cppName>CkOAuth2</cppName>
    <dnName>OAuth2</dnName>
    <axName>ChilkatOAuth2</axName>
    <description>Implements OAuth2 authorization for desktop (installed) applications, scripts, etc.   These are applications that run on a computer where it is possible to popup a browser window, or embed a browser window, to allow the end-user to interactively grant or deny authentication.  
&lt;p&gt;
In OAuth 2.0 terms, the application is considered to be a "public" client type, or a "native application".  (In OAuth 2.0  terminology, a fully managed .NET desktop application is still a "native application".)    This OAuth2 API helps implement the "Authorization Code Grant" flow to obtain both access tokens and refresh tokens.  See Section 4.1 of RFC 6749.
&lt;p&gt;
In other commonly used terminology, this OAuth2 class helps to implement "Three Legged" OAuth2 Authorization.  See http://oauthbible.com/#oauth-2-three-legged</description>
    <clsid>CC3B92E4-C58C-40FE-A271-E407A7775848</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidMidl>DD2EABF5-8988-4A8E-908C-AD7FFA38AE59</uuidMidl>
    <nextAxId>127</nextAxId>
    <uuidEvents>69A83150-D270-46E6-871F-5B5E695AF017</uuidEvents>
</class>
