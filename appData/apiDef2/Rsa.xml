<?xml version="1.0" encoding="utf-8" ?>
<class XojoModuleId="833940869" sourceXmlPath="c:/ck2000/appData/apiDef2/Rsa.xml" license="Bundle">
    <axName>ChilkatRsa</axName>
    <dnName>Rsa</dnName>
    <cppName>CkRsa</cppName>
    <properties>
        <property name="Charset" axId="105" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>This property only applies when encrypting, decrypting, signing, or verifying signatures for strings.  When encrypting strings, the input string is first converted to this charset before encrypting.  
&lt;p&gt;When decrypting, the decrypted data is interpreted as a string with this charset encoding and converted to the appropriate return.  For example, ActiveX's returning strings always return Unicode (2 bytes/char).  Java strings are utf-8.  Chilkat C++ strings are ANSI or utf-8.  .NET strings are Unicode.
&lt;p&gt;
When signing string data, the input string is first converted to this charset before being hashed and signed.  When verifying the signature for string data, the input string is first converted to this charset before the verification process begins.</descrip>
            <links2>
                <link linkType="example">
                    <url>rsa_charset.asp</url>
                    <text>Charset Considerations when RSA Encrypting Strings</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="EncodingMode" axId="100" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Encoding mode to be used in methods ending in "ENC", such as EncryptStringENC.  Valid EncodingModes are "base64", "hex", "url", or "quoted-printable" (or "qp").  Encryption methods ending in "ENC" will return encrypted data as a string encoded according to this property's value.  Decryption methods ending in "ENC" accept an encoded string as specified by this property.  The string is first decoded and then decrypted.  The default value is "base64".
&lt;p&gt;
This property also applies to the "ENC" methods for creating and verifying digital signatures.</descrip>
            <links2>
                <link linkType="example">
                    <url>base64url_encoding.asp</url>
                    <text>Base64url Encoding</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="LittleEndian" axId="101" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>The default value is _FALSE_, which means that signatures and encrypted output will be created using the big endian byte ordering. A value of _TRUE_ will produce little-endian output, which is what Microsoft's Crypto API produces.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; Prior to v9.5.0.49, this property behaved the opposite as it should for encryption.  When updating from an older version of Chilkat to v9.5.0.49 or greater, the following change is required:
&lt;ul&gt;
&lt;li&gt;If the application did NOT explicity set the LittleEndian property, then no change is required for encryption/decryption.  If signatures were being created or verified, then explicitly set this property to _TRUE_.
&lt;li&gt;If the application explicitly set this property, then reverse the setting ONLY if doing encryption/decryption.  No changes are required if doing signature creation/verification.
&lt;/ul&gt;</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="NoUnpad" axId="102">
            <gType>bool</gType>
            <descrip>If _TRUE_, skips unpadding when decrypting.  The default is _FALSE_.  This property value is typically left unchanged.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="NumBits" axId="103">
            <gType>int</gType>
            <descrip>The number of bits of the key generated or imported into this RSA encryption object.  Keys ranging in size from 384 bits to 4096 bits can be generated by calling GenerateKey.  A public or private key may be imported by calling ImportPublicKey or ImportPrivateKey.  A key must be available either via GenerateKey or import before any of the encrypt/decrypt methods may be called.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="OaepHash" read="1" write="1" axId="146" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Selects the hash algorithm for use within OAEP padding.  The valid choices are "sha1", "sha256", "sha384", "sha512", "md2", "md5", "haval", "ripemd128", "ripemd160","ripemd256", or "ripemd320".   The default is "sha1".</descrip>
            <iversion>9.5.0.48</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="OaepPadding" axId="104" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Controls whether Optimal Asymmetric Encryption Padding (OAEP) is used for the padding scheme (for encrypting/decrypting).  If set to _FALSE_, PKCS1 v1.5 padding is used.  If set to _TRUE_, PKCS1 v2.0 (OAEP) padding is used.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; The OAEP padding algorithm uses randomly generated bytes.  Therefore, the RSA result will be different each time, even if all of the other inputs are identical.  For example, if you RSA encrypt or sign the same data using the same key 100 times, the output will appear different each time, but they are all valid.
&lt;p&gt;
When creating digital signatures, this property controls whether RSA-PSS or PKCS1 v1.5 is used.  If _TRUE_, then the RSA-PSS signature scheme is used.   The default value of this property is _FALSE_.</descrip>
            <links2>
                <link linkType="example">
                    <url>rsa_oaepPadding.asp</url>
                    <text>RSA OAEP Padding</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="OaepMgfHash" axId="148" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Selects the MGF (mask generation) hash algorithm for use within OAEP padding.  The valid choices are "sha1", "sha256", "sha384", "sha512", "md2", "md5", "haval", "ripemd128", "ripemd160","ripemd256", or "ripemd320".   The default is "sha1".</descrip>
            <args2 />
            <iversion>9.5.0.71</iversion>
            <links2 />
        </property>
    </properties>
    <methods>
        <method name="DecryptBytes" axId="106" outArgName="outData" ax="1" cpp="1" dn="1">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>usePrivateKey</argName>
                    <objcName>bUsePrivateKey</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Decrypts byte data using the RSA encryption algorithm.  ARG2 should be set to _TRUE_ if the private key is to be used for decrypting.  Otherwise it should be set to _FALSE_ if the public key is to be used for decrypting.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; If trying to match OpenSSL results, set the LittleEndian property = _FALSE_.</descrip>
            <links2>
                <link linkType="example" lang="delphidll">
                    <url>rsa_decrypt.asp</url>
                    <text>RSA Decrypt using Private Key from PEM</text>
                </link>
            </links2>
            <args2>
                <arg name="inData" type="bytes" objcName="bData" />
                <arg name="usePrivateKey" type="bool" objcName="bUsePrivateKey" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="DecryptBytesENC" axId="107" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bUsePrivateKey</argName>
                    <objcName>bUsePrivateKey</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Same as DecryptBytes, except the input is an encoded string.  The encoding is specified by the EncodingMode property, which can have values such as "base64", "hex", "quoted-printable", "url", etc.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; If trying to match OpenSSL results, set the LittleEndian property = _FALSE_.</descrip>
            <args2>
                <arg name="str" type="string" objcName="str" />
                <arg name="bUsePrivateKey" type="bool" objcName="bUsePrivateKey" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="DecryptString" axId="108" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>binarySig</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>usePrivateKey</argName>
                    <objcName>bUsePrivateKey</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Decrypts encrypted string data and returns an unencrypted string. ARG2 should be set to _TRUE_ if the private key is to be used for decrypting. Otherwise it should be set to _FALSE_ if the public key is to be used.  The Charset property controls how the component interprets the decrypted string.  Depending on the programming language, strings are returned to the application as Unicode, utf-8, or ANSI.  Internal to DecryptString, the decrypted string is automatically converted from the charset specified by the Charset property to the encoding required by the calling programming language.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; If trying to match OpenSSL results, set the LittleEndian property = _FALSE_.</descrip>
            <args2>
                <arg name="binarySig" type="bytes" objcName="bData" />
                <arg name="usePrivateKey" type="bool" objcName="bUsePrivateKey" />
            </args2>
            <links2 />
        </method>
        <method name="DecryptStringENC" axId="109" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encodedSig</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>usePrivateKey</argName>
                    <objcName>bUsePrivateKey</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Same as DecryptString, except the input is an encoded string.  The encoding is specified by the EncodingMode property, which can have values such as "base64", "hex", "quoted-printable", "url", etc.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; If trying to match OpenSSL results, set the LittleEndian property = _FALSE_.</descrip>
            <links2>
                <link linkType="example">
                    <url>rsa_encryptStrings.asp</url>
                    <text>RSA Encrypt and Decrypt Strings</text>
                </link>
                <link linkType="example">
                    <url>rsa_sameKeyDifferentResults.asp</url>
                    <text>RSA Encryption -- Same Key Different Results</text>
                </link>
                <link linkType="example">
                    <url>rsa_keyExchange.asp</url>
                    <text>RSA Encrypting Symmetric Secret Key</text>
                </link>
                <link linkType="example">
                    <url>rsa_encryptKey.asp</url>
                    <text>RSA Encrypt/Decrypt AES Key</text>
                </link>
            </links2>
            <args2>
                <arg name="encodedSig" type="string" objcName="str" />
                <arg name="usePrivateKey" type="bool" objcName="bUsePrivateKey" />
            </args2>
        </method>
        <method name="EncryptBytes" axId="110" outArgName="outData" ax="1" cpp="1" dn="1">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>binaryData</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>usePrivateKey</argName>
                    <objcName>bUsePrivateKey</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Encrypts byte data using the RSA encryption algorithm. ARG2 should be set to _TRUE_ if the private key is to be used for encrypting. Otherwise it should be set to _FALSE_ if the public key is to be used for encrypting.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; If trying to match OpenSSL results, set the LittleEndian property = _FALSE_.</descrip>
            <links2>
                <link linkType="example" lang="delphidll">
                    <url>rsa_decrypt.asp</url>
                    <text>RSA Decrypt using Private Key from PEM</text>
                </link>
            </links2>
            <args2>
                <arg name="binaryData" type="bytes" objcName="bData" />
                <arg name="usePrivateKey" type="bool" objcName="bUsePrivateKey" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="EncryptBytesENC" axId="111" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bUsePrivateKey</argName>
                    <objcName>bUsePrivateKey</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Same as EncryptBytes, except the output is an encoded string.  The encoding is specified by the EncodingMode property, which can have values such as "base64", "hex", "quoted-printable", "url", etc.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; If trying to match OpenSSL results, set the LittleEndian property = _FALSE_.</descrip>
            <args2>
                <arg name="data" type="bytes" objcName="bData" />
                <arg name="bUsePrivateKey" type="bool" objcName="bUsePrivateKey" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>rsa_encrypt_sha256_sha1_mgf1.asp</url>
                    <text>RSA Encrypt with SHA-256 hash function and SHA-1 mask function</text>
                </link>
            </links2>
        </method>
        <method name="EncryptString" axId="112" outArgName="outData" ax="1" cpp="1" dn="1">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>stringToSign</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>usePrivateKey</argName>
                    <objcName>bUsePrivateKey</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Encrypts a string using the RSA encryption algorithm. ARG2 should be set to _TRUE_ if the private key is to be used for encrypting. Otherwise it should be set to _FALSE_ if the public key is to be used for encrypting. The string is first converted (if necessary) to the character encoding specified by the Charset property before encrypting. The encrypted bytes are returned.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; If trying to match OpenSSL results, set the LittleEndian property = _FALSE_.</descrip>
            <args2>
                <arg name="stringToEncrypt" type="string" objcName="str" />
                <arg name="usePrivateKey" type="bool" objcName="bUsePrivateKey" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>openssl_rsa_decrypt.asp</url>
                    <text>Encrypt with Chilkat, Decrypt with OpenSSL</text>
                </link>
            </links2>
        </method>
        <method name="EncryptStringENC" axId="113" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bUsePrivateKey</argName>
                    <objcName>bUsePrivateKey</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Same as EncryptString, except the output is an encoded string.  The encoding is specified by the EncodingMode property, which can have values such as "base64", "hex", "quoted-printable", "url", etc.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; If trying to match OpenSSL results, set the LittleEndian property = _FALSE_.</descrip>
            <links2>
                <link linkType="example">
                    <url>rsa_encryptStrings.asp</url>
                    <text>RSA Encrypt and Decrypt Strings</text>
                </link>
                <link linkType="example">
                    <url>rsa_sameKeyDifferentResults.asp</url>
                    <text>RSA Encryption -- Same Key Different Results</text>
                </link>
                <link linkType="example">
                    <url>rsa_keyExchange.asp</url>
                    <text>RSA Encrypting Symmetric Secret Key</text>
                </link>
                <link linkType="example">
                    <url>rsa_encryptKey.asp</url>
                    <text>RSA Encrypt/Decrypt AES Key</text>
                </link>
            </links2>
            <args2>
                <arg name="str" type="string" objcName="str" />
                <arg name="bUsePrivateKey" type="bool" objcName="bUsePrivateKey" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="ExportPrivateKey" axId="114" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Exports the private-key of an RSA key pair to XML format.  This is typically called after generating a new RSA key via the GenerateKey method.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="ExportPrivateKeyObj" ax="1" cpp="1" dn="1" axId="144">
            <gType>PrivateKey</gType>
            <descrip>Exports the private-key to a private key object.  This is typically called after generating a new RSA key via the GenerateKey method.  Once the private key object is obtained, it may be saved in a variety of different formats.</descrip>
            <args />
            <iversion>9.5.0.40</iversion>
            <links2>
                <link linkType="example">
                    <url>rsa_genKey.asp</url>
                    <text>Generate RSA Key and Export to PKCS1 / PKCS8</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="ExportPublicKey" axId="115" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Exports the public-key of an RSA key pair to XML format.  This is typically called after generating a new RSA key via the GenerateKey method.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="ExportPublicKeyObj" ax="1" cpp="1" dn="1" axId="145">
            <gType>PublicKey</gType>
            <descrip>Exports the public key to a public key object.  Once the public key object is obtained, it may be saved in a variety of different formats.</descrip>
            <args />
            <iversion>9.5.0.40</iversion>
            <links2>
                <link linkType="example">
                    <url>rsa_genKey.asp</url>
                    <text>Generate RSA Key and Export to PKCS1 / PKCS8</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method name="GenerateKey" axId="116" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>numBits</argName>
                    <objcName>numBits</objcName>
                </arg>
            </args>
            <descrip>Generates a new RSA public/private key pair.  The number of bits can range from 512  to 8192.  Typical key lengths are 1024, 2048, or 4096 bits.  After successful generation, the public/private parts of the key can be exported to XML via the ExportPrivateKey and ExportPublicKey methods.
&lt;p&gt;
Note: Prior to version 9.5.0.49, the max key size was 4096 bits.  Generating an 8192-bit RSA key takes a considerable amount of time and CPU processing power.  There are no event callbacks or progress monitoring for RSA key generation.  Calling this will block the thread until it returns.</descrip>
            <links2>
                <link linkType="example">
                    <url>rsa_generateKey.asp</url>
                    <text>Generate RSA Public/Private Key</text>
                </link>
            </links2>
            <args2>
                <arg name="numBits" type="int" objcName="numBits" />
            </args2>
        </method>
        <method name="ImportPrivateKey" axId="117" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>xmlKey</argName>
                    <objcName>strXml</objcName>
                </arg>
            </args>
            <descrip>Imports a private key from XML format.  After successful import, the private key can be used to encrypt or decrypt.  A private key (by definition) contains both private and public parts.  This is because the public key consist of modulus and exponent.  The private key consists of modulus, exponent, P, Q, DP, DQ, InverseQ, and D using base64 representation:
&lt;pre&gt;
_LT_RSAKeyValue&gt;
  _LT_Modulus&gt;..._LT_/Modulus&gt;
  _LT_Exponent&gt;..._LT_/Exponent&gt;
  _LT_P&gt;..._LT_/P&gt;
  _LT_Q&gt;..._LT_/Q&gt;
  _LT_DP&gt;..._LT_/DP&gt;
  _LT_DQ&gt;..._LT_/DQ&gt;
  _LT_InverseQ&gt;..._LT_/InverseQ&gt;
  _LT_D&gt;..._LT_/D&gt;
_LT_/RSAKeyValue&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Important: &lt;/b&gt; The Rsa object can contain either a private key or a public key, but not both.  Importing a private key overwrites the existing key regardless of whether the type of key is public or private.&lt;/p&gt;</descrip>
            <links2>
                <link linkType="example">
                    <url>rsa_signWithPfx.asp</url>
                    <text>RSA Signature with Certificate's Private Key from PFX</text>
                </link>
                <link linkType="example">
                    <url>rsa_loadPemKey.asp</url>
                    <text>Load PEM Public/Private Key into RSA Object</text>
                </link>
            </links2>
            <args2>
                <arg name="xmlKey" type="string" objcName="strXml" />
            </args2>
        </method>
        <method name="ImportPrivateKeyObj" ax="1" cpp="1" dn="1" status="1" axId="142">
            <gType>bool</gType>
            <descrip>Imports a private key from a private key object.  The imported private key is used in methods that sign or decrypt.</descrip>
            <args>
                <arg>
                    <argName>key</argName>
                    <cppType>CkPrivateKey &amp;</cppType>
                    <dnType>PrivateKey</dnType>
                    <axType>PrivateKey</axType>
                    <objcName>key</objcName>
                </arg>
            </args>
            <iversion>9.5.0.40</iversion>
            <links2>
                <link linkType="example">
                    <url>rsa_sign_base64_pfx.asp</url>
                    <text>RSA Sign Using Private Key from .pfx/.p12 to Base64 Signature</text>
                </link>
            </links2>
            <args2>
                <arg name="key" type="PrivateKey" objcName="key" />
            </args2>
        </method>
        <method name="ImportPublicKey" axId="118" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>xmlKey</argName>
                    <objcName>strXml</objcName>
                </arg>
            </args>
            <descrip>Imports a public key from XML format.  After successful import, the public key can be used to encrypt or decrypt.  
&lt;p&gt;
Note: Importing a public key overwrites the key that is currently contained in this object - even if it's a private key.
&lt;p&gt;
A public key consists of modulus and exponent using base64 representation:
&lt;pre&gt;
_LT_RSAKeyValue&gt;
  _LT_Modulus&gt;..._LT_/Modulus&gt;
  _LT_Exponent&gt;..._LT_/Exponent&gt;
_LT_/RSAKeyValue&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Important: &lt;/b&gt; The Rsa object can contain either a private key or a public key, but not both.  Importing a private key overwrites the existing key regardless of whether the type of key is public or private.&lt;/p&gt;</descrip>
            <links2>
                <link linkType="example">
                    <url>rsa_encryptModExp.asp</url>
                    <text>RSA Encrypt with Modulus and Exponent</text>
                </link>
                <link linkType="example">
                    <url>rsa_sign_key_cer.asp</url>
                    <text>RSA Signature/Verify with .key and .cer</text>
                </link>
                <link linkType="example">
                    <url>rsa_loadPemKey.asp</url>
                    <text>Load PEM Public/Private Key into RSA Object</text>
                </link>
            </links2>
            <args2>
                <arg name="xmlKey" type="string" objcName="strXml" />
            </args2>
        </method>
        <method name="ImportPublicKeyObj" ax="1" cpp="1" dn="1" status="1" axId="143">
            <gType>bool</gType>
            <descrip>Imports a public key from a public key object.  The imported public key is used in methods that encrypt data or verify signatures.</descrip>
            <args>
                <arg>
                    <argName>key</argName>
                    <cppType>CkPublicKey &amp;</cppType>
                    <dnType>PublicKey</dnType>
                    <axType>PublicKey</axType>
                    <objcName>key</objcName>
                </arg>
            </args>
            <iversion>9.5.0.40</iversion>
            <args2>
                <arg name="key" type="PublicKey" objcName="key" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>openssl_rsa_decrypt.asp</url>
                    <text>Encrypt with Chilkat, Decrypt with OpenSSL</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="OpenSslSignBytes" axId="119" outArgName="outBytes">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>data</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>Duplicates OpenSSL's rsautl utility for creating RSA signatures.   Input data consists of binary bytes, and returns the signature bytes.</descrip>
            <links2>
                <link linkType="example">
                    <text>Duplicating OpenSSL rsautl (creating RSA signatures)</text>
                    <url>rsa_openssl_rsautl_sign.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="data" type="bytes" objcName="data" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="OpenSslSignBytesENC" axId="120" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>data</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Duplicates OpenSSL's rsautl utility for creating RSA signatures.   Input data consists of binary bytes, and returns the signature as a string encoded according to the EncodingMode property (base64, hex, etc.).</descrip>
            <args2>
                <arg name="data" type="bytes" objcName="data" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="OpenSslSignString" axId="121" outArgName="outBytes">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>Duplicates OpenSSL's rsautl utility for creating RSA signatures.   Input data is a string, and returns the signature bytes.</descrip>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
            <links2 />
        </method>
        <method name="OpenSslSignStringENC" axId="122" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Duplicates OpenSSL's rsautl utility for creating RSA signatures.   Input data is a string, and returns the signature as a string encoded according to the EncodingMode property (base64, hex, etc.).</descrip>
            <links2>
                <link linkType="example">
                    <text>Duplicating OpenSSL rsautl (creating RSA signatures)</text>
                    <url>rsa_openssl_rsautl_sign.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="OpenSslVerifyBytes" axId="123" outArgName="outBytes">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>signature</argName>
                    <objcName>signature</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>Duplicates OpenSSL's rsautl utility for verifying RSA signatures and recovering the original data.   Input data consists of the raw signature bytes and returns the original bytes.</descrip>
            <links2>
                <link linkType="example">
                    <text>Duplicating OpenSSL rsautl (creating RSA signatures)</text>
                    <url>rsa_openssl_rsautl_sign.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="signature" type="bytes" objcName="signature" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="OpenSslVerifyBytesENC" axId="124" outArgName="outBytes">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>Duplicates OpenSSL's rsautl utility for verifying RSA signatures and recovering the original data.   Input data is a signature string encoded according to the EncodingMode property (base64, hex, etc.).  Returns the original bytes.</descrip>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="OpenSslVerifyString" axId="125" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>data</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Duplicates OpenSSL's rsautl utility for verifying RSA signatures and recovering the original data.   Input data consists of the raw signature bytes and returns the original string.</descrip>
            <args2>
                <arg name="data" type="bytes" objcName="data" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="OpenSslVerifyStringENC" axId="126" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Duplicates OpenSSL's rsautl utility for verifying RSA signatures and recovering the original data.   Input data is a signature string encoded according to the EncodingMode property (base64, hex, etc.).  Returns the original string.</descrip>
            <links2>
                <link linkType="example">
                    <text>Duplicating OpenSSL rsautl (creating RSA signatures)</text>
                    <url>rsa_openssl_rsautl_sign.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="SignBytes" axId="127" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>binaryData</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>hashAlgorithm</argName>
                    <objcName>hashAlg</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Creates an RSA digital signature by hashing ARG1 and then signing the hash.  The hash algorithm is specified by ARG2, which may be "SHA-1", "MD5", "MD2", "SHA-256", "SHA-384", or "SHA-512".  The recommended hash algorithm is "SHA-1".
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; If trying to match OpenSSL results, set the LittleEndian property = _FALSE_.  (The LittleEndian property should also be set to _FALSE_ to match Amazon web services, such as CloudFront.)
&lt;p&gt;
A private key is required to create a digital signature.
&lt;p&gt;
An error is indicated when a byte array of 0 length is returned.</descrip>
            <args2>
                <arg name="binaryData" type="bytes" objcName="bData" />
                <arg name="hashAlgorithm" type="string" objcName="hashAlg" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="SignBytesENC" axId="128" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>binaryData</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>hashAlgorithm</argName>
                    <objcName>hashAlg</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Creates an RSA digital signature by hashing ARG1 and then signing the hash.  The hash algorithm is specified by ARG2, which may be "SHA-1", "MD5", "MD2", "SHA-256", "SHA-384", or "SHA-512".  The recommended hash algorithm is "SHA-1".  The digital signature is returned as an encoded string, where the encoding is specified by the EncodingMode property.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; If trying to match OpenSSL results, set the LittleEndian property = _FALSE_.   (The LittleEndian property should also be set to _FALSE_ to match Amazon web services, such as CloudFront.)
&lt;p&gt;
A private key is required to create a digital signature.
&lt;p&gt;
An error is indicated when null reference is returned.</descrip>
            <args2>
                <arg name="binaryData" type="bytes" objcName="bData" />
                <arg name="hashAlgorithm" type="string" objcName="hashAlg" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="SignHash" axId="129" outArgName="outBytes">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>hashBytes</argName>
                    <objcName>hashBytes</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>hashAlg</argName>
                    <objcName>hashAlg</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>The same as the SignBytes method, except the hash to be signed is passed directly.</descrip>
            <args2>
                <arg name="hashBytes" type="bytes" objcName="hashBytes" />
                <arg name="hashAlg" type="string" objcName="hashAlg" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="SignHashENC" axId="130" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encodedHash</argName>
                    <objcName>encodedHash</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>hashAlg</argName>
                    <objcName>hashAlg</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>The same as SignBytesENC except the hash is passed directly.</descrip>
            <args2>
                <arg name="encodedHash" type="string" objcName="encodedHash" />
                <arg name="hashAlg" type="string" objcName="hashAlg" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="SignString" axId="131" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>strToBeHashed</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>hashAlgorithm</argName>
                    <objcName>hashAlg</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Creates an RSA digital signature by hashing ARG1 and then signing the hash.  The hash algorithm is specified by ARG2, which may be "SHA-1", "MD5", "MD2", "SHA-256", "SHA-384", or "SHA-512".  The recommended hash algorithm is "SHA-1". 
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; If trying to match OpenSSL results, set the LittleEndian property = _FALSE_.  (The LittleEndian property should also be set to _FALSE_ to match Amazon web services, such as CloudFront.)
&lt;p&gt;
A private key is required to create a digital signature.
&lt;p&gt;
An error is indicated when a byte array of 0 length is returned.</descrip>
            <args2>
                <arg name="strToBeHashed" type="string" objcName="str" />
                <arg name="hashAlgorithm" type="string" objcName="hashAlg" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>rsa_sha256_signature_using_java_keystore.asp</url>
                    <text>RSA SHA256 Signature using Private Key from Java Keystore</text>
                </link>
            </links2>
        </method>
        <method name="SignStringENC" axId="132" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>strToBeHashed</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>hashAlgorithm</argName>
                    <objcName>hashAlg</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Creates an RSA digital signature by hashing ARG1 and then signing the hash.  The hash algorithm is specified by ARG2, which may be "SHA-1", "MD5", "MD2", "SHA-256", "SHA-384", or "SHA-512".  The recommended hash algorithm is "SHA-1".  The digital signature is returned as an encoded string, where the encoding is specified by the EncodingMode property.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; If trying to match OpenSSL results, set the LittleEndian property = _FALSE_.   (The LittleEndian property should also be set to _FALSE_ to match Amazon web services, such as CloudFront.)
&lt;p&gt;
A private key is required to create a digital signature.
&lt;p&gt;
An error is indicated when null reference is returned.</descrip>
            <links2>
                <link linkType="example">
                    <text>Example Code: Create RSA Signature with PEM Private Key</text>
                    <url>rsa_signWithPEM.asp</url>
                </link>
                <link linkType="example">
                    <url>rsa_openssl_sign.asp</url>
                    <text>Duplicate openssl dgst -md5 -sign myKey.pem something.txt | openssl enc -base64 -A</text>
                </link>
                <link linkType="example">
                    <url>rsa_sign_base64_pfx.asp</url>
                    <text>RSA Sign Using Private Key from .pfx/.p12 to Base64 Signature</text>
                </link>
                <link linkType="example">
                    <url>walmart_partner_api_authentication.asp</url>
                    <text>Walmart Partner API Authentication (Generate a Signature for a Request)</text>
                </link>
            </links2>
            <args2>
                <arg name="strToBeHashed" type="string" objcName="str" />
                <arg name="hashAlgorithm" type="string" objcName="hashAlg" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SnkToXml" axId="133" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>snkPath</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Imports a .snk file to an XML document that can be imported via the ImportPrivateKey method.</descrip>
            <args2>
                <arg name="filename" type="string" objcName="snkPath" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="UnlockComponent" axId="134">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>unlockCode</argName>
                    <objcName>unlockCode</objcName>
                </arg>
            </args>
            <descrip>Unlocks the component. This must be called once prior to calling any other method.</descrip>
            <args2>
                <arg name="unlockCode" type="string" objcName="unlockCode" />
            </args2>
            <links2>
                <link linkType="external">
                    <text>Diagnosing UnlockComponent Problems</text>
                    <url>http://www.cknotes.com/?p=168</url>
                </link>
                <link linkType="external">
                    <text>UnlockComponent LastErrorText shows exact string passed to it.</text>
                    <url>http://www.cknotes.com/?p=315</url>
                </link>
                <link linkType="external">
                    <text>Verify UnlockComponent Success w/ Permanent Unlock Code</text>
                    <url>http://www.cknotes.com/?p=317</url>
                </link>
                <link linkType="external">
                    <text>LastErrorText Standard Information</text>
                    <url>http://www.cknotes.com/?p=316</url>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="VerifyBytes" axId="135">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>originalData</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>hashAlgorithm</argName>
                    <objcName>hashAlg</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>signatureBytes</argName>
                    <objcName>sigData</objcName>
                </arg>
            </args>
            <descrip>Verifies an RSA digital signature.  Returns _TRUE_ if the signature is valid for the ARG1.  The ARG2 may be "SHA-1", "MD5", "MD2", "SHA-256", "SHA-384", or "SHA-512".  The recommended hash algorithm is "SHA-1".</descrip>
            <args2>
                <arg name="originalData" type="bytes" objcName="bData" />
                <arg name="hashAlgorithm" type="string" objcName="hashAlg" />
                <arg name="signatureBytes" type="bytes" objcName="sigData" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="VerifyBytesENC" axId="136">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>originalData</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>hashAlgorithm</argName>
                    <objcName>hashAlg</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encodedSig</argName>
                    <objcName>encodedSig</objcName>
                </arg>
            </args>
            <descrip>Verifies an RSA digital signature.  Returns _TRUE_ if the signature is valid for the ARG1.  The ARG2 may be "SHA-1", "MD5", "MD2", "SHA-256", "SHA-384", or "SHA-512".  The recommended hash algorithm is "SHA-1".
&lt;p&gt;
The ARG3 is a digital signature encoded according to the EncodingMode property (i.e. base64, hex, etc.).</descrip>
            <args2>
                <arg name="originalData" type="bytes" objcName="bData" />
                <arg name="hashAlgorithm" type="string" objcName="hashAlg" />
                <arg name="encodedSig" type="string" objcName="encodedSig" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="VerifyHash" axId="137">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>hashBytes</argName>
                    <objcName>hashBytes</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>hashAlg</argName>
                    <objcName>hashAlg</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>sigBytes</argName>
                    <objcName>sigBytes</objcName>
                </arg>
            </args>
            <descrip>The same as VerifyBytes except the hash of the original data is passed directly.</descrip>
            <args2>
                <arg name="hashBytes" type="bytes" objcName="hashBytes" />
                <arg name="hashAlg" type="string" objcName="hashAlg" />
                <arg name="sigBytes" type="bytes" objcName="sigBytes" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="VerifyHashENC" axId="138">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encodedHash</argName>
                    <objcName>encodedHash</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>hashAlg</argName>
                    <objcName>hashAlg</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encodedSig</argName>
                    <objcName>encodedSig</objcName>
                </arg>
            </args>
            <descrip>The same as VerifyBytesENC except the hash of the original data is passed directly.</descrip>
            <args2>
                <arg name="encodedHash" type="string" objcName="encodedHash" />
                <arg name="hashAlg" type="string" objcName="hashAlg" />
                <arg name="encodedSig" type="string" objcName="encodedSig" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="VerifyPrivateKey" axId="139">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>xml</argName>
                    <objcName>xml</objcName>
                </arg>
            </args>
            <descrip>Returns _TRUE_ if the XML contains a valid RSA private key.  Otherwise returns _FALSE_.</descrip>
            <args2>
                <arg name="xml" type="string" objcName="xml" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="VerifyString" axId="140">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>originalString</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>hashAlgorithm</argName>
                    <objcName>hashAlg</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>binarySig</argName>
                    <objcName>sigData</objcName>
                </arg>
            </args>
            <descrip>Verifies an RSA digital signature.  Returns _TRUE_ if the signature is valid for the ARG1.  The ARG2 may be "SHA-1", "MD5", "MD2", "SHA-256", "SHA-384", or "SHA-512".  The recommended hash algorithm is "SHA-1".</descrip>
            <args2>
                <arg name="originalString" type="string" objcName="str" />
                <arg name="hashAlgorithm" type="string" objcName="hashAlg" />
                <arg name="binarySig" type="bytes" objcName="sigData" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="VerifyStringENC" axId="141">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>originalString</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>hashAlgorithm</argName>
                    <objcName>hashAlg</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encodedSig</argName>
                    <objcName>sig</objcName>
                </arg>
            </args>
            <descrip>Verifies an RSA digital signature.  Returns _TRUE_ if the signature is valid for the ARG1.  The ARG2 may be "SHA-1", "MD5", "MD2", "SHA-256", "SHA-384", or "SHA-512".  The recommended hash algorithm is "SHA-1".
&lt;p&gt;
The ARG3 is a digital signature encoded according to the EncodingMode property (i.e. base64, hex, etc.).</descrip>
            <args2>
                <arg name="originalString" type="string" objcName="str" />
                <arg name="hashAlgorithm" type="string" objcName="hashAlg" />
                <arg name="encodedSig" type="string" objcName="sig" />
            </args2>
            <links2 />
        </method>
    </methods>
    <genericName>Rsa</genericName>
    <description>RSA encryption component / library.  Encrypt and decrypt byte arrays and strings.  Generate public/private key pairs from 384 to 4096 bits in length.  Import and export RSA keys.  Import keys from SNK files.  Input/output in raw binary, base64, hex encoding, quoted-printable, URL-encoding, etc.</description>
    <clsid>28309D42-1299-4797-AED4-64FD33B47923</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidMidl>C931B7DB-71FB-45CE-BA70-36BEF6CEAF1E</uuidMidl>
    <nextAxId>149</nextAxId>
</class>
