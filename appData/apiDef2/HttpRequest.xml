<?xml version="1.0" encoding="utf-8" ?>
<class XojoModuleId="717515581" sourceXmlPath="c:/ck2000/appData/apiDef2/HttpRequest.xml" license="Bundle">
    <axName>ChilkatHttpRequest</axName>
    <dnName>HttpRequest</dnName>
    <cppName>CkHttpRequest</cppName>
    <properties>
        <property name="Boundary" axId="142" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Sets an explicit boundary string to be used in multipart/form-data requests.  If no Boundary is set, then a boundary string is automaticaly generated as needed during the sending  of a request.</descrip>
            <iversion>9.5.0.49</iversion>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>httprequest_boundary.asp</url>
                    <text>HTTP Request Boundary Property</text>
                </link>
            </links2>
        </property>
        <property name="Charset" axId="100" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Controls the character encoding used for HTTP request parameters for POST requests.  The default value is the ANSI charset of the computer.  The charset should match the charset expected by the form target.
&lt;p&gt;
The "charset" attribute is only included in the Content-Type header of the request if the SendCharset property is set to _TRUE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ContentType" axId="101">
            <gType>string</gType>
            <descrip>The ContentType property sets the "Content-Type" header field, and identifies the content-type of the HTTP request body.  Common values are:
&lt;blockquote&gt;
&lt;pre&gt;
application/x-www-form-urlencoded
multipart/form-data
text/xml
application/jsonrequest
&lt;/pre&gt;
&lt;/blockquote&gt;
If ContentType is set equal to the empty string, then no Content-Type header is included in the HTTP request.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>httprequest_multipart_form_data.asp</url>
                    <text>Building a multipart/form-data Request for HTTP Upload</text>
                </link>
                <link linkType="example">
                    <url>httprequest_application_json.asp</url>
                    <text>Creating an application/json HTTP POST Request</text>
                </link>
                <link linkType="example" async="1" events="1">
                    <url>http_soapPost12_async.asp</url>
                    <text>Asynchronous HTTP SOAP 1.2 Request and Response using POST</text>
                </link>
            </links2>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="EntireHeader" axId="102">
            <gType>string</gType>
            <descrip>Composes and returns the entire MIME header of the HTTP request.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HttpVerb" axId="103">
            <gType>string</gType>
            <descrip>The HttpVerb property should be set to the name of the HTTP method that appears on the "start line" of an HTTP request, such as GET, POST, PUT, DELETE, etc.  It is also possible to use the various WebDav verbs such as PROPFIND, PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK, etc.  In general, the HttpVerb may be set to anything, even custom verbs recognized by a custom server-side app.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>httprequest_verb.asp</url>
                    <text>HTTP Verb - How to use any Verb (GET, PUT, POST, DELETE, PROPFIND, etc.)</text>
                </link>
                <link linkType="example" async="1" events="1">
                    <url>http_soapPost12_async.asp</url>
                    <text>Asynchronous HTTP SOAP 1.2 Request and Response using POST</text>
                </link>
            </links2>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HttpVersion" axId="104">
            <gType>string</gType>
            <descrip>The HTTP version in the request header.  Defaults to "1.1".</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="NumHeaderFields" axId="105">
            <gType>int</gType>
            <descrip>Returns the number of request header fields.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="NumParams" axId="106">
            <gType>int</gType>
            <descrip>Returns the number of query parameters.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>httprequest_setFromUrl.asp</url>
                    <text>Initialize an HTTP Request from a URL</text>
                </link>
            </links2>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Path" axId="107">
            <gType>string</gType>
            <descrip>The path of the resource requested.  A path of "/" indicates the default document for a domain.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>httprequest_path.asp</url>
                    <text>Explaining the Path Part of a URL</text>
                </link>
            </links2>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SendCharset" axId="108">
            <gType>bool</gType>
            <descrip>Controls whether the charset is explicitly included in the content-type header field of the HTTP POST request.  The default value of this property is _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
    </properties>
    <methods>
        <method name="AddBytesForUpload" axId="109" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>name</argName>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFileName</argName>
                    <objcName>filename</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>byteData</argName>
                    <objcName>byteData</objcName>
                </arg>
            </args>
            <descrip>Adds a file to an upload request where the contents of the file come from an in-memory byte array.  To create a file upload request, call UseUpload and then call AddBytesForUpload, AddStringForUpload, or AddFileForUpload for each file to be uploaded.&lt;p&gt;
ARG1 is an arbitrary name.  (In HTML, it is the form field name of the input tag.)
&lt;br&gt;
ARG2 is the name of the file to be created on the HTTP server.
&lt;br&gt;
ARG3 contains the contents (bytes) to be uploaded.</descrip>
            <args2>
                <arg name="name" type="string" objcName="name" />
                <arg name="remoteFileName" type="string" objcName="filename" />
                <arg name="byteData" type="bytes" objcName="byteData" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddBytesForUpload2" axId="110">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>name</argName>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFileName</argName>
                    <objcName>filename</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>byteData</argName>
                    <objcName>byteData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>contentType</argName>
                    <objcName>contentType</objcName>
                </arg>
            </args>
            <descrip>Same as AddBytesForUpload, but allows the Content-Type header field to be directly specified.  (Otherwise, the Content-Type header is automatically determined based on the ARG2's file extension.)</descrip>
            <args2>
                <arg name="name" type="string" objcName="name" />
                <arg name="remoteFileName" type="string" objcName="filename" />
                <arg name="byteData" type="bytes" objcName="byteData" />
                <arg name="contentType" type="string" objcName="contentType" />
            </args2>
            <links2 />
        </method>
        <method name="AddFileForUpload" axId="111" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>name</argName>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filePath</argName>
                    <objcName>path</objcName>
                </arg>
            </args>
            <descrip>Adds a file to an upload request.  To create a file upload request, call UseUpload and then call AddFileForUpload, AddBytesForUpload, or AddStringForUpload for each file to be uploaded.   This method does not read the file into memory.  When the upload occurs, the data is streamed directly from the file, thus allowing for very large files to be uploaded without consuming large amounts of memory.
&lt;p&gt;
ARG1 is an arbitrary name.  (In HTML, it is the form field name of the input tag.)
&lt;br&gt;
ARG2 is the path to an existing file in the local filesystem.</descrip>
            <args2>
                <arg name="name" type="string" objcName="name" />
                <arg name="filePath" type="string" objcName="path" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>facebook_upload_photo.asp</url>
                    <text>(Facebook) Upload Photo from Local File</text>
                </link>
            </links2>
        </method>
        <method name="AddFileForUpload2" axId="112" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>name</argName>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filePath</argName>
                    <objcName>path</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>contentType</argName>
                    <objcName>contentType</objcName>
                </arg>
            </args>
            <descrip>Same as AddFileForUpload, but allows the Content-Type header field to be directly specified.  (Otherwise, the Content-Type header is automatically determined based on the file extension.)
&lt;p&gt;
ARG1 is an arbitrary name.  (In HTML, it is the form field name of the input tag.)
&lt;br&gt;
ARG2 is the path to an existing file in the local filesystem.</descrip>
            <links2>
                <link linkType="example">
                    <url>mtom_xop_attachment.asp</url>
                    <text>SOAP with MTOM XOP Attachment</text>
                </link>
            </links2>
            <args2>
                <arg name="name" type="string" objcName="name" />
                <arg name="filePath" type="string" objcName="path" />
                <arg name="contentType" type="string" objcName="contentType" />
            </args2>
        </method>
        <method name="AddHeader" axId="113" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>name</argName>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>value</argName>
                    <objcName>value</objcName>
                </arg>
            </args>
            <descrip>Adds a request header to the HTTP request.  If a header having the same field name is already present, this method replaces it.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; Never explicitly set the Content-Length header field.  Chilkat will automatically compute the correct length and add the Content-Length header to all POST, PUT, or any other request where the Content-Length needs to be specified.  (GET requests always have a 0 length body, and therefore never need a Content-Length header field.)</descrip>
            <links2>
                <link linkType="example">
                    <text>Adding Cookies to an HTTP Request</text>
                    <url>http_addCookies.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="name" type="string" objcName="name" />
                <arg name="value" type="string" objcName="value" />
            </args2>
        </method>
        <method name="AddParam" axId="114" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>name</argName>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>value</argName>
                    <objcName>value</objcName>
                </arg>
            </args>
            <descrip>Adds a request query parameter (name/value pair) to the HTTP request.  The ARG1 and ARG2 strings passed to this method should not be URL encoded.</descrip>
            <args2>
                <arg name="name" type="string" objcName="name" />
                <arg name="value" type="string" objcName="value" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>httprequest_addParam.asp</url>
                    <text>Add Parameters to Multipart Form-Data POSTs</text>
                </link>
                <link linkType="example">
                    <url>httprequest_setFromUrl.asp</url>
                    <text>Initialize an HTTP Request from a URL</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddStringForUpload" axId="115">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>name</argName>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>filename</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>strData</argName>
                    <objcName>strData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
            </args>
            <descrip>Same as AddFileForUpload, but the upload data comes from an in-memory string instead of a file.</descrip>
            <args2>
                <arg name="name" type="string" objcName="name" />
                <arg name="filename" type="string" objcName="filename" />
                <arg name="strData" type="string" objcName="strData" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>httprequest_multipart_form_data.asp</url>
                    <text>Building a multipart/form-data Request for HTTP Upload</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddStringForUpload2" axId="116">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>name</argName>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>filename</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>strData</argName>
                    <objcName>strData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>contentType</argName>
                    <objcName>contentType</objcName>
                </arg>
            </args>
            <descrip>Same as AddStringForUpload, but allows the Content-Type header field to be directly specified.  (Otherwise, the Content-Type header is automatically determined based on the ARG2's file extension.)</descrip>
            <args2>
                <arg name="name" type="string" objcName="name" />
                <arg name="filename" type="string" objcName="filename" />
                <arg name="strData" type="string" objcName="strData" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="contentType" type="string" objcName="contentType" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>httprequest_multipart_mixed.asp</url>
                    <text>HTTP multipart-mixed POST (for a UPS Package Level Detail PLD Request)</text>
                </link>
            </links2>
        </method>
        <method name="AddSubHeader" ax="1" cpp="1" dn="1" status="1" axId="144">
            <gType>bool</gType>
            <descrip>Adds a request header to the Nth sub-header of the HTTP request.  If a header having the same field name is already present, this method replaces it.</descrip>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <argName>name</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <argName>value</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>value</objcName>
                </arg>
            </args>
            <iversion>9.5.0.55</iversion>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="name" type="string" objcName="name" />
                <arg name="value" type="string" objcName="value" />
            </args2>
            <links2 />
        </method>
        <method name="GenerateRequestText" axId="117" outArgName="outStr" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the request text that would be sent if Http.SynchronousRequest was called.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetHeaderField" axId="118" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>name</argName>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the value of a request header field.</descrip>
            <args2>
                <arg name="name" type="string" objcName="name" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetHeaderName" axId="119" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the Nth request header field name.  Indexing begins at 0, and the number of request header fields is specified by the  NumHeaderFields property.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetHeaderValue" axId="120" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the Nth request header field value. Indexing begins at 0, and the number of request header fields is specified by the  NumHeaderFields property.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetParam" axId="121" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>name</argName>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns a request query parameter value by name.</descrip>
            <args2>
                <arg name="name" type="string" objcName="name" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetParamName" axId="122" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the Nth request query parameter field name. Indexing begins at 0, and the number of request query parameter fields is specified by the NumParams property.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>httprequest_setFromUrl.asp</url>
                    <text>Initialize an HTTP Request from a URL</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetParamValue" axId="123" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the Nth request query parameter field value. Indexing begins at 0, and the number of request query parameter fields is specified by the NumParams property.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>httprequest_setFromUrl.asp</url>
                    <text>Initialize an HTTP Request from a URL</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetUrlEncodedParams" axId="124" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the request parameters in URL encoded form (i.e. in the exact form that would be sent if the ContentType property was application/x-www-form-urlencoded).   For example, if a request has two params:  param1="abc 123" and param2="abc-123", then GetUrlEncodedParams would return  "abc+123&amp;lt;param2=abc%2D123"</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>httprequest_multipart_mixed.asp</url>
                    <text>HTTP multipart-mixed POST (for a UPS Package Level Detail PLD Request)</text>
                </link>
            </links2>
        </method>
        <method name="LoadBodyFromBytes" axId="125" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>byteData</argName>
                    <objcName>binaryData</objcName>
                </arg>
            </args>
            <descrip>The HTTP protocol is such that all HTTP requests are MIME.  For non-multipart requests, this method may be called to set the MIME body of the HTTP request to the exact contents of the ARG1. &lt;br&gt;
Note: A non-multipart HTTP request consists of (1) the HTTP start line, (2) MIME header fields, and (3) the MIME body.  This method sets the MIME body.</descrip>
            <args2>
                <arg name="byteData" type="bytes" objcName="binaryData" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="LoadBodyFromFile" axId="126">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filePath</argName>
                    <objcName>path</objcName>
                </arg>
            </args>
            <descrip>The HTTP protocol is such that all HTTP requests are MIME.  For non-multipart requests, this method may be called to set the MIME body of the HTTP request to the exact contents of ARG1. &lt;br&gt;
Note: A non-multipart HTTP request consists of (1) the HTTP start line, (2) MIME header fields, and (3) the MIME body.  This method sets the MIME body.</descrip>
            <args2>
                <arg name="filePath" type="string" objcName="path" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="LoadBodyFromString" axId="127">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>bodyStr</argName>
                    <objcName>bodyStr</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
            </args>
            <descrip>The HTTP protocol is such that all HTTP requests are MIME.  For non-multipart requests, this method may be called to set the MIME body of the HTTP request to the exact contents of ARG1. &lt;br&gt;
Note: A non-multipart HTTP request consists of (1) the HTTP start line, (2) MIME header fields, and (3) the MIME body.  This method sets the MIME body.
&lt;p&gt;
ARG2 indicates the charset, such as "utf-8" or "iso-8859-1", to be used.  The HTTP body will contain the ARG1 converted to this character encoding.</descrip>
            <args2>
                <arg name="bodyStr" type="string" objcName="bodyStr" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>httprequest_application_json.asp</url>
                    <text>Creating an application/json HTTP POST Request</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="RemoveAllParams" axId="128">
            <gType>void</gType>
            <args />
            <descrip>Removes all request parameters.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>httprequest_removeAllParams.asp</url>
                    <text>Demonstrate HttpRequest.RemoveAllParams</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="RemoveHeader" axId="129">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>name</argName>
                    <objcName>name</objcName>
                </arg>
            </args>
            <descrip>Removes all occurrences of a HTTP request header field.  Always returns _TRUE_.</descrip>
            <args2>
                <arg name="name" type="string" objcName="name" />
            </args2>
            <links2 />
        </method>
        <method name="RemoveParam" axId="130" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>name</argName>
                    <objcName>name</objcName>
                </arg>
            </args>
            <descrip>Removes a single HTTP request parameter by name.</descrip>
            <args2>
                <arg name="name" type="string" objcName="name" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>httprequest_setFromUrl.asp</url>
                    <text>Initialize an HTTP Request from a URL</text>
                </link>
            </links2>
        </method>
        <method name="SetFromUrl" axId="131" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>url</argName>
                    <objcName>url</objcName>
                </arg>
            </args>
            <descrip>Parses a URL and sets the Path and query parameters (NumParams, GetParam, GetParamName, GetParamValue).</descrip>
            <args2>
                <arg name="url" type="string" objcName="url" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>httprequest_setFromUrl.asp</url>
                    <text>Initialize an HTTP Request from a URL</text>
                </link>
            </links2>
        </method>
        <method name="StreamBodyFromFile" axId="132" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filePath</argName>
                    <objcName>path</objcName>
                </arg>
            </args>
            <descrip>Useful for sending HTTP requests where the body is a very large file.  For example, to send an XML HttpRequest containing a very large XML document, one would set the HttpVerb = "POST", the ContentType = "text/xml", and then call StreamBodyFromFile to indicate that the XML body of the request is to be streamed directly from a file.  When the HTTP request is actually sent, the body is streamed directly from the file, and thus the file never needs to be loaded in its entirety in memory.</descrip>
            <args2>
                <arg name="filePath" type="string" objcName="path" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>onedrive_streaming_file_upload.asp</url>
                    <text>OneDrive -- Streaming File Upload</text>
                </link>
            </links2>
        </method>
        <method name="StreamChunkFromFile" ax="1" cpp="1" dn="1" status="1" axId="143">
            <gType>bool</gType>
            <descrip>This method is the same as StreamBodyFromFile, but allows for an offset and number of bytes to be specified.  The ARG2 and ARG3 are integers passed as strings.</descrip>
            <args>
                <arg>
                    <argName>path</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>path</objcName>
                </arg>
                <arg>
                    <argName>offset</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>offset</objcName>
                </arg>
                <arg>
                    <argName>numBytes</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>numBytes</objcName>
                </arg>
            </args>
            <iversion>9.5.0.55</iversion>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="offset" type="string" objcName="offset" />
                <arg name="numBytes" type="string" objcName="numBytes" />
            </args2>
            <links2 />
        </method>
        <method name="UseGet" axId="133" ax="1" cpp="1" dn="1" deprecated="1" noxojo="1">
            <gType>void</gType>
            <args />
            <descrip>Makes the HttpRequest a GET request.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; This method is deprecated.  An application should instead set the HttpVerb property  equal to "GET", and the ContentType equal to an empty string (because GET requests have no request body).</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="UseHead" axId="134" ax="1" cpp="1" dn="1" deprecated="1" noxojo="1">
            <gType>void</gType>
            <args />
            <descrip>Makes the HttpRequest a HEAD request.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; This method is deprecated.  An application should instead set the HttpVerb property  equal to "HEAD", and the ContentType equal to an empty string (because HEAD requests have no body).</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="UsePost" axId="135" ax="1" cpp="1" dn="1" deprecated="1" noxojo="1">
            <gType>void</gType>
            <args />
            <descrip>Makes the HttpRequest a POST request that uses the "application/x-www-form-urlencoded" content type.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; This method is deprecated.  An application should instead set the HttpVerb property  equal to "POST", and the ContentType equal to "application/x-www-form-urlencoded".</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="UsePostMultipartForm" axId="136" ax="1" cpp="1" dn="1" deprecated="1" noxojo="1">
            <gType>void</gType>
            <args />
            <descrip>Makes the HttpRequest a POST request that uses the "multipart/form-data" content type.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; This method is deprecated.  An application should instead set the HttpVerb property  equal to "POST", and the ContentType equal to "multipart/form-data".</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="UsePut" axId="137" ax="1" cpp="1" dn="1" deprecated="1" noxojo="1">
            <gType>void</gType>
            <args />
            <descrip>Makes the HttpRequest a PUT request.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; This method is deprecated.  An application should instead set the HttpVerb property  equal to "PUT", and the ContentType equal to "application/x-www-form-urlencoded".</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="UseUpload" axId="138" ax="1" cpp="1" dn="1" deprecated="1" noxojo="1">
            <gType>void</gType>
            <args />
            <descrip>Makes the HttpRequest a POST request that uses the "multipart/form-data" content type.  To create a file upload request, call UseUpload and then call AddFileForUpload for each file to be uploaded.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; This method is deprecated.  An application should instead set the HttpVerb property  equal to "POST", and the ContentType equal to "multipart/form-data".</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="UseUploadPut" axId="139" ax="1" cpp="1" dn="1" deprecated="1" noxojo="1">
            <gType>void</gType>
            <args />
            <descrip>Makes the HttpRequest a PUT request that uses the "multipart/form-data" content type.  To create a file upload request (using the PUT verb), call UseUploadPut and then call AddFileForUpload for each file to be uploaded.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; This method is deprecated.  An application should instead set the HttpVerb property  equal to "PUT", and the ContentType equal to "multipart/form-data".</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="UseXmlHttp" axId="140" ax="1" cpp="1" dn="1" deprecated="1" noxojo="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>xmlBody</argName>
                    <objcName>xmlBody</objcName>
                </arg>
            </args>
            <descrip>Makes the HttpRequest a POST request using the "application/xml" content type.  The request body is set to the XML string passed to this method.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; This method is deprecated.  An application should instead set the HttpVerb property  equal to "POST", the ContentType equal to "text/xml", and the request body should contain the XML document text.</descrip>
            <args2>
                <arg name="xmlBody" type="string" objcName="xmlBody" />
            </args2>
            <links2 />
        </method>
        <method name="GenerateRequestFile" axId="145" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="path" type="string" objcName="path" />
            </args2>
            <links2 />
            <iversion>9.5.0.64</iversion>
            <descrip>The same as GenerateRequestText, except the generated request is written to the file specified by ARG1.</descrip>
        </method>
        <method name="AddMwsSignature" axId="146" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="domain" type="string" objcName="domain" />
                <arg name="mwsSecretKey" type="string" objcName="mwsSecretKey" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>https_mws_list_orders.asp</url>
                    <text>HTTPS MWS List Orders (Amazon Marketplace Web Service)</text>
                </link>
            </links2>
            <iversion>9.5.0.66</iversion>
            <descrip>Computes the Amazon MWS signature using the ARG2 and adds the "Signature" parameter to the request.  This method should be called for all Amazon Marketplace Web Service (Amazon MWS) HTTP requests.   It should be called after all request parameters have been added.
&lt;p&gt;
The ARG1 should be the domain of the request, such as one of the following:
&lt;ul&gt;
&lt;li&gt;mws.amazonservices.com
&lt;li&gt;mws-eu.amazonservices.com
&lt;li&gt;mws.amazonservices.in
&lt;li&gt;mws.amazonservices.com.cn
&lt;li&gt;mws.amazonservices.jp
&lt;/ul&gt;
&lt;p&gt;Note: This method automatically adds or replaces the existing Timestamp parameter to the current system date/time.</descrip>
        </method>
        <method name="LoadBodyFromBd" axId="147" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="requestBody" type="BinData" objcName="requestBody" />
            </args2>
            <links2 />
            <iversion>9.5.0.67</iversion>
            <descrip>Uses the contents of the ARG1 as the HTTP request body.</descrip>
        </method>
        <method name="LoadBodyFromSb" axId="148" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Uses the contents of the ARG1 as the HTTP request body.   The ARG2 indicates the binary representation of the string, such as "utf-8", "utf-16", "iso-8859-*", "windows-125*", etc.  Any of the character encodings supported at the link below are valid.</descrip>
            <args2>
                <arg name="requestBody" type="StringBuilder" objcName="requestBody" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <iversion>9.5.0.67</iversion>
            <links2>
                <link linkType="external">
                    <url>http://cknotes.com/chilkat-charsets-character-encodings-supported/</url>
                    <text>Chilkat Supported Character Encodings</text>
                </link>
            </links2>
        </method>
    </methods>
    <genericName>HttpRequest</genericName>
    <description>Represents a complete HTTP request.</description>
    <clsid>D66A2F08-A267-4593-ACD4-3EF65255E005</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidMidl>495F8CD2-9F03-4A83-A9BC-FEEAE2182D9B</uuidMidl>
    <nextAxId>149</nextAxId>
</class>
