<?xml version="1.0" encoding="utf-8" ?>
<class sourceXmlPath="c:/ck2000/appData/apiDef2/XmlDSigGen.xml" license="Bundle">
    <methods>
        <method name="AddEnvelopedRef" read="1" write="1" axId="105" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Specifies an enveloped Reference to be added to the Signature when generated.  An enveloped Reference is for data contained within the Signature.  (The Signature is to be an enveloping signature, and the data is enveloped by the Signature.)
&lt;p&gt;
The ARG1 is the value of the &lt;b&gt;Id&lt;/b&gt; attribute of the &lt;b&gt;Object&lt;/b&gt; element that is to be contained within the generated Signature.  The ARG2 is the text content to be contained in the Object.  Binary data can be signed by passing the bytes in ARG2 in an encoded format (such as base64 or hex). 
&lt;p&gt;
The ARG3 is the digest method and can be one of the following: "sha1", "sha256", "sha384", "sha512", "ripemd160", or "md5".
&lt;p&gt;
The ARG4 is the canonicalization method, and can be one of the following:
&lt;ul&gt;
&lt;li&gt;"C14N" -- for Inclusive Canonical XML (without comments)
&lt;li&gt;"C14N_11" -- for Inclusive Canonical XML 1.1 (without comments)
&lt;li&gt;"EXCL_C14N" -- for Exclusive Canonical XML (without comments)
&lt;/ul&gt;
&lt;p&gt;
The ARG5 is optional and is usually not needed.  Set this to the empty string unless it is desired to add a Type attribute to the Reference that is advisory only.</descrip>
            <args2>
                <arg name="id" type="string" objcName="id" />
                <arg name="content" type="StringBuilder" objcName="content" />
                <arg name="digestMethod" type="string" objcName="digestMethod" />
                <arg name="canonMethod" type="string" objcName="canonMethod" />
                <arg name="refType" type="string" objcName="refType" />
            </args2>
            <iversion>9.5.0.69</iversion>
            <links2>
                <link linkType="example">
                    <url>xmldsig_enveloping_signature.asp</url>
                    <text>Create Enveloping XML Digital Signature</text>
                </link>
                <link linkType="example">
                    <url>xmldsig_enveloping_sig_multiple_refs.asp</url>
                    <text>Create Enveloping XML Signature with Multiple References</text>
                </link>
            </links2>
        </method>
        <method name="AddSameDocRef" axId="106" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Specifies a same document Reference to be added to the Signature when generated.  An same document Reference can be the entire XML document, or a fragment of the XML document.  
&lt;p&gt;
The ARG1 can be the empty string to sign the entire XML document, or it can be the fragment identifier to sign a portion of the XML document.  
&lt;p&gt;
The ARG2 is the digest method and can be one of the following: "sha1", "sha256", "sha384", "sha512", "ripemd160",  or "md5".
&lt;p&gt;
The ARG3 is the canonicalization method, and can be one of the following:
&lt;ul&gt;
&lt;li&gt;"C14N" -- for Inclusive Canonical XML (without comments)
&lt;li&gt;"C14N_11" -- for Inclusive Canonical XML 1.1 (without comments)
&lt;li&gt;"EXCL_C14N" -- for Exclusive Canonical XML (without comments)
&lt;/ul&gt;
&lt;p&gt;If exclusive canonicalization is selected, then the ARG4 can contain a space separated list of inclusive namespace prefixes.  For inclusive canonicalization, this argument is ignored.  In general, pass an empty string for this argument unless you have specific knowledge of namespace prefixes that need to be treated as inclusive when EXCL_C14N is used.
&lt;p&gt;
Starting in Chilkat v9.5.0.70, the ARG4 can be set to the keyword "_EMPTY_" to force the generation of an empty PrefixList under the Transform.  For example:
&lt;pre&gt;
  &amp;lt;ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"&amp;gt;
	&amp;lt;ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList=""/&amp;gt;
  &amp;lt;/ds:Transform&amp;gt;
&lt;/pre&gt;
&lt;p&gt;
The ARG5 is optional and is usually not needed.  Set this to the empty string unless it is desired to add a Type attribute to the Reference that is advisory only.</descrip>
            <args2>
                <arg name="id" type="string" objcName="id" />
                <arg name="digestMethod" type="string" objcName="digestMethod" />
                <arg name="canonMethod" type="string" objcName="canonMethod" />
                <arg name="prefixList" type="string" objcName="prefixList" />
                <arg name="refType" type="string" objcName="refType" />
            </args2>
            <iversion>9.5.0.69</iversion>
            <links2>
                <link linkType="example">
                    <url>xmldsig_sign_using_rsa_key.asp</url>
                    <text>SOAP XML Digital Signature using RSA Key</text>
                </link>
            </links2>
        </method>
        <method name="SetPrivateKey" axId="107" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="privKey" type="PrivateKey" objcName="privKey" />
            </args2>
            <iversion>9.5.0.69</iversion>
            <links2>
                <link linkType="example">
                    <url>xmldsig_sign_dsa.asp</url>
                    <text>Create XML Digital Signature using a DSA Key</text>
                </link>
                <link linkType="example">
                    <url>xmldsig_ecdsa.asp</url>
                    <text>Create XML Digital Signature using a ECDSA Key</text>
                </link>
            </links2>
            <descrip>Sets the private key to be used for creating the XML signature.  The private key may be an RSA key, a DSA key, or an ECDSA key.</descrip>
        </method>
        <method name="CreateXmlDSig" axId="113" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2>
                <arg name="inXml" type="string" objcName="inXml" />
            </args2>
            <iversion>9.5.0.69</iversion>
            <links2 />
            <descrip>Creates an XML Digital Signature.   The application passes in the XML to be signed, and the signed XML is returned.  If creating an enveloping signature where the Signature element is the root, then the ARG1 may be the empty string.</descrip>
        </method>
        <method name="SetX509Cert" read="1" write="1" axId="115" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Specifies the X.509 certificate to be used for the KeyInfo element when the KeyInfoType equals "X509Data".   If ARG2 is _TRUE_, then the private key will also be set using the certificate's private key.  Thus, the &lt;b&gt;SetPrivateKey&lt;/b&gt; method does not need to be called.  &lt;b&gt;If ARG2 is _TRUE_, and the certificate does not have an associated private key available, then this method will return _FALSE_.&lt;/b&gt;
&lt;p&gt;
Note: A certificate's private key is not stored within a certificate itself.  If the certificate (ARG1) was obtained from a PFX, Java KeyStore, or other such source, which are containers for both certs and private keys, then Chilkat would have associated the cert with the private key when loading the PFX or JKS, and all is good.  The same holds true if, on a Windows system, the certificate was obtained from a Windows-based registry certificate store where the private key was installed with the permission to export. 
&lt;p&gt;
If, however, the certificate was loaded from a .cer file, or another type of file that contains only  the certificate and not the private key, then the associated private key needs to be obtained by the application and provided by calling SetPrivateKey.</descrip>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
                <arg name="usePrivateKey" type="bool" objcName="usePrivateKey" />
            </args2>
            <iversion>9.5.0.69</iversion>
            <links2 />
        </method>
        <method name="SetHmacKey" axId="120" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="key" type="string" objcName="key" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
            <iversion>9.5.0.69</iversion>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Binary Encodings Supported by Chilkat</text>
                </link>
                <link linkType="example">
                    <url>xmldsig_hmac_key.asp</url>
                    <text>Create XML Digital Signature using HMAC Key</text>
                </link>
            </links2>
            <descrip>Sets the HMAC key to be used if the Signature is to use an HMAC signing algorithm.  The ARG2 specifies the encoding of ARG1, and can be "hex", "base64", "ascii", or any of the binary encodings supported by Chilkat in the link below.</descrip>
        </method>
        <method name="AddExternalFileRef" axId="121" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Specifies an external file Reference to be added to the Signature when generated.
&lt;p&gt;
The ARG1 is the value of the &lt;b&gt;URI&lt;/b&gt; attribute of the Reference.  It can (and likely will) be different than the ARG2 which is the path to the local file to be added.  (The local file is not read until the XML digital signature is actually created.)  
&lt;p&gt;
The ARG3 is the digest method and can be one of the following: "sha1", "sha256", "sha384", "sha512", "ripemd160", or "md5".
&lt;p&gt;
The ARG4 is optional and is usually not needed.  Set this to the empty string unless it is desired to add a Type attribute to the Reference that is advisory only.</descrip>
            <args2>
                <arg name="uri" type="string" objcName="uri" />
                <arg name="localFilePath" type="string" objcName="localFilePath" />
                <arg name="digestMethod" type="string" objcName="digestMethod" />
                <arg name="refType" type="string" objcName="refType" />
            </args2>
            <iversion>9.5.0.69</iversion>
            <links2 />
        </method>
        <method name="AddExternalBinaryRef" axId="122" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Specifies an external non-XML binary data Reference to be added to the Signature when generated.
&lt;p&gt;
The ARG1 is the value of the &lt;b&gt;URI&lt;/b&gt; attribute of the Reference. 
&lt;p&gt;
The ARG2 contains the binary data to be digested according to the ARG3.
&lt;p&gt;
The ARG3 is the digest method and can be one of the following: "sha1", "sha256", "sha384", "sha512", "ripemd160", or "md5".
&lt;p&gt;
The ARG4 is optional and is usually not needed.  Set this to the empty string unless it is desired to add a Type attribute to the Reference that is advisory only.</descrip>
            <args2>
                <arg name="uri" type="string" objcName="uri" />
                <arg name="content" type="BinData" objcName="content" />
                <arg name="digestMethod" type="string" objcName="digestMethod" />
                <arg name="refType" type="string" objcName="refType" />
            </args2>
            <iversion>9.5.0.69</iversion>
            <links2>
                <link linkType="example">
                    <url>xmldsig_external_data_reference.asp</url>
                    <text>Create XML Signature with External Data Reference</text>
                </link>
            </links2>
        </method>
        <method name="AddExternalTextRef" axId="123" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Specifies an external non-XML text data Reference to be added to the Signature when generated.
&lt;p&gt;
The ARG1 is the value of the &lt;b&gt;URI&lt;/b&gt; attribute of the Reference. 
&lt;p&gt;
The ARG2 contains the non-XML data to be digested according to the ARG3.  The ARG3 specifies the charset (such as "utf-8", "windows-1252", etc.) for the byte reprsentation of the text to be digested.   The ARG4 indicates whether the BOM (Byte Order Mark, also known as the preamble) is included in the byte representation that is digested.
&lt;p&gt;
The ARG5 is the digest method and can be one of the following: "sha1", "sha256", "sha384", "sha512", "ripemd160", or "md5".
&lt;p&gt;
The ARG6 is optional and is usually not needed.  Set this to the empty string unless it is desired to add a Type attribute to the Reference that is advisory only.</descrip>
            <args2>
                <arg name="uri" type="string" objcName="uri" />
                <arg name="content" type="StringBuilder" objcName="content" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="includeBom" type="bool" objcName="includeBom" />
                <arg name="digestMethod" type="string" objcName="digestMethod" />
                <arg name="refType" type="string" objcName="refType" />
            </args2>
            <iversion>9.5.0.69</iversion>
            <links2 />
        </method>
        <method name="AddExternalXmlRef" axId="124" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Specifies an external XML Reference to be added to the Signature when generated.
&lt;p&gt;
The ARG1 is the value of the &lt;b&gt;URI&lt;/b&gt; attribute of the Reference. 
&lt;p&gt;
The ARG2 contains the XML document to be referenced.
&lt;p&gt;
The ARG3 is the digest method and can be one of the following: "sha1", "sha256", "sha384", "sha512", "ripemd160", or "md5".
&lt;p&gt;
The ARG4 is the canonicalization method, and can be one of the following.  
&lt;ul&gt;
&lt;li&gt;"C14N" -- for Inclusive Canonical XML (without comments)
&lt;li&gt;"C14N_11" -- for Inclusive Canonical XML 1.1 (without comments)
&lt;li&gt;"EXCL_C14N" -- for Exclusive Canonical XML (without comments)
&lt;/ul&gt;
&lt;p&gt;
The ARG5 is optional and is usually not needed.  Set this to the empty string unless it is desired to add a Type attribute to the Reference that is advisory only.</descrip>
            <args2>
                <arg name="uri" type="string" objcName="uri" />
                <arg name="content" type="StringBuilder" objcName="content" />
                <arg name="digestMethod" type="string" objcName="digestMethod" />
                <arg name="canonMethod" type="string" objcName="canonMethod" />
                <arg name="refType" type="string" objcName="refType" />
            </args2>
            <iversion>9.5.0.69</iversion>
            <links2 />
        </method>
        <method name="CreateXmlDSigSb" axId="126" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Creates an XML Digital Signature.   The application passes the XML to be signed in ARG1, and it is replaced with the signed XML if successful.  (Thus, ARG1 is both an input and output argument.)  Note: If creating an enveloping signature where the Signature element is to be the root element, then the passed-in ARG1 may be empty.</descrip>
            <args2>
                <arg name="sbXml" type="StringBuilder" objcName="sbXml" />
            </args2>
            <iversion>9.5.0.69</iversion>
            <links2>
                <link linkType="example">
                    <url>xmldsig_sign_using_rsa_key.asp</url>
                    <text>SOAP XML Digital Signature using RSA Key</text>
                </link>
                <link linkType="example">
                    <url>xmldsig_ecdsa.asp</url>
                    <text>Create XML Digital Signature using a ECDSA Key</text>
                </link>
            </links2>
        </method>
    </methods>
    <properties>
        <property name="SigLocation" axId="102" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2 />
            <links2 />
            <iversion>9.5.0.69</iversion>
            <descrip>Indicates where the Signature is to be located within the XML that is signed.  This is a path to the position in the XML where the Signature will be inserted, using Chilkat path syntax (using vertical bar characters to delimit tag names.  If the Signature element is to be the root of XML document, then set this property equal to the empty string.
&lt;p&gt;
For example, if we have the following SOAP XML and wish to insert the Signature at the indicated location, then the SigLocation property should be set to "SOAP-ENV:Envelope|SOAP-ENV:Header|wsse:Security".
&lt;pre&gt;
&amp;lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&amp;gt;
&amp;lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&amp;gt;
    &amp;lt;SOAP-ENV:Header&amp;gt;
	&amp;lt;wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" SOAP-ENV:mustUnderstand="1"&amp;gt;
		&lt;b&gt;** The XML Signature is to be inserted here **&lt;/b&gt;
	&amp;lt;/wsse:Security&amp;gt;
    &amp;lt;/SOAP-ENV:Header&amp;gt;
...
&amp;lt;/SOAP-ENV:Envelope&amp;gt;
&lt;/pre&gt;</descrip>
        </property>
        <property name="SigNamespaceUri" axId="103" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2 />
            <iversion>9.5.0.69</iversion>
            <links2 />
            <descrip>The namespace URI of the Signature that is to be created.  The default value is "http://www.w3.org/2000/09/xmldsig#".   For example, if the SigNamespacePrefix equals "ds" and this property remains at the default value, then the generated Signature element will be:
&lt;pre&gt;
&amp;lt;ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"&amp;gt; ... &amp;lt;/ds:Signature&amp;gt;
&lt;/pre&gt;</descrip>
        </property>
        <property name="SigNamespacePrefix" axId="104" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The namespace prefix of the Signature that is to be created.  The default value is "ds".   Set this property to the empty string to omit a Signature namespace URI and prefix.   For example, given the default values of SigNamespaceUri and SigNamespacePrefix, the generated Signature element will be:
&lt;pre&gt;
&amp;lt;ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"&amp;gt; ... &amp;lt;/ds:Signature&amp;gt;
&lt;/pre&gt;</descrip>
            <args2 />
            <iversion>9.5.0.69</iversion>
            <links2 />
        </property>
        <property name="SigningAlg" axId="108" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2 />
            <iversion>9.5.0.69</iversion>
            <links2 />
            <descrip>Selects the signature algorithm to be used when using an RSA key to sign.  The default value is "PKCS1-v1_5".  This can be set to "RSASSA-PSS" (or simply "pss") to use the RSASSA-PSS signature scheme.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; This property only applies when signing with an RSA private key.  It does not apply for ECC or DSA private keys.</descrip>
        </property>
        <property name="SignedInfoCanonAlg" axId="109" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2 />
            <iversion>9.5.0.69</iversion>
            <links2 />
            <descrip>The canonicalization method to be used for the SignedInfo when creating the XML signature.
&lt;ul&gt;
&lt;li&gt;"C14N" -- for Inclusive Canonical XML 1.0 (without comments)
&lt;li&gt;"C14N_11" -- for Inclusive Canonical XML 1.1 (without comments)
&lt;li&gt;"EXCL_C14N" -- for Exclusive Canonical XML (without comments)
&lt;/ul&gt;
&lt;p&gt;
The default value is "EXCL_C14N".</descrip>
        </property>
        <property name="SignedInfoPrefixList" axId="110" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The inclusive namespace prefix list to be added, if any, when the SignedInfoCanonAlg is equal to "EXCL_C14N".  The defautl value is the empty string.   If namespaces are listed, they are separated by space characters.
&lt;p&gt;If, for example, this property is set to "wsse SOAP-ENV", then the CanonicalizationMethod part of the SignedInfo that is generated would look like this:
&lt;pre&gt;
&amp;lt;ds:SignedInfo&amp;gt;
    &amp;lt;ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"&amp;gt;
      &amp;lt;InclusiveNamespaces xmlns="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="wsse SOAP-ENV" /&amp;gt;
    &amp;lt;/ds:CanonicalizationMethod&amp;gt;
...
&amp;lt;/ds:SignedInfo&amp;gt;
&lt;/pre&gt;</descrip>
            <args2 />
            <iversion>9.5.0.69</iversion>
            <links2>
                <link linkType="example">
                    <url>xmldsig_soap_wsse_SecurityTokenReference.asp</url>
                    <text>Sign SOAP XML using a wsse:SecurityTokenReference</text>
                </link>
            </links2>
        </property>
        <property name="SignedInfoDigestMethod" axId="111" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2 />
            <iversion>9.5.0.69</iversion>
            <links2 />
            <descrip>The digest method to be used for signing the SignedInfo part of the Signature.  Possible values are "sha1", "sha256", "sha384", and "sha512".   The default is "sha256".</descrip>
        </property>
        <property name="KeyInfoType" axId="112" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Specifies the type of information that will be included in the optional KeyInfo element of the Signature.   Possible values are:
&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;li&gt;KeyName&lt;/li&gt;
&lt;li&gt;KeyValue&lt;/li&gt;
&lt;li&gt;X509Data&lt;/li&gt;
&lt;li&gt;Custom&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The default value is "KeyValue".
&lt;p&gt;
If &lt;b&gt;None&lt;/b&gt;, then no KeyInfo element is added to the Signature when generated.
&lt;p&gt;
If &lt;b&gt;KeyValue&lt;/b&gt;, then the KeyInfo will contain the public key (RSA, DSA, or ECDSA).
&lt;p&gt;
If &lt;b&gt;X509Data&lt;/b&gt;, then the KeyInfo will contain information about an X.509 certificate as specified by the X509Type property.
&lt;p&gt;
If &lt;b&gt;Custom&lt;/b&gt;, then the KeyInfo will contain the custom XML contained in the CustomKeyInfoXml property.
&lt;p&gt;</descrip>
            <args2 />
            <iversion>9.5.0.69</iversion>
            <links2>
                <link linkType="example">
                    <url>xmldsig_create_keyname.asp</url>
                    <text>Create XML Digital Signature having KeyName</text>
                </link>
                <link linkType="example">
                    <url>xmldsig_soap_wsse_SecurityTokenReference.asp</url>
                    <text>Sign SOAP XML using a wsse:SecurityTokenReference</text>
                </link>
                <link linkType="example">
                    <url>xmldsig_x509Data_x509Certificate.asp</url>
                    <text>Create XML Signature with KeyInfo /  X509Data / X509Certificate</text>
                </link>
                <link linkType="example">
                    <url>xmldsig_x509Data_SKI.asp</url>
                    <text>Create XML Signature with KeyInfo /  X509Data / X509SKI</text>
                </link>
            </links2>
        </property>
        <property name="X509Type" axId="114" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Specifies the kind of X.509 certificate information is provided in the KeyInfo element when the KeyInfoType equals "X509Data".   Possible values are:
&lt;ul&gt;
&lt;li&gt;Certificate&lt;/li&gt;
&lt;li&gt;CertChain&lt;/li&gt;
&lt;li&gt;IssuerSerial&lt;/li&gt;
&lt;li&gt;SubjectName&lt;/li&gt;
&lt;li&gt;SKI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The default value is "Certificate".
&lt;p&gt;
If &lt;b&gt;Certificate&lt;/b&gt;, then the KeyInfo will contain the base64 encoded X.509v3 certificate.
&lt;p&gt;
If &lt;b&gt;CertChain&lt;/b&gt;, then the KeyInfo will contain the base64 encoded X.509v3 certificate as well as any certificates available in the chain of authentication to the root cert.
&lt;p&gt;
If &lt;b&gt;IssuerSerial&lt;/b&gt;, then the KeyInfo will contain the X.509 issuer's distinguished name and the signing certificate's serial number.  
&lt;p&gt;
If &lt;b&gt;SubjectName&lt;/b&gt;, then the KeyInfo will contain the X.509 subject distinguished name.  
&lt;p&gt;
If &lt;b&gt;SKI&lt;/b&gt;, then the KeyInfo will contain the base64 encoded value of the cert's X.509 SubjectKeyIdentifier extension.
&lt;p&gt;</descrip>
            <args2 />
            <iversion>9.5.0.69</iversion>
            <links2>
                <link linkType="example">
                    <url>xmldsig_x509Data_x509Certificate.asp</url>
                    <text>Create XML Signature with KeyInfo /  X509Data / X509Certificate</text>
                </link>
                <link linkType="example">
                    <url>xmldsig_x509Data_SKI.asp</url>
                    <text>Create XML Signature with KeyInfo /  X509Data / X509SKI</text>
                </link>
            </links2>
        </property>
        <property name="CustomKeyInfoXml" axId="118" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Specifies custom XML to be inserted in the  KeyInfo element of the Signature.   A common use is to provide a &lt;b&gt;wsse:SecurityTokenReference&lt;/b&gt; fragment of XML.</descrip>
            <args2 />
            <iversion>9.5.0.69</iversion>
            <links2>
                <link linkType="example">
                    <url>xmldsig_soap_wsse_SecurityTokenReference.asp</url>
                    <text>Sign SOAP XML using a wsse:SecurityTokenReference</text>
                </link>
            </links2>
        </property>
        <property name="SigId" axId="119" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2 />
            <iversion>9.5.0.69</iversion>
            <links2 />
            <descrip>An option Id attribute value for the Signature element.  The default value is the empty string, which generates a Signature element with no Id attribute.  For example:
&lt;pre&gt;
&amp;lt;ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"&amp;gt;
&lt;/pre&gt;
If this property is set to "abc123", then the Signature element would be generated like this:
&lt;pre&gt;
&amp;lt;ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#" Id="abc123"&amp;gt;
&lt;/pre&gt;</descrip>
        </property>
        <property name="KeyInfoKeyName" axId="125" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Specifies the KeyName to be inserted in the  KeyInfo element of the Signature if the KeyInfoType equals "KeyName".</descrip>
            <args2 />
            <iversion>9.5.0.69</iversion>
            <links2>
                <link linkType="example">
                    <url>xmldsig_create_keyname.asp</url>
                    <text>Create XML Digital Signature having KeyName</text>
                </link>
            </links2>
        </property>
        <property name="IncNamespacePrefix" axId="127" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The namespace prefix to use for InclusiveNamespaces elements.  The default value is "ec".   Set this property to the empty string to omit an InclusiveNamespaces prefix.   For example, given the default values of IncNamespaceUri and IncNamespacePrefix, generated InclusiveNamespaces elements will appear like this:
&lt;pre&gt;
&amp;lt;ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"&amp;gt; ... &amp;lt;/ec:InclusiveNamespaces&amp;gt;
&lt;/pre&gt;</descrip>
            <args2 />
            <iversion>9.5.0.70</iversion>
            <links2 />
        </property>
        <property name="IncNamespaceUri" axId="128" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The namespace URI for any InclusiveNamespaces elements  that are created.  The default value is "http://www.w3.org/2001/10/xml-exc-c14n#".   For example, if the IncNamespacePrefix equals "ec" and this property remains at the default value, then the generated Signature element will be:
&lt;pre&gt;
&amp;lt;ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"&amp;gt; ... &amp;lt;/ec:InclusiveNamespaces&amp;gt;
&lt;/pre&gt;</descrip>
            <args2 />
            <iversion>9.5.0.70</iversion>
            <links2 />
        </property>
        <property name="Behaviors" axId="129" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2 />
            <iversion>9.5.0.70</iversion>
            <links2 />
            <descrip>A comma-separated list of keywords to specify special behaviors to work around potential oddities or special requirements needed for providing signatures to particular systems.  This is an open-ended property where new behaviors can be implemented depending on the needs encountered by Chilkat customers.  The possible behaviors are listed below.  (At this time, there is only one special behavior.)
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;ForceAddEnvelopedSignatureTransform&lt;/b&gt;  The "&amp;lt;Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /&amp;gt; " is normally only added when the Signature is contained within the XML fragment that is signed.  The meaning of this tranformation is to tell the verifier to remove the Signature from the data prior to canonicalizing.  If the Signature is not contained within the XML fragment that was signed, then the signature was not &lt;b&gt;enveloped&lt;/b&gt;.  There would be no need to remove the Signature because the Signature is not contained in the XML fragment being verified.    &lt;b&gt;However..&lt;/b&gt; some brain-dead verifiying systems require this Transform to be present regardless of whether it makes sense.  This behavior will cause Chilkat to add the Transform regardless.&lt;/li&gt;
&lt;/ul&gt;</descrip>
        </property>
    </properties>
    <events />
    <genericName>XmlDSigGen</genericName>
    <cppName>CkXmlDSigGen</cppName>
    <dnName>XmlDSigGen</dnName>
    <axName>ChilkatXmlDSigGen</axName>
    <description>An API for generating/creating XML Digital Signatures.  Use the XmlDSig class for verifying XML Digital Signatures.</description>
    <nextAxId>130</nextAxId>
    <clsid>88958592-6B2D-4CF1-9652-B9803F41990A</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidMidl>07530635-48E4-4E43-B3C5-7BF9FF08C2C5</uuidMidl>
</class>
