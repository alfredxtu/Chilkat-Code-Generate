<?xml version="1.0" encoding="utf-8" ?>
<class license="Bundle" XojoModuleId="206711247" sourceXmlPath="C:/ck2000/appData/apiDef2/Ntlm.xml">
    <nextAxId>125</nextAxId>
    <dnName>Ntlm</dnName>
    <cppName>CkNtlm</cppName>
    <properties>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ClientChallenge" axId="100">
            <gType>string</gType>
            <descrip>The ClientChallenge is passed in the Type 3 message from the client to the server.  It must contain exactly 8 bytes.  Because this is a string property, the bytes are get/set in encoded form (such as hex or base64) based on the value of the EncodingMode property.  For example, if the EncodingMode property = "hex", then a hex representation of 8 bytes should be used to set the ClientChallenge.
&lt;p&gt;
Note: Setting the ClientChallenge is optional.  If the ClientChallenge remains unset, it will be automatically set to 8 random bytes when the GenType3 method is called.</descrip>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="DnsComputerName" axId="101">
            <gType>string</gType>
            <descrip>Optional.  This is information that would be set by the server for inclusion in the "Target Info" internal portion of the Type 2 message.  Note: If any optional "Target Info" fields are provided, then both NetBiosComputerName and NetBiosDomainName must be provided.</descrip>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="DnsDomainName" axId="102">
            <gType>string</gType>
            <descrip>Optional.  This is information that would be set by the server for inclusion in the "Target Info" internal portion of the Type 2 message.  Note: If any optional "Target Info" fields are provided, then both NetBiosComputerName and NetBiosDomainName must be provided.</descrip>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Domain" axId="103">
            <gType>string</gType>
            <descrip>Optional.  May be set by the client for inclusion in the Type 1 message.</descrip>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="EncodingMode" axId="104">
            <gType>string</gType>
            <descrip>Determines the encoding mode used for getting/setting various properties, such as ClientChallenge.  The valid case-insensitive modes are "Base64", "modBase64", "Base32", "UU", "QP" (for quoted-printable), "URL" (for url-encoding), "Hex", "Q", "B", "url_oath", "url_rfc1738", "url_rfc2396", and "url_rfc3986".</descrip>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Flags" axId="105">
            <gType>string</gType>
            <descrip>The negotiate flags that are set in the Type 1 message generated by the client and sent to the server.  These flags have a default value and should &lt;b&gt;ONLY&lt;/b&gt; be set by a programmer that is an expert in the NTLM protocol and knows what they mean.  In general, this property should be left at it's default value.
&lt;p&gt;
The flags are represented as a string of letters, where each letter represents a bit.  The full set of possible flags (bit values) are shown below:
&lt;pre&gt;
NegotiateUnicode               0x00000001
NegotiateOEM                   0x00000002
RequestTarget                  0x00000004
NegotiateSign                  0x00000010
NegotiateSeal                  0x00000020
NegotiateDatagramStyle         0x00000040
NegotiateLanManagerKey         0x00000080
NegotiateNetware               0x00000100
NegotiateNTLMKey               0x00000200
NegotiateDomainSupplied        0x00001000
NegotiateWorkstationSupplied   0x00002000
NegotiateLocalCall             0x00004000
NegotiateAlwaysSign            0x00008000
TargetTypeDomain               0x00010000
TargetTypeServer               0x00020000
TargetTypeShare                0x00040000
NegotiateNTLM2Key              0x00080000
RequestInitResponse            0x00100000
RequestAcceptResponse          0x00200000
RequestNonNTSessionKey         0x00400000
NegotiateTargetInfo            0x00800000
Negotiate128                   0x20000000
NegotiateKeyExchange           0x40000000
Negotiate56                    0x80000000
&lt;/pre&gt;
The mapping of letters to bit values are as follows:
&lt;pre&gt;
0x01 - "A"
0x02 - "B"
0x04 - "C"
0x10 - "D"
0x20 - "E"
0x40 - "F"
0x80 - "G"
0x200 - "H"
0x400 - "I"
0x800 - "J"
0x1000 - "K"
0x2000 - "L"
0x8000 - "M"
0x10000 - "N"
0x20000 - "O"
0x40000 - "P"
0x80000 - "Q"
0x100000 - "R"
0x400000 - "S"
0x800000 - "T"
0x2000000 - "U"
0x20000000 - "V"
0x40000000 - "W"
0x80000000 - "X"
&lt;/pre&gt;
The default Flags value has the following flags set: NegotiateUnicode,  NegotiateOEM,  RequestTarget,  NegotiateNTLMKey,  NegotiateAlwaysSign,  NegotiateNTLM2Key.    The corresponds to the string "ABCHMQ".</descrip>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="NetBiosComputerName" axId="106">
            <gType>string</gType>
            <descrip>Optional.  This is information that would be set by the server for inclusion in the "Target Info" internal portion of the Type 2 message.  Note: If any optional "Target Info" fields are provided, then both NetBiosComputerName and NetBiosDomainName must be provided.</descrip>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="NetBiosDomainName" axId="107">
            <gType>string</gType>
            <descrip>Optional.  This is information that would be set by the server for inclusion in the "Target Info" internal portion of the Type 2 message.  Note: If any optional "Target Info" fields are provided, then both NetBiosComputerName and NetBiosDomainName must be provided.</descrip>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="NtlmVersion" axId="108">
            <gType>int</gType>
            <descrip>The version of the NTLM protocol to be used.  Must be set to either 1 or 2.  The default value is 1 (for NTLMv1).  Setting this property equal to 2 selects NTLMv2.</descrip>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="OemCodePage" axId="109">
            <gType>int</gType>
            <descrip>If the "A" flag is unset, then Unicode strings are not used internally in the NTLM messages.  Strings are instead represented using the OEM code page (i.e. charset, or character encoding) as specified here.  In general, given that the Flags property should rarely be modified, and given that the "A" flag is set by default (meaning that Unicode is used), the OemCodePage property will not apply.  The default value is the default OEM code page of the local computer.</descrip>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Password" axId="110">
            <gType>string</gType>
            <descrip>The password corresponding to the username of the account to be authenticated.  This must be set by the client prior to generating and sending the Type 3 message.</descrip>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ServerChallenge" axId="111">
            <gType>string</gType>
            <descrip>This is similar to the ClientChallenge in that it must contain 8 bytes. &lt;p&gt;
The ServerChallenge is passed in the Type 2 message from the server to the client.  Because this is a string property, the bytes are get/set in encoded form (such as hex or base64) based on the value of the EncodingMode property.  For example, if the EncodingMode property = "hex", then a hex representation of 8 bytes should be used to set the ServerChallenge.
&lt;p&gt;
Note: Setting the ServerChallenge is optional.  If the ServerChallenge remains unset, it will be automatically set to 8 random bytes when the GenType2 method is called.</descrip>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="TargetName" axId="112">
            <gType>string</gType>
            <descrip>The authentication realm in which the authenticating account has membership, such as a domain for domain accounts, or a server name for local machine accounts.  The TargetName is used in the Type2 message sent from the server to the client.</descrip>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="UserName" axId="113">
            <gType>string</gType>
            <descrip>The username of the account to be authenticated.  This must be set by the client prior to generating and sending the Type 3 message.</descrip>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Workstation" axId="114">
            <gType>string</gType>
            <descrip>The value to be used in the optional workstation field in Type 1 message.</descrip>
        </property>
    </properties>
    <methods>
        <method name="CompareType3" axId="115" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>msg1</argName>
                    <objcName>msg1</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>msg2</argName>
                    <objcName>msg2</objcName>
                </arg>
            </args>
            <descrip>Compares the internal contents of two Type3 messages to verify that the LM and NTLM response parts match.  A server would typically compute the Type3 message by calling GenType3, and then compare it with the Type3 message received from the client.  The method returns _TRUE_ if the responses match, and _FALSE_ if they do not.</descrip>
            <args2>
                <arg name="msg1" type="string" objcName="msg1" />
                <arg name="msg2" type="string" objcName="msg2" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GenType1" axId="116" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Generates the Type 1 message.  The Type 1 message is sent from Client to Server and initiates the NTLM authentication exchange.</descrip>
            <links2>
                <link linkType="example">
                    <text>NTLM Client and Server Example</text>
                    <url>ntlm_client_server.asp</url>
                </link>
            </links2>
            <args2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GenType2" axId="117" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>type1Msg</argName>
                    <objcName>type1Msg</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Generates a Type2 message from a received Type1 message.  The server-side generates the Type2 message and sends it to the client.  This is the 2nd step in the NTLM protocol. The 1st step is the client generating the initial Type1 message which is sent to the server.</descrip>
            <links2>
                <link linkType="example">
                    <text>NTLM Client and Server Example</text>
                    <url>ntlm_client_server.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="type1Msg" type="string" objcName="type1Msg" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GenType3" axId="118" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>type2Msg</argName>
                    <objcName>type2Msg</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Generates the final message in the NTLM authentication exchange.  This message is sent from the client to the server.  The Type 2 message received from the server is passed to GenType3.  The Username and Password properties are finally used here in the generation of the Type 3 message.  Note, the Password is never actually sent.  It is used to compute a binary response that the server can then check, using the password it has on file, to verify that indeed the client must've used the correct password.</descrip>
            <links2>
                <link linkType="example">
                    <text>NTLM Client and Server Example</text>
                    <url>ntlm_client_server.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="type2Msg" type="string" objcName="type2Msg" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="LoadType3" axId="119">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>type3Msg</argName>
                    <objcName>type3Msg</objcName>
                </arg>
            </args>
            <descrip>The server-side should call this method with the Type 3 message received from the client.  The LoadType3 method sets the following properties: Username, Domain, Workstation, and ClientChallenge, all of which are embedded within the Type 3 message.
&lt;p&gt;
The server-side code may then use the Username to lookup the associated password and then it will itself call the GenType3 method to do the same computation as done by the client.  The server then compares it's computed Type 3 message with the Type 3 message received from the client.  If the Type 3 messages are exactly the same, then it must be that the client used the correct password, and therefore the client authentication is successful.</descrip>
            <links2>
                <link linkType="example">
                    <text>NTLM Client and Server Example</text>
                    <url>ntlm_client_server.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="type3Msg" type="string" objcName="type3Msg" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="ParseType1" axId="120" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>type1Msg</argName>
                    <objcName>type1Msg</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>For informational purposes only.  Allows for the server-side to parse a Type 1 message to get human-readable information about the contents.</descrip>
            <links2>
                <link linkType="example">
                    <text>NTLM Client and Server Example</text>
                    <url>ntlm_client_server.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="type1Msg" type="string" objcName="type1Msg" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="ParseType2" axId="121" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>type2Msg</argName>
                    <objcName>type2Msg</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>For informational purposes only.  Allows for the client-side to parse a Type 2 message to get human-readable information about the contents.</descrip>
            <links2>
                <link linkType="example">
                    <text>NTLM Client and Server Example</text>
                    <url>ntlm_client_server.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="type2Msg" type="string" objcName="type2Msg" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="ParseType3" axId="122" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>type3Msg</argName>
                    <objcName>type3Msg</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>For informational purposes only.  Allows for the server-side to parse a Type 3 message to get human-readable information about the contents.</descrip>
            <links2>
                <link linkType="example">
                    <text>NTLM Client and Server Example</text>
                    <url>ntlm_client_server.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="type3Msg" type="string" objcName="type3Msg" />
            </args2>
        </method>
        <method name="SetFlag" axId="123" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>flagLetter</argName>
                    <objcName>flagLetter</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>onOrOff</argName>
                    <objcName>on</objcName>
                </arg>
            </args>
            <descrip>Sets one of the negotiate flags to be used in the Type 1 message sent by the client.  It should normally be unnecessary to modify the default flag settings.  For more information about flags, see the description for the Flags property above.</descrip>
            <args2>
                <arg name="flagLetter" type="string" objcName="flagLetter" />
                <arg name="onOrOff" type="bool" objcName="on" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="UnlockComponent" axId="124">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>unlockCode</argName>
                    <objcName>unlockCode</objcName>
                </arg>
            </args>
            <descrip>Unlocks the component. This must be called once prior to calling any other method.</descrip>
            <args2>
                <arg name="unlockCode" type="string" objcName="unlockCode" />
            </args2>
            <links2>
                <link linkType="external">
                    <text>Diagnosing UnlockComponent Problems</text>
                    <url>http://www.cknotes.com/?p=168</url>
                </link>
                <link linkType="external">
                    <text>UnlockComponent LastErrorText shows exact string passed to it.</text>
                    <url>http://www.cknotes.com/?p=315</url>
                </link>
                <link linkType="external">
                    <text>Verify UnlockComponent Success w/ Purchased Unlock Code</text>
                    <url>http://www.cknotes.com/?p=317</url>
                </link>
                <link linkType="external">
                    <text>LastErrorText Standard Information</text>
                    <url>http://www.cknotes.com/?p=316</url>
                </link>
            </links2>
        </method>
    </methods>
    <genericName>Ntlm</genericName>
    <description>API for implemeting both client and server sides of the NTLM protocol/algorithm.  The Chilkat NTLM API is included as part of the "Chilkat Crypt" license.</description>
    <clsid>47A6DFB7-4A42-434A-B794-59F6FB26563B</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidMidl>B7C0253A-251F-4BC7-98D1-31A045DCE65D</uuidMidl>
    <axName>ChilkatNtlm</axName>
</class>
