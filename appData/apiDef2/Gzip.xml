<?xml version="1.0" encoding="utf-8" ?>
<class XojoModuleId="609908384" license="Zip" baseProgress="1" hasEvents="1" sourceXmlPath="C:/ck2000/appData/apiDef2/Gzip.xml">
    <axName>ChilkatGzip</axName>
    <dnName>Gzip</dnName>
    <cppName>CkGzip</cppName>
    <properties>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Comment" axId="100">
            <gType>string</gType>
            <descrip>Specifies an optional comment string that can be embedded within the .gz when any Compress* method is called.</descrip>
        </property>
        <property name="CompressionLevel" read="1" write="1" ax="1" cpp="1" dn="1" axId="136">
            <gType>int</gType>
            <descrip>The compression level to be used when compressing. The default is 6, which is the typical value used for zip utility programs when compressing data.  The compression level may range from 0 (no compression) to 9 (the most compression).  The benefits of trying to increase compression may not be worth the added expense in compression time.  In many cases (which is data dependent), the improvement in compression is minimal while the increase in computation time is significant.</descrip>
            <iversion>9.5.0.50</iversion>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ExtraData" axId="101">
            <gType>bytes</gType>
            <descrip>Optional extra-data that can be included within a .gz when a Compress* method is called.</descrip>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Filename" axId="102">
            <gType>string</gType>
            <descrip>The filename that is embedded within the .gz during any Compress* method call.   When extracting from a .gz using applications such as WinZip, this will be the filename that is created.</descrip>
        </property>
        <property name="HeartbeatMs" axId="103" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>The number of milliseconds between each AbortCheck event callback.  The AbortCheck callback allows an application to abort any method call prior to completion.  If HeartbeatMs is 0 (the default), no AbortCheck event callbacks will fire.</descrip>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="LastMod" axId="104" deprecated="1" noxojo="1">
            <gType>date</gType>
            <descrip>The last-modification date/time to be embedded within the .gz when a Compress* method is called.  By default, the current system date/time is used.</descrip>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="LastModStr" axId="105">
            <gType>string</gType>
            <descrip>The same as the LastMod property, but allows the date/time to be get/set in RFC822 string format.</descrip>
        </property>
        <property name="UseCurrentDate" axId="106" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If set to _TRUE_, the file produced by an Uncompress* method will use the current date/time for the last-modification date instead of the date/time found within the Gzip format.</descrip>
        </property>
        <property name="AbortCurrent" read="1" write="1" ax="1" cpp="1" dn="1" axId="137">
            <gType>bool</gType>
            <descrip>When set to _TRUE_, causes the currently running method to abort.  Methods that always finish quickly (i.e.have no length file operations or network communications) are not affected.  If no method is running, then this property is automatically reset to _FALSE_ when the next method is called.  When the abort occurs, this property is reset to _FALSE_.  Both synchronous and asynchronous method calls can be aborted.  (A synchronous method call could be aborted by setting this property from a separate thread.)</descrip>
            <iversion>9.5.0.58</iversion>
        </property>
    </properties>
    <methods>
        <method name="CompressFile" axId="107" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inFilename</argName>
                    <objcName>srcPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>destPath</argName>
                    <objcName>destPath</objcName>
                </arg>
            </args>
            <descrip>Compresses a file to create a GZip compressed file (.gz).</descrip>
            <args2>
                <arg name="inFilename" type="string" objcName="srcPath" />
                <arg name="destPath" type="string" objcName="destPath" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="CompressFile2" axId="108">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inFilename</argName>
                    <objcName>srcPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>embeddedFilename</argName>
                    <objcName>embeddedFilename</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>destPath</argName>
                    <objcName>destPath</objcName>
                </arg>
            </args>
            <descrip>Compresses a file to create a GZip compressed file (.gz).  ARG1 is the actual filename on disk.  ARG2 is the filename to be embedded in the .gz such that when it is un-gzipped, this is the name of the file that will be created.</descrip>
            <args2>
                <arg name="inFilename" type="string" objcName="srcPath" />
                <arg name="embeddedFilename" type="string" objcName="embeddedFilename" />
                <arg name="destPath" type="string" objcName="destPath" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="CompressFileToMem" axId="109" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inFilename</argName>
                    <objcName>srcPath</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Gzip compresses a file to an in-memory image of a .gz file.</descrip>
            <args2>
                <arg name="inFilename" type="string" objcName="srcPath" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="CompressMemToFile" axId="110">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>db</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>destPath</argName>
                    <objcName>destPath</objcName>
                </arg>
            </args>
            <descrip>Gzip compresses and creates a .gz file from in-memory data.</descrip>
            <args2>
                <arg name="inData" type="bytes" objcName="db" />
                <arg name="destPath" type="string" objcName="destPath" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="CompressMemory" axId="111" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>dbIn</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Compresses in-memory data to an in-memory image of a .gz file.</descrip>
            <args2>
                <arg name="inData" type="bytes" objcName="dbIn" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="CompressString" axId="112" outArgName="outBytes">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inStr</argName>
                    <objcName>inStr</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>destCharset</argName>
                    <objcName>destCharset</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>Gzip compresses a string and writes the output to a byte array.  The string is first converted to the charset specified by ARG2.  Typical charsets are "utf-8", "iso-8859-1", "shift_JIS", etc.</descrip>
            <links2>
                <link linkType="external">
                    <text>Full List of Charset Names</text>
                    <url>http://www.chilkatsoft.com/p/p_463.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="inStr" type="string" objcName="inStr" />
                <arg name="destCharset" type="string" objcName="destCharset" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="CompressStringENC" axId="113" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inStr</argName>
                    <objcName>strIn</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encoding</argName>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>The same as CompressString, except the binary output is returned in encoded string form according to the ARG3.  The ARG3 can be any of the following: "Base64", "modBase64", "Base32", "UU", "QP" (for quoted-printable), "URL" (for url-encoding), "Hex", "Q", "B", "url_oath", "url_rfc1738", "url_rfc2396", and "url_rfc3986".</descrip>
            <args2>
                <arg name="inStr" type="string" objcName="strIn" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="CompressStringToFile" axId="114">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inStr</argName>
                    <objcName>inStr</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>destCharset</argName>
                    <objcName>destCharset</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>destPath</argName>
                    <objcName>destPath</objcName>
                </arg>
            </args>
            <descrip>Gzip compresses a string and writes the output to a .gz compressed file.  The string is first converted to the charset specified by ARG2.  Typical charsets are "utf-8", "iso-8859-1", "shift_JIS", etc.</descrip>
            <links2>
                <link linkType="external">
                    <text>Full List of Charset Names</text>
                    <url>http://www.chilkatsoft.com/p/p_463.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="inStr" type="string" objcName="inStr" />
                <arg name="destCharset" type="string" objcName="destCharset" />
                <arg name="destPath" type="string" objcName="destPath" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="Decode" axId="115" outArgName="outBytes">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encodedStr</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encoding</argName>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>Decodes an encoded string and returns the original data.  The encoding mode is determined by ARG2.  It may be "base64", "hex", "quoted-printable", or "url".</descrip>
            <args2>
                <arg name="encodedStr" type="string" objcName="str" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="DeflateStringENC" axId="116" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inString</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charsetName</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>outputEncoding</argName>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Provides the ability to use the zip/gzip's deflate algorithm directly to compress a string.   Internal to this method, ARG1 is first converted to the charset specified by ARG2.  The data is then compressed using the deflate compression algorithm.  The binary output is then encoded according to ARG3.  Possible values for ARG3 are "hex", "base64", "url", and "quoted-printable".
&lt;p&gt;
Note: The output of this method is compressed data with no Gzip file format.  Use the Compress* methods to produce Gzip file format output.</descrip>
            <links2>
                <link linkType="external">
                    <text>Full List of Charset Names</text>
                    <url>http://www.chilkatsoft.com/p/p_463.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="inString" type="string" objcName="str" />
                <arg name="charsetName" type="string" objcName="charset" />
                <arg name="outputEncoding" type="string" objcName="encoding" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="Encode" axId="117" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>byteData</argName>
                    <objcName>byteData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encoding</argName>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Encodes binary data to a printable string.  The encoding mode is determined by ARG2.  It may be "base64", "hex", "quoted-printable", or "url".</descrip>
            <args2>
                <arg name="byteData" type="bytes" objcName="byteData" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="ExamineFile" axId="118">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inGzFilename</argName>
                    <objcName>inGzPath</objcName>
                </arg>
            </args>
            <descrip>Determines if the ARG1 is a Gzip formatted file.  Returns _TRUE_ if it is a Gzip formatted file, otherwise returns _FALSE_.</descrip>
            <args2>
                <arg name="inGzFilename" type="string" objcName="inGzPath" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="ExamineMemory" axId="119">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inGzData</argName>
                    <objcName>inGzData</objcName>
                </arg>
            </args>
            <descrip>Determines if the in-memory bytes (ARG1) contain a Gzip formatted file.  Returns _TRUE_ if it is Gzip format, otherwise returns _FALSE_.</descrip>
            <args2>
                <arg name="inGzData" type="bytes" objcName="inGzData" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetDt" axId="120">
            <gType>CkDateTime</gType>
            <args />
            <descrip>Gets the last-modification date/time to be embedded within the .gz.</descrip>
            <args2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="InflateStringENC" axId="121" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inString</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>convertFromCharset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inputEncoding</argName>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>This the reverse of DeflateStringENC.&lt;p&gt;
The input string is first decoded according to ARG3.  (Possible values for ARG3 are "hex", "base64", "url", and "quoted-printable".)  The compressed data is then inflated, and the result is then converted from ARG2 (if necessary) to return a string.</descrip>
            <args2>
                <arg name="inString" type="string" objcName="str" />
                <arg name="convertFromCharset" type="string" objcName="charset" />
                <arg name="inputEncoding" type="string" objcName="encoding" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="IsUnlocked" axId="122">
            <gType>bool</gType>
            <args />
            <descrip>Returns _TRUE_ if the component has been unlocked.</descrip>
            <args2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="ReadFile" axId="123" outArgName="outBytes">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>path</argName>
                    <objcName>path</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>Reads a binary file into memory and returns the byte array.  Note: This method does not parse a Gzip, it is only a convenience method for reading a binary file into memory.</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetDt" axId="124">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>CkDateTime</axType>
                    <dnType>CkDateTime</dnType>
                    <cppType>CkDateTime &amp;</cppType>
                    <argName>dt</argName>
                    <objcName>dt</objcName>
                </arg>
            </args>
            <descrip>Sets the last-modification date/time to be embedded within the .gz when a Compress* method is called.  If not explicitly set, the current system date/time is used.</descrip>
            <args2>
                <arg name="dt" type="CkDateTime" objcName="dt" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="UnTarGz" axId="125">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>tgzFilename</argName>
                    <objcName>gzPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>destDir</argName>
                    <objcName>destDir</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bNoAbsolute</argName>
                    <objcName>bNoAbsolute</objcName>
                </arg>
            </args>
            <descrip>Unpacks a .tar.gz file.  The ungzip and untar occur in streaming mode.  There are no temporary files and the memory footprint is constant (and small) while untarring.  ARG3 may be _TRUE_ or _FALSE_.  A value of _TRUE_ protects from untarring to absolute paths.  (For example, imagine the trouble if the tar contains files with absolute paths beginning with /Windows/system32)</descrip>
            <args2>
                <arg name="tgzFilename" type="string" objcName="gzPath" />
                <arg name="destDir" type="string" objcName="destDir" />
                <arg name="bNoAbsolute" type="bool" objcName="bNoAbsolute" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="UncompressFile" axId="126">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>srcPath</argName>
                    <objcName>srcPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>destPath</argName>
                    <objcName>destPath</objcName>
                </arg>
            </args>
            <descrip>Un-Gzips a .gz file.  The output filename is specified by the 2nd argument and not by the filename embedded within the .gz.</descrip>
            <args2>
                <arg name="srcPath" type="string" objcName="srcPath" />
                <arg name="destPath" type="string" objcName="destPath" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="UncompressFileToMem" axId="127" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inFilename</argName>
                    <objcName>srcPath</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Un-Gzips a .gz file directly to memory.</descrip>
            <args2>
                <arg name="inFilename" type="string" objcName="srcPath" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="UncompressFileToString" axId="128" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>gzFilename</argName>
                    <objcName>srcPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>inCharset</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Uncompresses a .gz file that contains a text file.  The contents of the text file are returned as a string.  The character encoding of the text file is specified by ARG2.  Typical charsets are "iso-8859-1", "utf-8", "windows-1252", "shift_JIS", "big5", etc.</descrip>
            <links2>
                <link linkType="external">
                    <text>List of Valid Charsets</text>
                    <url>http://www.chilkatsoft.com/p/p_463.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="gzFilename" type="string" objcName="srcPath" />
                <arg name="charset" type="string" objcName="inCharset" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="UncompressMemToFile" axId="129">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>db</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>destPath</argName>
                    <objcName>destPath</objcName>
                </arg>
            </args>
            <descrip>Un-Gzips from an in-memory image of a .gz file to a file.</descrip>
            <args2>
                <arg name="inData" type="bytes" objcName="db" />
                <arg name="destPath" type="string" objcName="destPath" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="UncompressMemory" axId="130" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>dbIn</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Un-Gzips from an in-memory image of a .gz file directly into memory.</descrip>
            <args2>
                <arg name="inData" type="bytes" objcName="dbIn" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="UncompressString" axId="131" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>inData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inCharset</argName>
                    <objcName>inCharset</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>The reverse of CompressString.&lt;p&gt;
The bytes in ARG1 are uncompressed, then converted from ARG2 (if necessary) to return a string.</descrip>
            <links2>
                <link linkType="external">
                    <text>Full List of Charset Names</text>
                    <url>http://www.chilkatsoft.com/p/p_463.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="inData" type="bytes" objcName="inData" />
                <arg name="inCharset" type="string" objcName="inCharset" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="UncompressStringENC" axId="132" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inStr</argName>
                    <objcName>strIn</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encoding</argName>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>The same as UncompressString, except the compressed data is provided in encoded string form based on the value of ARG3.
The ARG3 can be "Base64", "modBase64", "Base32", "UU", "QP" (for quoted-printable), "URL" (for url-encoding), "Hex", "Q", "B", "url_oath", "url_rfc1738", "url_rfc2396", and "url_rfc3986".</descrip>
            <args2>
                <arg name="inStr" type="string" objcName="strIn" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="UnlockComponent" axId="133">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>unlockCode</argName>
                    <objcName>unlockCode</objcName>
                </arg>
            </args>
            <descrip>Unlocks the component allowing for the full functionality to be used.</descrip>
            <args2>
                <arg name="unlockCode" type="string" objcName="unlockCode" />
            </args2>
            <links2>
                <link linkType="external">
                    <text>Diagnosing UnlockComponent Problems</text>
                    <url>http://www.cknotes.com/?p=168</url>
                </link>
                <link linkType="external">
                    <text>UnlockComponent LastErrorText shows exact string passed to it.</text>
                    <url>http://www.cknotes.com/?p=315</url>
                </link>
                <link linkType="external">
                    <text>Verify UnlockComponent Success w/ Permanent Unlock Code</text>
                    <url>http://www.cknotes.com/?p=317</url>
                </link>
                <link linkType="external">
                    <text>LastErrorText Standard Information</text>
                    <url>http://www.cknotes.com/?p=316</url>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="WriteFile" axId="134">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>path</argName>
                    <objcName>path</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>binaryData</argName>
                    <objcName>binaryData</objcName>
                </arg>
            </args>
            <descrip>A convenience method for writing a binary byte array to a file.</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="binaryData" type="bytes" objcName="binaryData" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="XfdlToXml" axId="135" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>xfldData</argName>
                    <objcName>xfdl</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Converts base64-gzip .xfdl data to a decompressed XML string.  The ARG1 contains the base64 data.  This method returns the decoded/decompressed XML string.</descrip>
            <args2>
                <arg name="xfldData" type="string" objcName="xfdl" />
            </args2>
        </method>
    </methods>
    <genericName>Gzip</genericName>
    <events>
        <standard name="AbortCheck" />
        <standard name="PercentDone" />
        <standard name="ProgressInfo" />
        <standard name="TaskCompleted" />
    </events>
    <description>GZip compression component.</description>
    <clsid>D647A429-3349-47B5-B62D-7EF758000363</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidEvents>773E5E45-1198-4429-A4CD-F77EFA8EE22D</uuidEvents>
    <uuidMidl>409F23C5-B973-4611-93DD-8FE839BC5860</uuidMidl>
    <nextAxId>138</nextAxId>
</class>
