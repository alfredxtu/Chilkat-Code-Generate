<?xml version="1.0" encoding="utf-8" ?>
<class XojoModuleId="600529855" license="Bundle" sourceXmlPath="C:/ck2000/appData/apiDef2/Prng.xml">
    <genericName>Prng</genericName>
    <cppName>CkPrng</cppName>
    <dnName>Prng</dnName>
    <axName>ChilkatPrng</axName>
    <description>Provides secure pseudo-random number generation (PRNG).  Implements the Fortuna PRNG algorithm using 256-bit AES and SHA256.  Also provides methods for accessing sources of system entropy.</description>
    <methods>
        <method name="AddEntropy" axId="101" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Adds entropy to the PRNG (i.e. adds more seed material to the PRNG).   Entropy can be obtained by calling GetEntropy, or the application might have its own sources for obtaining entropy.  An application may continue to add entropy at desired intervals.  How the entropy is used depends on the PRNG algorithm.  For Fortuna, the entropy is added to the internal entropy pools and used when internal automatic reseeding occurs.
&lt;p&gt;An application may add non-random entropy for testing purposes.  This allows for the reproduction of the same pseudo-random number sequence for testing and debugging purposes.
&lt;p&gt;The entropy bytes are passed in ARG1 using the binary encoding specified in ARG2.  Binary encodings can be "hex", "base64", etc.  See the link below for supported binary encodings.</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>entropy</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>entropy</objcName>
                </arg>
                <arg>
                    <argName>encoding</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encoding</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
                <link linkType="example">
                    <url>prng_generate_random.asp</url>
                    <text>Fortuna PRNG Generate Random Encoded</text>
                </link>
                <link linkType="example">
                    <url>prng_entropy.asp</url>
                    <text>Adding Entropy to a PRNG</text>
                </link>
                <link linkType="example">
                    <url>prng_repeatable.asp</url>
                    <text>Generating Repeatable Random Data for Testing/Debugging</text>
                </link>
            </links2>
            <args2>
                <arg name="entropy" type="string" objcName="entropy" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
        </method>
        <method name="AddEntropyBytes" ax="1" cpp="1" dn="1" status="1" axId="102">
            <gType>bool</gType>
            <descrip>Adds entropy to the PRNG (i.e. adds more seed material to the PRNG).   Entropy can be obtained by calling GetEntropy, or the application might have its own sources for obtaining entropy.  An application may continue to add entropy at desired intervals.  How the entropy is used depends on the PRNG algorithm.  For Fortuna, the entropy is added to the internal entropy pools and used when internal automatic reseeding occurs.
&lt;p&gt;An application may add non-random entropy for testing purposes.  This allows for the reproduction of the same pseudo-random number sequence for testing and debugging purposes.</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>entropy</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <dnType>bytes</dnType>
                    <axType>bytes</axType>
                    <objcName>entropy</objcName>
                </arg>
            </args>
            <args2>
                <arg name="entropy" type="bytes" objcName="entropy" />
            </args2>
            <links2 />
        </method>
        <method name="ExportEntropy" ax="1" cpp="1" dn="1" axId="103" outArgName="outStr">
            <gType>string</gType>
            <descrip>Exports all accumulated entropy and returns it in a base64 encoded string.  (Internally the entropy pools are re-hashed so that a hacker cannot determine the state of the PRNG even if the exported entropy was obtained.) When a system restarts it can import what was previously exported by calling ImportEntropy.  This ensures an adequate amount of entropy is immediately available when first generating random bytes.
&lt;p&gt;For example, an application could persist the exported entropy to a database or file.  When the application starts again, it could import the persisted entropy, add some entropy from a system source (via the GetEntropy/AddEntropy methods), and then begin generating random data.</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>prng_export_entropy.asp</url>
                    <text>Exporting and Importing Accumulated Entropy</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method name="FirebasePushId" ax="1" cpp="1" dn="1" axId="112" outArgName="outStr">
            <gType>string</gType>
            <descrip>Generates a random Firebase Push ID.   See &lt;a href="https://www.firebase.com/blog/2015-02-11-firebase-unique-identifiers.html"&gt;Firebase Unique Identifiers&lt;/a&gt;.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>firebase_push_id.asp</url>
                    <text>Generate a Random Firebase Push ID</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method name="GenRandom" axId="104" outArgName="outStr" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Generates and returns ARG1 random bytes in encoded string form.  The binary encoding is specified by ARG2, and can be "hex", "base64", etc.  (See the link below for supported binary encodings.) 
&lt;p&gt;Important: If no entropy was explicitly added prior to first call to generate random bytes, then 32 bytes of entropy (from the system source, such as /dev/random) are automatically added to seed the PRNG.</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>numBytes</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>numBytes</objcName>
                </arg>
                <arg>
                    <argName>encoding</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
                <link linkType="example">
                    <url>prng_generate_random.asp</url>
                    <text>Fortuna PRNG Generate Random Encoded</text>
                </link>
            </links2>
            <args2>
                <arg name="numBytes" type="int" objcName="numBytes" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
        </method>
        <method name="GenRandomBytes" axId="105" outArgName="outBytes" ax="1" cpp="1" dn="1">
            <gType>bytes</gType>
            <descrip>Generates and returns ARG1 random bytes.  
&lt;p&gt;Important: If no entropy was explicitly added prior to first call to generate random bytes, then 32 bytes of entropy (from the system source, such as /dev/random) are automatically added to seed the PRNG.</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>numBytes</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>numBytes</objcName>
                </arg>
                <arg>
                    <argName>outBytes</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <args2>
                <arg name="numBytes" type="int" objcName="numBytes" />
            </args2>
            <links2 />
        </method>
        <method name="GetEntropy" ax="1" cpp="1" dn="1" axId="106" outArgName="outStr">
            <gType>string</gType>
            <descrip>Reads real entropy bytes from a system entropy source and returns as an encoded string.  On Linux/Unix based systems, including MAC OS X, this is accomplished by reading /dev/random.  On Windows systems, it uses the Microsoft Cryptographic Service Provider's CryptGenRandom method.  
&lt;p&gt;It is recommended that no more than 32 bytes of entropy should be retrieved to initially seed a PRNG.  Larger amounts of entropy are fairly useless.  However, an app is free to periodically add bits of entropy to a long-running PRNG as it sees fit.
&lt;p&gt;The ARG2 specifies the encoding to be used.  It can be "hex", "base64", or many other possibilities.  See the link below.</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>numBytes</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>numBytes</objcName>
                </arg>
                <arg>
                    <argName>encoding</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="external" lang="">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
                <link linkType="example">
                    <url>prng_generate_random.asp</url>
                    <text>Fortuna PRNG Generate Random Encoded</text>
                </link>
                <link linkType="example">
                    <url>prng_entropy.asp</url>
                    <text>Adding Entropy to a PRNG</text>
                </link>
            </links2>
            <args2>
                <arg name="numBytes" type="int" objcName="numBytes" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
        </method>
        <method name="GetEntropyBytes" ax="1" cpp="1" dn="1" axId="107" outArgName="outBytes">
            <gType>bytes</gType>
            <descrip>Reads and returns real entropy bytes from a system entropy source.  On Linux/Unix based systems, including MAC OS X, this is accomplished by reading /dev/random.  On Windows systems, it uses the Microsoft Cryptographic Service Provider's CryptGenRandom method.  
&lt;p&gt;It is recommended that no more than 32 bytes of entropy should be retrieved to initially seed a PRNG.  Larger amounts of entropy are fairly useless.  However, an app is free to periodically add bits of entropy to a long-running PRNG as it sees fit.</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>numBytes</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>numBytes</objcName>
                </arg>
                <arg>
                    <argName>outBytes</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <args2>
                <arg name="numBytes" type="int" objcName="numBytes" />
            </args2>
            <links2 />
        </method>
        <method name="ImportEntropy" ax="1" cpp="1" dn="1" status="1" axId="108">
            <gType>bool</gType>
            <descrip>Imports entropy from previously exported entropy.  See the ExportEntropy method for more information.</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>entropy</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>entropy</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>prng_export_entropy.asp</url>
                    <text>Exporting and Importing Accumulated Entropy</text>
                </link>
            </links2>
            <args2>
                <arg name="entropy" type="string" objcName="entropy" />
            </args2>
        </method>
        <method name="RandomInt" ax="1" cpp="1" dn="1" axId="109">
            <gType>int</gType>
            <descrip>Generates and returns a random integer between ARG1 and ARG2 (inclusive).  For example, if ARG1 is 4 and ARG2 is 8, then random integers in the range 4, 5, 6, 7, 8 are returned.</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>low</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>low</objcName>
                </arg>
                <arg>
                    <argName>high</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>high</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>prng_integer.asp</url>
                    <text>Generating Random Integer in Range</text>
                </link>
            </links2>
            <args2>
                <arg name="low" type="int" objcName="low" />
                <arg name="high" type="int" objcName="high" />
            </args2>
        </method>
        <method name="RandomPassword" axId="111" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <descrip>Generates and returns a random password of a specified length.   If ARG2 is _TRUE_, the generated password will contain at least one digit (0-9).  If ARG3 is _TRUE_, then generated password will contain both lowercase and uppercase USASCII chars (a-z and A-Z).   If ARG4 is a non-empty string, it contains the set of non-alphanumeric characters, one of which must be included in the password.  For example, ARG4 might be the string "!@#$%".  If ARG5 is a non-empty string, it contains chars that should be excluded from the password.  A typical need would be to exclude chars that appear similar to others, such as i, l, 1, L, o, 0, O.</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>length</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>length</objcName>
                </arg>
                <arg>
                    <argName>mustIncludeDigit</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>mustIncludeDigit</objcName>
                </arg>
                <arg>
                    <argName>upperAndLowercase</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>upperAndLowercase</objcName>
                </arg>
                <arg>
                    <argName>mustHaveOneOf</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>mustHaveOneOf</objcName>
                </arg>
                <arg>
                    <argName>excludeChars</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>excludeChars</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>prng_password.asp</url>
                    <text>Generating Random Password</text>
                </link>
            </links2>
            <args2>
                <arg name="length" type="int" objcName="length" />
                <arg name="mustIncludeDigit" type="bool" objcName="mustIncludeDigit" />
                <arg name="upperAndLowercase" type="bool" objcName="upperAndLowercase" />
                <arg name="mustHaveOneOf" type="string" objcName="mustHaveOneOf" />
                <arg name="excludeChars" type="string" objcName="excludeChars" />
            </args2>
        </method>
        <method name="RandomString" axId="110" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <descrip>Generates and returns a random string that may contain digits (0-9), lowercase ASCII (a-z) , and uppercase ASCII (A-Z).  To include numeric digits, set ARG2 equal to _TRUE_.  To include lowercase ASCII, set ARG3 equal to _TRUE_.  To include uppercase ASCII, set ARG4 equal to _TRUE_.   The length of the string to be generated is specified by ARG1.</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>length</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>length</objcName>
                </arg>
                <arg>
                    <argName>bDigits</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>bDigits</objcName>
                </arg>
                <arg>
                    <argName>bLower</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>bLower</objcName>
                </arg>
                <arg>
                    <argName>bUpper</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>bUpper</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>prng_strings.asp</url>
                    <text>Generating Random ASCII Strings</text>
                </link>
            </links2>
            <args2>
                <arg name="length" type="int" objcName="length" />
                <arg name="bDigits" type="bool" objcName="bDigits" />
                <arg name="bLower" type="bool" objcName="bLower" />
                <arg name="bUpper" type="bool" objcName="bUpper" />
            </args2>
        </method>
        <method name="GenRandomBd" axId="113" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Appends  ARG1 random bytes to ARG2.
&lt;p&gt;Important: If no entropy was explicitly added prior to first call to generate random bytes, then 32 bytes of entropy (from the system source, such as /dev/random) are automatically added to seed the PRNG.</descrip>
            <args2>
                <arg name="numBytes" type="int" objcName="numBytes" />
                <arg name="bd" type="BinData" objcName="bd" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>soap_ws_security_usernametoken.asp</url>
                    <text>SOAP WS-Security UsernameToken</text>
                </link>
            </links2>
        </method>
    </methods>
    <properties>
        <property name="PrngName" read="1" write="1" ax="1" cpp="1" dn="1" axId="100">
            <gType>string</gType>
            <descrip>The name of the PRNG selected.  Currently, the default and only possible value is "fortuna".  See the links below for information about the Fortuna PRNG.
&lt;p&gt;Note: Because "fortuna" is the only valid choice, assigning this property to a different value will always be ignored (until alternative PRNG algorithms are added in the future).</descrip>
            <iversion>9.5.0.52</iversion>
            <links2>
                <link linkType="external">
                    <url>https://www.schneier.com/fortuna.html</url>
                    <text>Fortuna PRNG Synopsis</text>
                </link>
                <link linkType="external">
                    <url>https://en.wikipedia.org/wiki/Fortuna_%28PRNG%29</url>
                    <text>Fortuna PRNG On Wikipedia</text>
                </link>
            </links2>
            <args2 />
        </property>
    </properties>
    <events>
        <standard name="AbortCheck" />
        <standard name="PercentDone" />
        <standard name="ProgressInfo" />
        <standard name="TaskCompleted" />
    </events>
    <clsid>78953289-3055-4D28-880A-AA9B61BAD3BD</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidMidl>9C1C50C2-C003-4348-BD42-BF6D51852D7D</uuidMidl>
    <nextAxId>114</nextAxId>
</class>
