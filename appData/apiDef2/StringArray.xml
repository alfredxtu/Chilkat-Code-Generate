<?xml version="1.0" encoding="utf-8" ?>
<class XojoModuleId="561916017" sourceXmlPath="C:/ck2000/appData/apiDef2/StringArray.xml" license="Free">
    <nextAxId>133</nextAxId>
    <dnName>StringArray</dnName>
    <cppName>CkStringArray</cppName>
    <properties>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="Count" axId="103">
            <gType>int</gType>
            <descrip>The number of strings contained within the object's internal array (i.e. ordered collection).  
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; This is an object that contains a collection of strings.  Although the class/object name includes the word "Array", it should not be confused with an array in the sense of the primitive array type used in a given programming language.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Crlf" axId="100">
            <gType>bool</gType>
            <descrip>If _TRUE_, strings are always automatically converted to use CRLF line endings. If _FALSE_, strings are automatically converted to use bare LF line endings.</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="Length" read="1" ax="1" cpp="1" dn="1" axId="130">
            <gType>int</gType>
            <descrip>The number of strings contained within the internal collection.  (Identical to the Count property.)</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Trim" axId="101">
            <gType>bool</gType>
            <descrip>If _TRUE_, whitespace, including carriage-returns and linefeeds, are automatically removed from the beginning and end of a string when added to the collection.</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="Unique" axId="102" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If _TRUE_, then duplicates are not allowed. When an attempt is made to insert a string that already exists, the duplicate insertion is silently suppressed and no error is returned.  The default value is _FALSE_.</descrip>
            <links2 />
            <args2 />
        </property>
    </properties>
    <methods>
        <method name="Append" axId="104" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
            </args>
            <descrip>Appends a string to the end of the internal ordered collection.</descrip>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
            <links2 />
        </method>
        <method name="AppendSerialized" axId="105" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encodedStr</argName>
                    <objcName>encodedStr</objcName>
                </arg>
            </args>
            <descrip>Appends multiple strings to the end of the internal ordered collection. The ARG1 is what is returned from the Serialize method (see below).</descrip>
            <args2>
                <arg name="encodedStr" type="string" objcName="encodedStr" />
            </args2>
            <links2 />
        </method>
        <method name="Clear" axId="106" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <args />
            <descrip>Remove all strings from the internal collection.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="Contains" axId="107">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
            </args>
            <descrip>Returns _TRUE_ if the string is present in the internal collection. The string comparisons are case sensitive.</descrip>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="Find" axId="108">
            <gType>int</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>findStr</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>startIndex</argName>
                    <objcName>firstIndex</objcName>
                </arg>
            </args>
            <descrip>Finds the index of the first string equal to ARG1. The search begins at ARG2. If the string is not found, -1 is returned. The first string in the array is at index 0.</descrip>
            <args2>
                <arg name="findStr" type="string" objcName="str" />
                <arg name="startIndex" type="int" objcName="firstIndex" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="FindFirstMatch" axId="109">
            <gType>int</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>matchPattern</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>startIndex</argName>
                    <objcName>firstIndex</objcName>
                </arg>
            </args>
            <descrip>Finds the first string that matches the ARG1.  The search begins at ARG2. If the string is not found, -1 is returned. The first string in the array is at index 0.
&lt;p&gt;
The ARG1 may contain zero or more asterisk chars, each of which matches 0 or more of any character.</descrip>
            <args2>
                <arg name="matchPattern" type="string" objcName="str" />
                <arg name="startIndex" type="int" objcName="firstIndex" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetString" axId="110" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the string at an indexed location within the internal collection. The first string is located at index 0.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="0" name="GetStringLen">
            <gType>int</gType>
            <args>
                <arg>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>Returns Nth string's length, in characters. The first string is located at index 0.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="InsertAt" axId="111" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
            </args>
            <descrip>Inserts a string into the internal collection at a specified index. Using index 0 will insert at the beginning.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="str" type="string" objcName="str" />
            </args2>
            <links2 />
        </method>
        <method name="LastString" axId="112" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the last string in the internal collection.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="LoadFromFile" axId="113">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>path</argName>
                    <objcName>path</objcName>
                </arg>
            </args>
            <descrip>Loads strings from a file (one per line) into the internal collection.  It is assumed the file contains ANSI strings.  To load from a file containing non-ANSI strings (such as utf-8), call LoadFromFile2 instead.</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="LoadFromFile2" axId="114">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>path</argName>
                    <objcName>path</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
            </args>
            <descrip>Loads strings from a file (one per line) into the internal collection.  The ARG2 specifies the character encoding (such as utf-8) of the strings contained in the file.</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="LoadFromText" axId="115">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
            </args>
            <descrip>Loads strings from an in-memory string (one per line) into the internal collection.</descrip>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
            <links2 />
        </method>
        <method name="LoadTaskResult" axId="131" ax="1" cpp="1" dn="1" noWinRT="1" status="1">
            <gType>bool</gType>
            <descrip>Loads the string collection from a completed asynchronous task.</descrip>
            <args>
                <arg>
                    <argName>task</argName>
                    <cppType>CkTask &amp;</cppType>
                    <dnType>Task</dnType>
                    <axType>Task</axType>
                    <objcName>task</objcName>
                </arg>
            </args>
            <iversion>9.5.0.52</iversion>
            <args2>
                <arg name="task" type="Task" objcName="task" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="Pop" axId="116" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the last string and removes it from the internal collection.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="Prepend" axId="117">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
            </args>
            <descrip>Adds a string to the beginning of the internal collection.</descrip>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="Remove" axId="118">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
            </args>
            <descrip>Removes all strings equal to the string argument from the internal collection.</descrip>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="RemoveAt" axId="119">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>Removes the string at a particular index.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="ReplaceAt" ax="1" cpp="1" dn="1" axId="132">
            <gType>void</gType>
            <descrip>Replaces the string at a specified index.</descrip>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <argName>str</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>str</objcName>
                </arg>
            </args>
            <iversion>9.5.0.52</iversion>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="str" type="string" objcName="str" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SaveNthToFile" axId="120">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>saveToPath</argName>
                    <objcName>path</objcName>
                </arg>
            </args>
            <descrip>Saves the Nth string in the collection  to a file.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="saveToPath" type="string" objcName="path" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SaveToFile" axId="121">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>path</argName>
                    <objcName>path</objcName>
                </arg>
            </args>
            <descrip>Saves the collection of strings to a file, one string per line.  Strings are saved using the ANSI charset.  (Call SaveToFile2 to specify a charset, such as "utf-8")</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SaveToFile2" axId="122">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>saveToPath</argName>
                    <objcName>path</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
            </args>
            <descrip>Saves the collection of strings to a file, one string per line.  Strings are saved using the specified ARG2.</descrip>
            <args2>
                <arg name="saveToPath" type="string" objcName="path" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="SaveToText" axId="123" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Writes the collection of strings to a single string, one per line (separated by CRLF line endings).</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="Serialize" axId="124" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns an string which is an encoded representation of all the strings in the collection. The string collection can be re-created by calling the AppendSerialized method.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="Sort" axId="125">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>ascending</argName>
                    <objcName>ascending</objcName>
                </arg>
            </args>
            <descrip>Sorts the strings in the collection in ascending or descending order.  To sort in ascending order, set ARG1 to _TRUE_, otherwise set ARG1 equal to _FALSE_.</descrip>
            <args2>
                <arg name="ascending" type="bool" objcName="ascending" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="SplitAndAppend" axId="126">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>boundary</argName>
                    <objcName>boundary</objcName>
                </arg>
            </args>
            <descrip>Splits a string at a character or substring boundary and adds each resulting string to the internal collection.</descrip>
            <args2>
                <arg name="str" type="string" objcName="str" />
                <arg name="boundary" type="string" objcName="boundary" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="0" ax="0" name="StrAt" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the string at a specific index.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="Subtract" axId="127">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>StringArray</axType>
                    <dnType>StringArray</dnType>
                    <cppType>CkStringArray &amp;</cppType>
                    <argName>stringArrayObj</argName>
                    <objcName>sa</objcName>
                </arg>
            </args>
            <descrip>Subtracts the strings contained within ARG1 from the caller's internal collection.</descrip>
            <args2>
                <arg name="stringArrayObj" type="StringArray" objcName="sa" />
            </args2>
            <links2 />
        </method>
        <method name="Union" axId="128" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>StringArray</axType>
                    <dnType>StringArray</dnType>
                    <cppType>CkStringArray &amp;</cppType>
                    <argName>stringArrayObj</argName>
                    <objcName>sa</objcName>
                </arg>
            </args>
            <descrip>Performs the union set-operator.  The result is that the caller will have a string collection that is the union of itself and ARG1.</descrip>
            <args2>
                <arg name="stringArrayObj" type="StringArray" objcName="sa" />
            </args2>
            <links2 />
        </method>
    </methods>
    <genericName>StringArray</genericName>
    <description>Class/object for managing and manipulating collections of strings.  Contains an ordered collection of strings.</description>
    <clsid>60646F46-D0EA-4BDA-945A-57BD988F1C37</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidMidl>6DF65A40-F292-4D8D-8738-4814084CCD6B</uuidMidl>
    <axName>CkStringArray</axName>
</class>
