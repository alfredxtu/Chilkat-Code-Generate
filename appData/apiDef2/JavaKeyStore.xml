<?xml version="1.0" encoding="utf-8" ?>
<class XojoModuleId="235722043" license="Bundle" sourceXmlPath="c:/ck2000/appData/apiDef2/JavaKeyStore.xml">
    <genericName>JavaKeyStore</genericName>
    <cppName>CkJavaKeyStore</cppName>
    <dnName>JavaKeyStore</dnName>
    <axName>ChilkatJavaKeyStore</axName>
    <description>API to read, write, access, and update Java key stores (JKS format).
&lt;p&gt;
This class also supports the JCEKS format starting in Chilkat v9.5.0.66.</description>
    <methods>
        <method name="AddPfx" axId="115" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Adds the contents of a PFX or PKCS #12 (.p12)  to the Java keystore object.  One JKS entry per private key found in the PKCS12 is added.  The certs found within the PCKS12 are used to build the certificate chains for each private key. (A typical PFX file contains a single private key along with its associated certificate, and the certificates in the chain of authentication to the root CA cert.)  &lt;p&gt;
This method does  not add trusted certificate entries to the JKS.
&lt;p&gt;The specified alias is applied to the 1st private key found.  If the alias is empty, then the alias is obtained from the cert/PFX in the following order of preference:
&lt;ol&gt;
&lt;li&gt;Certificate's subject common name&lt;/li&gt;
&lt;li&gt;Certificate's subject email address&lt;/li&gt;
&lt;li&gt;Certificate's friendly name found in the PKCS9 attributes of the PKCS12&lt;/li&gt;
&lt;li&gt;Certificate's serial number&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If multiple private keys are found in the PKCS12, then all but the first will automaticallly be assigned aliases using the preference just described.
&lt;p&gt;The UseCertVault method may be called to provide additional certificates for the automatic construction of the certificate chains.  If the RequireCompleteChain property is set to _TRUE_, then this method will fail if any certificate chain is not completed to the root.  The TrustedRoots class may be used to provide a source for obtaining trusted CA roots if these are not already present within the PKCS12.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>pfx</argName>
                    <cppType>CkPfx &amp;</cppType>
                    <dnType>Pfx</dnType>
                    <axType>Pfx</axType>
                    <objcName>pfx</objcName>
                </arg>
                <arg>
                    <argName>alias</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>alias</objcName>
                </arg>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
            </args>
            <args2>
                <arg name="pfx" type="Pfx" objcName="pfx" />
                <arg name="alias" type="string" objcName="alias" />
                <arg name="password" type="string" objcName="password" />
            </args2>
            <links2 />
        </method>
        <method name="AddPrivateKey" axId="118" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Adds a private key entry to the JKS.  Both the private key and certificate chain are obtained from the certificate object that is passed in the 1st argument.  
&lt;p&gt;If the alias is empty, then the alias is automatically chosen based on the certificate's information, in the following order of preference:
&lt;ol&gt;
&lt;li&gt;Certificate's subject common name&lt;/li&gt;
&lt;li&gt;Certificate's subject email address&lt;/li&gt;
&lt;li&gt;Certificate's serial number&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The UseCertVault method may be called to provide additional certificates for the automatic construction of the certificate chains.  If the RequireCompleteChain property is set to _TRUE_, then this method will fail if the certificate chain is not completed to the root.  The TrustedRoots class may be used to provide a source for obtaining trusted CA roots.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>cert</argName>
                    <cppType>CkCert &amp;</cppType>
                    <dnType>Cert</dnType>
                    <axType>Cert</axType>
                    <objcName>cert</objcName>
                </arg>
                <arg>
                    <argName>alias</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>alias</objcName>
                </arg>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
            </args>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
                <arg name="alias" type="string" objcName="alias" />
                <arg name="password" type="string" objcName="password" />
            </args2>
            <links2 />
        </method>
        <method name="AddTrustedCert" ax="1" cpp="1" dn="1" status="1" axId="114">
            <gType>bool</gType>
            <descrip>Adds a trusted certificate to the Java keystore object.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>cert</argName>
                    <cppType>CkCert &amp;</cppType>
                    <dnType>Cert</dnType>
                    <axType>Cert</axType>
                    <objcName>cert</objcName>
                </arg>
                <arg>
                    <argName>alias</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>alias</objcName>
                </arg>
            </args>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
                <arg name="alias" type="string" objcName="alias" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>jks_add_ca_certs.asp</url>
                    <text>Load Particular CA Certs into a Java KeyStore</text>
                </link>
            </links2>
        </method>
        <method name="ChangePassword" axId="123" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Changes the password for a private key.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <argName>oldPassword</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>oldPassword</objcName>
                </arg>
                <arg>
                    <argName>newPassword</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>newPassword</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <text>Change Password for Java KeyStore File</text>
                    <url>jks_changePassword.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="oldPassword" type="string" objcName="oldPassword" />
                <arg name="newPassword" type="string" objcName="newPassword" />
            </args2>
        </method>
        <method name="FindCertChain" ax="1" cpp="1" dn="1" status="1" axId="121">
            <gType>CertChain</gType>
            <descrip>Finds and returns the certificate chain for the private key with the specified alias.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>alias</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>alias</objcName>
                </arg>
                <arg>
                    <argName>caseSensitive</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>caseSensitive</objcName>
                </arg>
            </args>
            <args2>
                <arg name="alias" type="string" objcName="alias" />
                <arg name="caseSensitive" type="bool" objcName="caseSensitive" />
            </args2>
            <links2 />
        </method>
        <method name="FindPrivateKey" ax="1" cpp="1" dn="1" status="1" axId="120">
            <gType>PrivateKey</gType>
            <descrip>Finds and returns the private key with the specified alias.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
                <arg>
                    <argName>alias</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>alias</objcName>
                </arg>
                <arg>
                    <argName>caseSensitive</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>caseSensitive</objcName>
                </arg>
            </args>
            <args2>
                <arg name="password" type="string" objcName="password" />
                <arg name="alias" type="string" objcName="alias" />
                <arg name="caseSensitive" type="bool" objcName="caseSensitive" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>rsa_sha256_signature_using_java_keystore.asp</url>
                    <text>RSA SHA256 Signature using Private Key from Java Keystore</text>
                </link>
            </links2>
        </method>
        <method name="FindTrustedCert" ax="1" cpp="1" dn="1" axId="119">
            <gType>Cert</gType>
            <descrip>Finds and returns the  trusted certificate with the specified alias.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>alias</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>alias</objcName>
                </arg>
                <arg>
                    <argName>caseSensitive</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>caseSensitive</objcName>
                </arg>
            </args>
            <args2>
                <arg name="alias" type="string" objcName="alias" />
                <arg name="caseSensitive" type="bool" objcName="caseSensitive" />
            </args2>
            <links2 />
        </method>
        <method name="GetCertChain" axId="113" ax="1" cpp="1" dn="1" status="1">
            <gType>CertChain</gType>
            <descrip>Returns the certificate chain associated with the Nth private key contained within the keystore.  The 1st private key is at index 0.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
            </args>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="GetPrivateKey" axId="112" ax="1" cpp="1" dn="1" status="1">
            <gType>PrivateKey</gType>
            <descrip>Returns the Nth private key contained within the keystore.  The 1st private key is at index 0.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
            </args>
            <args2>
                <arg name="password" type="string" objcName="password" />
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="GetPrivateKeyAlias" axId="111" outArgName="outStr" ax="1" cpp="1" dn="1" status="1">
            <gType>string</gType>
            <descrip>Returns the Nth private key alias contained within the keystore.  The 1st private key is at index 0.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="GetTrustedCert" axId="109" ax="1" cpp="1" dn="1" status="1">
            <gType>Cert</gType>
            <descrip>Returns the Nth trusted certificate contained within the keystore.  The 1st certificate is at index 0.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
            </args>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="GetTrustedCertAlias" ax="1" cpp="1" dn="1" status="1" axId="110" outArgName="outStr">
            <gType>string</gType>
            <descrip>Returns the Nth trusted certificate alias contained within the keystore.  The 1st certificate is at index 0.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="LoadBinary" axId="101" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Loads a Java keystore from in-memory byte data.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
                <arg>
                    <argName>jksData</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <dnType>bytes</dnType>
                    <axType>bytes</axType>
                    <objcName>jksData</objcName>
                </arg>
            </args>
            <args2>
                <arg name="password" type="string" objcName="password" />
                <arg name="jksData" type="bytes" objcName="jksData" />
            </args2>
            <links2 />
        </method>
        <method name="LoadEncoded" axId="102" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Loads a Java keystore from an encoded string (such as base64, hex, etc.)</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
                <arg>
                    <argName>jksEncData</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>jksEncData</objcName>
                </arg>
                <arg>
                    <argName>encoding</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encoding</objcName>
                </arg>
            </args>
            <args2>
                <arg name="password" type="string" objcName="password" />
                <arg name="jksEncData" type="string" objcName="jksEncData" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
            <links2 />
        </method>
        <method name="LoadFile" axId="100" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
                <arg>
                    <argName>path</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>path</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <text>Load Java KeyStore and List Contents</text>
                    <url>jks_listContents.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="password" type="string" objcName="password" />
                <arg name="path" type="string" objcName="path" />
            </args2>
            <descrip>Loads a Java keystore from a file.</descrip>
        </method>
        <method name="RemoveEntry" ax="1" cpp="1" dn="1" status="1" axId="124">
            <gType>bool</gType>
            <descrip>Removes the Nth trusted certificate or private key entry from the keystore.   The ARG1 indicates whether it is a trusted root or private key entry (1 = trusted certificate entry, 2 = private key entry).   The 1st entry is at index 0.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>entryType</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>entryType</objcName>
                </arg>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
            </args>
            <args2>
                <arg name="entryType" type="int" objcName="entryType" />
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="SetAlias" axId="122" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Sets the alias name for a trusted certificate or private key entry.  The ARG1 indicates whether it is a trusted root or private key entry (1 = trusted certificate entry, 2 = private key entry).   The 1st entry is at index 0.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>entryType</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>entryType</objcName>
                </arg>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <argName>alias</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>alias</objcName>
                </arg>
            </args>
            <args2>
                <arg name="entryType" type="int" objcName="entryType" />
                <arg name="index" type="int" objcName="index" />
                <arg name="alias" type="string" objcName="alias" />
            </args2>
            <links2 />
        </method>
        <method name="ToBinary" axId="104" ax="1" cpp="1" dn="1" status="1" outArgName="outBytes">
            <gType>bytes</gType>
            <descrip>Writes the key store to in-memory bytes. The ARG1 is used for the keyed hash of the entire JKS file.  (Each private key within the file may use different passwords, and these are provided when the private key is added via the AddPrivateKey method.)</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
                <arg>
                    <argName>outBytes</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <args2>
                <arg name="password" type="string" objcName="password" />
            </args2>
            <links2 />
        </method>
        <method name="ToEncodedString" axId="105" ax="1" cpp="1" dn="1" status="1" outArgName="outStr">
            <gType>string</gType>
            <descrip>Writes the key store to an encoded string.  The ARG2 can be any encoding such as "base64" or "hex".  The ARG1 is used for the keyed hash of the entire JKS file.  (Each private key within the file may use different passwords, and these are provided when the private key is added via the AddPrivateKey method.)</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
                <arg>
                    <argName>encoding</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <args2>
                <arg name="password" type="string" objcName="password" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
            <links2 />
        </method>
        <method name="ToFile" axId="103" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Writes the key store to a file. The ARG1 is used for the keyed hash of the entire JKS file.  (Each private key within the file may use different passwords, and these are provided when the private key is added via the AddPrivateKey method.)</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
                <arg>
                    <argName>path</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>path</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <text>Convert Java KeyStore to PKCS12 / PFX</text>
                    <url>jks_to_pkcs12.asp</url>
                </link>
                <link linkType="example">
                    <text>Convert Java KeyStore to PEM</text>
                    <url>jks_to_pem.asp</url>
                </link>
                <link linkType="example">
                    <url>jks_add_ca_certs.asp</url>
                    <text>Load Particular CA Certs into a Java KeyStore</text>
                </link>
            </links2>
            <args2>
                <arg name="password" type="string" objcName="password" />
                <arg name="path" type="string" objcName="path" />
            </args2>
        </method>
        <method name="ToPem" axId="126" ax="1" cpp="1" dn="1" status="1">
            <gType>Pem</gType>
            <descrip>Returns the Java KeyStore as a Pem object.</descrip>
            <iversion>9.5.0.49</iversion>
            <args>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
            </args>
            <args2>
                <arg name="password" type="string" objcName="password" />
            </args2>
            <links2 />
        </method>
        <method name="ToPfx" axId="127" ax="1" cpp="1" dn="1" status="1">
            <gType>Pfx</gType>
            <descrip>Returns the Java KeyStore as a Pfx object.</descrip>
            <iversion>9.5.0.49</iversion>
            <args>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
            </args>
            <args2>
                <arg name="password" type="string" objcName="password" />
            </args2>
            <links2 />
        </method>
        <method name="UnlockComponent" ax="1" cpp="1" dn="1" status="1" axId="125">
            <gType>bool</gType>
            <descrip>Unlocks the component allowing for the full functionality to be used.  If a purchased unlock code is passed, there is no expiration.  Any other string automatically begins a fully-functional 30-day trial the first time UnlockComponent is called.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>unlockCode</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>unlockCode</objcName>
                </arg>
            </args>
            <args2>
                <arg name="unlockCode" type="string" objcName="unlockCode" />
            </args2>
            <links2>
                <link linkType="external">
                    <text>Diagnosing UnlockComponent Problems</text>
                    <url>http://www.cknotes.com/?p=168</url>
                </link>
                <link linkType="external">
                    <text>UnlockComponent LastErrorText shows exact string passed to it.</text>
                    <url>http://www.cknotes.com/?p=315</url>
                </link>
                <link linkType="external">
                    <text>Verify UnlockComponent Success w/ Purchased Unlock Code</text>
                    <url>http://www.cknotes.com/?p=317</url>
                </link>
                <link linkType="external">
                    <text>LastErrorText Standard Information</text>
                    <url>http://www.cknotes.com/?p=316</url>
                </link>
            </links2>
        </method>
        <method name="UseCertVault" ax="1" cpp="1" dn="1" status="1" axId="117">
            <gType>bool</gType>
            <descrip>Adds an XML certificate vault to the object's internal list of sources to be searched for certificates for help in building certificate chains to a root certificate.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>vault</argName>
                    <cppType>CkXmlCertVault &amp;</cppType>
                    <dnType>XmlCertVault</dnType>
                    <axType>XmlCertVault</axType>
                    <objcName>vault</objcName>
                </arg>
            </args>
            <args2>
                <arg name="vault" type="XmlCertVault" objcName="vault" />
            </args2>
            <links2 />
        </method>
        <method name="ToJwkSet" axId="128" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Returns the private keys in JSON JWK Set format.  The JWK identifier (kid) will be set from the key alias in the store.</descrip>
            <args2>
                <arg name="password" type="string" objcName="password" />
                <arg name="sbJwkSet" type="StringBuilder" objcName="sbJwkSet" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>jks_export_to_jwk_set.asp</url>
                    <text>Export Private Keys from Java KeyStore to JWK Set</text>
                </link>
                <link linkType="example">
                    <url>pfx_to_jwkset.asp</url>
                    <text>Convert PFX to JWK Set</text>
                </link>
                <link linkType="example">
                    <url>jceks_convert_to_jwkset.asp</url>
                    <text>Convert JCEKS to JWK Set (JSON Web Key Set)</text>
                </link>
            </links2>
        </method>
        <method name="GetSecretKeyAlias" axId="130" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Returns the Nth secret key alias contained within the keystore.  The 1st secret key is at index 0.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>jceks_read_secret_keys.asp</url>
                    <text>Read JCEKS Containing Secret Keys</text>
                </link>
            </links2>
        </method>
        <method name="GetSecretKey" axId="131" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Returns the Nth secret key contained within the keystore.  The 1st secret key is at index 0.  The bytes of the secret key are returned in the specified ARG3.  (such as hex, base64, base64url, etc.)</descrip>
            <args2>
                <arg name="password" type="string" objcName="password" />
                <arg name="index" type="int" objcName="index" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>jceks_read_secret_keys.asp</url>
                    <text>Read JCEKS Containing Secret Keys</text>
                </link>
            </links2>
        </method>
        <method name="AddSecretKey" axId="132" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Adds a secret (symmetric) key entry to the JKS.  This adds a symmetric key, which is simply a number of binary bytes (such as 16 bytes for a 128-bit AES key).  The ARG1 provides the actual bytes of the symmetric key, in an encoded string form.  The ARG2 indicates the encoding of ARG1 (such as "base64", "hex", "base64url", etc.)  The ARG3 describes the symmetric algorithm, such as "AES".  The ARG4 is the password used to seal (encrypt) the key bytes. 
&lt;p&gt;
Note: The ARG3 describes the usage of the ARG1.   For example, if ARG1 contains the 16 bytes of a 128-bit AES key, then ARG3 should be set to "AES".  The actual encryption algorithm used to seal the key within the JCEKS is PBEWithMD5AndTripleDES, which is part of the JCEKS specification.</descrip>
            <args2>
                <arg name="encodedKeyBytes" type="string" objcName="encodedKeyBytes" />
                <arg name="encoding" type="string" objcName="encoding" />
                <arg name="algorithm" type="string" objcName="algorithm" />
                <arg name="alias" type="string" objcName="alias" />
                <arg name="password" type="string" objcName="password" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>jceks_create_secret_keys.asp</url>
                    <text>Create JCEKS Containing Secret Keys</text>
                </link>
            </links2>
        </method>
        <method name="LoadJwkSet" axId="133" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="password" type="string" objcName="password" />
                <arg name="jwkSet" type="JsonObject" objcName="jwkSet" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>jwkset_to_jks.asp</url>
                    <text>Load a JWK Set into a Java KeyStore (JKS/JCEKS)</text>
                </link>
                <link linkType="example">
                    <url>jceks_load_jwkset.asp</url>
                    <text>Load a JWK Set into a JCEKS (Convert JWK Set to JCEKS)</text>
                </link>
            </links2>
            <descrip>Loads the Java KeyStore from a JSON Web Key (JWK) Set.</descrip>
        </method>
    </methods>
    <properties>
        <property name="NumPrivateKeys" axId="108" read="1" ax="1" cpp="1" dn="1" status="1">
            <gType>int</gType>
            <descrip>The number of private keys contained within the keystore.  Each private key has an alias and certificate chain associated with it.</descrip>
            <iversion>9.5.0.44</iversion>
            <links2 />
            <args2 />
        </property>
        <property name="NumTrustedCerts" read="1" ax="1" cpp="1" dn="1" status="1" axId="107">
            <gType>int</gType>
            <descrip>The number of trusted certificates contained within the keystore.  Each certificate has an alias (identifying string) associated with it.</descrip>
            <iversion>9.5.0.44</iversion>
            <links2 />
            <args2 />
        </property>
        <property name="RequireCompleteChain" read="1" write="1" ax="1" cpp="1" dn="1" status="1" axId="116">
            <gType>bool</gType>
            <descrip>If _TRUE_, then adding a private key to the JKS only succeeds if the certificate chain can be completed to the root certificate.  A root certificate is either a trusted CA root or a self-signed certificate.   If _FALSE_, then incomplete certificate chains are allowed.   The default value is _TRUE_.</descrip>
            <iversion>9.5.0.44</iversion>
            <links2 />
            <args2 />
        </property>
        <property name="VerifyKeyedDigest" axId="106" read="1" write="1" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>If _TRUE_, then the keystore's keyed digest is required to pass validation (password required) for any of the load methods (such as LoadFile, LoadBinary, or LoadEncoded). If _FALSE_, then a keystore may be loaded into memory without password validation (if a null or empty string is passed to the load method).  The default value of this property is _TRUE_.</descrip>
            <iversion>9.5.0.44</iversion>
            <links2 />
            <args2 />
        </property>
        <property name="NumSecretKeys" axId="129" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>The number of secret keys (such as AES keys) contained within the keystore.  Each secret key can have an alias associated with it.</descrip>
            <args2 />
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>jceks_read_secret_keys.asp</url>
                    <text>Read JCEKS Containing Secret Keys</text>
                </link>
            </links2>
        </property>
    </properties>
    <events />
    <clsid>0B7700DB-79D8-40FB-95B9-03FCC9646439</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidMidl>ACB125C6-B8C9-46E1-8B9F-2DB44DB1B5EE</uuidMidl>
    <nextAxId>134</nextAxId>
</class>
