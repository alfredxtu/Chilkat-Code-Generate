<?xml version="1.0" encoding="utf-8" ?>
<class XojoModuleId="626604223" sourceXmlPath="c:/ck2000/appData/apiDef2/Email.xml" license="Email">
    <axName>ChilkatEmail</axName>
    <dnName>Email</dnName>
    <cppName>CkEmail</cppName>
    <properties>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Body" axId="100">
            <gType>string</gType>
            <descrip>The body of the email.  If the email has both HTML and plain-text bodies, this property returns the HTML body.  The GetHtmlBody and GetPlainTextBody methods can be used to access a specific body.  The HasHtmlBody and HasPlainTextBody methods can be used to determine the presence of a body.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="BounceAddress" axId="101" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The "return-path" address of the email to be used when the email is sent.  Bounces (i.e. delivery status notifications, or DSN's) will go to this address.
&lt;p&gt;
Note: This is not the content of the "return-path" header for emails that are downloaded from a POP3 or IMAP server.  The BounceAddress is the email address to be used in the process of sending the email via SMTP.  (See the "SMTP Protocol in a Nutshell" link below.)  The BounceAddress is the email address passed in the "MAIL FROM" SMTP command which becomes the "return-path" header in the email when received.
&lt;p&gt;Note: The Sender and BounceAddress properties are identical and perform the same function.  Setting the Sender property also sets the BounceAddress property, and vice-versa.  The reason for the duplication is that BounceAddress existed first, and developers typically searched for a "Sender" property without realizing that the BounceAddress property served this function.</descrip>
            <links>
                <link>
                    <text>SMTP Protocol in a Nutshell</text>
                    <url>http://www.cknotes.com/?p=40</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>SMTP Protocol in a Nutshell</text>
                    <url>http://www.cknotes.com/?p=40</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Charset" axId="102">
            <gType>string</gType>
            <descrip>Sets the charset for the entire email.  The header fields and plain-text/HTML bodies will be converted and sent in this charset.  (This includes parsing and updating the HTML with the appropriate META tag specifying the charset.)  All formatting and encoding of the email MIME is handled automatically by the Chilkat Mail component.  If your application wants to send a Shift_JIS email, you simply set the Charset property to "Shift_JIS".  Note: If a charset property is not explicitly set, the Chilkat component automatically detects the charset and chooses the appropriate charset.  If all characters are 7bit (i.e. us-ascii) the charset is left blank.  If the email contain a mix of languages such that no one charset can be chosen, or if the language cannot be determined without ambiguity, then the "utf-8" charset will be chosen.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="Decrypted" axId="103">
            <gType>bool</gType>
            <descrip>_TRUE_ if the email arrived encrypted and was successfully decrypted, otherwise _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="EmailDate" axId="104" read="1" write="1" ax="1" cpp="1" dn="1" deprecated="1" noxojo="1">
            <gType>date</gType>
            <descrip>The date/time from the "Date" header in UTC/GMT standard time. Use the LocalDate property to get the local date and time. This property should no longer be used because it will be removed in a future version.  Use the GetDt method instead.</descrip>
            <links>
                <link>
                    <text>More information about using SYSTEMTIME in Perl</text>
                    <url_perl>http://www.cknotes.com/?p=122</url_perl>
                </link>
                <link>
                    <text>More information about using SYSTEMTIME in Python</text>
                    <url_python>http://www.cknotes.com/?p=374</url_python>
                </link>
            </links>
            <links2>
                <link linkType="external" lang="perl">
                    <text>More information about using SYSTEMTIME in Perl</text>
                    <url>http://www.cknotes.com/?p=122</url>
                </link>
                <link linkType="external" lang="python">
                    <text>More information about using SYSTEMTIME in Python</text>
                    <url>http://www.cknotes.com/?p=374</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="EmailDateStr" axId="105">
            <gType>string</gType>
            <descrip>The date/time from the "Date" header in the UTC/GMT timezone in RFC822 string form.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="EncryptedBy" axId="106">
            <gType>string</gType>
            <descrip>If the email was received encrypted, this contains the details of the certificate used for encryption.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="FileDistList" axId="107">
            <gType>string</gType>
            <descrip>Set this property to send an email to a list of recipients stored in a plain text file. The file format is simple: one recipient per line, no comments allowed, blank lines are ignored.Setting this property is equivalent to adding a "CKX-FileDistList"header field to the email. Chilkat Mail treats header fields beginning with "CKX-"specially in that these fields are never transmitted with the email when sent. However, CKX fields are saved and restored when saving to XML or loading from XML (or MIME). When sending an email containing a "CKX-FileDistList"header field, Chilkat Mail will read the distribution list file and send the email to each recipient. Emails can be sent individually, or with BCC, 100 recipients at a time. (see the MailMan.SendIndividual property).</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="From" axId="108" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The combined name and email address of the sender, such as "John Smith" &lt;john.smith@mail.com&gt;.  This is the content that will be placed in the From: header field.  If the actual sender is to be different, then set the Sender property to a different email address.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>email_from.asp</url>
                    <text>Explaining the Email FromName, FromAddress, and From Properties</text>
                </link>
            </links2>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="FromAddress" axId="109">
            <gType>string</gType>
            <descrip>The email address of the sender.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>email_from.asp</url>
                    <text>Explaining the Email FromName, FromAddress, and From Properties</text>
                </link>
            </links2>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="FromName" axId="110">
            <gType>string</gType>
            <descrip>The name of the sender.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>email_from.asp</url>
                    <text>Explaining the Email FromName, FromAddress, and From Properties</text>
                </link>
            </links2>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="Header" axId="111">
            <gType>string</gType>
            <descrip>The complete MIME header of the email.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="Language" axId="112">
            <gType>string</gType>
            <descrip>A read-only property that identifies the primary language group for the email.  Possible values are:
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;"latin1" (for English and all Western European languages)
&lt;li&gt;"central" (for Central European languages such as Polish, Czech, Hungarian, etc.)
&lt;li&gt;"russian" (for Cyrillic languages)
&lt;li&gt;"greek"
&lt;li&gt;"turkish"
&lt;li&gt;"hebrew"
&lt;li&gt;"arabic"
&lt;li&gt;"thai"
&lt;li&gt;"vietnamese"
&lt;li&gt;"chinese"
&lt;li&gt;"japanese"
&lt;li&gt;"korean"
&lt;li&gt;"devanagari"
&lt;li&gt;"bengali"
&lt;li&gt;"gurmukhi"
&lt;li&gt;"gujarati"
&lt;li&gt;"oriya"
&lt;li&gt;"tamil"
&lt;li&gt;"telugu"
&lt;li&gt;"kannada"
&lt;li&gt;"malayalam"
&lt;li&gt;"sinhala"
&lt;li&gt;"lao"
&lt;li&gt;"tibetan"
&lt;li&gt;"myanmar"
&lt;li&gt;"georgian"
&lt;li&gt;"unknown"
&lt;/ul&gt;
&lt;/blockquote&gt;
The language group determination is made soley on the subject and plain-text/HTML email bodies.  Characters in the FROM, TO, CC, and other header fields are not considered.&lt;p&gt;
The primary determining factor is the characters found in the Subject header field.  For example, if an email contains Japanese in the Subject, but the body contains Russian characters, it will be considered "japanese".
&lt;p&gt;The language is determined by where the Unicode chars fall in various blocks in the Unicode Basic Multilingual Plane.  For more information, see the book "Unicode Demystified" by Richard Gillam.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="LocalDate" axId="113" read="1" write="1" ax="1" cpp="1" dn="1" deprecated="1" noxojo="1">
            <gType>date</gType>
            <descrip>The date/time found in the "Date" header field returned in the local timezone.   This property should no longer be used because it will be removed in a future version.  Use the GetDt method instead.</descrip>
            <links>
                <link>
                    <text>More information about using SYSTEMTIME in Perl</text>
                    <url_perl>http://www.cknotes.com/?p=122</url_perl>
                </link>
                <link>
                    <text>More information about using SYSTEMTIME in Python</text>
                    <url_python>http://www.cknotes.com/?p=374</url_python>
                </link>
            </links>
            <links2>
                <link linkType="external" lang="perl">
                    <text>More information about using SYSTEMTIME in Perl</text>
                    <url>http://www.cknotes.com/?p=122</url>
                </link>
                <link linkType="external" lang="python">
                    <text>More information about using SYSTEMTIME in Python</text>
                    <url>http://www.cknotes.com/?p=374</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="LocalDateStr" axId="114">
            <gType>string</gType>
            <descrip>The date/time found in the "Date" header field returned in the local timezone in RFC822 string form.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Mailer" axId="115">
            <gType>string</gType>
            <descrip>Identifies the email software that sent the email.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="NumAlternatives" axId="116">
            <gType>int</gType>
            <descrip>The number of alternative bodies present in the email. An email that is not "multipart/alternative"will return 0 alternatives. An email that is "multipart/alternative" will return a number greater than or equal to 1.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="NumAttachedMessages" axId="117">
            <gType>int</gType>
            <descrip>Returns the number of embedded emails.  Some mail clients will embed an email that is to be forwarded into a new email as a "message/rfc822" subpart of the MIME message structure.  This property tells how many emails have been embedded.  The original email can be retrieved by calling GetAttachedMessage.</descrip>
            <links>
                <link>
                    <text>More about Attached Email Messages</text>
                    <url>http://www.chilkatsoft.com/p/p_445.asp</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>More about Attached Email Messages</text>
                    <url>http://www.chilkatsoft.com/p/p_445.asp</url>
                </link>
                <link linkType="example">
                    <url>email_examine_eml.asp</url>
                    <text>Load .eml and Examine the Structure, Attachments, and Related Items</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="NumAttachments" axId="118" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>The number of attachments contained in the email.
&lt;p&gt;
Note: If an email is downloaded from an IMAP server without attachments, then the number of attachments should be obtained by calling the IMAP object's GetMailNumAttach method.  This property indicates the actual number of attachments already present within the email object.</descrip>
            <links>
                <link>
                    <text>Email Attachment Not Found?</text>
                    <url>http://www.cknotes.com/?p=280</url>
                </link>
                <link>
                    <text>POP3 Headers and Attachment Info</text>
                    <url>http://www.cknotes.com/?p=85</url>
                </link>
                <link>
                    <text>Email Attachment Info when Downloading from IMAP without Attachments</text>
                    <url>http://www.cknotes.com/?p=434</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>Email Attachment Not Found?</text>
                    <url>http://www.cknotes.com/?p=280</url>
                </link>
                <link linkType="external">
                    <text>POP3 Headers and Attachment Info</text>
                    <url>http://www.cknotes.com/?p=85</url>
                </link>
                <link linkType="external">
                    <text>Email Attachment Info when Downloading from IMAP without Attachments</text>
                    <url>http://www.cknotes.com/?p=434</url>
                </link>
                <link linkType="external">
                    <url>http://www.chilkatforum.com/questions/8437/understanding-imap-email-attachments</url>
                    <text>Understanding IMAP Email Attachments</text>
                </link>
                <link linkType="example">
                    <url>email_examine_eml.asp</url>
                    <text>Load .eml and Examine the Structure, Attachments, and Related Items</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="NumBcc" axId="119">
            <gType>int</gType>
            <descrip>The number of blind carbon-copy email recipients.</descrip>
            <links>
                <link>
                    <text>Getting TO / CC Email Recipients</text>
                    <url_asp>http://www.example-code.com/asp/emailObject_getRecipients.asp</url_asp>
                    <url_sql>http://www.example-code.com/sql/emailObject_getRecipients.asp</url_sql>
                    <url_cs>http://www.example-code.com/csharp/emailObject_getRecipients.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/emailObject_getRecipients.asp</url_cpp>
                    <url_objc>http://www.example-code.com/objc/emailObject_getRecipients.asp</url_objc>
                    <url_ios>http://www.example-code.com/ios/emailObject_getRecipients.asp</url_ios>
                    <url_powershell>http://www.example-code.com/powershell/emailObject_getRecipients.asp</url_powershell>
                    <url_mfc>http://www.example-code.com/mfc/emailObject_getRecipients.asp</url_mfc>
                    <url_c>http://www.example-code.com/C/emailObject_getRecipients.asp</url_c>
                    <url_delphi>http://www.example-code.com/delphi/emailObject_getRecipients.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/emailObject_getRecipients.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/emailObject_getRecipients.asp</url_java>
                    <url_android>http://www.example-code.com/android/emailObject_getRecipients.asp</url_android>
                    <url_perl>http://www.example-code.com/perl/emailObject_getRecipients.asp</url_perl>
                    <url_php>http://www.example-code.com/php/emailObject_getRecipients.asp</url_php>
                    <url_phpext>http://www.example-code.com/phpExt/emailObject_getRecipients.asp</url_phpext>
                    <url_python>http://www.example-code.com/python/emailObject_getRecipients.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/emailObject_getRecipients.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/emailObject_getRecipients.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/emailObject_getRecipients.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/emailObject_getRecipients.asp</url_vbscript>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>Getting TO / CC Email Recipients</text>
                    <url>emailObject_getRecipients.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="NumCC" axId="120">
            <gType>int</gType>
            <descrip>The number of carbon-copy email recipients.</descrip>
            <links>
                <link>
                    <text>Getting TO / CC Email Recipients</text>
                    <url_asp>http://www.example-code.com/asp/emailObject_getRecipients.asp</url_asp>
                    <url_sql>http://www.example-code.com/sql/emailObject_getRecipients.asp</url_sql>
                    <url_cs>http://www.example-code.com/csharp/emailObject_getRecipients.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/emailObject_getRecipients.asp</url_cpp>
                    <url_objc>http://www.example-code.com/objc/emailObject_getRecipients.asp</url_objc>
                    <url_ios>http://www.example-code.com/ios/emailObject_getRecipients.asp</url_ios>
                    <url_powershell>http://www.example-code.com/powershell/emailObject_getRecipients.asp</url_powershell>
                    <url_mfc>http://www.example-code.com/mfc/emailObject_getRecipients.asp</url_mfc>
                    <url_c>http://www.example-code.com/C/emailObject_getRecipients.asp</url_c>
                    <url_delphi>http://www.example-code.com/delphi/emailObject_getRecipients.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/emailObject_getRecipients.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/emailObject_getRecipients.asp</url_java>
                    <url_android>http://www.example-code.com/android/emailObject_getRecipients.asp</url_android>
                    <url_perl>http://www.example-code.com/perl/emailObject_getRecipients.asp</url_perl>
                    <url_php>http://www.example-code.com/php/emailObject_getRecipients.asp</url_php>
                    <url_phpext>http://www.example-code.com/phpExt/emailObject_getRecipients.asp</url_phpext>
                    <url_python>http://www.example-code.com/python/emailObject_getRecipients.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/emailObject_getRecipients.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/emailObject_getRecipients.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/emailObject_getRecipients.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/emailObject_getRecipients.asp</url_vbscript>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>Getting TO / CC Email Recipients</text>
                    <url>emailObject_getRecipients.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="NumDaysOld" axId="121">
            <gType>int</gType>
            <descrip>Returns the number of days old from the current system date/time.  The email's date is obtained from the "Date" header field.  If the Date header field is missing, or invalid, then -9999 is returned.  A negative number may be returned if the Date header field contains a future date/time.  (However, -9999 represents an error condition.)</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="NumHeaderFields" axId="122" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>The number of header fields.  When accessing a header field by index, the 1st header field is at index 0, and the last is at NumHeaderFields-1.  (Chilkat indexing is always 0-based.)</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="NumRelatedItems" axId="123">
            <gType>int</gType>
            <descrip>The number of related items present in this email. Related items are typically image files (JPEGs or GIFs) or style sheets (CSS files) that are included with HTML formatted messages with internal "CID"hyperlinks.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>email_examine_eml.asp</url>
                    <text>Load .eml and Examine the Structure, Attachments, and Related Items</text>
                </link>
            </links2>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="NumReplacePatterns" axId="124">
            <gType>int</gType>
            <descrip>Returns the number of replacement patterns previously set by calling the SetReplacePattern method 1 or more times.  If replacement patterns are set, the email bodies and header fields are modified by applying the search/replacement strings during the message sending process.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="NumReports" axId="125" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>(For multipart/report emails that have sub-parts with Content-Types such as message/feedback-report.)   Any MIME sub-part within the email that has a Content-Type of "message/*", but is not a "message/rfc822", is considered to be a "report" and is included in this count.  (A "message/rfc822" is considered an attached message and is handled by the NumAttachedMessages property and the GetAttachedMessage method.)  

Any MIME sub-part having a Content-Type equal to "text/rfc822-headers" is also considered to be a "report".  

The GetReport method may be called to get the body content of each "report" contained within a multipart/report email.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>email_examine_eml.asp</url>
                    <text>Load .eml and Examine the Structure, Attachments, and Related Items</text>
                </link>
            </links2>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="NumTo" axId="126">
            <gType>int</gType>
            <descrip>The number of direct email recipients.</descrip>
            <links>
                <link>
                    <text>Getting TO / CC Email Recipients</text>
                    <url_asp>http://www.example-code.com/asp/emailObject_getRecipients.asp</url_asp>
                    <url_sql>http://www.example-code.com/sql/emailObject_getRecipients.asp</url_sql>
                    <url_cs>http://www.example-code.com/csharp/emailObject_getRecipients.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/emailObject_getRecipients.asp</url_cpp>
                    <url_objc>http://www.example-code.com/objc/emailObject_getRecipients.asp</url_objc>
                    <url_ios>http://www.example-code.com/ios/emailObject_getRecipients.asp</url_ios>
                    <url_powershell>http://www.example-code.com/powershell/emailObject_getRecipients.asp</url_powershell>
                    <url_mfc>http://www.example-code.com/mfc/emailObject_getRecipients.asp</url_mfc>
                    <url_c>http://www.example-code.com/C/emailObject_getRecipients.asp</url_c>
                    <url_delphi>http://www.example-code.com/delphi/emailObject_getRecipients.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/emailObject_getRecipients.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/emailObject_getRecipients.asp</url_java>
                    <url_android>http://www.example-code.com/android/emailObject_getRecipients.asp</url_android>
                    <url_perl>http://www.example-code.com/perl/emailObject_getRecipients.asp</url_perl>
                    <url_php>http://www.example-code.com/php/emailObject_getRecipients.asp</url_php>
                    <url_phpext>http://www.example-code.com/phpExt/emailObject_getRecipients.asp</url_phpext>
                    <url_python>http://www.example-code.com/python/emailObject_getRecipients.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/emailObject_getRecipients.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/emailObject_getRecipients.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/emailObject_getRecipients.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/emailObject_getRecipients.asp</url_vbscript>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>Getting TO / CC Email Recipients</text>
                    <url>emailObject_getRecipients.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="OverwriteExisting" axId="127">
            <gType>bool</gType>
            <descrip>When _TRUE_ (the default) the methods to save email attachments and related items will overwrite files if they already exist.  If _FALSE_, then the methods that save email attachments and related items will append a string of 4 characters to create a unique filename if a file already exists.  The filename of the attachment (or related item) within the email object is updated and can be retrieved by the program to determine the actual file(s) created.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="Pkcs7CryptAlg" axId="128" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>When an email is sent encrypted (using PKCS7 public-key encryption), this selects the underlying symmetric encryption algorithm. Possible values are: "aes", "des", "3des", and "rc2".  The default value is "aes".</descrip>
            <links2>
                <link linkType="example">
                    <url>Send3DESMail.asp</url>
                    <text>Send Encrypted Email with a Selected Algorithm (AES, 3DES, etc.)</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Pkcs7KeyLength" axId="129">
            <gType>int</gType>
            <descrip>When the email is sent encrypted (using PKCS7 public-key encryption), this selects the key length of the underlying symmetric encryption algorithm. The possible values allowed depend on the Pkcs7CryptAlg property.  For "aes", the key length may be 128, 192, or 256.  For "3des" the key length must be 192.  For "des" the key length must be 40.  For "rc2" the key length can be 40, 56, 64, or 128.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="PreferredCharset" axId="130">
            <gType>string</gType>
            <descrip>Only applies when building an email with non-English characters where the charset is not explicitly set.  The Chilkat email component will automatically choose a charset based on the languages found within an email (if the charset is not already specified within the MIME or explicitly specified by setting the Charset property).  The default charset chosen for each language is:
&lt;p&gt;
Chinese: gb2312&lt;br&gt;
Japanese: shift_JIS&lt;br&gt;
Korean: ks_c_5601-1987&lt;br&gt;
Thai: windows-874&lt;br&gt;
All others: iso-8859-*&lt;br&gt;
&lt;p&gt;
This allows for charsets such as iso-2022-jp to be chosen instead of the default.  If the preferred charset does not apply to the situation, it is not used.  For example, if the preferred charset is iso-2022-jp, but the email contains Greek characters, then the preferred charset is ignored.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>email_charset.asp</url>
                    <text>Controlling Charset of HTML Email</text>
                </link>
            </links2>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="PrependHeaders" axId="131">
            <gType>bool</gType>
            <descrip>If _TRUE_, then header fields added via the AddHeaderField or AddHeaderField2 methods are prepended to the top of the header as opposed to appended to the bottom.  The default value is _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="ReceivedEncrypted" axId="132">
            <gType>bool</gType>
            <descrip>_TRUE_ if this email was originally received with encryption, otherwise _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="ReceivedSigned" axId="133">
            <gType>bool</gType>
            <descrip>_TRUE_ if this email was originally received with a digital signature, otherwise _FALSE_.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>pop3_verifySignedEmail.asp</url>
                    <text>POP3 Verify Signed (S/MIME) Email</text>
                </link>
            </links2>
        </property>
        <property name="ReplyTo" axId="134" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Sets the "Reply-To" header field to the specified email address.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ReturnReceipt" axId="135">
            <gType>bool</gType>
            <descrip>Set to _TRUE_ if you want the email to request a return-receipt when received by the recipient.  The default value is _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SendEncrypted" axId="136">
            <gType>bool</gType>
            <descrip>Set to _TRUE_ if this email should be sent encrypted.</descrip>
            <links>
                <link>
                    <text>Using a .cer Certificate File for Encrypted Email</text>
                    <url_asp>http://www.example-code.com/asp/smtp_sendEncryptedCer.asp</url_asp>
                    <url_cs>http://www.example-code.com/csharp/smtp_sendEncryptedCer.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/smtp_sendEncryptedCer.asp</url_cpp>
                    <url_delphi>http://www.example-code.com/delphi/smtp_sendEncryptedCer.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/smtp_sendEncryptedCer.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/smtp_sendEncryptedCer.asp</url_java>
                    <url_perl>http://www.example-code.com/perl/smtp_sendEncryptedCer.asp</url_perl>
                    <url_python>http://www.example-code.com/python/smtp_sendEncryptedCer.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/smtp_sendEncryptedCer.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/smtp_sendEncryptedCer.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/smtp_sendEncryptedCer.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/smtp_sendEncryptedCer.asp</url_vbscript>
                    <url_android>http://www.example-code.com/android/smtp_sendEncryptedCer.asp</url_android>
                    <url_objc>http://www.example-code.com/objc/smtp_sendEncryptedCer.asp</url_objc>
                    <url_ios>http://www.example-code.com/ios/smtp_sendEncryptedCer.asp</url_ios>
                    <url_phpext>http://www.example-code.com/phpExt/smtp_sendEncryptedCer.asp</url_phpext>
                    <url_php>http://www.example-code.com/php/smtp_sendEncryptedCer.asp</url_php>
                    <url_powershell>http://www.example-code.com/powershell/smtp_sendEncryptedCer.asp</url_powershell>
                </link>
                <link>
                    <text>Select Cert for Encrypted Email</text>
                    <url_asp>http://www.example-code.com/asp/smtp_findCertForEncryptedEmail.asp</url_asp>
                    <url_cs>http://www.example-code.com/csharp/smtp_findCertForEncryptedEmail.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/smtp_findCertForEncryptedEmail.asp</url_cpp>
                    <url_delphi>http://www.example-code.com/delphi/smtp_findCertForEncryptedEmail.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/smtp_findCertForEncryptedEmail.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/smtp_findCertForEncryptedEmail.asp</url_java>
                    <url_perl>http://www.example-code.com/perl/smtp_findCertForEncryptedEmail.asp</url_perl>
                    <url_python>http://www.example-code.com/python/smtp_findCertForEncryptedEmail.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/smtp_findCertForEncryptedEmail.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/smtp_findCertForEncryptedEmail.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/smtp_findCertForEncryptedEmail.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/smtp_findCertForEncryptedEmail.asp</url_vbscript>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>Using a .cer Certificate File for Encrypted Email</text>
                    <url>smtp_sendEncryptedCer.asp</url>
                </link>
                <link linkType="example">
                    <text>Select Cert for Encrypted Email</text>
                    <url>smtp_findCertForEncryptedEmail.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SendSigned" axId="137">
            <gType>bool</gType>
            <descrip>Set to _TRUE_ if this email should be sent with a digital signature.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="Sender" axId="302" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The sender's address for this email message.
&lt;p&gt;
This is the address of the actual sender acting on behalf of the author listed in the From: field. 
&lt;p&gt;Note: The Sender and BounceAddress properties are identical and perform the same function.  Setting the Sender property also sets the BounceAddress property, and vice-versa.  The reason for the duplication is that BounceAddress existed first, and developers typically searched for a "Sender" property without realizing that the BounceAddress property served this function.
&lt;p&gt;&lt;b&gt;Important Note:&lt;/b&gt; This property does not contain the value of the "Sender" header field, if one exists, for a received email.  It is a property that is used when sending email.  To get the value of the "Sender" header field (which may not always exist), call the GetHeaderField method instead.</descrip>
            <iversion>9.5.0.41</iversion>
            <links2>
                <link linkType="external">
                    <url>http://www.chilkatforum.com/questions/9325/send-email-to-show-sent-on-behalf-of-somebody</url>
                    <text>Notes about the Sender Property</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="SignaturesValid" axId="138">
            <gType>bool</gType>
            <descrip>_TRUE_ if the email was received with one or more digital signatures, and if all the signatures were validated indicating that the email was not altered.  Otherwise this property is set to _FALSE_.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>pop3_verifySignedEmail.asp</url>
                    <text>POP3 Verify Signed (S/MIME) Email</text>
                </link>
            </links2>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="SignedBy" axId="139">
            <gType>string</gType>
            <descrip>If the email was received digitally signed, this property contains the fields of the cert's SubjectDN.   
&lt;p&gt;
For example:  US, 60187, Illinois, Wheaton, 1719 E Forest Ave, "Chilkat Software, Inc.", "Chilkat Software, Inc."
&lt;p&gt;
It is like the DN (Distinguished Name), but without the "AttrName=" before each attribute.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SigningHashAlg" axId="140">
            <gType>string</gType>
            <descrip>Selects the underlying hash algorithm used when sending signed (PKCS7) email.  Possible values are "sha1", "sha256", "sha384", "sha512", "md5", and "md2".</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="Size" axId="141">
            <gType>int</gType>
            <descrip>The size in bytes of the email, including all parts and attachments.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Subject" axId="142">
            <gType>string</gType>
            <descrip>The email subject.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="Uidl" axId="143">
            <gType>string</gType>
            <descrip>This is the unique ID assigned by the POP3 server. Emails can be retrieved or deleted from the POP3 server via the UIDL. The header field for this property is "X-UIDL".
&lt;p&gt;
Important:  Emails downloaded via the IMAP protocol do not have UIDL's.  UIDL's are specific to the POP3 protocol.   IMAP servers use UID's  (notice the spelling difference -- "UIDL" vs. "UID").  An email downloaded via the Chilkat IMAP component will contain a "ckx-imap-uid" header field that contains the UID.  This may be accessed via the GetHeaderField method.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="UnpackUseRelPaths" axId="144">
            <gType>bool</gType>
            <descrip>Applies to the UnpackHtml method.  If _TRUE_, then relative paths are used within the HTML for the links to the related files (images and style sheets) that were unpacked to the filesystem.  Otherwise absolute paths are used.   The default value is _TRUE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="NumDigests" axId="320" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>Returns the number of message/rfc822 parts contained within the multipart/digest enclosure.  If no multipart/digest enclosure exists, then this property has the value of 0.    The GetDigest method is called to get the Nth digest as an email object.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>parse_multipart_digest_email.asp</url>
                    <text>Parsing a Multipart/Digest Email</text>
                </link>
            </links2>
            <iversion>9.5.0.66</iversion>
        </property>
    </properties>
    <methods>
        <method name="AddAttachmentHeader" axId="145" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fieldName</argName>
                    <objcName>fieldName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fieldValue</argName>
                    <objcName>fieldValue</objcName>
                </arg>
            </args>
            <descrip>Adds or replaces a MIME header field in one of the email attachments.  If the header field does not exist, it is added.  Otherwise it is replaced.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="fieldName" type="string" objcName="fieldName" />
                <arg name="fieldValue" type="string" objcName="fieldValue" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddBcc" axId="146">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>friendlyName</argName>
                    <objcName>friendlyName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>emailAddress</argName>
                    <objcName>emailAddress</objcName>
                </arg>
            </args>
            <descrip>Adds a recipient to the blind carbon-copy list. address is required, but name may be empty.</descrip>
            <links2>
                <link linkType="external">
                    <text>Why BCC email addresses do not appear in the email header.</text>
                    <url>http://www.chilkatsoft.com/p/p_450.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="friendlyName" type="string" objcName="friendlyName" />
                <arg name="emailAddress" type="string" objcName="emailAddress" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddCC" axId="147">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>friendlyName</argName>
                    <objcName>friendlyName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>emailAddress</argName>
                    <objcName>emailAddress</objcName>
                </arg>
            </args>
            <descrip>Adds a recipient to the carbon-copy list. address is required, but name may be empty.</descrip>
            <args2>
                <arg name="friendlyName" type="string" objcName="friendlyName" />
                <arg name="emailAddress" type="string" objcName="emailAddress" />
            </args2>
            <links2 />
        </method>
        <method name="AddDataAttachment" axId="148" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filePath</argName>
                    <objcName>fileName</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>content</argName>
                    <objcName>content</objcName>
                </arg>
            </args>
            <descrip>Adds an attachment directly from data in memory to the email.</descrip>
            <args2>
                <arg name="fileName" type="string" objcName="fileName" />
                <arg name="content" type="bytes" objcName="content" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>email_addDataAttachment.asp</url>
                    <text>Add Binary Email Attachment from In-Memory Bytes</text>
                </link>
            </links2>
        </method>
        <method name="AddDataAttachment2" axId="149" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>path</argName>
                    <objcName>fileName</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>content</argName>
                    <objcName>content</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>contentType</argName>
                    <objcName>contentType</objcName>
                </arg>
            </args>
            <descrip>Adds an attachment to an email from in-memory data.  Same as AddDataAttachment but allows the content-type to be specified.</descrip>
            <args2>
                <arg name="fileName" type="string" objcName="fileName" />
                <arg name="content" type="bytes" objcName="content" />
                <arg name="contentType" type="string" objcName="contentType" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>email_addDataAttachment.asp</url>
                    <text>Add Binary Email Attachment from In-Memory Bytes</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddEncryptCert" axId="150">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <descrip>Allows for certificates to be explicitly specified for sending encrypted email to one or more recipients.  Call this method once per certificate to be used.  The ClearEncryptCerts method may be called to clear the list of explicitly-specified certificates.  
&lt;p&gt;
Note: It is possible to send encrypted email without explicitly specifying the certificates.  The Chilkat email component will automatically search the registry-based Current-User and Local-Machine certificate stores for certs matching each of the recipients (To, CC, and BCC recipients).  
&lt;p&gt;
Note: The SentEncryptCert method is equivalent to calling ClearEncryptCerts followed by AddEncryptCert.</descrip>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="AddFileAttachment" axId="151" outArgName="outStrContentType">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>path</argName>
                    <objcName>path</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrContentType</argName>
                    <objcName>outStrContentType</objcName>
                </arg>
            </args>
            <descrip>Adds a file as an attachment to the email. Returns the MIME content-type of the attachment, which is inferred based on the filename extension.</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>smtp_send_email_with_attachments.asp</url>
                    <text>Send Email With Attachments</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddFileAttachment2" axId="152">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>path</argName>
                    <objcName>path</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>contentType</argName>
                    <objcName>contentType</objcName>
                </arg>
            </args>
            <descrip>Same as AddFileAttachment, but the content type can be explicitly specified.</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="contentType" type="string" objcName="contentType" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>smtp_send_html_email_with_attachments.asp</url>
                    <text>Send HTML Email with Attachments</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="AddHeaderField" axId="153">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fieldName</argName>
                    <objcName>fieldName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fieldValue</argName>
                    <objcName>fieldValue</objcName>
                </arg>
            </args>
            <descrip>Any standard or non-standard (custom) header field can be added to the email with this method. One interesting feature is that all header fields whose name begins with "CKX-" will not be included in the header when an email is sent. These fields will be included when saved to or loaded from XML. This makes it easy to include persistent meta-data with an email which your programs can use in any way it chooses.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; This method will replace an already-existing header field.  To allow for adding duplicate header fields, call AddHeaderField2 (see below).</descrip>
            <args2>
                <arg name="fieldName" type="string" objcName="fieldName" />
                <arg name="fieldValue" type="string" objcName="fieldValue" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="AddHeaderField2" axId="154">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fieldName</argName>
                    <objcName>fieldName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fieldValue</argName>
                    <objcName>fieldValue</objcName>
                </arg>
            </args>
            <descrip>This method is the same as AddHeaderField, except that if the header field already exists, it is not replaced.  A duplicate header will be added.</descrip>
            <args2>
                <arg name="fieldName" type="string" objcName="fieldName" />
                <arg name="fieldValue" type="string" objcName="fieldValue" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddHtmlAlternativeBody" axId="155">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>body</argName>
                    <objcName>body</objcName>
                </arg>
            </args>
            <descrip>Sets the HTML body of the email. Use this method if there will be multiple versions of the body, but in different formats, such as HTML and plain text. Otherwise, set the body by calling the SetHtmlBody method.</descrip>
            <args2>
                <arg name="body" type="string" objcName="body" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>smtp_send_html_email_with_attachments.asp</url>
                    <text>Send HTML Email with Attachments</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddMultipleBcc" axId="156">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>commaSeparatedAddresses</argName>
                    <objcName>commaSeparatedAddresses</objcName>
                </arg>
            </args>
            <descrip>Adds multiple recipients to the blind carbon-copy list. The parameter is a string containing a comma separated list of full email addresses. Returns True if successful.</descrip>
            <links2>
                <link linkType="external">
                    <text>Why BCC email addresses do not appear in the email header.</text>
                    <url>http://www.chilkatsoft.com/p/p_450.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="commaSeparatedAddresses" type="string" objcName="commaSeparatedAddresses" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddMultipleCC" axId="157">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>commaSeparatedAddresses</argName>
                    <objcName>commaSeparatedAddresses</objcName>
                </arg>
            </args>
            <descrip>Adds multiple recipients to the carbon-copy list. The parameter is a string containing a comma separated list of full email addresses. Returns True if successful.</descrip>
            <args2>
                <arg name="commaSeparatedAddresses" type="string" objcName="commaSeparatedAddresses" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddMultipleTo" axId="158">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>commaSeparatedAddresses</argName>
                    <objcName>commaSeparatedAddresses</objcName>
                </arg>
            </args>
            <descrip>Adds multiple recipients to the "to" list. The parameter is a string containing a comma separated list of full email addresses. Returns True if successful.</descrip>
            <args2>
                <arg name="commaSeparatedAddresses" type="string" objcName="commaSeparatedAddresses" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddPfxSourceData" axId="159">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>pfxBytes</argName>
                    <objcName>pfxData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pfxPassword</argName>
                    <objcName>password</objcName>
                </arg>
            </args>
            <descrip>Adds a PFX to the object's internal list of sources to be searched for certificates and private keys when decrypting.  Multiple PFX sources can be added by calling this method once for each.  (On the Windows operating system, the registry-based certificate stores are also automatically searched, so it is commonly not required to explicitly add PFX sources.)
&lt;p&gt;
The ARG1 contains the bytes of a PFX file  (also known as PKCS12 or .p12).</descrip>
            <args2>
                <arg name="pfxBytes" type="bytes" objcName="pfxData" />
                <arg name="pfxPassword" type="string" objcName="password" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>email_addPfxSourceData.asp</url>
                    <text>Demonstrates how to call AddPfxSourceData for an Email Object</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddPfxSourceFile" axId="160">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pfxFilePath</argName>
                    <objcName>pfxFilePath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pfxPassword</argName>
                    <objcName>password</objcName>
                </arg>
            </args>
            <descrip>Adds a PFX file to the object's internal list of sources to be searched for certificates and private keys when decrypting.  Multiple PFX files can be added by calling this method once for each.  (On the Windows operating system, the registry-based certificate stores are also automatically searched, so it is commonly not required to explicitly add PFX sources.)
&lt;p&gt;
The ARG1 contains the bytes of a PFX file  (also known as PKCS12 or .p12).</descrip>
            <args2>
                <arg name="pfxFilePath" type="string" objcName="pfxFilePath" />
                <arg name="pfxPassword" type="string" objcName="password" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddPlainTextAlternativeBody" axId="161">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>body</argName>
                    <objcName>body</objcName>
                </arg>
            </args>
            <descrip>Sets the plain-text body of the email. Use this method if there will be multiple versions of the body, but in different formats, such as HTML and plain text. Otherwise, simply set the Body property.</descrip>
            <links2>
                <link linkType="external" lang="cpp">
                    <text>Scan/Replace Text in Email Body in C++</text>
                    <url>http://www.cknotes.com/?p=207</url>
                </link>
                <link linkType="example">
                    <url>smtp_send_html_email_with_attachments.asp</url>
                    <text>Send HTML Email with Attachments</text>
                </link>
            </links2>
            <args2>
                <arg name="body" type="string" objcName="body" />
            </args2>
        </method>
        <method name="AddRelatedData" axId="162" outArgName="outStr" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>path</argName>
                    <objcName>fileName</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>inData</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Adds the memory data as a related item to the email and returns the Content-ID. Emails formatted in HTML can include images with this call and internally reference the image through a "cid"hyperlink. (Chilkat Email.NET fully supports the MHTML standard.)</descrip>
            <links2>
                <link linkType="example">
                    <url>smtp_to_iphone.asp</url>
                    <text>Send HTML Email with Image to iPhone</text>
                </link>
                <link linkType="example">
                    <url>send_html_email_image_binary_data.asp</url>
                    <text>Send HTML Email with Embedded Image Loaded from Memory</text>
                </link>
            </links2>
            <args2>
                <arg name="fileName" type="string" objcName="fileName" />
                <arg name="inData" type="bytes" objcName="inData" />
            </args2>
        </method>
        <method name="AddRelatedData2" axId="163" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>inData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fileNameInHtml</argName>
                    <objcName>fileNameInHtml</objcName>
                </arg>
            </args>
            <descrip>Adds a related item to the email from in-memory byte data.  Related items are things such as images and style sheets that are embedded within an HTML email.  They are not considered attachments because their sole purpose is to participate in the display of the HTML.  This method differs from AddRelatedData in that it does not use or return a Content-ID.  The filename argument should be set to the filename used in the HTML img tag's src attribute (if it's an image), or the URL referenced in an HTML  link tag for a stylesheet.</descrip>
            <args2>
                <arg name="inData" type="bytes" objcName="inData" />
                <arg name="fileNameInHtml" type="string" objcName="fileNameInHtml" />
            </args2>
            <links2 />
        </method>
        <method name="AddRelatedData2P" cpp="1" noSwig="1">
            <gType>void</gType>
            <ifdef>#if !defined(CHILKAT_MONO)</ifdef>
            <args>
                <arg>
                    <cppType>const unsigned char *</cppType>
                    <argName>pBytes</argName>
                    <objcName>pByteData</objcName>
                </arg>
                <arg>
                    <cppType>unsigned long</cppType>
                    <argName>szBytes</argName>
                    <objcName>szByteData</objcName>
                </arg>
                <arg>
                    <cppType>const char *</cppType>
                    <argName>fileNameInHtml</argName>
                    <objcName>fileNameInHtml</objcName>
                </arg>
            </args>
            <descrip>The same as AddRelatedData2, except the data is passed in as a "const unsigned char *" with the byte count in ARG2.</descrip>
            <args2>
                <arg name="pBytes" type="cppBytes" objcName="pByteData" />
                <arg name="szBytes" type="unsigned long" objcName="szByteData" />
                <arg name="fileNameInHtml" type="string" objcName="fileNameInHtml" />
            </args2>
            <links2 />
        </method>
        <method name="AddRelatedDataP" cpp="1" noSwig="1" outArgName="outStrContentId">
            <gType>string</gType>
            <ifdef>#if !defined(CHILKAT_MONO)</ifdef>
            <args>
                <arg>
                    <cppType>const char *</cppType>
                    <argName>nameInHtml</argName>
                    <objcName>nameInHtml</objcName>
                </arg>
                <arg>
                    <cppType>const unsigned char *</cppType>
                    <argName>pBytes</argName>
                    <objcName>pByteData</objcName>
                </arg>
                <arg>
                    <cppType>unsigned long</cppType>
                    <argName>szBytes</argName>
                    <objcName>szByteData</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrContentId</argName>
                    <objcName>outStrContentId</objcName>
                </arg>
            </args>
            <descrip>The same as AddRelatedData, except the data is passed in as a "const unsigned char *" with the byte count in ARG3.   The Content-ID assigned to the related item is returned (in ARG4 for the upper-case alternative for this method).</descrip>
            <args2>
                <arg name="nameInHtml" type="string" objcName="nameInHtml" />
                <arg name="pBytes" type="cppBytes" objcName="pByteData" />
                <arg name="szBytes" type="unsigned long" objcName="szByteData" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="AddRelatedFile" axId="164" outArgName="outStrContentID">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>path</argName>
                    <objcName>path</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrContentID</argName>
                    <objcName>outStrContentID</objcName>
                </arg>
            </args>
            <descrip>Adds the contents of a file to the email and returns the Content-ID. Emails formatted in HTML can include images with this call and internally reference the image through a "cid" hyperlink. (Chilkat Email.NET fully supports the MHTML standard.)</descrip>
            <links2>
                <link linkType="example">
                    <url>smtp_to_iphone.asp</url>
                    <text>Send HTML Email with Image to iPhone</text>
                </link>
                <link linkType="example">
                    <url>smtp_send_html_email_with_attachments.asp</url>
                    <text>Send HTML Email with Attachments</text>
                </link>
            </links2>
            <args2>
                <arg name="path" type="string" objcName="path" />
            </args2>
        </method>
        <method name="AddRelatedFile2" axId="165" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filenameOnDisk</argName>
                    <objcName>fileNameOnDisk</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filenameInHtml</argName>
                    <objcName>filenameInHtml</objcName>
                </arg>
            </args>
            <descrip>Adds a related item to the email from a file. Related items are things such as images and style sheets that are embedded within an HTML email. They are not considered attachments because their sole purpose is to participate in the display of the HTML. This method differs from AddRelatedFile in that it does not use or return a Content-ID. The ARG2  argument should be set to the filename used in the HTML img tag's src attribute (if it's an image), or the URL referenced in an HTML link tag for a stylesheet.  The ARG1 is the path in the local filesystem of the file to be added.
&lt;p&gt;
Note: Outlook.com will not properly display embedded HTMl images when the ARG2 includes a path part.  Apparently, Outlook.com is only capable of correctly displaying images when the ARG2 is a only a filename.  Other email clients, such as Mozilla Thunderbird, have no trouble when the ARG2 includes a path part.</descrip>
            <args2>
                <arg name="filenameOnDisk" type="string" objcName="fileNameOnDisk" />
                <arg name="filenameInHtml" type="string" objcName="filenameInHtml" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="AddRelatedHeader" axId="166">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fieldName</argName>
                    <objcName>fieldName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fieldValue</argName>
                    <objcName>fieldValue</objcName>
                </arg>
            </args>
            <descrip>Adds or replaces a MIME header field in one of the email's related items.  If the header field does not exist, it is added.  Otherwise it is replaced.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="fieldName" type="string" objcName="fieldName" />
                <arg name="fieldValue" type="string" objcName="fieldValue" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="AddRelatedString" axId="167" outArgName="outCid">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>nameInHtml</argName>
                    <objcName>nameInHtml</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outCid</argName>
                    <objcName>outCid</objcName>
                </arg>
            </args>
            <descrip>Adds a related item to the email.  A related item is typically an image or style sheet referenced by an HTML tag within the HTML email body.  The contents of the related item are passed ARG2.  ARG1 specifies the filename that should be used within the HTML, and not an actual filename on the local filesystem.  ARG3 specifies the charset that should be used for the text content of the related item.  Returns the content-ID generated for the added item.</descrip>
            <args2>
                <arg name="nameInHtml" type="string" objcName="nameInHtml" />
                <arg name="str" type="string" objcName="str" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>smtp_html_email_external_css.asp</url>
                    <text>Send HTML Email with External CSS as Related Item</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="AddRelatedString2" axId="168">
            <gType>void</gType>
            <descrip>Adds a related item to the email from an in-memory string. Related items are things such as images and style sheets that are embedded within an HTML email. They are not considered attachments because their sole purpose is to participate in the display of the HTML.  The filenameInHtml argument should be set to the filename used in the HTML img tag's src attribute (if it's an image), or the URL referenced in an HTML link tag for a stylesheet.  The charset argument indicates that the content should first be converted to the specified charset prior to adding to the email.  It should hava a value such as "iso-8859-1", "utf-8", "Shift_JIS", etc.</descrip>
            <args2>
                <arg name="fileNameInHtml" type="string" objcName="filenameInHtml" />
                <arg name="content" type="string" objcName="str" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>smtp_html_email_css_content_location.asp</url>
                    <text>Send HTML Email with CSS as Related Item using Content-Location</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddStringAttachment" axId="169">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>path</argName>
                    <objcName>fileName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>content</argName>
                    <objcName>str</objcName>
                </arg>
            </args>
            <descrip>Adds an attachment directly from a string in memory to the email.</descrip>
            <args2>
                <arg name="path" type="string" objcName="fileName" />
                <arg name="content" type="string" objcName="str" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>smtp_send_html_email_with_attachments.asp</url>
                    <text>Send HTML Email with Attachments</text>
                </link>
            </links2>
        </method>
        <method name="AddStringAttachment2" axId="170" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>path</argName>
                    <objcName>fileName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>content</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
            </args>
            <descrip>Adds an attachment to an email.  The ARG1 specifies the filename to be used for the attachment and is not an actual filename existing on the local filesystem.  The ARG2  contains the text data for the attachment.  The string will be converted to the charset specified in ARG3  before being added to the email.  
&lt;p&gt;
Note: Beginning in v9.5.0.48, the ARG3 may be prepended with "bom-" or "no-bom-" to include or exclude the BOM (preamble) for charsets such as utf-16 or utf-8.  For example: "no-bom-utf-8" or "bom-utf-8".</descrip>
            <args2>
                <arg name="path" type="string" objcName="fileName" />
                <arg name="content" type="string" objcName="str" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddTo" axId="171">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>friendlyName</argName>
                    <objcName>friendlyName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>emailAddress</argName>
                    <objcName>emailAddress</objcName>
                </arg>
            </args>
            <descrip>Adds a recipient to the "to" list. address is required, but name may be empty. Emails that have no "To" recipients will be sent to _LT_undisclosed-recipients_GT_.</descrip>
            <args2>
                <arg name="friendlyName" type="string" objcName="friendlyName" />
                <arg name="emailAddress" type="string" objcName="emailAddress" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddiCalendarAlternativeBody" axId="172">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>icalContent</argName>
                    <objcName>body</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>methodName</argName>
                    <objcName>methodName</objcName>
                </arg>
            </args>
            <descrip>Adds an iCalendar (text/calendar) alternative body to the email.  The ARG1 contains the content of the iCalendar data.  A sample is shown here:
&lt;pre&gt;
BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//hacksw/handcal//NONSGML v1.0//EN
BEGIN:VEVENT
UID:uid1@example.com
DTSTAMP:19970714T170000Z
ORGANIZER;CN=John Doe:MAILTO:john.doe@example.com
DTSTART:19970714T170000Z
DTEND:19970715T035959Z
SUMMARY:Bastille Day Party
END:VEVENT
END:VCALENDAR
&lt;/pre&gt;
The ARG2 is the "method" attribute used in the Content-Type header field in the alternative body.  For example, if set to "REQUEST", then the alternative body's header would look like this:
&lt;pre&gt;
Content-Type: text/calendar; method=REQUEST
Content-Transfer-Encoding: base64
&lt;/pre&gt;</descrip>
            <args2>
                <arg name="icalContent" type="string" objcName="body" />
                <arg name="methodName" type="string" objcName="methodName" />
            </args2>
            <links2 />
        </method>
        <method name="AesDecrypt" axId="173" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>password</argName>
                    <objcName>password</objcName>
                </arg>
            </args>
            <descrip>Decrypts and restores an email message that was previously encrypted using AesEncrypt. The password must match the password used for encryption.</descrip>
            <args2>
                <arg name="password" type="string" objcName="password" />
            </args2>
            <links2 />
        </method>
        <method name="AesEncrypt" axId="174" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>password</argName>
                    <objcName>password</objcName>
                </arg>
            </args>
            <descrip>Encrypts the email body, all alternative bodies, all message sub-parts and attachments using 128-bit AES CBC  encryption. Decrypting is achieved by calling AesDecrypt  with the same password. The AesEncrypt/Decrypt methods use symmetric password-based AES encryption and greatly simplify sending and receiving encrypted emails because certificates and private keys are not used. However, the sending and receiving applications must both use Chilkat, and the password must be pre-known on both ends.</descrip>
            <args2>
                <arg name="password" type="string" objcName="password" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="AppendToBody" axId="175">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
            </args>
            <descrip>Appends a string to the plain-text body.</descrip>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AspUnpack" axId="176">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>prefix</argName>
                    <objcName>prefix</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>saveDir</argName>
                    <objcName>saveDir</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>urlPath</argName>
                    <objcName>urlPath</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>cleanFiles</argName>
                    <objcName>cleanFiles</objcName>
                </arg>
            </args>
            <descrip>Please see the examples at the following pages for detailed information:</descrip>
            <links2>
                <link linkType="external">
                    <text>Display HTML Email in Web Page</text>
                    <url>http://www.chilkatsoft.com/p/p_503.asp</url>
                </link>
                <link linkType="external">
                    <text>Display HTML Email in IFrame (or Frame)</text>
                    <url>http://www.chilkatsoft.com/p/p_504.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="prefix" type="string" objcName="prefix" />
                <arg name="saveDir" type="string" objcName="saveDir" />
                <arg name="urlPath" type="string" objcName="urlPath" />
                <arg name="cleanFiles" type="bool" objcName="cleanFiles" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="AspUnpack2" axId="177" outArgName="outHtml">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>prefix</argName>
                    <objcName>prefix</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>saveDir</argName>
                    <objcName>saveDir</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>urlPath</argName>
                    <objcName>urlPath</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>cleanFiles</argName>
                    <objcName>cleanFiles</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outHtml</argName>
                    <objcName>outHtml</objcName>
                </arg>
            </args>
            <descrip>Please see the examples at the following pages for detailed information:</descrip>
            <links2>
                <link linkType="external">
                    <text>Display HTML Email in Web Page</text>
                    <url>http://www.chilkatsoft.com/p/p_503.asp</url>
                </link>
                <link linkType="external">
                    <text>Display HTML Email in IFrame (or Frame)</text>
                    <url>http://www.chilkatsoft.com/p/p_504.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="prefix" type="string" objcName="prefix" />
                <arg name="saveDir" type="string" objcName="saveDir" />
                <arg name="urlPath" type="string" objcName="urlPath" />
                <arg name="cleanFiles" type="bool" objcName="cleanFiles" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AttachMessage" axId="178">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>mimeBytes</argName>
                    <objcName>mimeBytes</objcName>
                </arg>
            </args>
            <descrip>Attaches a MIME message to the email object.  The attached MIME will be encapsulated in an message/rfc822 sub-part.   To attach one email object to another, pass the output of GetMimeBinary to the input of this method.</descrip>
            <args2>
                <arg name="mimeBytes" type="bytes" objcName="mimeBytes" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="BEncodeBytes" axId="179" outArgName="outEncodedStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>inData</objcName>
                </arg>
                <arg>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                    <dnType>string</dnType>
                    <axType>string</axType>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outEncodedStr</argName>
                    <objcName>outEncodedStr</objcName>
                </arg>
            </args>
            <descrip>Takes a byte array of multibyte (non-Unicode) data and returns a Unicode B-Encoded string.</descrip>
            <args2>
                <arg name="inData" type="bytes" objcName="inData" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="BEncodeString" axId="180" outArgName="outEncodedStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outEncodedStr</argName>
                    <objcName>outEncodedStr</objcName>
                </arg>
            </args>
            <descrip>Takes a Unicode string, converts it to the charset specified in the 2nd parameter, B-Encodes the converted multibyte data, and returns the encoded Unicode string.</descrip>
            <args2>
                <arg name="str" type="string" objcName="str" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="ClearBcc" axId="181">
            <gType>void</gType>
            <args />
            <descrip>Clears the list of blind carbon-copy recipients.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="ClearCC" axId="182">
            <gType>void</gType>
            <args />
            <descrip>Clears the list of carbon-copy recipients.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="ClearEncryptCerts" axId="183">
            <gType>void</gType>
            <args />
            <descrip>Clears the internal list of explicitly specified certificates to be used for this encrypted email.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="ClearTo" axId="184">
            <gType>void</gType>
            <args />
            <descrip>Clears the list of "to" recipients.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="Clone" axId="185">
            <gType>Email</gType>
            <args />
            <descrip>Creates and returns an identical copy of the Email object.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="ComputeGlobalKey" axId="186" outArgName="outStr" ax="1" cpp="1" dn="1" deprecated="1">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encoding</argName>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bFold</argName>
                    <objcName>bFold</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>&lt;b&gt;Important:&lt;/b&gt; New programs should ComputeGlobalKey2 instead.  This method did not adequately canonicalize the string passed to the digest-MD5 hash and therefore different versions of Chilkat may produce different results with this method.
&lt;p&gt;
Computes a global unique key for the email.  The key is created by a digest-MD5 hash of the concatenation of the following header fields: Message-ID, Subject, From, Date, To.     (The header fields are Q/B decoded if necessary, converted to the utf-8 encoding, concatenated, and hashed using MD5.)   The 16-byte MD5 hash is returned as an encoded string.  The ARG1 determines the encoding:  base64, hex, url, etc.     If ARG2 is _TRUE_, then the 16-byte MD5 hash is folded to 8 bytes with an XOR to produce a shorter key.</descrip>
            <args2>
                <arg name="encoding" type="string" objcName="encoding" />
                <arg name="bFold" type="bool" objcName="bFold" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>email_computeGlobalKey.asp</url>
                    <text>Generate a Unique Key for an Email</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="CreateDsn" axId="187">
            <gType>Email</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>humanReadableMessage</argName>
                    <objcName>explanation</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>xmlStatusFields</argName>
                    <objcName>xmlDeliveryStatus</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bHeaderOnly</argName>
                    <objcName>bHeaderOnly</objcName>
                </arg>
            </args>
            <descrip>Creates a new DSN (Delivery Status Notification) email having the format as specified in RFC 3464.  See the example (below) for more detailed information.</descrip>
            <links2>
                <link linkType="example">
                    <text>Create DSN (Delivery Status Notification) Email</text>
                    <url>emailObject_createDsn.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="humanReadableMessage" type="string" objcName="explanation" />
                <arg name="xmlStatusFields" type="string" objcName="xmlDeliveryStatus" />
                <arg name="bHeaderOnly" type="bool" objcName="bHeaderOnly" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="CreateForward" axId="188">
            <gType>Email</gType>
            <args />
            <descrip>Returns a copy of the Email object with the body and header fields changed so that the newly created email can be forwarded. After calling CreateForward, simply add new recipients to the created email, and call MailMan.SendEmail.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="CreateMdn" axId="189">
            <gType>Email</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>humanReadableMessage</argName>
                    <objcName>explanation</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>xmlStatusFields</argName>
                    <objcName>xmlMdnFields</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bHeaderOnly</argName>
                    <objcName>bHeaderOnly</objcName>
                </arg>
            </args>
            <descrip>Creates a new MDN (Message Disposition Notification) email having the format as specified in RFC 3798.  See the example (below) for more detailed information.</descrip>
            <links2>
                <link linkType="example">
                    <text>Create MDN (Message Disposition Notification) Email</text>
                    <url>emailObject_createMdn.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="humanReadableMessage" type="string" objcName="explanation" />
                <arg name="xmlStatusFields" type="string" objcName="xmlMdnFields" />
                <arg name="bHeaderOnly" type="bool" objcName="bHeaderOnly" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="CreateReply" axId="190">
            <gType>Email</gType>
            <args />
            <descrip>Returns a copy of the Email object with the body and header fields changed so that the newly created email can be sent as a reply. After calling CreateReply, simply prepend additional information to the body, and call MailMan.SendEmail.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="CreateTempMht" axId="191" outArgName="outPath">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inFilename</argName>
                    <objcName>inPath</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outPath</argName>
                    <objcName>outPath</objcName>
                </arg>
            </args>
            <descrip>Saves the email to a temporary MHT file so that a WebBrowser control can navigate to it and display it. If fileName is empty, a temporary filename is generated and returned. If fileName is non-empty, then it will be created or overwritten, and the input filename is simply returned.The MHT file that is created will not contain any of the email's attachments, if any existed. Also, if the email was plain-text, the MHT file will be saved such that the plain-text is converted to HTML using pre-formatted text ("pre" HTML tags) allowing it to be displayed correctly in a WebBrowser.</descrip>
            <args2>
                <arg name="inFilename" type="string" objcName="inPath" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="DropAttachments" axId="192">
            <gType>void</gType>
            <args />
            <descrip>Removes all attachments from the email.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="DropRelatedItem" axId="193">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>A related item is typically an embedded image referenced from the HTML in the email via a "CID" hyperlink.  This method removes the Nth embedded image from the email.  Note: If the HTML tries to reference the removed image, it will be displayed as a broken image link.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="DropRelatedItems" axId="194">
            <gType>void</gType>
            <args />
            <descrip>A related item is typically an embedded image referenced from the HTML in the email via a "CID" hyperlink.  This method removes all the embedded images from the email.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="DropSingleAttachment" axId="195">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>Drops a single attachment from the email. Returns True if successful.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="FindIssuer" axId="196">
            <gType>Cert</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <descrip>Digitally signed and/or encrypted emails are automatically "unwrapped" when received from a POP3 or IMAP server, or when loaded from any source such as a MIME string, in-memory byte data, or a .eml file.   The results of the signature verification / decryption are stored in the properties such as ReceivedSigned, ReceivedEncrypted, SignaturesValid, etc.  The signing certificate can be obtained via the GetSigningCert function.  If the signature contained more certificates in the chain of authentication, this method provides a means to access them.
&lt;p&gt;
During signature verification, the email object collects the certs found in the signature and holds onto them internally.  To get the issuing certificate of the signing certificate, call this method passing the cert returned by GetSigningCert.  If the issuing cert is available, it is returned.  Otherwise _NULL_ is returned.  If the cert passed in is the root (i.e. a self-signed certificate), then the cert object returned is a copy of the cert passed in.  
&lt;p&gt;
To traverse the chain  to the root, one would  write a loop that on first iteration passes the cert returned by GetSignedByCert (not GetSignerCert), and then on each subsequent iteration passes the cert from the previous iteration.  The loop would exit when a cert is returned that has the same SubjectDN and SerialNumber as what was passed in (or when FindIssuer returns _NULL_).</descrip>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GenerateFilename" axId="197" outArgName="outStrFilename">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrFilename</argName>
                    <objcName>outStrFilename</objcName>
                </arg>
            </args>
            <descrip>Generates a unique filename for this email. The filename will be different each time the method is called.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetAltHeaderField" axId="198" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fieldName</argName>
                    <objcName>fieldName</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the value of a header field within the Nth alternative body's MIME sub-part.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="fieldName" type="string" objcName="fieldName" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetAlternativeBody" axId="199" outArgName="outStrBody">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrBody</argName>
                    <objcName>outStrBody</objcName>
                </arg>
            </args>
            <descrip>Returns the Nth alternative body. The NumAlternatives property tells the number of alternative bodies present. Use the GetHtmlBody and GetPlainTextBody methods to easily get the HTML or plain text alternative bodies.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetAlternativeBodyByContentType" axId="200" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>contentType</argName>
                    <objcName>contentType</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the alternative body by content-type, such as "text/plain", "text/html", "text/xml", etc.</descrip>
            <args2>
                <arg name="contentType" type="string" objcName="contentType" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetAlternativeContentType" axId="201" outArgName="outStrContentType">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrContentType</argName>
                    <objcName>outStrContentType</objcName>
                </arg>
            </args>
            <descrip>Returns the content type of the Nth alternative body. The NumAlternatives property tells the number of alternative bodies present.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="GetAttachedMessage" axId="202" ax="1" cpp="1" dn="1">
            <gType>Email</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>Returns an embedded "message/rfc822" subpart as an email object.  (Emails are embedded as "message/rfc822" subparts by some mail clients when forwarding an email.)  This method allows the original email to be accessed.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>email_examine_eml.asp</url>
                    <text>Load .eml and Examine the Structure, Attachments, and Related Items</text>
                </link>
            </links2>
        </method>
        <method name="GetAttachedMessageAttr" ax="1" cpp="1" dn="1" axId="303" outArgName="outStr">
            <gType>string</gType>
            <descrip>Returns a header field attribute value for  the Nth attached (embedded) email.  For example, to get the value of the "name" attribute in the Content-Type header for the 1st attached message:
&lt;pre&gt;
Content-Type: message/rfc822; name="md75000024149.eml"
&lt;/pre&gt;
then the method arguments should contain the values  0, "Content-Type", "name".</descrip>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <argName>fieldName</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>fieldName</objcName>
                </arg>
                <arg>
                    <argName>attrName</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>attrName</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <iversion>9.5.0.41</iversion>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="fieldName" type="string" objcName="fieldName" />
                <arg name="attrName" type="string" objcName="attrName" />
            </args2>
            <links2 />
        </method>
        <method name="GetAttachedMessageFilename" axId="203" outArgName="outStr" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the filename of the Nth attached (embedded) email.  The filename is the "filename" attribute of the content-disposition header field found within the Nth message/rfc822 sub-part of the calling email object.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; The attached message filename is only present if the &lt;b&gt;Content-Disposition&lt;/b&gt; header exists AND contains a "filename" attribute.  If questions arise, one could open the email in a text editor to examine the MIME sub-header for the attached message (where the Content-Type = "message/rfc822").  For example, here is a sub-header that has a filename:
&lt;pre&gt;
Content-Type: message/rfc822; name="GetAttachedMessageAttr.eml"
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="GetAttachedMessageAttr.eml"
&lt;/pre&gt;
Here is an attached message sub-header that does NOT have a filename:
&lt;pre&gt;
Content-Type: message/rfc822
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment
&lt;/pre&gt;</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="GetAttachmentAttr" ax="1" cpp="1" dn="1" axId="305" outArgName="outStr">
            <gType>string</gType>
            <descrip>Returns a header field attribute value from the header field of the Nth attachment.</descrip>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <argName>fieldName</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>fieldName</objcName>
                </arg>
                <arg>
                    <argName>attrName</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>attrName</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <iversion>9.5.0.41</iversion>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="fieldName" type="string" objcName="fieldName" />
                <arg name="attrName" type="string" objcName="attrName" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetAttachmentContentID" axId="204" outArgName="outStrContentID">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrContentID</argName>
                    <objcName>outStrContentID</objcName>
                </arg>
            </args>
            <descrip>Returns the ContentID header field for the Nth attachment.  The first attachment is at index 0.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>email_examine_eml.asp</url>
                    <text>Load .eml and Examine the Structure, Attachments, and Related Items</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetAttachmentContentType" axId="205" outArgName="outStrContentType">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrContentType</argName>
                    <objcName>outStrContentType</objcName>
                </arg>
            </args>
            <descrip>Returns the Content-Type header field for the Nth attachment.  Indexing of attachments begins at 0.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>email_examine_eml.asp</url>
                    <text>Load .eml and Examine the Structure, Attachments, and Related Items</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetAttachmentData" axId="206" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Retrieves an attachment's binary data for in-memory access.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="GetAttachmentFilename" axId="207" ax="1" cpp="1" dn="1" outArgName="outStrFilename">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrFilename</argName>
                    <objcName>outStrFilename</objcName>
                </arg>
            </args>
            <descrip>Retrieves an attachment's filename.</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.chilkatforum.com/questions/8437/understanding-imap-email-attachments</url>
                    <text>Understanding IMAP Email Attachments</text>
                </link>
                <link linkType="example">
                    <url>email_examine_eml.asp</url>
                    <text>Load .eml and Examine the Structure, Attachments, and Related Items</text>
                </link>
            </links2>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetAttachmentHeader" axId="208" outArgName="outFieldValue">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>attachIndex</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fieldName</argName>
                    <objcName>fieldName</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outFieldValue</argName>
                    <objcName>outFieldValue</objcName>
                </arg>
            </args>
            <descrip>Returns the value of a header field (by name) of an attachment.</descrip>
            <args2>
                <arg name="attachIndex" type="int" objcName="index" />
                <arg name="fieldName" type="string" objcName="fieldName" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>email_examine_eml.asp</url>
                    <text>Load .eml and Examine the Structure, Attachments, and Related Items</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetAttachmentSize" axId="209">
            <gType>int</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>Returns the size (in bytes) of the Nth attachment.   The 1st attachment is at index 0.  Returns -1 if there is no attachment at the specified index.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>email_examine_eml.asp</url>
                    <text>Load .eml and Examine the Structure, Attachments, and Related Items</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetAttachmentString" axId="210" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Retrieves an attachment's data as a String. All CRLF sequences will be translated to single newline characters.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetAttachmentStringCrLf" axId="211" outArgName="outStrData">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrData</argName>
                    <objcName>outStrData</objcName>
                </arg>
            </args>
            <descrip>Retrieves an attachment's data as a String. All end-of-lines will be translated to CRLF sequences.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetBcc" axId="212" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns a blind carbon-copy recipient's full email address.</descrip>
            <links2 />
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetBccAddr" axId="213" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the Nth BCC address (only the address part, not the friendly-name part).</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetBccName" axId="214" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the Nth BCC name (only the friendly-name part, not the address part).</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetCC" axId="215" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns a carbon-copy recipient's full email address.</descrip>
            <links2>
                <link linkType="example">
                    <text>Getting TO / CC Email Recipients</text>
                    <url>emailObject_getRecipients.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetCcAddr" axId="216" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the Nth CC address (only the address part, not the friendly-name part).</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetCcName" axId="217" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the Nth CC name (only the friendly-name part, not the address part).</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetDeliveryStatusInfo" axId="218" outArgName="outFieldValue">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fieldName</argName>
                    <objcName>fieldName</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outFieldValue</argName>
                    <objcName>outFieldValue</objcName>
                </arg>
            </args>
            <descrip>If the email is a multipart/report, then it is a delivery status notification.  This method can be used to get individual pieces of information from the message/delivery-status part of the email.  This method should only be called if the IsMultipartReport method returns _TRUE_.
&lt;p&gt;
The ARG1 should be set a string such as "Final-Recipient", "Status", "Action", "Reporting-MTA", etc.

&lt;pre&gt;
Reporting-MTA: dns; XYZ.abc.nl

Final-recipient: RFC822; someEmailAddr@doesnotexist123.nl
Action: failed
Status: 5.4.4
X-Supplementary-Info: &lt; #5.4.4 smtp;554 5.4.4
 SMTPSEND.DNS.NonExistentDomain; nonexistent domain&gt;
&lt;/pre&gt;</descrip>
            <args2>
                <arg name="fieldName" type="string" objcName="fieldName" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>email_examine_eml.asp</url>
                    <text>Load .eml and Examine the Structure, Attachments, and Related Items</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetDsnFinalRecipients" axId="219">
            <gType>StringArray</gType>
            <args />
            <descrip>If the email is a multipart/report, then it is a delivery status notification.  This method can be used to get Final-Recipient values from the message/delivery-status part of the email.  This method should only be called if the IsMultipartReport method returns _TRUE_.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>email_examine_eml.asp</url>
                    <text>Load .eml and Examine the Structure, Attachments, and Related Items</text>
                </link>
            </links2>
        </method>
        <method name="GetDt" axId="220" ax="1" cpp="1" dn="1">
            <gType>CkDateTime</gType>
            <args />
            <descrip>Returns the date/time found in the "Date" header field as a date/time object.</descrip>
            <links2>
                <link linkType="example">
                    <url>email_getDateTime.asp</url>
                    <text>Get Email Date/Time</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetEncryptCert" axId="221">
            <gType>Cert</gType>
            <args />
            <descrip>Returns the certificate that was previously set by SetEncryptCert.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetEncryptedByCert" axId="222">
            <gType>Cert</gType>
            <args />
            <descrip>Returns the certificate associated with a received encrypted email.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetFileContent" axId="223" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>path</argName>
                    <objcName>path</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Reads a file and returns the contents as a String. This is here purely for convenience.</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetHeaderField" axId="224" outArgName="outStrFieldData">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fieldName</argName>
                    <objcName>fieldName</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrFieldData</argName>
                    <objcName>outStrFieldData</objcName>
                </arg>
            </args>
            <descrip>Returns the value of a header field.</descrip>
            <args2>
                <arg name="fieldName" type="string" objcName="fieldName" />
            </args2>
            <links2 />
        </method>
        <method name="GetHeaderFieldName" axId="225" ax="1" cpp="1" dn="1" outArgName="outStrFieldName">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrFieldName</argName>
                    <objcName>outStrFieldName</objcName>
                </arg>
            </args>
            <descrip>Return the name of the Nth header field. The NumHeaderFields() method can be used to get the number of header fields. The GetHeaderField() method can be used to get the value of the field given the field name.  
&lt;p&gt;
The 1st header field is at index 0.  (All Chilkat indexing is 0-based.)</descrip>
            <links2>
                <link linkType="example">
                    <url>email_receivedHeaders.asp</url>
                    <text>Email Received Header Fields</text>
                </link>
            </links2>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
        </method>
        <method name="GetHeaderFieldValue" axId="226" ax="1" cpp="1" dn="1" outArgName="outStrFieldValue">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrFieldValue</argName>
                    <objcName>outStrFieldValue</objcName>
                </arg>
            </args>
            <descrip>Returns the value of the Nth header field.  (Indexing begins at 0)  The number of header fields can be obtained from the NumHeaderFields property.
&lt;p&gt;
The 1st header field is at index 0, the last header field is at index NumHeaderFields-1.  (All Chilkat indexing is 0-based.)</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetHtmlBody" axId="227" outArgName="outStrBody">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrBody</argName>
                    <objcName>outStrBody</objcName>
                </arg>
            </args>
            <descrip>Returns the body having the "text/html" content type.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="GetImapUid" axId="228" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <args />
            <descrip>When email headers are downloaded from an IMAP server (using Chilkat IMAP), a "ckx-imap-uid" header field is added.  The content of this header is the UID or sequence number of the email on the IMAP server.   In addition, a "ckx-imap-isUid" header field is added, and this will have the value YES or NO.  If the value is YES, then ckx-imap-uid contains a UID, if the value is NO, then ckx-imap-uid contains the sequence number.
This method returns the UID if ckx-imap-uid exists and contains a UID, otherwise it returns -1.
&lt;p&gt;
An application that wishes to download the full email would use this UID and then call the Chilkat IMAP object's FetchSingle or FetchSingleAsMime methods.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;If an email was downloaded from the IMAP server in a way such that the UID is not received, then there will be no "ckx-imap-uid" header field and this method would return -1.  For example, if emails are downloaded by sequence numbers via the Imap.FetchSequence method, then UIDs are not used and therefore the email object will not contain this information.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="GetLinkedDomains" axId="229" ax="1" cpp="1" dn="1">
            <gType>StringArray</gType>
            <args />
            <descrip>Parses an HTML email and returns the set of domain names that occur in hyperlinks within the HTML body.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="GetMbHeaderField" axId="230" ax="1" cpp="1" dn="1" outArgName="outBytes">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fieldName</argName>
                    <objcName>fieldName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <argName>outBytes</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>Returns a header field's data in a byte array. If the field was Q or B encoded, this is automatically decoded, and the raw bytes of the field are returned. Call GetHeaderField to retrieve the header field as a Unicode string.
&lt;p&gt;
The 1st header field is at index 0.  (All Chilkat indexing is 0-based.)</descrip>
            <args2>
                <arg name="fieldName" type="string" objcName="fieldName" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetMbHtmlBody" axId="231" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Returns the HTML body converted to a specified charset. If no HTML body exists, the returned byte array is empty. The returned data will be such that not only is the character data converted (if necessary) to the convertToCharset, but the HTML is edited to add or modify the META tag that specifies the charset within the HTML.</descrip>
            <args2>
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetMbPlainTextBody" axId="232" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Returns the plain-text body converted to a specified charset. The return value is a byte array containing multibyte character data.</descrip>
            <args2>
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method name="GetMime" axId="233" outArgName="outStrMime" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrMime</argName>
                    <objcName>outStrMime</objcName>
                </arg>
            </args>
            <descrip>Return the email as MIME text containing the email header, body (or bodies), related items (if any), and all attachments</descrip>
            <links2>
                <link linkType="external" lang="activex">
                    <url>http://www.chilkatforum.com/questions/9342/sql-server-methods-that-return-long-strings</url>
                    <text>Long Strings Returned by ActiveX Methods in SQL Server</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetMimeBinary" axId="234" outArgName="outBytes">
            <gType>bytes</gType>
            <args>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>Returns the full MIME of an email.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="GetNthBinaryPartOfType" ax="1" cpp="1" dn="1" axId="309" outArgName="outBytes">
            <gType>bytes</gType>
            <descrip>Returns the binary bytes of the Nth MIME sub-part having a specified content type (such as "application/pdf".   Indexing begins at 0.   Call GetNumPartsOfType to find out how many MIME sub-parts exist for any given content type.   If ARG3 is _TRUE_, then only MIME sub-parts having a content-disposition of "inline" are included.   If ARG4 is _TRUE_, then MIME sub-parts having a content-disposition of "attachment" are excluded.
&lt;p&gt;
Note: If the email was downloaded as header-only, it will not contain all the parts of the full email.   Also, if downloaded from IMAP excluding attachments, those parts that are the attachments will (of course) be missing.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <argName>contentType</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>contentType</objcName>
                </arg>
                <arg>
                    <argName>inlineOnly</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>inlineOnly</objcName>
                </arg>
                <arg>
                    <argName>excludeAttachments</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>excludeAttachments</objcName>
                </arg>
                <arg>
                    <argName>outBytes</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="contentType" type="string" objcName="contentType" />
                <arg name="inlineOnly" type="bool" objcName="inlineOnly" />
                <arg name="excludeAttachments" type="bool" objcName="excludeAttachments" />
            </args2>
            <links2 />
        </method>
        <method name="GetNthTextPartOfType" axId="307" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <descrip>Returns the text of the Nth MIME sub-part having a specified content type (such as "text/plain".   Indexing begins at 0.   Call GetNumPartsOfType to find out how many MIME sub-parts exist for any given content type.   If ARG3 is _TRUE_, then only MIME sub-parts having a content-disposition of "inline" are included.   If ARG4 is _TRUE_, then MIME sub-parts having a content-disposition of "attachment" are excluded.
&lt;p&gt;
Note: If the email was downloaded as header-only, it will not contain all the parts of the full email.   Also, if downloaded from IMAP excluding attachments, those parts that are the attachments will (of course) be missing.</descrip>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <argName>contentType</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>contentType</objcName>
                </arg>
                <arg>
                    <argName>inlineOnly</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>inlineOnly</objcName>
                </arg>
                <arg>
                    <argName>excludeAttachments</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>excludeAttachments</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <iversion>9.5.0.44</iversion>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="contentType" type="string" objcName="contentType" />
                <arg name="inlineOnly" type="bool" objcName="inlineOnly" />
                <arg name="excludeAttachments" type="bool" objcName="excludeAttachments" />
            </args2>
            <links2 />
        </method>
        <method name="GetNumPartsOfType" ax="1" cpp="1" dn="1" axId="306">
            <gType>int</gType>
            <descrip>Returns the number of MIME sub-parts within the email having a specified content type (such as "text/plain").   If ARG2 is _TRUE_, then only MIME sub-parts having a content-disposition of "inline" are included.   If ARG3 is _TRUE_, then MIME sub-parts having a content-disposition of "attachment" are excluded.
&lt;p&gt;
Note: If the email was downloaded as header-only, it will not contain all the parts of the full email.   Also, if downloaded from IMAP excluding attachments, those parts that are the attachments will (of course) be missing.</descrip>
            <args>
                <arg>
                    <argName>contentType</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>contentType</objcName>
                </arg>
                <arg>
                    <argName>inlineOnly</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>inlineOnly</objcName>
                </arg>
                <arg>
                    <argName>excludeAttachments</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>excludeAttachments</objcName>
                </arg>
            </args>
            <iversion>9.5.0.44</iversion>
            <args2>
                <arg name="contentType" type="string" objcName="contentType" />
                <arg name="inlineOnly" type="bool" objcName="inlineOnly" />
                <arg name="excludeAttachments" type="bool" objcName="excludeAttachments" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetPlainTextBody" axId="236" outArgName="outStrBody">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrBody</argName>
                    <objcName>outStrBody</objcName>
                </arg>
            </args>
            <descrip>Returns the email body having the "text/plain" content type.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="GetRelatedAttr" ax="1" cpp="1" dn="1" axId="304" outArgName="outStr">
            <gType>string</gType>
            <descrip>Returns a header field attribute value from the header field of the Nth related item.</descrip>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <argName>fieldName</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>fieldName</objcName>
                </arg>
                <arg>
                    <argName>attrName</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>attrName</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <iversion>9.5.0.41</iversion>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="fieldName" type="string" objcName="fieldName" />
                <arg name="attrName" type="string" objcName="attrName" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetRelatedContentID" axId="237" outArgName="outStrContentID">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrContentID</argName>
                    <objcName>outStrContentID</objcName>
                </arg>
            </args>
            <descrip>Returns the content ID of a related item contained with the email. Related items are typically images and style-sheets embedded within HTML emails.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>email_examine_eml.asp</url>
                    <text>Load .eml and Examine the Structure, Attachments, and Related Items</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetRelatedContentLocation" axId="238" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the Content-Location of a related item contained with the email. Related items are typically images and style-sheets embedded within HTML emails.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>email_examine_eml.asp</url>
                    <text>Load .eml and Examine the Structure, Attachments, and Related Items</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetRelatedContentType" axId="239" outArgName="outStrContentType">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrContentType</argName>
                    <objcName>outStrContentType</objcName>
                </arg>
            </args>
            <descrip>Returns the content-type of the Nth related content item in an email message.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>email_examine_eml.asp</url>
                    <text>Load .eml and Examine the Structure, Attachments, and Related Items</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetRelatedData" axId="240" outArgName="outBuffer">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBuffer</argName>
                    <objcName>outBuffer</objcName>
                </arg>
            </args>
            <descrip>Returns the content of a related item contained with the email. Related items are typically images and style-sheets embedded within HTML emails.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetRelatedFilename" axId="241" outArgName="outStrFilename">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrFilename</argName>
                    <objcName>outStrFilename</objcName>
                </arg>
            </args>
            <descrip>Returns the filename of a related item contained with the email. Related items are typically images and style-sheets embedded within HTML emails.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>email_examine_eml.asp</url>
                    <text>Load .eml and Examine the Structure, Attachments, and Related Items</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetRelatedString" axId="242" outArgName="outStrData">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrData</argName>
                    <objcName>outStrData</objcName>
                </arg>
            </args>
            <descrip>Returns the text with CR line-endings of a related item contained with the email. Related items are typically images and style-sheets embedded within HTML emails.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetRelatedStringCrLf" axId="243" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the text with CRLF line-endings of a related item contained with the email. Related items are typically images and style-sheets embedded within HTML emails.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetReplacePattern" axId="244" outArgName="outStrPattern">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrPattern</argName>
                    <objcName>outStrPattern</objcName>
                </arg>
            </args>
            <descrip>Returns a replacement pattern previously defined for mail-merge operations.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetReplaceString" axId="245" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns a replacement string for a previously defined pattern/replacement string pair. (This is a mail-merge feature.)</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetReplaceString2" axId="246" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pattern</argName>
                    <objcName>pattern</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns a replacement string for a previously defined pattern/replacement string pair. (This is a mail-merge feature.)</descrip>
            <args2>
                <arg name="pattern" type="string" objcName="pattern" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetReport" axId="247" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>(See the NumReports property.)   Returns the body content of the Nth report within a multipart/report email.   
&lt;p&gt;
Multipart/report is a message type that contains data formatted for a mail server to read. It is split between a text/plain (or some other content/type easily readable) and a message/delivery-status, which contains the data formatted for the mail server to read.
&lt;p&gt;
It is defined in RFC 3462</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>email_examine_eml.asp</url>
                    <text>Load .eml and Examine the Structure, Attachments, and Related Items</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetSignedByCert" axId="248">
            <gType>Cert</gType>
            <args />
            <descrip>Return the certificate used to digitally sign this email.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>pop3_verifySignedEmail.asp</url>
                    <text>POP3 Verify Signed (S/MIME) Email</text>
                </link>
            </links2>
        </method>
        <method name="GetSignedByCertChain" ax="1" cpp="1" dn="1" axId="301">
            <gType>CertChain</gType>
            <descrip>Return the full certificate chain of the certificate used to digitally sign this email.</descrip>
            <args />
            <iversion>9.5.0.40</iversion>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetSigningCert" axId="249">
            <gType>Cert</gType>
            <args />
            <descrip>Return the certificate that will be used to digitally sign this email.  This is the cerficate that was previously set by calling the SetSigningCert method.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetTo" axId="250" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns a "to" recipient's full email address.</descrip>
            <links2>
                <link linkType="example">
                    <text>Getting TO / CC Email Recipients</text>
                    <url>emailObject_getRecipients.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetToAddr" axId="251" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the Nth To address (only the address part, not the friendly-name part).</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetToName" axId="252" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the Nth To name (only the friendly-name part, not the address part).</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="GetXml" axId="253" ax="1" cpp="1" dn="1" outArgName="outStrXml">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStrXml</argName>
                    <objcName>outStrXml</objcName>
                </arg>
            </args>
            <descrip>Convert the email object to an XML document in memory</descrip>
            <links2>
                <link linkType="external" lang="activex">
                    <url>http://www.chilkatforum.com/questions/9342/sql-server-methods-that-return-long-strings</url>
                    <text>Long Strings Returned by ActiveX Methods in SQL Server</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="HasHeaderMatching" axId="254">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fieldName</argName>
                    <objcName>fieldName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>valuePattern</argName>
                    <objcName>valuePattern</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>caseSensitive</argName>
                    <objcName>caseInsensitive</objcName>
                </arg>
            </args>
            <descrip>Returns _TRUE_ if the email has a header field with the specified ARG1 with a value matching ARG2.  Case sensitivity is controlled by ARG3.   The ARG2 may include 0 or more asterisk (wildcard) characters which match 0 or more of any character.</descrip>
            <args2>
                <arg name="fieldName" type="string" objcName="fieldName" />
                <arg name="valuePattern" type="string" objcName="valuePattern" />
                <arg name="caseSensitive" type="bool" objcName="caseInsensitive" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="HasHtmlBody" axId="255">
            <gType>bool</gType>
            <args />
            <descrip>Returns true if the email has an HTML body.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="HasPlainTextBody" axId="256">
            <gType>bool</gType>
            <args />
            <descrip>Returns true if the email has a plain-text body.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsMultipartReport" axId="257">
            <gType>bool</gType>
            <args />
            <descrip>Returns true if the email is a multipart/report email.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="LoadBodyFromFile" axId="297" ax="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <argName>filePath</argName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <argName>isHtml</argName>
                    <objcName>bIsHtml</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <argName>charset</argName>
                </arg>
            </args>
            <descrip>Sets the plain-text or HTML body from the contents of a file.   For an HTML file, the ARG2 argument should be _TRUE_ (otherwise _FALSE_). The character encoding of the file, ,such as utf-8, ansi, etc. is specified by ARG3.</descrip>
            <args2>
                <arg name="filePath" type="string" />
                <arg name="isHtml" type="bool" objcName="bIsHtml" />
                <arg name="charset" type="string" />
            </args2>
            <links2 />
        </method>
        <method name="LoadEml" axId="258" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>mimePath</argName>
                    <objcName>mimePath</objcName>
                </arg>
            </args>
            <descrip>Loads a complete email from a .EML file.  (EML files are simply RFC822 MIME text files.)</descrip>
            <args2>
                <arg name="mimePath" type="string" objcName="mimePath" />
            </args2>
            <links2 />
        </method>
        <method name="LoadTaskResult" ax="1" cpp="1" dn="1" noWinRT="1" status="1" axId="310">
            <gType>bool</gType>
            <descrip>Loads the email object from a completed asynchronous task.</descrip>
            <args>
                <arg>
                    <argName>task</argName>
                    <cppType>CkTask &amp;</cppType>
                    <dnType>Task</dnType>
                    <axType>Task</axType>
                    <objcName>task</objcName>
                </arg>
            </args>
            <iversion>9.5.0.52</iversion>
            <links2>
                <link linkType="example">
                    <url>async_returnObject.asp</url>
                    <text>Async Methods Returning an Object</text>
                </link>
            </links2>
            <args2>
                <arg name="task" type="Task" objcName="task" />
            </args2>
        </method>
        <method name="LoadXml" axId="259" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>xmlPath</argName>
                    <objcName>xmlPath</objcName>
                </arg>
            </args>
            <descrip>Loads an email with the contents of an XML email file.</descrip>
            <args2>
                <arg name="xmlPath" type="string" objcName="xmlPath" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="LoadXmlString" axId="260">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>xmlStr</argName>
                    <objcName>xmlStr</objcName>
                </arg>
            </args>
            <descrip>Loads an email from an XML string (previously obtained by calling the GetXml method).  The contents of the calling email object are erased and replaced with the email contained within the XML string.</descrip>
            <args2>
                <arg name="xmlStr" type="string" objcName="xmlStr" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="QEncodeBytes" axId="261" outArgName="outEncodedStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>inData</objcName>
                </arg>
                <arg>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                    <dnType>string</dnType>
                    <axType>string</axType>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outEncodedStr</argName>
                    <objcName>outEncodedStr</objcName>
                </arg>
            </args>
            <descrip>Takes a byte array of multibyte (non-Unicode) data and returns a Unicode Q-Encoded string.</descrip>
            <args2>
                <arg name="inData" type="bytes" objcName="inData" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="QEncodeString" axId="262" outArgName="outEncodedStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outEncodedStr</argName>
                    <objcName>outEncodedStr</objcName>
                </arg>
            </args>
            <descrip>Takes a Unicode string, converts it to the charset specified in the 2nd parameter, Q-Encodes the converted multibyte data, and returns the encoded Unicode string.</descrip>
            <args2>
                <arg name="str" type="string" objcName="str" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="RemoveAttachedMessage" axId="263">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>idx</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>Removes the Nth message/rfc822 sub-part of the email.  Indexing begins at 0.</descrip>
            <args2>
                <arg name="idx" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="RemoveAttachedMessages" axId="264">
            <gType>void</gType>
            <args />
            <descrip>Removes all message/rfc822 sub-parts of the email object.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="RemoveAttachmentPaths" axId="265">
            <gType>void</gType>
            <args />
            <descrip>Removes path information from all attachment filenames.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="RemoveHeaderField" axId="266">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fieldName</argName>
                    <objcName>fieldName</objcName>
                </arg>
            </args>
            <descrip>Removes by name all occurrences of a header field.</descrip>
            <args2>
                <arg name="fieldName" type="string" objcName="fieldName" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="RemoveHtmlAlternative" axId="267">
            <gType>void</gType>
            <args />
            <descrip>Removes the HTML body from the email (if an HTML body exists).</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="RemovePlainTextAlternative" axId="268">
            <gType>void</gType>
            <args />
            <descrip>Removes the plain-text body from the email (if a plain-text body exists).</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="SaveAllAttachments" axId="269" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dirPath</argName>
                    <objcName>directory</objcName>
                </arg>
            </args>
            <descrip>Save all the attachments of an email to files in a directory specified by ARG1.  The OverwriteExisting property controls whether existing  files are allowed to be overwritten.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; Email attachment filenames can be renamed or modified prior to saving.  The number of attachments is available in the NumAttachments property.  An application can loop over the attachments to get the filename for each by calling GetAttachmentFilename(index).  Each attachment's filename can be set by calling SetAttachmentFilename(index, newFilename).</descrip>
            <links2>
                <link linkType="example">
                    <text>Example: Download and Save Email Attachments (POP3)</text>
                    <url>pop3_saveAttachments.asp</url>
                </link>
                <link linkType="external">
                    <url>http://www.chilkatforum.com/questions/8437/understanding-imap-email-attachments</url>
                    <text>Understanding IMAP Email Attachments</text>
                </link>
            </links2>
            <args2>
                <arg name="dirPath" type="string" objcName="directory" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SaveAttachedFile" axId="270">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dirPath</argName>
                    <objcName>directory</objcName>
                </arg>
            </args>
            <descrip>Saves the Nth email attachment to the directory specified by ARG2.  The  1st attachment is at index 0.  The OverwriteExisting property controls whether existing  files are allowed to be overwritten.</descrip>
            <links2>
                <link linkType="example">
                    <text>Example: Download and Save Email Attachments (POP3)</text>
                    <url>pop3_saveAttachments.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="dirPath" type="string" objcName="directory" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SaveEml" axId="271">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>emlFilePath</argName>
                    <objcName>path</objcName>
                </arg>
            </args>
            <descrip>Convert this email object to EML and save it to a file.</descrip>
            <args2>
                <arg name="emlFilePath" type="string" objcName="path" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SaveRelatedItem" axId="272">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dirPath</argName>
                    <objcName>directory</objcName>
                </arg>
            </args>
            <descrip>Saves the Nth related item to the directory specified by ARG2.  (The 1st related item is at index 0)  Related content items are typically image or style-sheets embedded within an HTML email.  The OverwriteExisting property controls whether existing  files are allowed to be overwritten.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="dirPath" type="string" objcName="directory" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SaveXml" axId="273">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>path</argName>
                    <objcName>path</objcName>
                </arg>
            </args>
            <descrip>Convert this email object to XML and save it to a file.</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetAttachmentCharset" axId="274">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
            </args>
            <descrip>Sets the charset attribute of the content-type header field for a specified attachment.  This can be used if the attachment is a text file that contains text in a non us-ascii charset such as Shift_JIS, iso-8859-2, big5, iso-8859-5, etc.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetAttachmentDisposition" axId="275">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>disposition</argName>
                    <objcName>disposition</objcName>
                </arg>
            </args>
            <descrip>Set's an attachment's disposition.  The default disposition of an attachment is "attachment".  This method is typically called to change the disposition to "inline".  The 1st attachment is at ARG1 0.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="disposition" type="string" objcName="disposition" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetAttachmentFilename" axId="276">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>filename</objcName>
                </arg>
            </args>
            <descrip>Renames a email attachment's filename.  The 1st attachment is at ARG1 0.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="filename" type="string" objcName="filename" />
            </args2>
            <links2 />
        </method>
        <method name="SetBinaryBody" axId="308" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Sets the main body of the email to binary content of any type.  The disposition can be an empty string, "inline", or "attachment".  If a filename is specified, the disposition must be non-empty because the filename is an attribute of the content-disposition header field.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>byteData</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <dnType>bytes</dnType>
                    <axType>bytes</axType>
                    <objcName>byteData</objcName>
                </arg>
                <arg>
                    <argName>contentType</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>contentType</objcName>
                </arg>
                <arg>
                    <argName>disposition</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>disposition</objcName>
                </arg>
                <arg>
                    <argName>filename</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>filename</objcName>
                </arg>
            </args>
            <args2>
                <arg name="byteData" type="bytes" objcName="byteData" />
                <arg name="contentType" type="string" objcName="contentType" />
                <arg name="disposition" type="string" objcName="disposition" />
                <arg name="filename" type="string" objcName="filename" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" windowsOnly="1" noObjC="1" status="1" name="SetCSP" axId="277">
            <gType>bool</gType>
            <ifdef>#if defined(CK_CSP_INCLUDED)</ifdef>
            <args>
                <arg>
                    <axType>Csp</axType>
                    <dnType>Csp</dnType>
                    <cppType>CkCsp &amp;</cppType>
                    <argName>csp</argName>
                    <objcName>csp</objcName>
                </arg>
            </args>
            <descrip>(Only applies to the Microsoft Windows OS)  Sets the Cryptographic Service Provider (CSP) to be used for encryption or digital signing.
&lt;p&gt;
This is not commonly used becaues the default Microsoft CSP is typically appropriate. 
One instance where SetCSP is necessary is when using the Crypto-Pro CSP for the GOST R 34.10-2001 and GOST R 34.10-94 providers.</descrip>
            <args2>
                <arg name="csp" type="Csp" objcName="csp" />
            </args2>
            <links2 />
        </method>
        <method name="SetDecryptCert" cpp="1">
            <gType>bool</gType>
            <descrip>Allows for a certificate to be explicity provided for decryption.  When an email object is loaded via any method, such as LoadEml, SetFromMimeText, SetFromMimeBytes, etc., security layers (signatures and encryption) are automatically unwrapped.  This method could be called prior to calling a method that loads the email.</descrip>
            <iversion>9.5.0.40</iversion>
            <args>
                <arg>
                    <argName>cert</argName>
                    <cppType>CkCert &amp;</cppType>
                    <dnType>Cert</dnType>
                    <axType>Cert</axType>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="0" ax="0" name="SetDecryptCert2">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
                <arg>
                    <axType>PrivateKey</axType>
                    <dnType>PrivateKey</dnType>
                    <cppType>CkPrivateKey &amp;</cppType>
                    <argName>key</argName>
                    <objcName>key</objcName>
                </arg>
            </args>
            <descrip>Allows for a certificate and private key to be explicity specified for decryptoin.  When an email object is loaded via any method, such as LoadEml, SetFromMimeText, SetFromMimeBytes, etc., security layers (signatures and encryption) are automatically unwrapped.  Decryption requires a private key.  On Windows-based systems, the private key is often pre-installed and nothing need be done to provide it because Chilkat will automatically find it and use it.  However, if not on a Windows system, or if the private key was not pre-installed, then it can be provided by this method, or via the AddPfxSourceFile / AddPfxSourceData methods.</descrip>
            <links2>
                <link linkType="external">
                    <text>Multipart/signed Email Handling</text>
                    <url>http://www.cknotes.com/?p=174</url>
                </link>
            </links2>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
                <arg name="key" type="PrivateKey" objcName="key" />
            </args2>
        </method>
        <method name="SetDt" axId="278" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>CkDateTime</axType>
                    <dnType>CkDateTime</dnType>
                    <cppType>CkDateTime &amp;</cppType>
                    <argName>dt</argName>
                    <objcName>dt</objcName>
                </arg>
            </args>
            <descrip>Sets the "Date" header field of the email to have the value of the date/time object provided.</descrip>
            <links2>
                <link linkType="example">
                    <url>emailDateHeaderCurrentTime.asp</url>
                    <text>Set the Email Date Header to the Current System Date/Time</text>
                </link>
            </links2>
            <args2>
                <arg name="dt" type="CkDateTime" objcName="dt" />
            </args2>
        </method>
        <method name="SetEdifactBody" ax="1" cpp="1" dn="1" axId="299">
            <gType>void</gType>
            <descrip>Creates a typical email used to send EDIFACT messages.  Does the following:
&lt;ol&gt;
&lt;li&gt;Sets the email body to the EDIFACT message passed in ARG1.&lt;/li&gt;
&lt;li&gt;Sets the Content-Transfer-Encoding to Base64.&lt;/li&gt;
&lt;li&gt;Set the Content-Type equal to "application/EDIFACT".&lt;/li&gt;
&lt;li&gt;Sets the Content-Type header's name attribute to ARG2.&lt;/li&gt;
&lt;li&gt;Sets the Content-Disposition equal to "attachment".&lt;/li&gt;
&lt;li&gt;Sets the Content-Disposition's "filename" attribute equal to ARG3.&lt;/li&gt;
&lt;li&gt;The EDIFACT message is converted to the charset indicated by ARG4, and encoded using Base64 in the email body.&lt;/li&gt;
&lt;/ol&gt;
The email's subject, recipients, FROM address, and other headers are left unmodified.</descrip>
            <args>
                <arg>
                    <argName>message</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>message</objcName>
                </arg>
                <arg>
                    <argName>name</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <argName>filename</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>filename</objcName>
                </arg>
                <arg>
                    <argName>charset</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>charset</objcName>
                </arg>
            </args>
            <iversion>9.5.0.28</iversion>
            <args2>
                <arg name="message" type="string" objcName="message" />
                <arg name="name" type="string" objcName="name" />
                <arg name="filename" type="string" objcName="filename" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetEncryptCert" axId="279">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <descrip>Set the encryption certificate to be used in encryption.  Use the CreateCS, CertStore, and Cert classes to create a Cert object by either locating a certificate in a certificate store or loading one from a file.</descrip>
            <links2>
                <link linkType="example">
                    <text>Using a .cer Certificate File for Encrypted Email</text>
                    <url>smtp_sendEncryptedCer.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetFromMimeBytes" axId="280">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>mimeBytes</argName>
                    <objcName>mimeBytes</objcName>
                </arg>
            </args>
            <descrip>Loads the email object with the ARG1.  If the email object already contained an email, it is entirely replaced.  The character encoding (such as "utf-8", "iso-8859-1", etc.)  of the bytes is automatically inferred from the content.  If for some reason it is not possible to determine the character encoding, the SetFromMimeBytes2 method may be called to explicitly specify the charset.</descrip>
            <args2>
                <arg name="mimeBytes" type="bytes" objcName="mimeBytes" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetFromMimeBytes2" axId="281">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>mimeBytes</argName>
                    <objcName>mimeBytes</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
            </args>
            <descrip>Loads the email object with the ARG1.  If the email object already contained an email, it is entirely replaced.
&lt;p&gt;
The ARG2 specifies the character encoding of the MIME bytes (such as "utf-8", "iso-8859-1", etc.).</descrip>
            <args2>
                <arg name="mimeBytes" type="bytes" objcName="mimeBytes" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method name="SetFromMimeText" axId="283" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>mimeText</argName>
                    <objcName>mimeText</objcName>
                </arg>
            </args>
            <descrip>Loads an email with the contents of a .eml (i.e. MIME) contained in a string.  The contents of the email object are completely replaced.</descrip>
            <args2>
                <arg name="mimeText" type="string" objcName="mimeText" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetFromXmlText" axId="284">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>xmlStr</argName>
                    <objcName>xmlStr</objcName>
                </arg>
            </args>
            <descrip>Loads an email from an XML string.</descrip>
            <args2>
                <arg name="xmlStr" type="string" objcName="xmlStr" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="SetHtmlBody" axId="285">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>html</argName>
                    <objcName>html</objcName>
                </arg>
            </args>
            <descrip>Sets the HTML body of an email.</descrip>
            <links2>
                <link linkType="example">
                    <url>smtp_to_iphone.asp</url>
                    <text>Send HTML Email with Image to iPhone</text>
                </link>
            </links2>
            <args2>
                <arg name="html" type="string" objcName="html" />
            </args2>
        </method>
        <method name="SetMbHtmlBody" ax="1" cpp="1" dn="1" status="1" axId="286">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>inData</objcName>
                </arg>
            </args>
            <descrip>Sets the HTML email body from a byte array containing character data in the specified character set. This method also updates the email "content-type"header to properly reflect the content type of the body.</descrip>
            <args2>
                <arg name="charset" type="string" objcName="charset" />
                <arg name="inData" type="bytes" objcName="inData" />
            </args2>
            <links2 />
        </method>
        <method name="SetMbPlainTextBody" ax="1" cpp="1" dn="1" status="1" axId="287">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>inData</objcName>
                </arg>
            </args>
            <descrip>Sets the plain-text email body from a byte array containing character data in the specified character set. This method also updates the email "content-type"header to properly reflect the content type of the body.</descrip>
            <args2>
                <arg name="charset" type="string" objcName="charset" />
                <arg name="inData" type="bytes" objcName="inData" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetRelatedFilename" axId="288">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>path</argName>
                    <objcName>filename</objcName>
                </arg>
            </args>
            <descrip>Sets the filename for a related item within the email.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
                <arg name="path" type="string" objcName="filename" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetReplacePattern" axId="289">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pattern</argName>
                    <objcName>pattern</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>replaceString</argName>
                    <objcName>replaceString</objcName>
                </arg>
            </args>
            <descrip>Create a pattern/replacement-text pair for mail-merge.  When the email is sent via the MailMan's SendEmail method, or any other mail-sending method, the patterns are replaced with the replacement strings during the sending process.  Do define multiple replacement patterns, simply call SetReplacePattern once per pattern/replacement string.  (Note: The MailMan's RenderToMime method will also do pattern replacements.  Methods such as SaveEml or GetMime do not replace patterns.)
&lt;p&gt;
Note: Replacement patterns may be placed in any header field, and in both HTML and plain-text email bodies.</descrip>
            <args2>
                <arg name="pattern" type="string" objcName="pattern" />
                <arg name="replaceString" type="string" objcName="replaceString" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetSigningCert" axId="290">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <descrip>Set the certificate to be used in creating a digital signature.  Use the CreateCS, CertStore, and Cert classes to create a Cert object by either locating a certificate in a certificate store or loading one from a file.</descrip>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetSigningCert2" axId="291">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
                <arg>
                    <axType>PrivateKey</axType>
                    <dnType>PrivateKey</dnType>
                    <cppType>CkPrivateKey &amp;</cppType>
                    <argName>key</argName>
                    <objcName>key</objcName>
                </arg>
            </args>
            <descrip>Explicitly sets the certificate and private key to be used for sending digitally signed email.  If the certificate's private key is already installed on the computer, then one may simply call SetSigningCert because the Chilkat component will automatically locate and use the corresponding private key (stored in the Windows Protected Store).  In most cases, if the digital certificate is already installed w/ private key on the computer, it is not necessary to explicitly set the signing certificate at all.  The Chilkat component will automatically locate and use the certificate containing the FROM email address (from the registry-based certificate store where it was installed).</descrip>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
                <arg name="key" type="PrivateKey" objcName="key" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="SetTextBody" axId="292">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>bodyText</argName>
                    <objcName>bodyText</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>contentType</argName>
                    <objcName>contentType</objcName>
                </arg>
            </args>
            <descrip>Sets the body of the email and also sets the Content-Type header field of the ARG2.  If the email is already multipart/alternative, an additional alternative with the indicated Content-Type will be added.  If an alternative with the same Content-Type already exists, it is replaced.</descrip>
            <args2>
                <arg name="bodyText" type="string" objcName="bodyText" />
                <arg name="contentType" type="string" objcName="contentType" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="0" name="UidlEquals">
            <gType>bool</gType>
            <args>
                <arg>
                    <dnType>Email</dnType>
                    <cppType>CkEmail &amp;</cppType>
                    <argName>e</argName>
                    <objcName>e</objcName>
                </arg>
            </args>
            <descrip>True if the caller email has a UIDL that equals the email passed in the argument.</descrip>
            <args2>
                <arg name="e" type="Email" objcName="e" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="UnSpamify" axId="293">
            <gType>void</gType>
            <args />
            <descrip>Unobfuscates emails by undoing what spammers do to obfuscate email.  It removes comments from HTML bodies and unobfuscates hyperlinked URLs.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="UnpackHtml" axId="294">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>unpackDir</argName>
                    <objcName>unpackDir</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>htmlFilename</argName>
                    <objcName>htmlFilename</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>partsSubdir</argName>
                    <objcName>partsSubdir</objcName>
                </arg>
            </args>
            <descrip>Unpacks an HTML email into an HTML file and related files (images and style sheets).  The links within the HTML are updated to point to the files unpacked and saved to disk.</descrip>
            <args2>
                <arg name="unpackDir" type="string" objcName="unpackDir" />
                <arg name="htmlFilename" type="string" objcName="htmlFilename" />
                <arg name="partsSubdir" type="string" objcName="partsSubdir" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="UnzipAttachments" axId="295">
            <gType>bool</gType>
            <args />
            <descrip>Unzips and replaces any Zip file attachments with the expanded contents. As an example, if an email contained a single Zip file containing 3 GIF image files as an attachment, then after calling this method the email would contain 3 GIF file attachments, and the Zip attachment would be gone.If an email contains multiple Zip file attachments, each Zip is expanded and replaced with the contents.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="UseCertVault" ax="1" cpp="1" dn="1" status="1" axId="300">
            <gType>bool</gType>
            <descrip>Adds an XML certificate vault to the object's internal list of sources to be searched for certificates and private keys when encrypting/decrypting or signing/verifying.  Unlike the AddPfxSourceData and AddPfxSourceFile methods, only a single XML certificate vault can be used.  If UseCertVault is called multiple times, only the last certificate vault will be used, as each call to UseCertVault will replace the certificate vault provided in previous calls.</descrip>
            <args>
                <arg>
                    <argName>vault</argName>
                    <cppType>CkXmlCertVault &amp;</cppType>
                    <dnType>XmlCertVault</dnType>
                    <axType>XmlCertVault</axType>
                    <objcName>vault</objcName>
                </arg>
            </args>
            <iversion>9.5.0.40</iversion>
            <args2>
                <arg name="vault" type="XmlCertVault" objcName="vault" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="ZipAttachments" axId="296">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>zipFilename</argName>
                    <objcName>zipFilename</objcName>
                </arg>
            </args>
            <descrip>Replaces all the attachments of an email with a single Zip file attachment having the filename specified.</descrip>
            <args2>
                <arg name="zipFilename" type="string" objcName="zipFilename" />
            </args2>
            <links2 />
        </method>
        <method name="ComputeGlobalKey2" axId="311" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Computes a global unique key for the email.  The key is created by a digest-MD5 hash of the concatenation of the following: 
&lt;pre&gt;
messageID + CRLF + subject + CRLF + from + CRLF + date + CRLF + recipientAddrs

messageID contains the contents of the Message-ID header field.
subject contains the contents of the Subject header field, trimmed of whitespace from both ends, 
    where TAB chars are converted to SPACE chars, and internal whitespace is trimmed so that 
   no more than one SPACE char in a row exists.
from contains the lowercase FROM header email address.
date contains the contents of the DATE header field.
toAddrs contains lowercase TO and CC recipient email addresses, comma separated, with duplicates removed, and sorted 
    in ascending order.  The BCC addresses are NOT included.

(After calling this method, the LastErrorText property can be examined to see the string that was hashed.)
&lt;/pre&gt;
The 16-byte MD5 hash is returned as an encoded string.  The ARG1 determines the encoding:  base64, hex, url, etc.     If ARG2 is _TRUE_, then the 16-byte MD5 hash is folded to 8 bytes with an XOR to produce a shorter key.</descrip>
            <args2>
                <arg name="encoding" type="string" objcName="encoding" />
                <arg name="bFold" type="bool" objcName="bFold" />
            </args2>
            <iversion>9.5.0.59</iversion>
            <links2 />
        </method>
        <method name="GetMimeSb" axId="312" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Return the email as MIME text containing the email header, body (or bodies), related items (if any), and all attachments.  The MIME is appended to the existing contents (if any) of ARG1.</descrip>
            <args2>
                <arg name="sb" type="StringBuilder" objcName="sb" />
            </args2>
            <links2 />
            <iversion>9.5.0.62</iversion>
        </method>
        <method name="GetMimeBd" axId="313" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Return the email as binary MIME containing the email header, body (or bodies), related items (if any), and all attachments.  The MIME is appended to the existing contents (if any) of ARG1.</descrip>
            <args2>
                <arg name="bindat" type="BinData" objcName="bindat" />
            </args2>
            <iversion>9.5.0.62</iversion>
            <links2 />
        </method>
        <method name="SetFromMimeSb" axId="315" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Loads an email with the MIME stored in a StringBuilder object.  The contents of the email object are completely replaced.</descrip>
            <args2>
                <arg name="sb" type="StringBuilder" objcName="sb" />
            </args2>
            <links2 />
            <iversion>9.5.0.62</iversion>
        </method>
        <method name="SetFromMimeBd" axId="316" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Loads an email with the MIME stored in a BinData object.  The contents of the email object are completely replaced.</descrip>
            <args2>
                <arg name="bindat" type="BinData" objcName="bindat" />
            </args2>
            <iversion>9.5.0.62</iversion>
            <links2 />
        </method>
        <method name="AddAttachmentBd" axId="317" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="filename" type="string" objcName="filename" />
                <arg name="binData" type="BinData" objcName="binData" />
                <arg name="contentType" type="string" objcName="contentType" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>email_add_attachment_from_ftp.asp</url>
                    <text>Add Email Attachment from FTP</text>
                </link>
            </links2>
            <iversion>9.5.0.63</iversion>
            <descrip>Adds an attachment using the contents of a BinData object.  If ARG3 is empty, then the content-type will be inferred from the ARG1 extension.</descrip>
        </method>
        <method name="AddRelatedBd" axId="318" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Adds a related item using the contents of a BinData object.  Returns the Content-ID for the newly added relted item.</descrip>
            <args2>
                <arg name="filename" type="string" objcName="filename" />
                <arg name="binData" type="BinData" objcName="binData" />
            </args2>
            <iversion>9.5.0.65</iversion>
            <links2>
                <link linkType="example">
                    <url>email_unpackHtml.asp</url>
                    <text>Unpack HTML Email to Files</text>
                </link>
            </links2>
        </method>
        <method name="AddRelatedBd2" axId="319" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Adds a related item using the contents of a BinData object.  The ARG2 should be set to the filename/path/url used in the corresponding HTML IMG tag's "src" attribute.</descrip>
            <args2>
                <arg name="binData" type="BinData" objcName="binData" />
                <arg name="fileNameInHtml" type="string" objcName="fileNameInHtml" />
            </args2>
            <iversion>9.5.0.65</iversion>
            <links2 />
        </method>
        <method name="GetDigest" axId="321" ax="1" cpp="1" dn="1">
            <gType>Email</gType>
            <descrip>Returns an digest contained within a multipart/digest as an email object.   The 1st digest is at index 0.  Use the NumDigests property to get the number of digests available.
&lt;p&gt;
&lt;b&gt;Note: &lt;/b&gt; This example requires Chilkat v9.5.0.66 or greater.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>parse_multipart_digest_email.asp</url>
                    <text>Parsing a Multipart/Digest Email</text>
                </link>
            </links2>
            <iversion>9.5.0.66</iversion>
        </method>
    </methods>
    <genericName>Email</genericName>
    <description>Represents a complete Email object.</description>
    <clsid>78EBC21F-0841-4D47-9DD4-E324F122205F</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidMidl>3EC2BC0F-8ECB-4008-AEB7-758972455492</uuidMidl>
    <nextAxId>322</nextAxId>
</class>
