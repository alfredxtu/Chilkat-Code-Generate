<?xml version="1.0" encoding="utf-8" ?>
<class XojoModuleId="500368711" license="Bundle" hasEvents="1" baseProgress="1" sourceXmlPath="c:/ck2000/appData/apiDef2/Crypt2.xml">
    <axName>ChilkatCrypt2</axName>
    <dnName>Crypt2</dnName>
    <cppName>CkCrypt2</cppName>
    <properties>
        <property name="AbortCurrent" read="1" write="1" ax="1" cpp="1" dn="1" axId="261">
            <gType>bool</gType>
            <descrip>When set to _TRUE_, causes the currently running method to abort.  Methods that always finish quickly (i.e.have no length file operations or network communications) are not affected.  If no method is running, then this property is automatically reset to _FALSE_ when the next method is called.  When the abort occurs, this property is reset to _FALSE_.  Both synchronous and asynchronous method calls can be aborted.  (A synchronous method call could be aborted by setting this property from a separate thread.)</descrip>
            <iversion>9.5.0.58</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="BlockSize" axId="100" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>The block-size (in bytes) of the selected encryption algorithm.  For example, if the CryptAlgorithm property is set to "aes", the BlockSize property is automatically set to 16.   The block-size for the ARC4 streaming encryption algorithm is 1.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="ByteSwapOnDecrypt" axId="129" read="1" write="1" ax="1" deprecated="1" noxojo="1" noWinRT="1">
            <gType>bool</gType>
            <descrip>Controls whether bytes are 4321 swapped on decryption.  This helps in handling byte-ordering issues with cross-platform applications.</descrip>
            <args2 />
            <links2 />
        </property>
        <property read="1" write="1" name="CadesEnabled" axId="101" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Applies to all methods that create PKCS7 signatures.  To create a CAdES-BES signature, set this property equal to _TRUE_.  The default value of this property is _FALSE_.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>cades_bes.asp</url>
                    <text>CAdES BES Detached Signature</text>
                </link>
                <link linkType="example">
                    <url>cades_bes_attached_signature.asp</url>
                    <text>CAdES BES Attached (Opaque) Signature</text>
                </link>
            </links2>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="CadesSigPolicyHash" axId="102">
            <gType>string</gType>
            <descrip>Applies to all methods that create PKCS7 signatures.  To create a CAdES-EPES signature, set the CadesEnabled property = _TRUE_, and also provide values for each of the following properties: CadesSigPolicyHash, CadesSigPolicyId, and CadesSigPolicyUri.  For example (in pseudo-code): 
&lt;pre&gt;
cryptObj.CadesSigPolicyId = "2.16.76.1.7.1.1.1"
cryptObj.CadesSigPolicyUri = "http://politicas.icpbrasil.gov.br/PA_AD_RB.der"
cryptObj.CadesSigPolicyHash = "rySugyKaMhiMR8Y/o5yuU2A2bF0="
&lt;/pre&gt;
Note: Do NOT use the values above.  They are only provided as an example to show valid values.  For example, the Policy ID is an OID.  The Policy URI is a typically a URL to a DER encoded policy file, and the Policy Hash is a base64 encoded hash.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="CadesSigPolicyId" axId="103">
            <gType>string</gType>
            <descrip>See the description for the CadesSigPolicyHash property above.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="CadesSigPolicyUri" axId="104">
            <gType>string</gType>
            <descrip>See the description for the CadesSigPolicyHash property above.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="Charset" axId="105" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Controls the character encoding of the text encrypted, signed, hashed or compressed.  This property is relevant wherever strings are used as inputs or outputs.&lt;p&gt;
When working with strings, it is important to know the exact bytes that are being encrypted/hashed/signed/compressed.  This is critical when interoperating with other systems.  If your application is sending an encrypted string to another system that will decrypt it, you will need to know the encoding of the string that is expected on the receiving end (after decryption).  If you pass Unicode data (2 byte per character) to the encryptor, subsequent decryption will reproduce the original Unicode.  However, it may be that your program works with Unicode strings, but the recipient of the encrypted data works with iso-8859-1 strings. In such a case, setting the Charset property to "iso-8859-1" causes the character data to be automatically converted to the Charset before being encrypted (or compressed, or hashed, or signed).  The set of valid charsets is listed below:
&lt;pre&gt;&lt;font size="2" face="MS Sans Serif"&gt;
hex
base64
    * "hex" and "base64" are special values that allow for binary (non-text) encoded data to be passed to any method where the input data is a string.
       Rather than converting to an actual charset (such as utf-8, iso-8859-1), the binary data is decoded, and the decoded bytes are passed
        to the underlying encryptor, hashing, signing, etc.
ANSI
us-ascii
unicode
unicodefffe
iso-8859-1
iso-8859-2
iso-8859-3
iso-8859-4
iso-8859-5
iso-8859-6
iso-8859-7
iso-8859-8
iso-8859-9
iso-8859-13
iso-8859-15
windows-874
windows-1250
windows-1251
windows-1252
windows-1253
windows-1254
windows-1255
windows-1256
windows-1257
windows-1258
utf-7
utf-8
utf-32
utf-32be
shift_jis
gb2312
ks_c_5601-1987
big5
iso-2022-jp
iso-2022-kr
euc-jp
euc-kr
macintosh
x-mac-japanese
x-mac-chinesetrad
x-mac-korean
x-mac-arabic
x-mac-hebrew
x-mac-greek
x-mac-cyrillic
x-mac-chinesesimp
x-mac-romanian
x-mac-ukrainian
x-mac-thai
x-mac-ce
x-mac-icelandic
x-mac-turkish
x-mac-croatian
asmo-708
dos-720
dos-862
ibm037
ibm437
ibm500
ibm737
ibm775
ibm850
ibm852
ibm855
ibm857
ibm00858
ibm860
ibm861
ibm863
ibm864
ibm865
cp866
ibm869
ibm870
cp875
koi8-r
koi8-u
&lt;/pre&gt;</descrip>
            <links2>
                <link linkType="example">
                    <url>crypt_encoded_binary_input.asp</url>
                    <text>Using "hex" or "base64" for encoded binary data input.</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="CipherMode" axId="106" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Controls the cipher mode for block encryption algorithms (AES, Blowfish,TwoFish, DES, 3DES, RC2). Possible values are "CBC" (the default) , "ECB", "CTR", "OFB", "GCM", and "CFB". These acronyms have the following meanings:&lt;p&gt; 
&lt;ul&gt;
&lt;li&gt;CBC:  Cipher Block Chaining,&lt;/li&gt;
&lt;li&gt;ECB:  Electronic CookBook&lt;/li&gt;
&lt;li&gt;CTR: Counter Mode&lt;/li&gt;
&lt;li&gt;CFB: Cipher Feedback&lt;/li&gt;
&lt;li&gt;OFB: Output Feedback&lt;/li&gt;
&lt;li&gt;GCM: Galois/Counter Mode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; (see http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation )&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; Prior to Chilkat v9.5.0.55, the CFB mode is only implemented for AES, Blowfish, and DES/3DES, and the CTR mode is only implemented for AES.
&lt;p&gt;
&lt;b&gt;Starting in v9.5.0.55&lt;/b&gt; CFB and OFB modes are useable with all encryption algorithms, and GCM (Galois/Counter Mode) is available with any cipher having a 16-byte block size, such as AES and Twofish.   CFB, OFB, CTR, and GCM modes convert block ciphers into stream ciphers.  In these modes of operation, the PaddingScheme property is unused because no padding occurs.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="CompressionAlgorithm" axId="107" read="1" write="1" ax="1" cpp="1" dn="1" deprecated="1">
            <gType>string</gType>
            <descrip>This property is deprecated.  The only possible value is "BZIP2".  The compression functionality in Crypt2 is legacy and existed long before the general compression functionality that is currently offered in Chilkat.Compression.  The Chilkat.Compression API should be used instead.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="CryptAlgorithm" axId="108" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Selects the encryption algorithm for encrypting and decrypting. Possible values are: "chacha20", "pki", "aes", "blowfish", "blowfish2",  "des", "3des", "rc2", "arc4", "twofish", "pbes1" and "pbes2". The "pki" encryption algorithm isn't a specific algorithm, but instead tells the component to encrypt/decrypt using public-key encryption with digital certificates. The other choices are symmetric encryption algorithms that do not involve digital certificates and public/private keys.  
&lt;p&gt;
The original Chilkat implementation of Blowfish has a 4321 byte-swapping issue (the results are 4321 byte-swapped).  The new implementation ("blowfish2") does not byte swap.  This should be used for compatibility with other Blowfish software.
&lt;p&gt;
Password-based encryption (PBE) is selected by setting this property to "pbes1" or "pbes2".  Password-based encryption is defined in the PKCS5 Password-Based Cryptography Standard at https://tools.ietf.org/html/rfc2898.   If PBE is used, the underlying encryption algorithm is specified by the PbesAlgorithm property.   The underlying encryption (PbesAlgorithm) for PBES1 is limited to 56-bit DES or 64-bit RC2.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;The chacha20 algorithm is introduced in Chilkat v9.5.0.55.</descrip>
            <links2>
                <link linkType="example">
                    <url>chacha20.asp</url>
                    <text>ChaCha20 Encryption</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="EncodingMode" axId="109" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Controls the encoding of binary data to a printable string for many methods. The valid modes are "Base64", "modBase64", "base64url", "Base32", "Base58", "UU", "QP" (for quoted-printable), "URL" (for url-encoding), "Hex", "Q", "B", "url_oauth", "url_rfc1738", "url_rfc2396", "url_rfc3986", "fingerprint", or "decimal".
&lt;p&gt;
The "fingerprint" and"decimal" encodings are introduced in Chilkat v9.5.0.55.  
&lt;p&gt;The "fingerprint" encoding is a lowercase hex encoding where each hex digit is separated by a colon character.  For example: 6a:de:e0:af:56:f8:0c:04:11:5b:ef:4d:49:ad:09:23
&lt;p&gt;The "decimal" encoding is for converting large decimal integers to/from a big-endian binary representation.  For example, the decimal string "72623859790382856" converts to the bytes 0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08.</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Binary Encodings Supported by Chilkat</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="FirstChunk" axId="110" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Chilkat Crypt2 provides the ability to feed the encryption/decryption methods with chunks of data. This allows a large amount of data, or a data stream, to be fed piecemeal for encrypting or decrypting. It applies to all symmetric algorithms currently supported (AES, Blowfish, Twofish, 3DES, RC2, DES, ARC4), and all algorithms supported in the future.

	&lt;p&gt;The default value for both FirstChunk and LastChunk is _TRUE_.  This means when an Encrypt* or Decrypt* method is called, it is both the first and last chunk (i.e. it's the entire amount of data to be encrypted or decrypted).&lt;/p&gt;
	&lt;p&gt;If you wish to feed the data piecemeal, do this:&lt;/p&gt;
	&lt;ol&gt;
	&lt;li&gt;Set FirstChunk = _TRUE_, LastChunk = _FALSE_ for the first chunk of data.&lt;/li&gt;
	&lt;li&gt;For all "middle" chunks (i.e. all chunks except for the final chunk) set FirstChunk = _FALSE_ and LastChunk = _FALSE_. &lt;/li&gt;
	&lt;li&gt;For the final chunk, set FirstChunk = _FALSE_ and LastChunk = _TRUE_&lt;/li&gt;

	&lt;/ol&gt;
	&lt;p&gt;There is no need to worry about feeding data according to the block size of the encryption algorithm.  For example, AES has a block size of 16 bytes.  Data may be fed in chunks of any size.  The Chilkat Crypt2 component will buffer the data.  When the final chunk is passed, the output is padded to the algorithm's block size according to the &lt;strong&gt;PaddingScheme&lt;/strong&gt;.&lt;/p&gt;</descrip>
            <links>
                <link>
                    <text>more info about FirstChunk/LastChunk</text>
                    <url>http://www.chilkatsoft.com/p/p_327.asp</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>more info about FirstChunk/LastChunk</text>
                    <url>http://www.chilkatsoft.com/p/p_327.asp</url>
                </link>
                <link linkType="example">
                    <url>aes_dataStream.asp</url>
                    <text>Encrypting/decrypting a data stream.</text>
                </link>
                <link linkType="example">
                    <url>encrypt_file_chunks_cbc.asp</url>
                    <text>Encrypt File in Chunks using AES CBC</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="HashAlgorithm" axId="111" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Selects the hash algorithm used by methods that create hashes.  The valid choices are "sha1", "sha256", "sha384", "sha512", "md2", "md5", "haval", "ripemd128", "ripemd160","ripemd256", or "ripemd320".
&lt;p&gt;Note: SHA-2 designates a set of cryptographic hash functions that includes SHA-256, SHA-384, and SHA-512.  Chilkat by definition supports "SHA-2" because it supports these algorithms.
&lt;p&gt;
Note: The HAVAL hash algorithm is affected by two other properties: HavalRounds and KeyLength.
&lt;ul&gt;&lt;li&gt;The HavalRounds may have values of 3, 4, or 5.
&lt;li&gt;The KeyLength may have values of 128, 160, 192, 224, or 256.&lt;/ul&gt;</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HavalRounds" axId="112">
            <gType>int</gType>
            <descrip>Applies to the HAVAL hash algorithm only and must be set to the integer value 3, 4, or 5.    The default value is 3.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HeartbeatMs" axId="113">
            <gType>int</gType>
            <descrip>The number of milliseconds between each AbortCheck event callback.  The AbortCheck callback allows an application to abort some methods call prior to completion.  If HeartbeatMs is 0 (the default), no AbortCheck event callbacks will fire.
&lt;p&gt;
The methods with event callbacks are: CkDecryptFile, CkEncryptFile, HashFile, and HashFileENC.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="IV" axId="114" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bytes</gType>
            <descrip>The initialization vector to be used with symmetric encryption algorithms (AES, Blowfish, Twofish, etc.).  If left unset, no initialization vector is used.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="IncludeCertChain" axId="115">
            <gType>bool</gType>
            <descrip>Only applies when creating digital signatures.  If _TRUE_ (the default), then additional certificates (if any) in the chain of authentication are included in the PKCS7 digital signature.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="InitialCount" read="1" write="1" ax="1" cpp="1" dn="1" axId="249">
            <gType>int</gType>
            <descrip>The initial counter for the ChaCha20 encryption algorithm.  The default value is 0.</descrip>
            <iversion>9.5.0.55</iversion>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="IterationCount" axId="116">
            <gType>int</gType>
            <descrip>Iteration count to be used with password-based encryption (PBE).  Password-based encryption is defined in the PKCS5 Password-Based Cryptography Standard at http://www.rsa.com/rsalabs/node.asp?id=2127
&lt;p&gt;
The purpose of the iteration count is to increase the computation required to encrypt and decrypt.  A larger iteration count makes cracking via exhaustive search more difficult.  The default value is 1024.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="KeyLength" axId="117" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>The key length in bits for symmetric encryption algorithms.  The default value is 256.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="LastChunk" axId="118">
            <gType>bool</gType>
            <descrip>(See the description for the FirstChunk property.)</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>aes_dataStream.asp</url>
                    <text>Encrypting/decrypting a data stream.</text>
                </link>
                <link linkType="example">
                    <url>encrypt_file_chunks_cbc.asp</url>
                    <text>Encrypt File in Chunks using AES CBC</text>
                </link>
            </links2>
        </property>
        <property name="MacAlgorithm" axId="250" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Selects the MAC algorithm to be used for any of the Mac methods, such as MacStringENC, MacBytes, etc.  The default value is "hmac".  Possible values are "hmac" and "poly1305".</descrip>
            <iversion>9.5.0.55</iversion>
            <links2>
                <link linkType="example">
                    <url>poly1305.asp</url>
                    <text>Poly1305 MAC</text>
                </link>
                <link linkType="example">
                    <url>hmac-sha256.asp</url>
                    <text>Demonstrates HMAC SHA256</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="NumSignerCerts" axId="119" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>This property is set when a digital signature is verified.  It contains the number of signer certificates.  Each signing certificate can be retrieved by calling the GetSignerCert method, passing an index from 0 to NumSignerCerts-1.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>pkcs7_extract_signature_digest.asp</url>
                    <text>Extract PKCS7 Signature Digest</text>
                </link>
                <link linkType="example">
                    <url>crypt_verify_opaque_signature_get_certs.asp</url>
                    <text>Verify Opaque Signature and Retrieve Signing Certificates</text>
                </link>
            </links2>
        </property>
        <property read="1" write="1" name="PaddingScheme" axId="120" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>The padding scheme used by block encryption algorithms such as AES (Rijndael), Blowfish, Twofish, RC2, DES, 3DES, etc.  Block encryption algorithms pad encrypted data to a multiple of algorithm's block size. The default value of this property is 0.
&lt;p&gt;Possible values are:
&lt;br&gt;
&lt;br&gt; &lt;b&gt;0&lt;/b&gt; = RFC 1423 padding scheme: Each padding byte is set to the number of padding bytes. If the data is already a multiple of algorithm's block size bytes, an extra block is appended each having a value equal to the block size. (for example, if the algorithm's block size is 16, then 16 bytes having the value 0x10 are added.).  (This is also known as PKCS5 padding: PKCS #5 padding string consists of a sequence of bytes, each of which is equal to the total number of padding bytes added. )
&lt;br&gt;&lt;br&gt; &lt;b&gt;1&lt;/b&gt; = FIPS81 (Federal Information Processing Standards 81) where the last byte contains the number of padding bytes, including itself, and the other padding bytes are set to random values.
&lt;br&gt;&lt;br&gt; &lt;b&gt;2&lt;/b&gt; = Each padding byte is set to a random value. The decryptor must know how many bytes are in the original unencrypted data.
&lt;br&gt;&lt;br&gt; &lt;b&gt;3&lt;/b&gt; = Pad with NULLs. (If already a multiple of the algorithm's block size, no padding is added).
&lt;br&gt;&lt;br&gt; &lt;b&gt;4&lt;/b&gt; = Pad with SPACE chars(0x20). (If already a multiple of algorithm's block size, no padding is added).</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="PbesAlgorithm" axId="121">
            <gType>string</gType>
            <descrip>If the CryptAlgorithm property is set to "pbes1" or "pbes2", this property specifies the underlying encryption algorithm to be used with password-based encryption (PBE).  Password-based encryption is defined in the PKCS5 Password-Based Cryptography Standard at http://www.rsa.com/rsalabs/node.asp?id=2127</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="PbesPassword" axId="122">
            <gType>string</gType>
            <descrip>The password to be used with password-based encryption (PBE).  Password-based encryption is defined in the PKCS5 Password-Based Cryptography Standard at http://www.rsa.com/rsalabs/node.asp?id=2127</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="Pkcs7CryptAlg" axId="123" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>When the CryptAlgorithm property is "PKI" to select PKCS7 public-key encryption, this selects the underlying symmetric encryption algorithm. Possible values are: "aes", "des", "3des", and "rc2".  The default value is "aes".</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>rsaes_oaep_encrypt_string.asp</url>
                    <text>RSAES-OAEP Encrypt String with AES-128 Content Encryption and SHA256</text>
                </link>
            </links2>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Rc2EffectiveKeyLength" axId="124">
            <gType>int</gType>
            <descrip>The effective key length (in bits) for the RC2 encryption algorithm.  When RC2 is used, both the KeyLength and Rc2EffectiveKeyLength properties should be set.  For RC2, both should be between 8 and 1024 (inclusive).</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="Salt" axId="125" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bytes</gType>
            <descrip>The salt to be used with password-based encryption (PBE).  Password-based encryption is defined in the PKCS5 Password-Based Cryptography Standard at http://www.rsa.com/rsalabs/node.asp?id=2127
&lt;p&gt;To clarify: This property is used in encryption when the CryptAlgorithm is set to "pbes1" or "pbes2".  Also note that it is not used by the Pbkdf1 or Pbkdf2 methods, as the salt is passed in an argument to those methods.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="SecretKey" axId="126" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bytes</gType>
            <descrip>The binary secret key used for symmetric encryption (Aes, Blowfish, Twofish, ChaCha20, ARC4, 3DES, RC2, etc.).  The secret key must be identical for decryption to succeed.  The length in bytes of the SecretKey must equal the KeyLength/8.</descrip>
            <links2>
                <link linkType="example">
                    <url>generate_encryption_key.asp</url>
                    <text>Generate Encryption Key</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="UuFilename" axId="127">
            <gType>string</gType>
            <descrip>When UU encoding, this is the filename to be embedded in UU encoded output.  The default is "file.dat".     When UU decoding, this is the filename found in the UU encoded input.</descrip>
            <links>
                <link>
                    <text>UU Encoding and Decoding</text>
                    <url_asp>http://www.example-code.com/asp/uuencode.asp</url_asp>
                    <url_sql>http://www.example-code.com/sql/uuencode.asp</url_sql>
                    <url_cs>http://www.example-code.com/csharp/uuencode.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/uuencode.asp</url_cpp>
                    <url_mfc>http://www.example-code.com/mfc/uuencode.asp</url_mfc>
                    <url_c>http://www.example-code.com/C/uuencode.asp</url_c>
                    <url_delphi>http://www.example-code.com/delphi/uuencode.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/uuencode.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/uuencode.asp</url_java>
                    <url_perl>http://www.example-code.com/perl/uuencode.asp</url_perl>
                    <url_php>http://www.example-code.com/php/uuencode.asp</url_php>
                    <url_python>http://www.example-code.com/python/uuencode.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/uuencode.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/uuencode.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/uuencode.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/uuencode.asp</url_vbscript>
                    <url_android>http://www.example-code.com/android/uuencode.asp</url_android>
                    <url_objc>http://www.example-code.com/objc/uuencode.asp</url_objc>
                    <url_ios>http://www.example-code.com/ios/uuencode.asp</url_ios>
                    <url_phpext>http://www.example-code.com/phpExt/uuencode.asp</url_phpext>
                    <url_powershell>http://www.example-code.com/powershell/uuencode.asp</url_powershell>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>UU Encoding and Decoding</text>
                    <url>uuencode.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="UuMode" axId="128">
            <gType>string</gType>
            <descrip>When UU encoding, this is the file permissions mode to be embedded in UU encoded output.  The default is "644".   When UU decoding, this property is set to the mode found in the UU encoded input.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="BCryptWorkFactor" axId="262" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <args2 />
            <links2 />
            <iversion>9.5.0.65</iversion>
            <descrip>The BCrypt work factor to be used for the BCryptHash and BCryptVerify.   This is the log2 of the number of rounds of hashing to apply.  For example, if the work (cost) factor is 12, then 2^12 rounds of hashing are applied.  The purpose of this cost factor is to make the BCrypt computation expensive enought to prevent brute-force attacks.  (Any complaints about BCrypt "not being fast enough" will be ignored.)
&lt;p&gt;
This property must have a value ranging from 4 to 31 inclusive. 
&lt;p&gt;
The default value is 10.</descrip>
        </property>
        <property name="SigningAlg" axId="269" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>This property selects the signature algorithm for the OpaqueSign*, Sign*, and CreateDetachedSignature, CreateP7M, and CreateP7S methods.  The default value is "PKCS1-v1_5".  This can be set to "RSASSA-PSS" (or simply "pss") to use the RSASSA-PSS signature scheme.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; This property only applies when the private key is an RSA private key.  It does not apply for ECC or DSA private keys.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>pkcs7_sign_string_rsassa_pss.asp</url>
                    <text>RSASSA-PSS Sign String to Create Base64 PCKS7 Signature</text>
                </link>
            </links2>
            <iversion>9.5.0.67</iversion>
        </property>
        <property name="OaepHash" axId="270" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>rsaes_oaep_encrypt_string.asp</url>
                    <text>RSAES-OAEP Encrypt String with AES-128 Content Encryption and SHA256</text>
                </link>
            </links2>
            <descrip>Selects the hash algorithm for use within OAEP padding when encrypting using "pki" with RSAES-OAEP.  The valid choices are "sha1", "sha256", "sha384", "sha512",</descrip>
            <iversion>9.5.0.67</iversion>
        </property>
        <property name="OaepPadding" axId="271" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Selects the RSA encryption scheme when encrypting using "pki" (with a certificate and private key).  The default value is _FALSE_, which selects RSAES_PKCS1-V1_5.   If set to _TRUE_, then RSAES_OAEP is used.</descrip>
            <args2 />
            <iversion>9.5.0.67</iversion>
            <links2>
                <link linkType="example">
                    <url>rsaes_oaep_encrypt_string.asp</url>
                    <text>RSAES-OAEP Encrypt String with AES-128 Content Encryption and SHA256</text>
                </link>
            </links2>
        </property>
        <property name="OaepMgfHash" axId="283" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Selects the MGF hash algorithm for use within OAEP padding when encrypting using "pki" with RSAES-OAEP.  The valid choices are "sha1", "sha256", "sha384", "sha512",  The default is "sha1".</descrip>
            <args2 />
            <iversion>9.5.0.71</iversion>
            <links2 />
        </property>
    </properties>
    <methods>
        <method name="AddEncryptCert" axId="130" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <descrip>Adds a certificate to be used for public-key encryption.  (To use public-key encryption with digital certificates, set the CryptAlgorithm property = "pki".)   To  encrypt with more than one certificate , call AddEncryptCert once per certificate.</descrip>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>pkcs7_encrypt_with_multiple_certs.asp</url>
                    <text>Encrypt a file to a PKCS7 encrypted message using multiple certificates from different users</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddPfxSourceData" axId="131">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>pfxBytes</argName>
                    <objcName>pfxData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pfxPassword</argName>
                    <objcName>password</objcName>
                </arg>
            </args>
            <descrip>Adds a PFX to the object's internal list of sources to be searched for certificates and private keys when decrypting.  Multiple PFX sources can be added by calling this method once for each.  (On the Windows operating system, the registry-based certificate stores are also automatically searched, so it is commonly not required to explicitly add PFX sources.)
&lt;p&gt;
The ARG1 contains the bytes of a PFX file  (also known as PKCS12 or .p12).</descrip>
            <args2>
                <arg name="pfxBytes" type="bytes" objcName="pfxData" />
                <arg name="pfxPassword" type="string" objcName="password" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddPfxSourceFile" axId="132">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pfxFilePath</argName>
                    <objcName>pfxFilePath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pfxPassword</argName>
                    <objcName>password</objcName>
                </arg>
            </args>
            <descrip>Adds a PFX file to the object's internal list of sources to be searched for certificates and private keys when decrypting.  Multiple PFX files can be added by calling this method once for each.  (On the Windows operating system, the registry-based certificate stores are also automatically searched, so it is commonly not required to explicitly add PFX sources.)
&lt;p&gt;
The ARG1 contains the bytes of a PFX file  (also known as PKCS12 or .p12).</descrip>
            <args2>
                <arg name="pfxFilePath" type="string" objcName="pfxFilePath" />
                <arg name="pfxPassword" type="string" objcName="password" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="ByteSwap4321" axId="133" outArgName="outBytes">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>data</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>Convenience method for byte swapping between little-endian byte ordering and big-endian byte ordering.</descrip>
            <args2>
                <arg name="data" type="bytes" objcName="data" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="BytesToString" axId="134" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>inData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Utility method to convert bytes to a string -- interpreting the bytes according to the charset specified.</descrip>
            <args2>
                <arg name="inData" type="bytes" objcName="inData" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="CkDecryptFile" axId="135">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>srcFile</argName>
                    <objcName>srcFile</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>destFile</argName>
                    <objcName>destFile</objcName>
                </arg>
            </args>
            <descrip>File-to-file decryption.  There is no limit to the size of the file that can be decrypted because the component will operate in streaming mode internally.</descrip>
            <args2>
                <arg name="srcFile" type="string" objcName="srcFile" />
                <arg name="destFile" type="string" objcName="destFile" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>crypt_aes_encrypt_file.asp</url>
                    <text>AES Encrypt and Decrypt a File</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="CkEncryptFile" axId="136">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>srcFile</argName>
                    <objcName>srcFile</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>destFile</argName>
                    <objcName>destFile</objcName>
                </arg>
            </args>
            <descrip>File-to-file encryption.  There is no limit to the size of the file that can be encrypted because the component will operate in streaming mode internally.</descrip>
            <args2>
                <arg name="srcFile" type="string" objcName="srcFile" />
                <arg name="destFile" type="string" objcName="destFile" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>crypt_aes_encrypt_file.asp</url>
                    <text>AES Encrypt and Decrypt a File</text>
                </link>
                <link linkType="example">
                    <url>encrypt_file_using_x509_certificate.asp</url>
                    <text>Encrypt File using X.509 Certificate using AES in CBC Mode</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="ClearEncryptCerts" axId="137">
            <gType>void</gType>
            <args />
            <descrip>Clears the internal list of digital certificates to be used for public-key encryption.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="CompressBytes" axId="138" outArgName="outData" ax="1" cpp="1" dn="1">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Bzip2 compresses a byte array and returns the compressed bytes. 
&lt;p&gt;
This is a legacy method that should not be used in new development.  It will not be marked as deprecated or removed from future APIs because existing applications may have data already compressed using this method.  
&lt;p&gt;
The output of this method includes an 8-byte header  composed of a 4-byte magic number (0xB394A7E1) and the 4-byte length of the uncompressed data.</descrip>
            <args2>
                <arg name="data" type="bytes" objcName="bData" />
            </args2>
            <links2 />
        </method>
        <method name="CompressBytesENC" axId="139" outArgName="outStr" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Same as CompressBytes, except an encoded string is returned.   The output encoding is specified by the EncodingMode property.</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
            </links2>
            <args2>
                <arg name="data" type="bytes" objcName="bData" />
            </args2>
        </method>
        <method name="CompressString" axId="140" outArgName="outData" ax="1" cpp="1" dn="1">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Compresses a string and returns the compressed bytes. Prior to compressing, the string is converted to a byte representation such as utf-8, utf-16, etc. as determined by the Charset property.  Otherwise, this method is the same as the CompressBytes method.</descrip>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
            <links2 />
        </method>
        <method name="CompressStringENC" axId="141" outArgName="outStr" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
                <link linkType="example">
                    <url>crypt2_compression.asp</url>
                    <text>Crypt2 Compression Example</text>
                </link>
            </links2>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
            <descrip>Compresses a string and returns the encoded compressed bytes. Prior to compressing, the string is converted to a byte representation such as utf-8, utf-16, etc. as determined by the Charset property.  The output encoding is specified by the EncodingMode property. Otherwise, this method is the same as the CompressBytes method.</descrip>
        </method>
        <method name="CrcBytes" ax="1" cpp="1" dn="1" axId="238">
            <gType>unsigned long</gType>
            <descrip>Calculates a CRC for in-memory byte data.   To compute the CRC used in the Zip file format, pass "CRC-32" for the ARG1.   (The ARG1 argument provides the flexibility to add additional CRC algorithms on an as-needed basis in the future.)</descrip>
            <iversion>9.5.0.38</iversion>
            <args>
                <arg>
                    <argName>crcAlg</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>crcAlg</objcName>
                </arg>
                <arg>
                    <argName>byteData</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <dnType>bytes</dnType>
                    <axType>bytes</axType>
                    <objcName>byteData</objcName>
                </arg>
            </args>
            <args2>
                <arg name="crcAlg" type="string" objcName="crcAlg" />
                <arg name="byteData" type="bytes" objcName="byteData" />
            </args2>
            <links2 />
        </method>
        <method name="CrcFile" ax="1" cpp="1" dn="1" events="1" axId="237">
            <gType>unsigned long</gType>
            <descrip>Calculates a CRC for the contents of a file.   To compute the CRC used in the Zip file format, pass "CRC-32" for the ARG1.   (The ARG1 argument provides the flexibility to add additional CRC algorithms on an as-needed basis in the future.)   A value of 0 is returned if the file is unable to be read.   Given that there is a 1 in 4 billion chance of having an actual CRC of 0, an application might choose to react to a 0 return value by testing to see if the file can be opened and read.</descrip>
            <iversion>9.5.0.38</iversion>
            <args>
                <arg>
                    <argName>crcAlg</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>crcAlg</objcName>
                </arg>
                <arg>
                    <argName>path</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>path</objcName>
                </arg>
            </args>
            <args2>
                <arg name="crcAlg" type="string" objcName="crcAlg" />
                <arg name="path" type="string" objcName="path" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="CreateDetachedSignature" axId="142">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inFilePath</argName>
                    <objcName>inFile</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>sigFilePath</argName>
                    <objcName>sigFile</objcName>
                </arg>
            </args>
            <descrip>Digitally signs a file and writes the digital signature to a separate output file (a PKCS#7 signature file).  The input file (ARG1) is unmodified. 
A certificate for signing must be specified by calling SetSigningCert or SetSigningCert2 prior to calling this method.
&lt;p&gt;
This method is equivalent to CreateP7S.  The CreateP7S method was added to clarify the format of the signature file that is created.</descrip>
            <args2>
                <arg name="inFilePath" type="string" objcName="inFile" />
                <arg name="sigFilePath" type="string" objcName="sigFile" />
            </args2>
            <links2 />
        </method>
        <method name="CreateP7M" axId="143" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inFilename</argName>
                    <objcName>inPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>p7mPath</argName>
                    <objcName>p7mPath</objcName>
                </arg>
            </args>
            <descrip>Digitally signs a file and creates a .p7m (PKCS #7 Message) file that contains both the signature and original file content.  The input file (ARG1) is unmodified. 
A certificate for signing must be specified by calling SetSigningCert or SetSigningCert2 prior to calling this method.
&lt;p&gt;To sign with a particular hash algorithm, set the HashAlgorithm property.   Valid hash algorithms for signing are "sha256", "sha1", "sha384", "sha512", "md5", and "md2".</descrip>
            <args2>
                <arg name="inFilename" type="string" objcName="inPath" />
                <arg name="p7mPath" type="string" objcName="p7mPath" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>cades_bes_attached_signature.asp</url>
                    <text>CAdES BES Attached (Opaque) Signature</text>
                </link>
                <link linkType="example">
                    <url>p7m_to_xml.asp</url>
                    <text>Examine the Contents of a .p7m by Converting to XML</text>
                </link>
                <link linkType="example" windowsOnly="1">
                    <url>crypt_create_p7m_using_installed_cert.asp</url>
                    <text>Create P7M Using Pre-Installed Windows Certificate</text>
                </link>
            </links2>
        </method>
        <method name="CreateP7S" axId="144" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inFilename</argName>
                    <objcName>inPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>p7sPath</argName>
                    <objcName>p7sPath</objcName>
                </arg>
            </args>
            <descrip>Digitally signs a file and creates a .p7s (PKCS #7 Signature) signature file.  The input file (ARG1) is unmodified.  The output file (ARG2) contains only the signature and not the original data. 
A certificate for signing must be specified by calling SetSigningCert or SetSigningCert2 prior to calling this method.
&lt;p&gt;To sign with a particular hash algorithm, set the HashAlgorithm property.   Valid hash algorithms for signing are "sha256", "sha1", "sha384", "sha512", "md5", and "md2".</descrip>
            <args2>
                <arg name="inFilename" type="string" objcName="inPath" />
                <arg name="p7sPath" type="string" objcName="p7sPath" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>cades_bes.asp</url>
                    <text>CAdES BES Detached Signature</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="Decode" axId="145" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encoding</argName>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Decode binary data from an encoded string.  The ARG2 can be set to any of the following strings: "base64", "hex", "quoted-printable", "url", "base32", "Q", "B", "url_rc1738", "url_rfc2396", "url_rfc3986", "url_oauth", "uu",  "modBase64", or "html" (for HTML entity encoding).</descrip>
            <args2>
                <arg name="str" type="string" objcName="str" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
            <links2 />
        </method>
        <method name="DecodeString" axId="146" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inStr</argName>
                    <objcName>inStr</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encoding</argName>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Decodes from an encoding back to the original string.  The ARG3 can be set to any of the following strings: "base64", "hex", "quoted-printable", "url", "base32", "Q", "B", "url_rc1738", "url_rfc2396", "url_rfc3986", "url_oauth", "uu",  "modBase64", or "html" (for HTML entity encoding).</descrip>
            <links2>
                <link linkType="example">
                    <url>uuencode.asp</url>
                    <text>UU Encoding and Decoding</text>
                </link>
            </links2>
            <args2>
                <arg name="inStr" type="string" objcName="inStr" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
        </method>
        <method name="DecryptBytes" axId="147" ax="1" cpp="1" dn="1" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Decrypts a byte array and returns the unencrypted byte array.  The property settings used when encrypting the data must match the settings when decrypting.  Specifically, the CryptAlgorithm, CipherMode, PaddingScheme, KeyLength, IV, and SecretKey properties must match.</descrip>
            <links2>
                <link linkType="external" lang="python">
                    <url>http://www.chilkatforum.com/questions/8996/python-byte-data</url>
                    <text>Python Methods Returning Binary Data</text>
                </link>
            </links2>
            <args2>
                <arg name="data" type="bytes" objcName="bData" />
            </args2>
        </method>
        <method name="DecryptBytesENC" axId="148" ax="1" cpp="1" dn="1" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Decrypts string-encoded encrypted data and returns the unencrypted byte array.  Data encrypted  with EncryptBytesENC can be decrypted with this method.  The property settings used when encrypting the data must match the settings when decrypting.  Specifically, the EncodingMode, CryptAlgorithm, CipherMode, PaddingScheme, KeyLength, IV, and SecretKey properties must match.</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
            </links2>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="DecryptEncoded" axId="149" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encodedEncryptedData</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Encrypted data is passed to this method as an encoded string (base64, hex, etc.).  This method first decodes the input data according to the EncodingMode property setting.  It then decrypts and re-encodes using the EncodingMode setting, and returns the decrypted data in encoded string form.</descrip>
            <links2>
                <link linkType="example">
                    <url>crypt2_aes_gcm.asp</url>
                    <text>AEAD AES 128-bit GCM</text>
                </link>
            </links2>
            <args2>
                <arg name="encodedEncryptedData" type="string" objcName="str" />
            </args2>
        </method>
        <method name="DecryptStream" ax="1" cpp="1" dn="1" events="1" status="1" axId="260">
            <gType>bool</gType>
            <descrip>Decrypts a stream.  Internally, the ARG1's source is read, decrypted, and the decrypted data written to the ARG1's sink.  It does this in streaming fashion.  Extremely large or even infinite streams can be decrypted with stable ungrowing memory usage.</descrip>
            <args>
                <arg>
                    <argName>strm</argName>
                    <cppType>CkStream &amp;</cppType>
                    <dnType>Stream</dnType>
                    <axType>Stream</axType>
                    <objcName>strm</objcName>
                </arg>
            </args>
            <iversion>9.5.0.56</iversion>
            <links2>
                <link linkType="example">
                    <url>stream_encryption.asp</url>
                    <text>Streaming Encryption</text>
                </link>
            </links2>
            <args2>
                <arg name="strm" type="Stream" objcName="strm" />
            </args2>
        </method>
        <method name="DecryptString" axId="150" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>The reverse of EncryptString.&lt;p&gt; Decrypts encrypted byte data and returns the original string. The property settings used when encrypting the string must match the settings when decrypting. Specifically, the Charset, CryptAlgorithm, CipherMode, PaddingScheme, KeyLength, IV, and SecretKey properties must match.</descrip>
            <links2>
                <link linkType="external">
                    <text>Explaining the Importance of the Charset</text>
                    <url>http://www.chilkatforum.com/questions/316/utf-8-characters-not-encrypting</url>
                </link>
            </links2>
            <args2>
                <arg name="data" type="bytes" objcName="bData" />
            </args2>
        </method>
        <method name="DecryptStringENC" axId="151" outArgName="outStr" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>The reverse of EncryptStringENC.&lt;p&gt; Decrypts string-encoded encrypted data and returns the original string. The property settings used when encrypting the string must match the settings when decrypting. Specifically, the Charset, EncodingMode, CryptAlgorithm, CipherMode, PaddingScheme, KeyLength, IV, and SecretKey properties must match.</descrip>
            <links2>
                <link linkType="external">
                    <text>Explaining the Importance of the Charset</text>
                    <url>http://www.chilkatforum.com/questions/316/utf-8-characters-not-encrypting</url>
                </link>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
            </links2>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
        </method>
        <method name="Encode" axId="152" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>byteData</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encoding</argName>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Encode binary data to base64, hex, quoted-printable, or URL-encoding.  The ARG2 can be set to any of the following strings: "base64", "hex", "quoted-printable" (or "qp"), "url", "base32", "Q", "B", "url_rc1738", "url_rfc2396", "url_rfc3986", "url_oauth", "uu",  "modBase64", or "html" (for HTML entity encoding).</descrip>
            <args2>
                <arg name="byteData" type="bytes" objcName="bData" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
            <links2 />
        </method>
        <method name="EncodeBytes" cpp="1" noSwig="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>const void *</cppType>
                    <argName>pByteData</argName>
                    <objcName>pByteData</objcName>
                </arg>
                <arg>
                    <cppType>unsigned long</cppType>
                    <argName>szByteData</argName>
                    <objcName>szByteData</objcName>
                </arg>
                <arg>
                    <cppType>const char *</cppType>
                    <argName>encoding</argName>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Encode binary data to base64, hex, quoted-printable, or URL-encoding.  The ARG3 can be set to any of the following strings: "base64", "hex", "quoted-printable", "url", "base32", "Q", "B", "url_rc1738", "url_rfc2396", "url_rfc3986", "url_oauth", "uu",  "modBase64", or "html" (for HTML entity encoding).   
&lt;p&gt;The ARG1 points to the bytes to be encoded.  The ARG2 specifies the number of bytes to encode.</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
            </links2>
            <args2>
                <arg name="pByteData" type="cppBytes" objcName="pByteData" />
                <arg name="szByteData" type="unsigned long" objcName="szByteData" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
        </method>
        <method name="EncodeString" axId="153" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>strToEncode</argName>
                    <objcName>inStr</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charsetName</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>toEncodingName</argName>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Encodes a string.  The ARG3 can be set to any of the following strings: "base64", "hex", "quoted-printable", "url", "base32", "Q", "B", "url_rc1738", "url_rfc2396", "url_rfc3986", "url_oauth", "uu",  "modBase64", or "html" (for HTML entity encoding).  The ARG2 is important, and usually you'll want to specify "ansi".  For example, if the string "ABC" is to be encoded to "hex" using ANSI, the result will be "414243".  However, if "unicode" is used, the result is "410042004300".</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
            </links2>
            <args2>
                <arg name="strToEncode" type="string" objcName="inStr" />
                <arg name="charsetName" type="string" objcName="charset" />
                <arg name="toEncodingName" type="string" objcName="encoding" />
            </args2>
        </method>
        <method name="EncryptBytes" axId="154" outArgName="outData" ax="1" cpp="1" dn="1">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Encrypts a byte array.  The minimal set of properties that should be set before encrypting are: CryptAlgorithm, SecretKey.   Other properties that control encryption are: CipherMode, PaddingScheme, KeyLength, IV.  When decrypting, all property settings must match otherwise garbled data is returned.</descrip>
            <links2>
                <link linkType="external" lang="python">
                    <url>http://www.chilkatforum.com/questions/8996/python-byte-data</url>
                    <text>Python Methods Returning Binary Data</text>
                </link>
            </links2>
            <args2>
                <arg name="data" type="bytes" objcName="bData" />
            </args2>
        </method>
        <method name="EncryptBytesENC" axId="155" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Encrypts a byte array and returns the encrypted data as an encoded (printable) string.  The minimal set of properties that should be set before encrypting are: CryptAlgorithm, SecretKey, EncodingMode.   Other properties that control encryption are: CipherMode, PaddingScheme, KeyLength, IV.  When decrypting, all property settings must match otherwise garbled data is returned.  The encoding of the string that is returned is controlled by the EncodingMode property, which can be set to "Base64", "QP", or "Hex".</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
            </links2>
            <args2>
                <arg name="data" type="bytes" objcName="bData" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="EncryptEncoded" axId="156" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>The input string is first decoded according to the encoding algorithm specified by the EncodingMode property (such as base64, hex, etc.)  It is then encrypted according to the encryption algorithm specified by CryptAlgorithm.  The resulting encrypted data is encoded (using EncodingMode) and returned.</descrip>
            <links2>
                <link linkType="example">
                    <url>crypt2_aes_gcm.asp</url>
                    <text>AEAD AES 128-bit GCM</text>
                </link>
            </links2>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
        </method>
        <method name="EncryptStream" ax="1" cpp="1" dn="1" events="1" status="1" axId="259">
            <gType>bool</gType>
            <descrip>Encrypts a stream.  Internally, the ARG1's source is read, encrypted, and the encrypted data written to the ARG1's sink.  It does this in streaming fashion.  Extremely large or even infinite streams can be encrypted with stable ungrowing memory usage.</descrip>
            <args>
                <arg>
                    <argName>strm</argName>
                    <cppType>CkStream &amp;</cppType>
                    <dnType>Stream</dnType>
                    <axType>Stream</axType>
                    <objcName>strm</objcName>
                </arg>
            </args>
            <iversion>9.5.0.56</iversion>
            <links2>
                <link linkType="example">
                    <url>stream_encryption.asp</url>
                    <text>Streaming Encryption</text>
                </link>
            </links2>
            <args2>
                <arg name="strm" type="Stream" objcName="strm" />
            </args2>
        </method>
        <method name="EncryptString" axId="157" ax="1" cpp="1" dn="1" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Encrypts a string and returns the encrypted data as a byte array. The minimal set of properties that should be set before encrypting are: CryptAlgorithm, SecretKey, Charset. Other properties that control encryption are: CipherMode, PaddingScheme, KeyLength, IV. When decrypting, all property settings must match otherwise garbled data is returned. The Charset property controls the exact bytes that get encrypted. Languages such as VB.NET, C#, and Visual Basic work with Unicode strings, thus the input string is Unicode. If Unicode is to be encrypted (i.e. 2 bytes per character) then set the Charset property to "Unicode". To implicitly convert the string to another charset before the encryption is applied, set the Charset property to something else, such as "iso-8859-1", "Shift_JIS", "big5", "windows-1252", etc. The complete list of possible charsets is listed here:
&lt;pre&gt;&lt;font size="2" face="MS Sans Serif"&gt;
us-ascii
unicode
unicodefffe
iso-8859-1
iso-8859-2
iso-8859-3
iso-8859-4
iso-8859-5
iso-8859-6
iso-8859-7
iso-8859-8
iso-8859-9
iso-8859-13
iso-8859-15
windows-874
windows-1250
windows-1251
windows-1252
windows-1253
windows-1254
windows-1255
windows-1256
windows-1257
windows-1258
utf-7
utf-8
utf-32
utf-32be
shift_jis
gb2312
ks_c_5601-1987
big5
iso-2022-jp
iso-2022-kr
euc-jp
euc-kr
macintosh
x-mac-japanese
x-mac-chinesetrad
x-mac-korean
x-mac-arabic
x-mac-hebrew
x-mac-greek
x-mac-cyrillic
x-mac-chinesesimp
x-mac-romanian
x-mac-ukrainian
x-mac-thai
x-mac-ce
x-mac-icelandic
x-mac-turkish
x-mac-croatian
asmo-708
dos-720
dos-862
ibm037
ibm437
ibm500
ibm737
ibm775
ibm850
ibm852
ibm855
ibm857
ibm00858
ibm860
ibm861
ibm863
ibm864
ibm865
cp866
ibm869
ibm870
cp875
koi8-r
koi8-u
&lt;/font&gt;&lt;/pre&gt;</descrip>
            <links2>
                <link linkType="external">
                    <text>Explaining the Importance of the Charset</text>
                    <url>http://www.chilkatforum.com/questions/316/utf-8-characters-not-encrypting</url>
                </link>
            </links2>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
        </method>
        <method name="EncryptStringENC" axId="158" outArgName="outStr" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Encrypts a string and returns the encrypted data as an encoded (printable) string. The minimal set of properties that should be set before encrypting are: CryptAlgorithm, SecretKey, Charset, and EncodingMode. Other properties that control encryption are: CipherMode, PaddingScheme, KeyLength, IV. When decrypting (with DecryptStringENC), all property settings must match otherwise garbled data is returned. The Charset property controls the exact bytes that get encrypted. Languages such as VB.NET, C#, and Visual Basic work with Unicode strings, thus the input string is Unicode. If Unicode is to be encrypted (i.e. 2 bytes per character) then set the Charset property to "Unicode". To implicitly convert the string to another charset before the encryption is applied, set the Charset property to something else, such as "iso-8859-1", "Shift_JIS", "big5", "windows-1252", etc. (Refer to EncryptString for the complete list of charsets.)  &lt;p&gt; The EncodingMode property controls the encoding of the string that is returned.  It can be set to "Base64", "QP", or "Hex".</descrip>
            <links2>
                <link linkType="example">
                    <url>crypt2_aes.asp</url>
                    <text>AES Encryption Example</text>
                </link>
                <link linkType="example">
                    <url>crypt2_blowfish.asp</url>
                    <text>Blowfish Encryption Example</text>
                </link>
                <link linkType="example">
                    <url>crypt2_3des.asp</url>
                    <text>3DES Encryption Example</text>
                </link>
                <link linkType="example">
                    <url>crypt2_arc4.asp</url>
                    <text>ARC4 Encryption Example</text>
                </link>
                <link linkType="example">
                    <url>crypt2_pbes1.asp</url>
                    <text>PBES1 Password-Based Encryption</text>
                </link>
                <link linkType="example">
                    <url>crypt2_pbes2.asp</url>
                    <text>PBES2 Password-Based Encryption</text>
                </link>
                <link linkType="example">
                    <url>crypt2_rc2.asp</url>
                    <text>RC2 Encryption Example</text>
                </link>
                <link linkType="example">
                    <url>crypt2_twofish.asp</url>
                    <text>Twofish Encryption Example</text>
                </link>
                <link linkType="external">
                    <text>Explaining the Importance of the Charset</text>
                    <url>http://www.chilkatforum.com/questions/316/utf-8-characters-not-encrypting</url>
                </link>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
                <link linkType="external" lang="activex">
                    <url>http://www.chilkatforum.com/questions/9342/sql-server-methods-that-return-long-strings</url>
                    <text>Long Strings Returned by ActiveX Methods in SQL Server</text>
                </link>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Binary Encodings Supported by Chilkat</text>
                </link>
            </links2>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
        </method>
        <method name="GenEncodedSecretKey" axId="159" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>password</argName>
                    <objcName>password</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encoding</argName>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>&lt;b&gt;Important:&lt;/b&gt; In the v9.5.0.49 release, a bug involving this method was introduced:  The ARG2 is ignored and instead the encoding used is the current value of the EncodingMode property.  The workaround is to make sure the EncodingMode property is set to the value of the desired output encoding.  This problem will be fixed in v9.5.0.50.
&lt;p&gt;
Identical to the GenerateSecretKey method, except it returns the binary secret key as a string encoded according to ARG2, which may be "base64", "hex", "url", etc.    Please see the documentation for GenerateSecretKey for more information.</descrip>
            <args2>
                <arg name="password" type="string" objcName="password" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
            <links2 />
        </method>
        <method name="GenRandomBytesENC" axId="160" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>numBytes</argName>
                    <objcName>numBytes</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Generates ARG1 random bytes and returns them as an encoded string.  The encoding, such as base64, hex, etc. is controlled by the EncodingMode property.</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
            </links2>
            <args2>
                <arg name="numBytes" type="int" objcName="numBytes" />
            </args2>
        </method>
        <method name="GenerateSecretKey" axId="161" ax="1" cpp="1" dn="1" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>password</argName>
                    <objcName>password</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Hashes a string to a byte array that has the same number of bits as the current value of the KeyLength property.  For example, if KeyLength is equal to 128 bits, then a 16-byte array is returned.  This can be used to set the SecretKey property.  In order to decrypt, the SecretKey must match exactly.  To use "password-based" encryption, the password is passed to this method to generate a binary secret key that can then be assigned to the SecretKey property.
&lt;p&gt;
&lt;b&gt;IMPORTANT: &lt;/b&gt; If you are trying to decrypt something encrypted by another party such that the other party provided you with the secret key, DO NOT use this method.  This method is for transforming an arbitrary-length password into a binary secret key of the proper length.  Please see this Chilkat blog post:  &lt;a href="http://www.cknotes.com/?p=290"&gt;Getting Started with AES Decryption&lt;/a&gt;</descrip>
            <links2>
                <link linkType="example">
                    <url>deriveAesKeySha256.asp</url>
                    <text>Deriving a 256-bit AES Secret Key from a Password Using SHA256</text>
                </link>
                <link linkType="example">
                    <url>crypt2_pbkdf2.asp</url>
                    <text>PBKDF2 - Derive Key from Password</text>
                </link>
            </links2>
            <args2>
                <arg name="password" type="string" objcName="password" />
            </args2>
        </method>
        <method name="GenerateUuid" axId="258" outArgName="outStr" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Generates a random UUID string having standard UUID format, such as "de305d54-75b4-431b-adb2-eb6b9e546014".
&lt;p&gt;
Note: This generates a "version 4 UUID" using random byte values.  See RFC 4122.</descrip>
            <args>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <iversion>9.5.0.55</iversion>
            <links2>
                <link linkType="example">
                    <url>uuid.asp</url>
                    <text>Generate UUID</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method name="GetDecryptCert" ax="1" cpp="1" dn="1" axId="241">
            <gType>Cert</gType>
            <descrip>Returns the last certificate used for public-key decryption.</descrip>
            <args />
            <iversion>9.5.0.46</iversion>
            <args2 />
            <links2 />
        </method>
        <method name="GetEncodedAad" ax="1" cpp="1" dn="1" axId="243" outArgName="outStr">
            <gType>string</gType>
            <descrip>Returns the authenticated additional data as an encoded string. The encoding argument can be set to any of the following strings: "base64", "hex", "quoted-printable", or "url".
&lt;p&gt;The Aad is used when the CipherMode is "gcm" (Galois/Counter Mode), which is a mode valid for symmetric ciphers that have a block size of 16 bytes, such as AES or Twofish.</descrip>
            <args>
                <arg>
                    <argName>encoding</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <iversion>9.5.0.55</iversion>
            <links2>
                <link linkType="example">
                    <url>crypt2_aes_gcm.asp</url>
                    <text>AEAD AES 128-bit GCM</text>
                </link>
            </links2>
            <args2>
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
        </method>
        <method name="GetEncodedAuthTag" ax="1" cpp="1" dn="1" axId="244" outArgName="outStr">
            <gType>string</gType>
            <descrip>Returns the authentication tag as an encoded string. The ARG1 argument may be set to any of the following strings: "base64", "hex", "quoted-printable", or "url".  The authentication tag is an output of authenticated encryption modes such as GCM when encrypting.  When GCM mode decrypting, the authenticate tag is set by the application and is the expected result.
&lt;p&gt;The authenticated tag plays a role when the CipherMode is "gcm" (Galois/Counter Mode), which is a mode valid for symmetric block ciphers that have a block size of 16 bytes, such as AES or Twofish.</descrip>
            <iversion>9.5.0.55</iversion>
            <args>
                <arg>
                    <argName>encoding</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>crypt2_aes_gcm.asp</url>
                    <text>AEAD AES 128-bit GCM</text>
                </link>
            </links2>
            <args2>
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
        </method>
        <method name="GetEncodedIV" axId="162" ax="1" cpp="1" dn="1" outArgName="outIV">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encoding</argName>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outIV</argName>
                    <objcName>outIV</objcName>
                </arg>
            </args>
            <descrip>Returns the initialization vector as an encoded string. The encoding argument can be set to any of the following strings: "base64", "hex", "quoted-printable", or "url".</descrip>
            <args2>
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
            <links2 />
        </method>
        <method name="GetEncodedKey" axId="163" ax="1" cpp="1" dn="1" outArgName="outKey">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encoding</argName>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outKey</argName>
                    <objcName>outKey</objcName>
                </arg>
            </args>
            <descrip>Returns the secret key as an encoded string. The encoding argument can be set to any of the following strings: "base64", "hex", "quoted-printable", or "url".</descrip>
            <args2>
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetEncodedSalt" axId="164" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encoding</argName>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the password-based encryption (PBE) salt bytes as an encoded string. The encoding argument can be set to any of the following strings: "base64", "hex", "quoted-printable", or "url".</descrip>
            <args2>
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
            <links2 />
        </method>
        <method name="GetLastCert" axId="165" ax="1" cpp="1" dn="1">
            <gType>Cert</gType>
            <args />
            <descrip>Returns the last certificate used when verifying a signature.  This method is deprecated.  Applications should instead call GetSignerCert with an index of 0.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetSignatureSigningTime" axId="166" deprecated="1" noxojo="1" outArgName="outSysTime">
            <gType systemtime="1">date</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>SYSTEMTIME &amp;</cppType>
                    <argName>outSysTime</argName>
                    <objcName>outSysTime</objcName>
                </arg>
            </args>
            <descrip>This method can be called after a digital signature is verified to retrieve the signing time of the Nth certificate used for signing.  The 1st certificate/signing time is at ARG1 0.  The NumSignerCerts property contains the total number of signing certificates.  (Typically, a single certificate is used in creating a digital signature.)
&lt;p&gt;
Note: An application should first check to see if a signing date/time is available for the Nth certificate by calling the HasSignatureSigningTime method.   The indices for which there is no signing time available should be skipped.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetSignatureSigningTimeStr" axId="167" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>The same as GetSignatureSigningTime, except the date/time is returned in RFC822 string format.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="GetSignerCert" axId="168" ax="1" cpp="1" dn="1">
            <gType>Cert</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>Gets the Nth certificate used for signing.  This method can be called after verifying a digital signature to get the signer certs.  The 1st certificate is at index 0.  The NumSignerCerts property contains the total number of signing certificates.  (Typically, a single certificate is used in creating a digital signature.)</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>crypt_verify_opaque_signature_get_certs.asp</url>
                    <text>Verify Opaque Signature and Retrieve Signing Certificates</text>
                </link>
            </links2>
        </method>
        <method name="GetSignerCertChain" axId="240" ax="1" cpp="1" dn="1">
            <gType>CertChain</gType>
            <descrip>Returns the full certificate chain for the Nth certificate used to for signing. Indexing begins at 0.</descrip>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
            </args>
            <iversion>9.5.0.40</iversion>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>crypt_verify_opaque_signature_get_certs.asp</url>
                    <text>Verify Opaque Signature and Retrieve Signing Certificates</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="HasSignatureSigningTime" axId="169">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>This method can be called after a digital signature has been verified by one of the Verify* methods. Returns _TRUE_ if a signing time for the Nth certificate is available and can be retrieved by either the GetSignatureSigningTime or GetSignatureSigningTimeStr methods.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="HashBeginBytes" axId="170">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>data</objcName>
                </arg>
            </args>
            <descrip>Begin hashing a byte stream.  Call this method to hash the 1st chunk.  Additional chunks are hashed by calling HashMoreBytes 0 or more times followed by a final call to HashFinal (or HashFinalENC) to retrieve the result.   The hash algorithm is selected by the HashAlgorithm property setting.</descrip>
            <args2>
                <arg name="data" type="bytes" objcName="data" />
            </args2>
            <links2 />
        </method>
        <method name="HashBeginString" axId="171" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>strData</argName>
                    <objcName>strData</objcName>
                </arg>
            </args>
            <descrip>Begin hashing a text stream.  Call this method to hash the 1st chunk.  Additional chunks are hashed by calling HashMoreString 0 or more times followed by a final call to HashFinal (or HashFinalENC) to retrieve the result.   The hash algorithm is selected by the HashAlgorithm property setting.</descrip>
            <args2>
                <arg name="strData" type="string" objcName="strData" />
            </args2>
            <links2 />
        </method>
        <method name="HashBytes" axId="172" outArgName="outData" ax="1" cpp="1" dn="1">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Hashes a byte array. 
&lt;p&gt;
The hash algorithm is specified by the HashAlgorithm property,  The encoding is controlled by the EncodingMode property, which can be set to "base64", "hex", "base64url", or any of the encodings listed at the link below.</descrip>
            <args2>
                <arg name="data" type="bytes" objcName="bData" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>hash_bytes_sha256.asp</url>
                    <text>Hash Binary Data (SHA256 and other hash algorithms)</text>
                </link>
            </links2>
        </method>
        <method name="HashBytesENC" axId="173" outArgName="outStr" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Hashes a byte array and returns the hash as an encoded string.
&lt;p&gt;
The hash algorithm is specified by the HashAlgorithm property,  The encoding is controlled by the EncodingMode property, which can be set to "base64", "hex", "base64url", or any of the encodings listed at the link below.</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
                <link linkType="example">
                    <url>hash_bytes_sha256.asp</url>
                    <text>Hash Binary Data (SHA256 and other hash algorithms)</text>
                </link>
            </links2>
            <args2>
                <arg name="data" type="bytes" objcName="bData" />
            </args2>
        </method>
        <method name="HashFile" axId="174" outArgName="outBytes" ax="1" cpp="1" dn="1" events="1">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>path</objcName>
                </arg>
                <arg>
                    <argName>outBytes</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>Hashes a file and returns the hash bytes.&lt;p&gt;
The hash algorithm is specified by the HashAlgorithm property,  &lt;p&gt;Any size file may be hashed because the file is hashed internally in streaming mode (keeping memory usage low and constant).</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>hash_file_sha256.asp</url>
                    <text>Hash the Contents of a File (SHA256 and other hash algorithms)</text>
                </link>
            </links2>
        </method>
        <method name="HashFileENC" axId="175" outArgName="outStr" ax="1" cpp="1" dn="1" events="1">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>path</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Hashes a file and returns the hash as an encoded string.&lt;p&gt;
The hash algorithm is specified by the HashAlgorithm property,  The encoding is controlled by the EncodingMode property, which can be set to "base64", "hex", "base64url", or any of the encodings listed at the link below.
 &lt;p&gt;Any size file is supported because the file is hashed internally in streaming mode (keeping memory usage low and constant).</descrip>
            <links2>
                <link linkType="example">
                    <url>crypt2_md5_hash_file.asp</url>
                    <text>Compute Hash for a File (Example)</text>
                </link>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
            </links2>
            <args2>
                <arg name="path" type="string" objcName="path" />
            </args2>
        </method>
        <method name="HashFinal" axId="176" outArgName="outBytes" ax="1" cpp="1" dn="1">
            <gType>bytes</gType>
            <args>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>Finalizes a multi-step hash computation and returns the hash bytes.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="HashFinalENC" axId="177" outArgName="outStr" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Finalizes a multi-step hash computation and returns the hash bytes encoded according to the EncodingMode property setting.</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="HashMoreBytes" axId="178">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>data</objcName>
                </arg>
            </args>
            <descrip>Adds more bytes to the hash currently under computation.  (See HashBeginBytes)</descrip>
            <args2>
                <arg name="data" type="bytes" objcName="data" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="HashMoreString" axId="179">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>strData</argName>
                    <objcName>strData</objcName>
                </arg>
            </args>
            <descrip>Adds more text to the hash currently under computation.  (See HashBeginString)</descrip>
            <args2>
                <arg name="strData" type="string" objcName="strData" />
            </args2>
            <links2 />
        </method>
        <method name="HashString" axId="180" outArgName="outData" ax="1" cpp="1" dn="1">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Hashes a string and returns a binary hash.  The hash algorithm is specified by the HashAlgorithm property,  
&lt;p&gt;
The Charset property controls the character encoding of the string that is hashed.  Languages such as VB.NET, C#, and Visual Basic work with Unicode strings.  If it is desired to hash Unicode directly (2 bytes/char) then set the Charset property to "Unicode".  To implicitly convert to another charset before hashing, set the Charset property to the desired charset.  For example, if Charset is set to "iso-8859-1", the input string is first implicitly converted to iso-8859-1 (1 byte per character) before hashing.  The full list fo supported charsets is listed in the EncryptString method description.
&lt;p&gt;IMPORTANT: Hash algorithms hash bytes.  Changing the bytes passed to a hash algorithm changes the result.
A character (i.e. a visible glyph) can have different byte representations.  The byte representation is defined by the Charset.  For example, 'A' in us-ascii is a single byte 0x41, whereas in utf-16 it is 2 bytes (0x41 0x00).  The  byte representation should be explicitly specified, otherwise unexpected results may occur.</descrip>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>hash_string_sha256.asp</url>
                    <text>Hash the Contents of a String (SHA256 and other hash algorithms)</text>
                </link>
            </links2>
        </method>
        <method name="HashStringENC" axId="181" outArgName="outStr" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Hashes a string and returns the hash bytes as an encoded string. 
&lt;p&gt;
The hash algorithm is specified by the HashAlgorithm property,  The encoding is controlled by the EncodingMode property, which can be set to "base64", "hex", "base64url", or any of the encodings listed at the link below.
&lt;p&gt;The Charset property controls the character encoding of the string that is hashed.  Languages such as VB.NET, C#, and Visual Basic work with Unicode strings.  If it is desired to hash Unicode directly (2 bytes/char) then set the Charset property to "Unicode".  To implicitly convert to another charset before hashing, set the Charset property to the desired charset.  For example, if Charset is set to "iso-8859-1", the input string is first implicitly converted to iso-8859-1 (1 byte per character) before hashing.  The full list of supported charsets is listed in the EncryptString method description.</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
            </links2>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
        </method>
        <method name="HmacBytes" axId="182" noxojo="1" outArgName="outHmac" ax="1" cpp="1" dn="1" deprecated="1">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inBytes</argName>
                    <objcName>inBytes</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outHmac</argName>
                    <objcName>outHmac</objcName>
                </arg>
            </args>
            <descrip>Computes a keyed-Hash Message Authentication Code (HMAC or KHMAC), which is a type of message authentication code (MAC) calculated using a specific algorithm involving a cryptographic hash function in combination with a secret key. As with any MAC, it may be used to simultaneously verify both the data integrity and the authenticity of a message. Any iterative cryptographic hash function, such as MD5, SHA-1, SHA256, or any of the hash algorithms listed in the HashAlgorithm property, may be used in the calculation of an HMAC; the resulting MAC algorithm is termed HMAC-MD5, HMAC-SHA-1, etc. accordingly. The cryptographic strength of the HMAC depends upon the cryptographic strength of the underlying hash function, on the size and quality of the key and the size of the hash output length in bits.
&lt;p&gt;
The secret key is set by calling one of the following methods prior to calling this method: SetHmacKeyBytes, SetHmacKeyEncoded, or SetHmacKeyString.
&lt;p&gt;
The hash algorithm is specified by the HashAlgorithm property.
&lt;p&gt;
&lt;b&gt;Note: &lt;/b&gt; If using Chilkat v9.5.0.55 or later, update your programs to use MacBytes instead (with the MacAlgorithm property set to "hmac").</descrip>
            <args2>
                <arg name="inBytes" type="bytes" objcName="inBytes" />
            </args2>
            <links2 />
        </method>
        <method name="HmacBytesENC" axId="183" ax="1" cpp="1" dn="1" deprecated="1" noxojo="1" outArgName="outEncodedHmac">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inBytes</argName>
                    <objcName>inBytes</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outEncodedHmac</argName>
                    <objcName>outEncodedHmac</objcName>
                </arg>
            </args>
            <descrip>Computes an HMAC using a secret key and hash algorithm.  The result is encoded to a string using the encoding (base64, hex, etc.) specified by the EncodingMode property.
&lt;p&gt;
The secret key is set by calling one of the following methods prior to calling this method: SetHmacKeyBytes, SetHmacKeyEncoded, or SetHmacKeyString.
&lt;p&gt;
The hash algorithm is specified by the HashAlgorithm property.
&lt;p&gt;
&lt;b&gt;Note: &lt;/b&gt; If using Chilkat v9.5.0.55 or later, update your programs to use MacBytesEnc instead (with the MacAlgorithm property set to "hmac").</descrip>
            <args2>
                <arg name="inBytes" type="bytes" objcName="inBytes" />
            </args2>
            <links2 />
        </method>
        <method name="HmacString" axId="184" ax="1" cpp="1" dn="1" deprecated="1" noxojo="1" outArgName="outHmac">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inText</argName>
                    <objcName>inText</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outHmac</argName>
                    <objcName>outHmac</objcName>
                </arg>
            </args>
            <descrip>Computes an HMAC using a secret key and hash algorithm. 
&lt;p&gt;
The secret key is set by calling one of the following methods prior to calling this method: SetHmacKeyBytes, SetHmacKeyEncoded, or SetHmacKeyString.
&lt;p&gt;
The hash algorithm is specified by the HashAlgorithm property.
&lt;p&gt;
&lt;b&gt;Note: &lt;/b&gt; If using Chilkat v9.5.0.55 or later, update your programs to use MacString instead (with the MacAlgorithm property set to "hmac").</descrip>
            <args2>
                <arg name="inText" type="string" objcName="inText" />
            </args2>
            <links2 />
        </method>
        <method name="HmacStringENC" axId="185" ax="1" cpp="1" dn="1" deprecated="1" noxojo="1" outArgName="outEncodedHmac">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inText</argName>
                    <objcName>inText</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outEncodedHmac</argName>
                    <objcName>outEncodedHmac</objcName>
                </arg>
            </args>
            <descrip>Computes an HMAC using a secret key and hash algorithm.  The result is encoded to a string using the encoding (base64, hex, etc.) specified by the EncodingMode property.
&lt;p&gt;
The secret key is set by calling one of the following methods prior to calling this method: SetHmacKeyBytes, SetHmacKeyEncoded, or SetHmacKeyString.
&lt;p&gt;
The hash algorithm is specified by the HashAlgorithm property.
&lt;p&gt;
&lt;b&gt;Note: &lt;/b&gt; If using Chilkat v9.5.0.55 or later, update your programs to use MacStringENC instead (with the MacAlgorithm property set to "hmac").</descrip>
            <args2>
                <arg name="inText" type="string" objcName="inText" />
            </args2>
            <links2 />
        </method>
        <method name="InflateBytes" axId="186" outArgName="outData" ax="1" cpp="1" dn="1">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <args2>
                <arg name="data" type="bytes" objcName="bData" />
            </args2>
            <links2 />
            <descrip>Decompresses data that was compressed with CompressBytes.
&lt;p&gt;
This is a legacy method that should not be used in new development.  It will not be marked as deprecated or removed from future APIs because existing applications may have data already compressed using CompressBytes.  
&lt;p&gt;
This method expects the input to begin with an 8-byte header  composed of a 4-byte magic number (0xB394A7E1) and the 4-byte length of the uncompressed data.</descrip>
        </method>
        <method name="InflateBytesENC" axId="187" outArgName="outData" ax="1" cpp="1" dn="1">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>The opposite of CompressBytesENC.  The EncodingMode and CompressionAlgorithm properties should match what was used when compressing.</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
            </links2>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="InflateString" axId="188" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>The opposite of CompressString.  The Charset and CompressionAlgorithm properties should match what was used when compressing.</descrip>
            <args2>
                <arg name="data" type="bytes" objcName="bData" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="InflateStringENC" axId="189" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>The opposite of CompressStringENC.  The Charset, EncodingMode, and CompressionAlgorithm properties should match what was used when compressing.</descrip>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>crypt2_compression.asp</url>
                    <text>Crypt2 Compression Example</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="IsUnlocked" axId="190">
            <gType>bool</gType>
            <args />
            <descrip>Returns true if the component is unlocked.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="MacBytes" ax="1" cpp="1" dn="1" axId="251" outArgName="outBytes">
            <gType>bytes</gType>
            <descrip>Computes a Message Authentication Code using the MAC algorithm specified in the MacAlgorithm property.</descrip>
            <args>
                <arg>
                    <argName>inBytes</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <dnType>bytes</dnType>
                    <axType>bytes</axType>
                    <objcName>inBytes</objcName>
                </arg>
                <arg>
                    <argName>outBytes</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <iversion>9.5.0.55</iversion>
            <args2>
                <arg name="inBytes" type="bytes" objcName="inBytes" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>mac-bytes.asp</url>
                    <text>Demonstrates the MacBytes Method</text>
                </link>
            </links2>
        </method>
        <method name="MacBytesENC" ax="1" cpp="1" dn="1" axId="252" outArgName="outStr">
            <gType>string</gType>
            <descrip>Computes a Message Authentication Code using the MAC algorithm specified in the MacAlgorithm property.  The result is encoded to a string using the encoding (base64, hex, etc.) specified by the EncodingMode property.</descrip>
            <args>
                <arg>
                    <argName>inBytes</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <dnType>bytes</dnType>
                    <axType>bytes</axType>
                    <objcName>inBytes</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <args2>
                <arg name="inBytes" type="bytes" objcName="inBytes" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>mac-bytes-enc.asp</url>
                    <text>Demonstrates the MacBytesENC Method</text>
                </link>
            </links2>
        </method>
        <method name="MacString" ax="1" cpp="1" dn="1" axId="253" outArgName="outBytes">
            <gType>bytes</gType>
            <descrip>Computes a Message Authentication Code using the MAC algorithm specified in the MacAlgorithm property.</descrip>
            <args>
                <arg>
                    <argName>inText</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>inText</objcName>
                </arg>
                <arg>
                    <argName>outBytes</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <iversion>9.5.0.55</iversion>
            <args2>
                <arg name="inText" type="string" objcName="inText" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>mac-string.asp</url>
                    <text>Demonstrates the MacString Method</text>
                </link>
            </links2>
        </method>
        <method name="MacStringENC" axId="254" outArgName="outStr" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Computes a Message Authentication Code using the MAC algorithm specified in the MacAlgorithm property.  The result is encoded to a string using the encoding (base64, hex, etc.) specified by the EncodingMode property.</descrip>
            <args>
                <arg>
                    <argName>inText</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>inText</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <iversion>9.5.0.55</iversion>
            <args2>
                <arg name="inText" type="string" objcName="inText" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>hmac-sha256.asp</url>
                    <text>Demonstrates HMAC SHA256</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="MySqlAesDecrypt" axId="191" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>strEncryptedHex</argName>
                    <objcName>strEncrypted</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>strPassword</argName>
                    <objcName>strKey</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Matches MySQL's AES_DECRYPT function.  ARG1 is a hex-encoded string of the AES encrypted data.  The return value is the original unencrypted string.</descrip>
            <args2>
                <arg name="strEncryptedHex" type="string" objcName="strEncrypted" />
                <arg name="strPassword" type="string" objcName="strKey" />
            </args2>
            <links2 />
        </method>
        <method name="MySqlAesEncrypt" axId="192" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>strData</argName>
                    <objcName>strData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>strPassword</argName>
                    <objcName>strKey</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Matches MySQL's AES_ENCRYPT function.  The return value is a hex-encoded string of the encrypted data.  The equivalent call in MySQL would look like this:   HEX(AES_ENCRYPT('The quick brown fox jumps over the lazy dog','password'))</descrip>
            <links2>
                <link linkType="example">
                    <text>Match MySQL AES_ENCRYPT Function</text>
                    <url>mysql_aes_encrypt.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="strData" type="string" objcName="strData" />
                <arg name="strPassword" type="string" objcName="strKey" />
            </args2>
        </method>
        <method name="OpaqueSignBytes" axId="193" ax="1" cpp="1" dn="1" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Digitally signs a byte array and returns a PKCS7/CMS format signature. This is a signature that contains both the original data as well as the signature.  A certificate must be set by calling SetSigningCert prior to calling this method.</descrip>
            <args2>
                <arg name="data" type="bytes" objcName="bData" />
            </args2>
            <links2 />
        </method>
        <method name="OpaqueSignBytesENC" axId="194" outArgName="outStr" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Digitally signs a byte array and returns a PKCS7/CMS format signature in encoded string format (such as Base64 or hex). This is a signature that contains both the original data as well as the signature.  A certificate must be set by calling SetSigningCert prior to calling this method. The EncodingMode property controls the output encoding, which can be "Base64", "QP","Hex", etc.  (See the EncodingMode property.)</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
            </links2>
            <args2>
                <arg name="data" type="bytes" objcName="bData" />
            </args2>
        </method>
        <method name="OpaqueSignString" axId="195" ax="1" cpp="1" dn="1" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Digitally signs a string and returns a PKCS7/CMS format signature. This is a signature that contains both the original data as well as the signature. A certificate must be set by calling SetSigningCert prior to calling this method. The Charset property controls the character encoding of the string that is signed. (Languages such as VB.NET, C#, and Visual Basic work with Unicode strings.) To sign Unicode data (2 bytes per char), set the Charset property to "Unicode". To implicitly convert the string to a mutlibyte charset such as "iso-8859-1", "Shift_JIS", "utf-8", or something else, then set the Charset property to the name of the charset before signing. The complete list of charsets is listed in the EncryptString method description.</descrip>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
            <links2 />
        </method>
        <method name="OpaqueSignStringENC" axId="196" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Digitally signs a string and returns a PKCS7/CMS format signature in encoded string format (such as base64 or hex). This is a signature that contains both the original data as well as the signature. A certificate must be set by calling SetSigningCert prior to calling this method. The Charset property controls the character encoding of the string that is signed. (Languages such as VB.NET, C#, and Visual Basic work with Unicode strings.) To sign Unicode data (2 bytes per char), set the Charset property to "Unicode". To implicitly convert the string to a mutlibyte charset such as "iso-8859-1", "Shift_JIS", "utf-8", or something else, then set the Charset property to the name of the charset before signing. The complete list of charsets is listed in the EncryptString method description.&lt;p&gt; The EncodingMode property controls the output encoding, which can be "Base64", "QP","Hex", etc.  (See the EncodingMode property.)</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
                <link linkType="example">
                    <url>crypt_opaque_pkcs7_cms_signature.asp</url>
                    <text>Create and Verify an Opaque PKCS7/CMS Signature</text>
                </link>
            </links2>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
        </method>
        <method name="OpaqueVerifyBytes" axId="197" outArgName="outOriginal" ax="1" cpp="1" dn="1">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>p7s</argName>
                    <objcName>p7s</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outOriginal</argName>
                    <objcName>outOriginal</objcName>
                </arg>
            </args>
            <descrip>Verifies an opaque signature and returns the original data.  If the signature verification fails, the returned data will be 0 bytes in length.
&lt;p&gt;
Note: The signer certificates can be retrieved after any Verify* method call by using the NumSignerCerts property and the GetSignerCert method.</descrip>
            <args2>
                <arg name="p7s" type="bytes" objcName="p7s" />
            </args2>
            <links2 />
        </method>
        <method name="OpaqueVerifyBytesENC" axId="198" outArgName="outOriginal" ax="1" cpp="1" dn="1">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>p7s</argName>
                    <objcName>p7s</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outOriginal</argName>
                    <objcName>outOriginal</objcName>
                </arg>
            </args>
            <descrip>Verifies an opaque signature (encoded in string form) and returns the original data.  If the signature verification fails, the returned data will be 0 bytes in length.
&lt;p&gt;
Note: The signer certificates can be retrieved after any Verify* method call by using the NumSignerCerts property and the GetSignerCert method.</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
            </links2>
            <args2>
                <arg name="p7s" type="string" objcName="p7s" />
            </args2>
        </method>
        <method name="OpaqueVerifyString" axId="199" outArgName="outOriginal" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>p7s</argName>
                    <objcName>p7s</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outOriginal</argName>
                    <objcName>outOriginal</objcName>
                </arg>
            </args>
            <descrip>Verifies an opaque signature and returns the original string. If the signature verification fails, the returned string will be 0 characters in length.
&lt;p&gt;
Note: The signer certificates can be retrieved after any Verify* method call by using the NumSignerCerts property and the GetSignerCert method.</descrip>
            <args2>
                <arg name="p7s" type="bytes" objcName="p7s" />
            </args2>
            <links2 />
        </method>
        <method name="OpaqueVerifyStringENC" axId="200" outArgName="outOriginal" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>p7s</argName>
                    <objcName>p7s</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outOriginal</argName>
                    <objcName>outOriginal</objcName>
                </arg>
            </args>
            <descrip>Verifies an opaque signature (encoded in string form) and returns the original data string. If the signature verification fails, the returned string will be 0 characters in length.
&lt;p&gt;
Note: The signer certificates can be retrieved after any Verify* method call by using the NumSignerCerts property and the GetSignerCert method.</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
                <link linkType="example">
                    <url>crypt_opaque_pkcs7_cms_signature.asp</url>
                    <text>Create and Verify an Opaque PKCS7/CMS Signature</text>
                </link>
            </links2>
            <args2>
                <arg name="p7s" type="string" objcName="p7s" />
            </args2>
        </method>
        <method name="Pbkdf1" axId="201" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>password</argName>
                    <objcName>password</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>hashAlg</argName>
                    <objcName>hashAlg</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>salt</argName>
                    <objcName>salt</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>iterationCount</argName>
                    <objcName>iterationCount</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>outputKeyBitLen</argName>
                    <objcName>outputKeyBitLen</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encoding</argName>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Implements the PBKDF1 algorithm (Password Based Key Derivation Function #1).   The ARG1 is converted to the character encoding represented by ARG2 before being passed (internally) to the key derivation function.  The ARG3 may be "md5", "sha1", "md2", etc.   The ARG4  should be random data at least 8 bytes (64 bits) in length.  (The GenRandomBytesENC method is good for generating a random salt value.)   The ARG5 should be no less than 1000.  The length (in bits) of the derived key output by this method is controlled by ARG6.  The ARG7 argument may be "base64", "hex", etc.  It controls the encoding of the output, and the expected encoding of the ARG4.   The derived key is returned.
&lt;p&gt;
Note: Starting in version 9.5.0.47, if the ARG2 is set to one of the keywords "hex" or "base64", then the password will be considered binary data that is hex or base64 encoded.  The bytes will be decoded and used directly as a binary password.</descrip>
            <links2>
                <link linkType="example">
                    <url>crypt2_pbkdf1.asp</url>
                    <text>PBKDF1 - Derive Key from Password</text>
                </link>
            </links2>
            <args2>
                <arg name="password" type="string" objcName="password" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="hashAlg" type="string" objcName="hashAlg" />
                <arg name="salt" type="string" objcName="salt" />
                <arg name="iterationCount" type="int" objcName="iterationCount" />
                <arg name="outputKeyBitLen" type="int" objcName="outputKeyBitLen" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
        </method>
        <method name="Pbkdf2" axId="202" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>password</argName>
                    <objcName>password</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>hashAlg</argName>
                    <objcName>hashAlg</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>salt</argName>
                    <objcName>salt</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>iterationCount</argName>
                    <objcName>iterationCount</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>outputKeyBitLen</argName>
                    <objcName>outputKeyBitLen</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encoding</argName>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Implements the PBKDF2 algorithm (Password Based Key Derivation Function #2).   The ARG1 is converted to the character encoding represented by ARG2 before being passed (internally) to the key derivation function.  The ARG3 may be "sha256", "sha384", "sha512", "md5", "sha1", "md2", or any hash algorithm listed in the HashAlgorithm property.   The ARG4  should be random data at least 8 bytes (64 bits) in length.  (The GenRandomBytesENC method is good for generating a random salt value.)   The ARG5 should be no less than 1000.  The length (in bits) of the derived key output by this method is controlled by ARG6.  The ARG7 argument may be "base64", "hex", etc.  It controls the encoding of the output, and the expected encoding of the ARG4.   The derived key is returned.
&lt;p&gt;
Note: The PBKDF2 function (internally) utilizes a PRF that is a pseudorandom function that is a keyed HMAC. The hash algorithm specified by ARG3 determines this PRF.  If ARG3 is "SHA256", then HMAC-SHA256 is used for the PRF.  Likewise, if the hash function is "SHA1", then HMAC-SHA1 is used.  HMAC can be used with any hash algorithm.
&lt;p&gt;
Note: Starting in version 9.5.0.47, if the ARG2 is set to one of the keywords "hex" or "base64", then the password will be considered binary data that is hex or base64 encoded.  The bytes will be decoded and used directly as a binary password.</descrip>
            <links2>
                <link linkType="example">
                    <url>crypt2_pbkdf2.asp</url>
                    <text>PBKDF2 - Derive Key from Password</text>
                </link>
                <link linkType="example">
                    <url>crypt2_wpa.asp</url>
                    <text>WPA Key Calculation from PassPhrase to Hex</text>
                </link>
                <link linkType="example">
                    <url>pbkdf2_duplicate_Rfc2898DeriveBytes.asp</url>
                    <text>Duplicate .NET's Rfc2898DeriveBytes Functionality</text>
                </link>
            </links2>
            <args2>
                <arg name="password" type="string" objcName="password" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="hashAlg" type="string" objcName="hashAlg" />
                <arg name="salt" type="string" objcName="salt" />
                <arg name="iterationCount" type="int" objcName="iterationCount" />
                <arg name="outputKeyBitLen" type="int" objcName="outputKeyBitLen" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
        </method>
        <method name="Pkcs7ExtractDigest" ax="1" cpp="1" dn="1" axId="242" outArgName="outStr">
            <gType>string</gType>
            <descrip>Extracts the signature digest contained within a PKCS7 signature.  The PKCS7 is passed in the encoding determined by the EncodingMode property (such as base64, hex, etc.) an the signature digest is returned in the same encoding.</descrip>
            <iversion>9.5.0.48</iversion>
            <args>
                <arg>
                    <argName>signerIndex</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>signerIndex</objcName>
                </arg>
                <arg>
                    <argName>pkcs7</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>pkcs7</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <args2>
                <arg name="signerIndex" type="int" objcName="signerIndex" />
                <arg name="pkcs7" type="string" objcName="pkcs7" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>pkcs7_extract_signature_digest.asp</url>
                    <text>Extract PKCS7 Signature Digest</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="RandomizeIV" axId="203">
            <gType>void</gType>
            <args />
            <descrip>Sets the initialization vector to a random value.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="RandomizeKey" axId="204">
            <gType>void</gType>
            <args />
            <descrip>Sets the secret key to a random value.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="ReEncode" axId="205" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encodedData</argName>
                    <objcName>data</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fromEncoding</argName>
                    <objcName>fromEncoding</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>toEncoding</argName>
                    <objcName>toEncoding</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Provides a means for converting from one encoding to another (such as base64 to hex).  This is helpful for programming environments where byte arrays are a real pain-in-the-***.    The ARG2 and ARG3 may be (case-insensitive) "Base64", "modBase64", "Base32", "Base58", "UU", "QP" (for quoted-printable), "URL" (for url-encoding), "Hex", "Q", "B", "url_oauth", "url_rfc1738", "url_rfc2396", and "url_rfc3986".</descrip>
            <args2>
                <arg name="encodedData" type="string" objcName="data" />
                <arg name="fromEncoding" type="string" objcName="fromEncoding" />
                <arg name="toEncoding" type="string" objcName="toEncoding" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="ReadFile" axId="206" outArgName="outBytes">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>path</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>Convenience method to read an entire file and return as a byte array.</descrip>
            <args2>
                <arg name="filename" type="string" objcName="path" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" windowsOnly="1" noObjC="1" status="1" name="SetCSP" axId="207">
            <gType>bool</gType>
            <ifdef>#if defined(CK_CSP_INCLUDED)</ifdef>
            <args>
                <arg>
                    <axType>Csp</axType>
                    <dnType>Csp</dnType>
                    <cppType>CkCsp &amp;</cppType>
                    <argName>csp</argName>
                    <objcName>csp</objcName>
                </arg>
            </args>
            <descrip>(Only applies to the Microsoft Windows OS)  Sets the Cryptographic Service Provider (CSP) to be used for PKI  public-key encryption / signing, or public-key decryption / signature verification.
&lt;p&gt;
This is not commonly used becaues the default Microsoft CSP is typically appropriate. 
One instance where SetCSP is necessary is when using the Crypto-Pro CSP for the GOST R 34.10-2001 and GOST R 34.10-94 providers.</descrip>
            <args2>
                <arg name="csp" type="Csp" objcName="csp" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetDecryptCert" axId="208">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <descrip>Sets the digital certificate to be used for decryption when the CryptAlgorithm property is set to "PKI".   A private key is required for decryption.  Because this method only specifies the certificate, a prerequisite is that the certificate w/ private key must have been pre-installed on the computer.  Private keys are stored in the Windows Protected Store (either a user account specific store, or the system-wide store).  The Chilkat component will automatically locate and find the certificate's corresponding private key from the protected store when decrypting.</descrip>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetDecryptCert2" axId="209">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
                <arg>
                    <axType>PrivateKey</axType>
                    <dnType>PrivateKey</dnType>
                    <cppType>CkPrivateKey &amp;</cppType>
                    <argName>key</argName>
                    <objcName>key</objcName>
                </arg>
            </args>
            <descrip>Sets the digital certificate to be used for decryption when the CryptAlgorithm property is set to "PKI".  The private key is supplied in the 2nd argument to this method, so there is no requirement that the certificate be pre-installed on a computer before decrypting (if this method is called).</descrip>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
                <arg name="key" type="PrivateKey" objcName="key" />
            </args2>
            <links2 />
        </method>
        <method name="SetEncodedAad" ax="1" cpp="1" dn="1" status="1" axId="245">
            <gType>bool</gType>
            <descrip>Sets the authenticated additional data from an encoded string. The authenticated additional data (AAD), if any, is used in authenticated encryption modes such as GCM. The ARG1 argument can be set to any of the following strings: "base64", "hex", "quoted-printable", "ascii", or "url".
&lt;p&gt;The Aad is used when the CipherMode is "gcm" (Galois/Counter Mode), which is a mode valid for symmetric ciphers that have a block size of 16 bytes, such as AES or Twofish.</descrip>
            <args>
                <arg>
                    <argName>aadStr</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>aadStr</objcName>
                </arg>
                <arg>
                    <argName>encoding</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encoding</objcName>
                </arg>
            </args>
            <iversion>9.5.0.55</iversion>
            <links2>
                <link linkType="example">
                    <url>crypt2_aes_gcm.asp</url>
                    <text>AEAD AES 128-bit GCM</text>
                </link>
            </links2>
            <args2>
                <arg name="aadStr" type="string" objcName="aadStr" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
        </method>
        <method name="SetEncodedAuthTag" axId="246" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Sets the expected authenticated tag  from an encoded string. The authenticated tag  is used in authenticated encryption modes such as GCM. An application would set the expected authenticated tag prior to decrypting.  The ARG1 argument can be set to any of the following strings: "base64", "hex", "quoted-printable", "ascii", or "url".
&lt;p&gt;The authenticated tag plays a role when the CipherMode is "gcm" (Galois/Counter Mode), which is a mode valid for symmetric block ciphers that have a block size of 16 bytes, such as AES or Twofish.</descrip>
            <iversion>9.5.0.55</iversion>
            <args>
                <arg>
                    <argName>authTagStr</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>authTagStr</objcName>
                </arg>
                <arg>
                    <argName>encoding</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encoding</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>crypt2_aes_gcm.asp</url>
                    <text>AEAD AES 128-bit GCM</text>
                </link>
            </links2>
            <args2>
                <arg name="authTagStr" type="string" objcName="authTagStr" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
        </method>
        <method name="SetEncodedIV" axId="210" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>ivStr</argName>
                    <objcName>ivStr</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encoding</argName>
                    <objcName>encoding</objcName>
                </arg>
            </args>
            <descrip>Sets the initialization vector from an encoded string. The encoding argument can be set to any of the following strings: "base64", "hex", "quoted-printable", "ascii", or "url".</descrip>
            <args2>
                <arg name="ivStr" type="string" objcName="ivStr" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
            <links2 />
        </method>
        <method name="SetEncodedKey" axId="211" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>keyStr</argName>
                    <objcName>keyStr</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encoding</argName>
                    <objcName>encoding</objcName>
                </arg>
            </args>
            <descrip>Sets the secret key from an encoded string. The encoding argument can be set to any of the following strings: "base64", "hex", "quoted-printable", "ascii", or "url".</descrip>
            <links2>
                <link linkType="example">
                    <url>generate_encryption_key.asp</url>
                    <text>Generate Encryption Key</text>
                </link>
            </links2>
            <args2>
                <arg name="keyStr" type="string" objcName="keyStr" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
        </method>
        <method name="SetEncodedSalt" axId="212" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>saltStr</argName>
                    <objcName>saltStr</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encoding</argName>
                    <objcName>encoding</objcName>
                </arg>
            </args>
            <descrip>Sets the password-based encryption (PBE) salt bytes from an encoded string. The encoding argument can be set to any of the following strings: "base64", "hex", "quoted-printable", "ascii", or "url".</descrip>
            <args2>
                <arg name="saltStr" type="string" objcName="saltStr" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetEncryptCert" axId="213">
            <gType>bool</gType>
            <axType>void</axType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <descrip>Tells the encryption library to use a specific digital certificate for public-key encryption.  To encrypt with multiple certificates, call AddEncryptCert once for each certificate.  (Calling this method is the equivalent of calling ClearEncryptCerts followed by AddEncryptCert.)</descrip>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>rsaes_oaep_encrypt_string.asp</url>
                    <text>RSAES-OAEP Encrypt String with AES-128 Content Encryption and SHA256</text>
                </link>
            </links2>
        </method>
        <method name="SetHmacKeyBytes" axId="214" ax="1" cpp="1" dn="1" deprecated="1" noxojo="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>keyBytes</argName>
                    <objcName>keyBytes</objcName>
                </arg>
            </args>
            <descrip>Sets the HMAC key to be used for one of the HMAC methods.
&lt;p&gt;
&lt;b&gt;Note: &lt;/b&gt; If using Chilkat v9.5.0.55 or later, update your programs to use SetMacKeyBytes instead.</descrip>
            <args2>
                <arg name="keyBytes" type="bytes" objcName="keyBytes" />
            </args2>
            <links2 />
        </method>
        <method name="SetHmacKeyEncoded" axId="215" ax="1" cpp="1" dn="1" deprecated="1" noxojo="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>key</argName>
                    <objcName>key</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encoding</argName>
                    <objcName>encoding</objcName>
                </arg>
            </args>
            <descrip>Sets the secret key to be used for one of the HMAC methods.  The ARG2 can be set to any of the following strings: "base64", "hex", "quoted-printable", or "url".
&lt;p&gt;
&lt;b&gt;Note: &lt;/b&gt; If using Chilkat v9.5.0.55 or later, update your programs to use SetMacKeyEncoded instead.</descrip>
            <args2>
                <arg name="key" type="string" objcName="key" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
            <links2 />
        </method>
        <method name="SetHmacKeyString" axId="216" ax="1" cpp="1" dn="1" deprecated="1" noxojo="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>key</argName>
                    <objcName>key</objcName>
                </arg>
            </args>
            <descrip>Sets the MAC key to be used for one of the HMAC methods.
&lt;p&gt;
&lt;b&gt;Note: &lt;/b&gt; If using Chilkat v9.5.0.55 or later, update your programs to use SetMacKeyString instead.</descrip>
            <args2>
                <arg name="key" type="string" objcName="key" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>hmac-sha256.asp</url>
                    <text>Demonstrates HMAC SHA256</text>
                </link>
            </links2>
        </method>
        <method name="SetIV" cpp="1" noObjC="1" noSwig="1">
            <gType>void</gType>
            <args>
                <arg>
                    <cppType>const unsigned char *</cppType>
                    <argName>pByteData</argName>
                    <objcName>pByteData</objcName>
                </arg>
                <arg>
                    <cppType>unsigned long</cppType>
                    <argName>szByteData</argName>
                    <objcName>szByteData</objcName>
                </arg>
            </args>
            <descrip>Sets the initialization vector for a symmetric encryption algorithm (such as AES, BlowFish, TwoFish, DES, etc.).  IV's are used in CBC mode (Cipher-Block-Chaining), but are not used in ECB mode (Electronic Cookbook).  The length of the IV should equal the block size of the algorithm.  (It is not equal to the key length).   For AES and TwoFish, the block size (and thus IV size) is always 16 bytes.  For Blowfish it's 8 bytes.  For DES and 3DES it's 8 bytes.</descrip>
            <args2>
                <arg name="pByteData" type="cppBytes" objcName="pByteData" />
                <arg name="szByteData" type="unsigned long" objcName="szByteData" />
            </args2>
            <links2 />
        </method>
        <method name="SetMacKeyBytes" ax="1" cpp="1" dn="1" status="1" axId="255">
            <gType>bool</gType>
            <descrip>Sets the MAC key to be used for one of the Mac methods.</descrip>
            <args>
                <arg>
                    <argName>keyBytes</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <dnType>bytes</dnType>
                    <axType>bytes</axType>
                    <objcName>keyBytes</objcName>
                </arg>
            </args>
            <iversion>9.5.0.55</iversion>
            <args2>
                <arg name="keyBytes" type="bytes" objcName="keyBytes" />
            </args2>
            <links2 />
        </method>
        <method name="SetMacKeyEncoded" axId="256" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Sets the MAC key to be used for one of the Mac methods.  The ARG2 can be set to any of the following strings: "base64", "hex", "quoted-printable", or "url".</descrip>
            <args>
                <arg>
                    <argName>key</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>key</objcName>
                </arg>
                <arg>
                    <argName>encoding</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encoding</objcName>
                </arg>
            </args>
            <iversion>9.5.0.55</iversion>
            <links2>
                <link linkType="example">
                    <url>poly1305.asp</url>
                    <text>Poly1305 MAC</text>
                </link>
            </links2>
            <args2>
                <arg name="key" type="string" objcName="key" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
        </method>
        <method name="SetMacKeyString" ax="1" cpp="1" dn="1" status="1" axId="257">
            <gType>bool</gType>
            <descrip>Sets the MAC key to be used for one of the Mac methods.</descrip>
            <args>
                <arg>
                    <argName>key</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>key</objcName>
                </arg>
            </args>
            <iversion>9.5.0.55</iversion>
            <args2>
                <arg name="key" type="string" objcName="key" />
            </args2>
            <links2 />
        </method>
        <method name="SetSecretKey" cpp="1" noObjC="1" noSwig="1">
            <gType>void</gType>
            <args>
                <arg>
                    <cppType>const unsigned char *</cppType>
                    <argName>pByteData</argName>
                    <objcName>pByteData</objcName>
                </arg>
                <arg>
                    <cppType>unsigned long</cppType>
                    <argName>szByteData</argName>
                    <objcName>szByteData</objcName>
                </arg>
            </args>
            <descrip>Sets the value of the SecretKey property.</descrip>
            <args2>
                <arg name="pByteData" type="cppBytes" objcName="pByteData" />
                <arg name="szByteData" type="unsigned long" objcName="szByteData" />
            </args2>
            <links2 />
        </method>
        <method name="SetSecretKeyViaPassword" axId="217" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>password</argName>
                    <objcName>password</objcName>
                </arg>
            </args>
            <descrip>Accepts a password string and (internally) generates a binary secret key of the appropriate bit length and sets the SecretKey property.  This method should only be used if you are using Chilkat for both encryption and decryption because the password-to-secret-key algorithm would need to be identical for the decryption to match the encryption.
&lt;p&gt;
There is no minimum or maximum password length.  The password string is transformed to a binary secret key by computing the MD5 digest (of the utf-8 password) to obtain 16 bytes.  If the KeyLength is greater than 16 bytes, then the MD5 digest of the Base64 encoding of the utf-8 password is added.  A max of 32 bytes of key material is generated, and this is truncated to the actual KeyLength required.   The example below shows how to manually duplicate the computation.</descrip>
            <args2>
                <arg name="password" type="string" objcName="password" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>crypt_setSecretKeyViaPassword.asp</url>
                    <text>Manually Duplicate SetSecretKeyViaPassword</text>
                </link>
                <link linkType="example">
                    <url>openssl_enc_decrypt.asp</url>
                    <text>openssl enc decrypt</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetSigningCert" axId="218">
            <gType>bool</gType>
            <axType>void</axType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <descrip>Specifies a certificate to be used when creating PKCS7 digital signatures.  Signing requires both a certificate and private key.  In this case, the private key is implicitly specified if the certificate originated from a PFX that contains the corresponding private key, or if on a Windows-based computer where the certificate and corresponding private key are pre-installed.  (If a PFX file is used, it is provided via the AddPfxSourceFile or AddPfxSourceData methods.)</descrip>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetSigningCert2" axId="219">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
                <arg>
                    <axType>PrivateKey</axType>
                    <dnType>PrivateKey</dnType>
                    <cppType>CkPrivateKey &amp;</cppType>
                    <argName>privateKey</argName>
                    <objcName>key</objcName>
                </arg>
            </args>
            <descrip>Specifies a digital certificate and private key to be used for creating PKCS7 digital signatures.</descrip>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
                <arg name="privateKey" type="PrivateKey" objcName="key" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>crypt_opaque_pkcs7_cms_signature.asp</url>
                    <text>Create and Verify an Opaque PKCS7/CMS Signature</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetVerifyCert" axId="220">
            <gType>bool</gType>
            <axType>void</axType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <descrip>Sets the digital certificate to be used in verifying a signature.</descrip>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>crypt_opaque_pkcs7_cms_signature.asp</url>
                    <text>Create and Verify an Opaque PKCS7/CMS Signature</text>
                </link>
            </links2>
        </method>
        <method cpp="0" dn="0" ax="1" name="Shorten" axId="236">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <argName>inData</argName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <argName>numBytes</argName>
                </arg>
            </args>
            <descrip>Chops N bytes from the end of a byte array.  Accepts a Variant, which could be anything (internally) but always returns a Variant containing a byte array.</descrip>
            <args2>
                <arg name="inData" type="bytes" />
                <arg name="numBytes" type="int" />
            </args2>
            <links2 />
        </method>
        <method name="SignBytes" axId="221" outArgName="outData" ax="1" cpp="1" dn="1">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Digitally signs a byte array and returns the detached digital signature.  A certificate must be set by calling SetSigningCert prior to calling this method.</descrip>
            <args2>
                <arg name="data" type="bytes" objcName="bData" />
            </args2>
            <links2 />
        </method>
        <method name="SignBytesENC" axId="222" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Digitally signs a byte array and returns the detached digital signature encoded as a printable string.  A certificate must be set by calling SetSigningCert prior to calling this method.  The EncodingMode property controls the output encoding, which can be "Base64", "QP", or "Hex".</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
            </links2>
            <args2>
                <arg name="data" type="bytes" objcName="bData" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="SignString" axId="223" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Digitally signs a string and returns the detached digital signature.  A certificate must be set by calling SetSigningCert prior to calling this method.  The Charset property controls the character encoding of the string that is signed.  (Languages such as VB.NET, C#, and Visual Basic work with Unicode strings.)  To sign Unicode data (2 bytes per char), set the Charset property to "Unicode".  To implicitly convert the string to a mutlibyte charset such as "iso-8859-1", "Shift_JIS", "utf-8", or something else, then set the Charset property to the name of the charset before signing.  The complete list of charsets is listed in the EncryptString method description.</descrip>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
            <links2 />
        </method>
        <method name="SignStringENC" axId="224" outArgName="outStr" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Digitally signs a string and returns the PKCS7 detached digital signature as an encoded string.  A certificate must be set by calling SetSigningCert prior to calling this method.  The Charset property controls the character encoding of the string that is signed.  (Languages such as VB.NET, C#, and Visual Basic work with Unicode strings.)  To sign Unicode data (2 bytes per char), set the Charset property to "Unicode".  To implicitly convert the string to a mutlibyte charset such as "iso-8859-1", "Shift_JIS", "utf-8", or something else, then set the Charset property to the name of the charset before signing.  The complete list of charsets is listed in the EncryptString method description.&lt;p&gt; The encoding of the output string is controlled by the EncodingMode property, which can be set to "Base64", "QP", or "Hex".</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
                <link linkType="example">
                    <url>pkcs7_sign_string_rsassa_pss.asp</url>
                    <text>RSASSA-PSS Sign String to Create Base64 PCKS7 Signature</text>
                </link>
            </links2>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
        </method>
        <method name="StringToBytes" axId="225" outArgName="outBytes" ax="1" cpp="1" dn="1">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inStr</argName>
                    <objcName>inStr</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>Convert a string to a byte array where the characters are encoded according to the charset specified.</descrip>
            <args2>
                <arg name="inStr" type="string" objcName="inStr" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="TrimEndingWith" axId="226" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inStr</argName>
                    <objcName>inStr</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>ending</argName>
                    <objcName>ending</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Trim a string ending with a specific substring until the string no longer ends with that substring.</descrip>
            <args2>
                <arg name="inStr" type="string" objcName="inStr" />
                <arg name="ending" type="string" objcName="ending" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="UnlockComponent" axId="227">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>unlockCode</argName>
                    <objcName>unlockCode</objcName>
                </arg>
            </args>
            <descrip>Unlocks the component. This must be called once prior to calling any other method.</descrip>
            <args2>
                <arg name="unlockCode" type="string" objcName="unlockCode" />
            </args2>
            <links2>
                <link linkType="external">
                    <text>Diagnosing UnlockComponent Problems</text>
                    <url>http://www.cknotes.com/?p=168</url>
                </link>
                <link linkType="external">
                    <text>UnlockComponent LastErrorText shows exact string passed to it.</text>
                    <url>http://www.cknotes.com/?p=315</url>
                </link>
                <link linkType="external">
                    <text>Verify UnlockComponent Success w/ Permanent Unlock Code</text>
                    <url>http://www.cknotes.com/?p=317</url>
                </link>
                <link linkType="external">
                    <text>LastErrorText Standard Information</text>
                    <url>http://www.cknotes.com/?p=316</url>
                </link>
            </links2>
        </method>
        <method name="UseCertVault" ax="1" cpp="1" dn="1" status="1" axId="239">
            <gType>bool</gType>
            <descrip>Adds an XML certificate vault to the object's internal list of sources to be searched for certificates and private keys when encrypting/decrypting or signing/verifying.  Unlike the AddPfxSourceData and AddPfxSourceFile methods, only a single XML certificate vault can be used.  If UseCertVault is called multiple times, only the last certificate vault will be used, as each call to UseCertVault will replace the certificate vault provided in previous calls.</descrip>
            <args>
                <arg>
                    <argName>vault</argName>
                    <cppType>CkXmlCertVault &amp;</cppType>
                    <dnType>XmlCertVault</dnType>
                    <axType>XmlCertVault</axType>
                    <objcName>vault</objcName>
                </arg>
            </args>
            <iversion>9.5.0.40</iversion>
            <args2>
                <arg name="vault" type="XmlCertVault" objcName="vault" />
            </args2>
            <links2 />
        </method>
        <method name="VerifyBytes" axId="228" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>bData1</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>sig</argName>
                    <objcName>sigData</objcName>
                </arg>
            </args>
            <descrip>Verifies a byte array against a digital signature and returns true if the byte array is unaltered.
&lt;p&gt;
Note: The signer certificates can be retrieved after any Verify* method call by using the NumSignerCerts property and the GetSignerCert method.</descrip>
            <args2>
                <arg name="data" type="bytes" objcName="bData1" />
                <arg name="sig" type="bytes" objcName="sigData" />
            </args2>
            <links2 />
        </method>
        <method name="VerifyBytesENC" axId="229" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>bData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encodedSig</argName>
                    <objcName>encodedSig</objcName>
                </arg>
            </args>
            <descrip>Verifies a byte array against a string-encoded digital signature and returns true if the byte array is unaltered.  This method can be used to verify a signature produced by SignBytesENC.  The EncodingMode property must be set prior to calling to match the encoding of the digital signature string ("Base64", "QP", or "Hex").
&lt;p&gt;
Note: The signer certificates can be retrieved after any Verify* method call by using the NumSignerCerts property and the GetSignerCert method.</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
            </links2>
            <args2>
                <arg name="data" type="bytes" objcName="bData" />
                <arg name="encodedSig" type="string" objcName="encodedSig" />
            </args2>
        </method>
        <method name="VerifyDetachedSignature" axId="230" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inFilename</argName>
                    <objcName>inFile</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>p7sFilename</argName>
                    <objcName>sigFile</objcName>
                </arg>
            </args>
            <descrip>Verifies a .p7s (PKCS #7 Signature) against the original file (or exact copy of it).  If the ARG1 has not been modified, the return value is _TRUE_, otherwise it is _FALSE_.    This method is equivalent to VerifyP7S.
&lt;p&gt;
Note: The signer certificates can be retrieved after any Verify* method call by using the NumSignerCerts property and the GetSignerCert method.</descrip>
            <args2>
                <arg name="inFilename" type="string" objcName="inFile" />
                <arg name="p7sFilename" type="string" objcName="sigFile" />
            </args2>
            <links2 />
        </method>
        <method name="VerifyP7M" axId="231" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>p7mPath</argName>
                    <objcName>p7mPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>destPath</argName>
                    <objcName>destPath</objcName>
                </arg>
            </args>
            <descrip>Verifies a .p7m file and extracts the original file from the .p7m.   Returns _TRUE_ if the signature is valid and the contents are unchanged.  Otherwise returns _FALSE_.
&lt;p&gt;
Note: The signer certificates can be retrieved after any Verify* method call by using the NumSignerCerts property and the GetSignerCert method.</descrip>
            <links2>
                <link linkType="example">
                    <text>Extract a File from a .p7m (PKCS7 Signed-Data)</text>
                    <url>crypt_extract_from_p7m.asp</url>
                </link>
                <link linkType="example">
                    <url>cades_bes_attached_signature.asp</url>
                    <text>CAdES BES Attached (Opaque) Signature</text>
                </link>
                <link linkType="example" windowsOnly="1">
                    <url>crypt_create_p7m_using_installed_cert.asp</url>
                    <text>Create P7M Using Pre-Installed Windows Certificate</text>
                </link>
            </links2>
            <args2>
                <arg name="p7mPath" type="string" objcName="p7mPath" />
                <arg name="destPath" type="string" objcName="destPath" />
            </args2>
        </method>
        <method name="VerifyP7S" axId="232" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inFilename</argName>
                    <objcName>inPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>p7sFilename</argName>
                    <objcName>p7sPath</objcName>
                </arg>
            </args>
            <descrip>Verifies a .p7s (PKCS #7 Signature) against the original file (or exact copy of it).  If the ARG1 has not been modified, the return value is _TRUE_, otherwise it is _FALSE_.
&lt;p&gt;
Note: The signer certificates can be retrieved after any Verify* method call by using the NumSignerCerts property and the GetSignerCert method.</descrip>
            <args2>
                <arg name="inFilename" type="string" objcName="inPath" />
                <arg name="p7sFilename" type="string" objcName="p7sPath" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>cades_bes.asp</url>
                    <text>CAdES BES Detached Signature</text>
                </link>
            </links2>
        </method>
        <method name="VerifyString" axId="233" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>sig</argName>
                    <objcName>sigData</objcName>
                </arg>
            </args>
            <descrip>Verifies a string against a binary digital signature and returns true if the string is unaltered.  This method can be used to verify a signature produced by SignString.  The Charset property must be set to the charset that was used when creating the signature.
&lt;p&gt;
Note: The signer certificates can be retrieved after any Verify* method call by using the NumSignerCerts property and the GetSignerCert method.</descrip>
            <args2>
                <arg name="str" type="string" objcName="str" />
                <arg name="sig" type="bytes" objcName="sigData" />
            </args2>
            <links2 />
        </method>
        <method name="VerifyStringENC" axId="234" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encodedSig</argName>
                    <objcName>encodedSig</objcName>
                </arg>
            </args>
            <descrip>Verifies a string against a string-encoded digital signature and returns true if the string is unaltered.  This method can be used to verify a signature produced by SignStringENC.  The Charset and EncodingMode properties must be set to the same values that were used when creating the signature.
&lt;p&gt;
Note: The signer certificates can be retrieved after any Verify* method call by using the NumSignerCerts property and the GetSignerCert method.</descrip>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Supported Binary Encodings</text>
                </link>
                <link linkType="example">
                    <url>pkcs7_sign_string_rsassa_pss.asp</url>
                    <text>RSASSA-PSS Sign String to Create Base64 PCKS7 Signature</text>
                </link>
            </links2>
            <args2>
                <arg name="str" type="string" objcName="str" />
                <arg name="encodedSig" type="string" objcName="encodedSig" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="WriteFile" axId="235">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>path</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>fileData</argName>
                    <objcName>fileData</objcName>
                </arg>
            </args>
            <descrip>Convenience method to write an entire byte array to a file.</descrip>
            <args2>
                <arg name="filename" type="string" objcName="path" />
                <arg name="fileData" type="bytes" objcName="fileData" />
            </args2>
            <links2 />
        </method>
        <method name="BCryptHash" axId="263" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2>
                <arg name="password" type="string" objcName="password" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>bcrypt_hash_password.asp</url>
                    <text>BCrypt Hash a Password</text>
                </link>
            </links2>
            <iversion>9.5.0.65</iversion>
            <descrip>Computes and returns a bcrypt hash of the ARG1.  The number of rounds of hashing is determined by the BCryptWorkFactor property.</descrip>
        </method>
        <method name="BCryptVerify" axId="264" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="password" type="string" objcName="password" />
                <arg name="bcryptHash" type="string" objcName="bcryptHash" />
            </args2>
            <iversion>9.5.0.65</iversion>
            <links2>
                <link linkType="example">
                    <url>bcrypt_verify_password.asp</url>
                    <text>BCrypt Verify a Password (Check if Password is Correct)</text>
                </link>
            </links2>
            <descrip>Verifies the ARG1 against a previously computed BCrypt hash.  Returns _TRUE_ if the password matches the ARG2. Returns _FALSE_ if the password does not match.</descrip>
        </method>
        <method name="AesKeyWrap" axId="265" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2>
                <arg name="kek" type="string" objcName="kek" />
                <arg name="keyData" type="string" objcName="keyData" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>aes_key_wrap.asp</url>
                    <text>AES Key Wrap / Unwrap</text>
                </link>
            </links2>
            <descrip>Implements the AES Key Wrap Algorithm (RFC 3394).  The ARG1 is the Key Encryption Key (the AES key used to encrypt the ARG2).  The arguments and return value are binary encoded strings using the encoding specified by ARG3 (which can be "base64", "hex", "base64url", etc.)   The full list of supported encodings is available at the link below.
&lt;p&gt;
The ARG1 should be an AES key of 16 bytes, 24 bytes, or 32 bytes (i.e. 128-bits, 192- bits, or 256-bits).  For example, if passed as a hex string, then the ARG1 should be 32 chars in length, 48 chars, or 64 chars (because each byte is represented as 2 chars in hex).
&lt;p&gt;
The ARG2 contains the data to be key wrapped.  It must be a multiple of 64-bits in length.  In other words, if the ARG2 is decoded to binary, it should be a number of bytes that is a multiple of 8.  
&lt;p&gt;
The return string, if decoded to binary bytes, is equal to the size of the key data + 8 additional bytes.</descrip>
        </method>
        <method name="AesKeyUnwrap" axId="266" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Implements the AES Key Wrap Algorithm (RFC 3394) for unwrapping.  The ARG1 is the Key Encryption Key (the AES key used to unwrap the ARG2).  The arguments and return value are binary encoded strings using the encoding specified by ARG3 (which can be "base64", "hex", "base64url", etc.)   The full list of supported encodings is available at the link below.
&lt;p&gt;
The ARG1 should be an AES key of 16 bytes, 24 bytes, or 32 bytes (i.e. 128-bits, 192- bits, or 256-bits).  For example, if passed as a hex string, then the ARG1 should be 32 chars in length, 48 chars, or 64 chars (because each byte is represented as 2 chars in hex).
&lt;p&gt;
The ARG2 contains the data to be unwrapped.  The result, if decoded, is 8 bytes less than the wrapped key data.  For example, if a 256-bit AES key (32 bytes) is wrapped, the size of the wrapped key data is 40 bytes.  Unwrapping restores it to the original 32 bytes.</descrip>
            <args2>
                <arg name="kek" type="string" objcName="kek" />
                <arg name="wrappedKeyData" type="string" objcName="wrappedKeyData" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>aes_key_wrap.asp</url>
                    <text>AES Key Wrap / Unwrap</text>
                </link>
            </links2>
        </method>
        <method name="HashBdENC" axId="267" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2>
                <arg name="bd" type="BinData" objcName="bd" />
            </args2>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>Binary Encodings Supported by Chilkat</text>
                </link>
                <link linkType="example">
                    <url>soap_ws_security_usernametoken.asp</url>
                    <text>SOAP WS-Security UsernameToken</text>
                </link>
            </links2>
            <iversion>9.5.0.66</iversion>
            <descrip>Hashes the the bytes contained in ARG1 and returns the hash as an encoded string.  
&lt;p&gt;
The hash algorithm is specified by the HashAlgorithm property,  The encoding is controlled by the EncodingMode property, which can be set to "base64", "hex", "base64url", or any of the encodings listed at the link below.</descrip>
        </method>
        <method name="MacBdENC" axId="268" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Computes a Message Authentication Code on the bytes contained in ARG1, using the MAC algorithm specified in the MacAlgorithm property.  The result is encoded to a string using the encoding (base64, hex, etc.) specified by the EncodingMode property.</descrip>
            <args2>
                <arg name="bd" type="BinData" objcName="bd" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>hmac-hex-string.asp</url>
                    <text>HMAC Hex String</text>
                </link>
            </links2>
        </method>
        <method name="EncryptBd" axId="272" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>In-place encrypts the contents of ARG1.    The minimal set of properties that should be set before encrypting are: CryptAlgorithm, SecretKey.   Other properties that control encryption are: CipherMode, PaddingScheme, KeyLength, IV.  When decrypting, all property settings must match otherwise the result is garbled data.</descrip>
            <args2>
                <arg name="bd" type="BinData" objcName="bd" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>aes_chacha20_binary_data.asp</url>
                    <text>Example for both AES-128 and ChaCha20 to Encrypt Binary Data</text>
                </link>
                <link linkType="example">
                    <url>rsaes_oaep_encrypt_binary.asp</url>
                    <text>RSAES-OAEP Encrypt/Decrypt Binary Data with AES-128 and SHA56</text>
                </link>
            </links2>
            <iversion>9.5.0.67</iversion>
        </method>
        <method name="DecryptBd" axId="273" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>In-place decrypts the contents of ARG1.    The minimal set of properties that should be set before decrypting are: CryptAlgorithm, SecretKey.   Other properties that control encryption are: CipherMode, PaddingScheme, KeyLength, IV.</descrip>
            <args2>
                <arg name="bd" type="BinData" objcName="bd" />
            </args2>
            <iversion>9.5.0.67</iversion>
            <links2>
                <link linkType="example">
                    <url>aes_chacha20_binary_data.asp</url>
                    <text>Example for both AES-128 and ChaCha20 to Encrypt Binary Data</text>
                </link>
                <link linkType="example">
                    <url>rsaes_oaep_encrypt_binary.asp</url>
                    <text>RSAES-OAEP Encrypt/Decrypt Binary Data with AES-128 and SHA56</text>
                </link>
                <link linkType="example">
                    <url>openssl_enc_decrypt.asp</url>
                    <text>openssl enc decrypt</text>
                </link>
            </links2>
        </method>
        <method name="EncryptSb" axId="274" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Encrypts the contents of ARG1 to ARG2.    The minimal set of properties that should be set before ecrypting are: CryptAlgorithm, SecretKey.   Other properties that control encryption are: CipherMode, PaddingScheme, KeyLength, IV.</descrip>
            <args2>
                <arg name="sbIn" type="StringBuilder" objcName="sbIn" />
                <arg name="bdOut" type="BinData" objcName="bdOut" />
            </args2>
            <iversion>9.5.0.67</iversion>
            <links2>
                <link linkType="example">
                    <url>aes_chacha20_text_data.asp</url>
                    <text>AES and CHACHA20 Encrypt/Decrypt Text</text>
                </link>
            </links2>
        </method>
        <method name="DecryptSb" axId="275" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Decrypts the contents of ARG1 to ARG2.    The decrypted string is appended to ARG2.  The minimal set of properties that should be set before ecrypting are: CryptAlgorithm, SecretKey.   Other properties that control encryption are: CipherMode, PaddingScheme, KeyLength, IV.</descrip>
            <args2>
                <arg name="bdIn" type="BinData" objcName="bdIn" />
                <arg name="sbOut" type="StringBuilder" objcName="sbOut" />
            </args2>
            <iversion>9.5.0.67</iversion>
            <links2>
                <link linkType="example">
                    <url>aes_chacha20_text_data.asp</url>
                    <text>AES and CHACHA20 Encrypt/Decrypt Text</text>
                </link>
            </links2>
        </method>
        <method name="SignBdENC" axId="276" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Digitally signs the contents of ARG1 and returns the detached digital signature in an encoded string (according to the EncodingMode property setting).</descrip>
            <args2>
                <arg name="dataToSign" type="BinData" objcName="dataToSign" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>rsassa_pss_sign_binary_data.asp</url>
                    <text>RSASSA-PSS Sign Binary Data</text>
                </link>
            </links2>
            <iversion>9.5.0.67</iversion>
        </method>
        <method name="SignSbENC" axId="277" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Digitally signs a the contents of ARG1 and returns the PKCS7 detached digital signature as an encoded string according to the EncodingMode property setting.</descrip>
            <args2>
                <arg name="sb" type="StringBuilder" objcName="sb" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>rsassa_pss_sign_text.asp</url>
                    <text>RSASSA-PSS Sign Text</text>
                </link>
            </links2>
            <iversion>9.5.0.67</iversion>
        </method>
        <method name="OpaqueSignBd" axId="278" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>In-place signs the contents of ARG1.   The contents of ARG1 is replaced with the PKCS7/CMS format signature that embeds the data that was signed.</descrip>
            <args2>
                <arg name="bd" type="BinData" objcName="bd" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>rsassa_pss_sign_binary_data.asp</url>
                    <text>RSASSA-PSS Sign Binary Data</text>
                </link>
            </links2>
            <iversion>9.5.0.67</iversion>
        </method>
        <method name="OpaqueVerifyBd" axId="279" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>In-place verifies and unwraps the  PKCS7/CMS contents of ARG1.   If the signature is verified, the contents of ARG1 will be replaced with the original data, and the method returns _TRUE_.  If the signature is not verified, then the contents of ARG1 remain unchanged and the method returns _FALSE_.
&lt;p&gt;
Note: The signer certificates can be retrieved after any Verify* method call by using the NumSignerCerts property and the GetSignerCert method.</descrip>
            <args2>
                <arg name="bd" type="BinData" objcName="bd" />
            </args2>
            <iversion>9.5.0.67</iversion>
            <links2>
                <link linkType="example">
                    <url>rsassa_pss_sign_binary_data.asp</url>
                    <text>RSASSA-PSS Sign Binary Data</text>
                </link>
            </links2>
        </method>
        <method name="VerifyBdENC" axId="280" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Verifies a digital signature against the original data contained in ARG1.  Returns _TRUE_ if the signature is verified.
&lt;p&gt;
Note: The signer certificates can be retrieved after any Verify* method call by using the NumSignerCerts property and the GetSignerCert method.</descrip>
            <args2>
                <arg name="data" type="BinData" objcName="data" />
                <arg name="encodedSig" type="string" objcName="encodedSig" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>rsassa_pss_sign_binary_data.asp</url>
                    <text>RSASSA-PSS Sign Binary Data</text>
                </link>
            </links2>
            <iversion>9.5.0.67</iversion>
        </method>
        <method name="VerifySbENC" axId="281" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Verifies a digital signature against the original data contained in ARG1.  Returns _TRUE_ if the signature is verified.
&lt;p&gt;
Note: The signer certificates can be retrieved after any Verify* method call by using the NumSignerCerts property and the GetSignerCert method.</descrip>
            <args2>
                <arg name="sb" type="StringBuilder" objcName="sb" />
                <arg name="encodedSig" type="string" objcName="encodedSig" />
            </args2>
            <iversion>9.5.0.67</iversion>
            <links2>
                <link linkType="example">
                    <url>rsassa_pss_sign_text.asp</url>
                    <text>RSASSA-PSS Sign Text</text>
                </link>
            </links2>
        </method>
        <method name="LastJsonData" axId="282" ax="1" cpp="1" dn="1">
            <gType>JsonObject</gType>
            <args2 />
            <links2 />
            <iversion>9.5.0.70</iversion>
            <descrip>Provides information about what transpired in the last method called.  For many methods, there is no information.  For some methods, details about what transpired can be obtained via LastJsonData.  For example, after calling a method to verify a signature, the LastJsonData will return JSON with details about the algorithms used for signature verification.</descrip>
        </method>
        <method name="EncryptSecureENC" axId="284" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2>
                <arg name="secureStr" type="SecureString" objcName="secureStr" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>encrypt_secure_string.asp</url>
                    <text>Encrypt / Decrypt Secure Strings</text>
                </link>
            </links2>
            <iversion>9.5.0.71</iversion>
            <descrip>Identical to EncryptStringENC, except the clear-text contained within the ARG1 is encrypted and returned.</descrip>
        </method>
        <method name="DecryptSecureENC" axId="285" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Identical to DecryptStringENC, except the decrypts the ARG1 and appends the decrypted string to the ARG2.</descrip>
            <args2>
                <arg name="cipherText" type="string" objcName="cipherText" />
                <arg name="secureStr" type="SecureString" objcName="secureStr" />
            </args2>
            <iversion>9.5.0.71</iversion>
            <links2>
                <link linkType="example">
                    <url>encrypt_secure_string.asp</url>
                    <text>Encrypt / Decrypt Secure Strings</text>
                </link>
            </links2>
        </method>
    </methods>
    <genericName>Crypt2</genericName>
    <events>
        <standard name="AbortCheck" />
        <standard name="PercentDone" />
        <standard name="ProgressInfo" />
        <standard name="TaskCompleted" />
    </events>
    <description>Chilkat encryption component.</description>
    <clsid>1AF44DC7-C896-46BA-B45B-C168FA7612A6</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidEvents>8602FAD5-CB1D-487B-B73C-E30CCB497880</uuidEvents>
    <uuidMidl>380B144D-5AF4-4DC3-BBDF-AD8E25F16188</uuidMidl>
    <nextAxId>286</nextAxId>
</class>
