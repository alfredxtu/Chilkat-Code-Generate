<?xml version="1.0" encoding="utf-8" ?>
<class XojoModuleId="884412293" license="Bundle" sourceXmlPath="C:/ck2000/appData/apiDef2/Ecc.xml">
    <genericName>Ecc</genericName>
    <cppName>CkEcc</cppName>
    <dnName>Ecc</dnName>
    <axName>ChilkatEcc</axName>
    <description>Elliptical Curve Cryptography class for generating ECC keys, computing shared secrets, and creating and verifying ECC signatures.   Supports the following curves:
&lt;ul&gt;
&lt;li&gt;secp256r1  (also known as P-256 and prime256v1)&lt;/li&gt;
&lt;li&gt;secp384r1  (also known as P-384)&lt;/li&gt;
&lt;li&gt;secp521r1  (also known as P-521)&lt;/li&gt;
&lt;li&gt;secp256k1 (This is the curve used for Bitcoin)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additional curves will be supported in the future.&lt;/p&gt;</description>
    <methods>
        <method name="GenEccKey" axId="100" ax="1" cpp="1" dn="1">
            <gType>PrivateKey</gType>
            <descrip>Generates an ECC private key.   The ARG1 specifies the curve name which determines the key size.   The ARG2 provides a source for generating the random private key.
&lt;p&gt;The following curve names are accepted:
&lt;ul&gt;
&lt;li&gt;secp256r1  (also known as P-256 and prime256v1)&lt;/li&gt;
&lt;li&gt;secp384r1  (also known as P-384)&lt;/li&gt;
&lt;li&gt;secp521r1  (also known as P-521)&lt;/li&gt;
&lt;li&gt;secp256k1 (This is the curve used for Bitcoin)&lt;/li&gt;
&lt;/ul&gt;</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>curveName</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>curveName</objcName>
                </arg>
                <arg>
                    <argName>prng</argName>
                    <cppType>CkPrng &amp;</cppType>
                    <dnType>Prng</dnType>
                    <axType>Prng</axType>
                    <objcName>prng</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>ecc_genkey.asp</url>
                    <text>Generate an ECC Key</text>
                </link>
            </links2>
            <args2>
                <arg name="curveName" type="string" objcName="curveName" />
                <arg name="prng" type="Prng" objcName="prng" />
            </args2>
        </method>
        <method name="SharedSecretENC" axId="101" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <descrip>Computes a shared secret given a private and public key.   For example, Alice and Bob can compute the identical shared secret by doing the following:  Alice sends Bob her public key, and Bob calls SharedSecretENC with his private key and Alice's public key.   Bob sends Alice his public key, and Alice calls SharedSecretENC with her private key and Bob's public key.  Both calls to SharedSecretENC will produce the same result.  The resulting bytes are returned in encoded string form (hex, base64, etc) as specified by ARG3.
&lt;p&gt;Note: The private and public keys must both be keys on the same ECC curve.</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>privKey</argName>
                    <cppType>CkPrivateKey &amp;</cppType>
                    <dnType>PrivateKey</dnType>
                    <axType>PrivateKey</axType>
                    <objcName>privKey</objcName>
                </arg>
                <arg>
                    <argName>pubKey</argName>
                    <cppType>CkPublicKey &amp;</cppType>
                    <dnType>PublicKey</dnType>
                    <axType>PublicKey</axType>
                    <objcName>pubKey</objcName>
                </arg>
                <arg>
                    <argName>encoding</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>List of Supported Encodings (Base64, Hex, etc.)</text>
                </link>
                <link linkType="example">
                    <url>elliptic_curve_shared_secret.asp</url>
                    <text>How to Generate an Elliptic Curve Shared Secret</text>
                </link>
            </links2>
            <args2>
                <arg name="privKey" type="PrivateKey" objcName="privKey" />
                <arg name="pubKey" type="PublicKey" objcName="pubKey" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
        </method>
        <method name="SignHashENC" ax="1" cpp="1" dn="1" axId="103" outArgName="outStr">
            <gType>string</gType>
            <descrip>Computes an ECC signature on a hash.  ECC signatures are computed and verified on the hashes of data (such as SHA1, SHA256, etc.).  The hash of the data is passed in ARG1. The encoding, such as "base64", "hex", etc. is passed in ARG2.   The ECC private key is passed in the 3rd  argument (ARG3).   Given that creating an ECC signature involves the generation of random numbers, a PRNG is passed in the 4th argument (ARG4). The signature is returned as an encoded string using the encoding specified by the ARG2 argument.</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>encodedHash</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encodedHash</objcName>
                </arg>
                <arg>
                    <argName>encoding</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <argName>privkey</argName>
                    <cppType>CkPrivateKey &amp;</cppType>
                    <dnType>PrivateKey</dnType>
                    <axType>PrivateKey</axType>
                    <objcName>privkey</objcName>
                </arg>
                <arg>
                    <argName>prng</argName>
                    <cppType>CkPrng &amp;</cppType>
                    <dnType>Prng</dnType>
                    <axType>Prng</axType>
                    <objcName>prng</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>List of Supported Encodings (Base64, Hex, etc.)</text>
                </link>
                <link linkType="example">
                    <url>ecdsa_sign_data.asp</url>
                    <text>ECDSA Sign Data and Verify Signature</text>
                </link>
            </links2>
            <args2>
                <arg name="encodedHash" type="string" objcName="encodedHash" />
                <arg name="encoding" type="string" objcName="encoding" />
                <arg name="privkey" type="PrivateKey" objcName="privkey" />
                <arg name="prng" type="Prng" objcName="prng" />
            </args2>
        </method>
        <method name="VerifyHashENC" ax="1" cpp="1" dn="1" axId="102">
            <gType>int</gType>
            <descrip>Verifies an ECC signature.  ECC signatures are computed and verified on the hashes of data (such as SHA1, SHA256, etc.).  The hash of the data is passed in ARG1. The encoded signature is passed in ARG2.  The encoding of both the hash and signature, such as "base64", "hex", etc. is passed in ARG3.   The ECC public key is passed in the last argument (ARG4).
&lt;p&gt;
The method returns 1 for a valid signature, 0 for an invalid signature, and -1 for any other failure.</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>encodedHash</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encodedHash</objcName>
                </arg>
                <arg>
                    <argName>encodedSig</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encodedSig</objcName>
                </arg>
                <arg>
                    <argName>encoding</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <argName>pubkey</argName>
                    <cppType>CkPublicKey &amp;</cppType>
                    <dnType>PublicKey</dnType>
                    <axType>PublicKey</axType>
                    <objcName>pubkey</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>List of Supported Encodings (Base64, Hex, etc.)</text>
                </link>
                <link linkType="example">
                    <url>ecdsa_sign_data.asp</url>
                    <text>ECDSA Sign Data and Verify Signature</text>
                </link>
            </links2>
            <args2>
                <arg name="encodedHash" type="string" objcName="encodedHash" />
                <arg name="encodedSig" type="string" objcName="encodedSig" />
                <arg name="encoding" type="string" objcName="encoding" />
                <arg name="pubkey" type="PublicKey" objcName="pubkey" />
            </args2>
        </method>
        <method name="GenEccKey2" ax="1" cpp="1" dn="1" axId="104">
            <gType>PrivateKey</gType>
            <descrip>Generates an ECC private key using a specified value for K.   The ARG1 specifies the curve name which determines the key size.   The ARG2 is the encoded value of the private key.  The ARG3 is the encoding used for ARG2, which can be "hex", "base64", "decimal", etc.   
&lt;p&gt;
Note: This method is typically used for testing -- such as when the same private key is desired to produce results identical from run to run.
&lt;/p&gt;
&lt;p&gt;The following curve names are accepted:
&lt;ul&gt;
&lt;li&gt;secp256r1  (also known as P-256 and prime256v1)&lt;/li&gt;
&lt;li&gt;secp384r1  (also known as P-384)&lt;/li&gt;
&lt;li&gt;secp521r1  (also known as P-521)&lt;/li&gt;
&lt;li&gt;secp256k1 (This is the curve used for Bitcoin)&lt;/li&gt;
&lt;/ul&gt;</descrip>
            <iversion>9.5.0.55</iversion>
            <args>
                <arg>
                    <argName>curveName</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>curveName</objcName>
                </arg>
                <arg>
                    <argName>encodedK</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encodedK</objcName>
                </arg>
                <arg>
                    <argName>encoding</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encoding</objcName>
                </arg>
            </args>
            <args2>
                <arg name="curveName" type="string" objcName="curveName" />
                <arg name="encodedK" type="string" objcName="encodedK" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>ecc_verify_key_generation.asp</url>
                    <text>Generate ECC Keys using Specified Values for K</text>
                </link>
            </links2>
        </method>
    </methods>
    <properties />
    <events />
    <clsid>FA61EA29-BFF4-4CC4-AEC6-C7BA6590178F</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidMidl>A1F4B713-D40B-4B92-BAB8-016AD671ACE8</uuidMidl>
    <nextAxId>105</nextAxId>
</class>
