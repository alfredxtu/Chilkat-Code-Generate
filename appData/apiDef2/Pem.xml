<?xml version="1.0" encoding="utf-8" ?>
<class XojoModuleId="310776880" license="Bundle" baseProgress="1" hasEvents="1" sourceXmlPath="C:/ck2000/appData/apiDef2/Pem.xml">
    <genericName>Pem</genericName>
    <cppName>CkPem</cppName>
    <dnName>Pem</dnName>
    <axName>ChilkatPem</axName>
    <description>For creating, loading, parsing, converting, and saving in the PEM format.
&lt;p&gt;
&lt;b&gt;Note: &lt;/b&gt;  There are many types of objects that can be stored in PEM format.  Chilkat supports certificates, private keys, and public keys.  There is still much more to do.  If there is a need to support a particular type of content, contact Chilkat (support@chilkatsoft.com).</description>
    <methods>
        <method name="AddCert" axId="120" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Adds a certificate, and potentially the certs in its chain of authentication to the PEM.  If ARG2 is _TRUE_, then certificates in the ARG1's  chain of authentication up to and including the root are automatically added.</descrip>
            <iversion>9.5.0.49</iversion>
            <args>
                <arg>
                    <argName>cert</argName>
                    <cppType>CkCert &amp;</cppType>
                    <dnType>Cert</dnType>
                    <axType>Cert</axType>
                    <objcName>cert</objcName>
                </arg>
                <arg>
                    <argName>includeChain</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>includeChain</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>pem_add_certs_keys.asp</url>
                    <text>Add Private Key and Certificate to a PEM</text>
                </link>
            </links2>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
                <arg name="includeChain" type="bool" objcName="includeChain" />
            </args2>
        </method>
        <method name="AddPrivateKey" axId="119" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Adds a private key to the PEM object.</descrip>
            <iversion>9.5.0.49</iversion>
            <args>
                <arg>
                    <argName>privateKey</argName>
                    <cppType>CkPrivateKey &amp;</cppType>
                    <dnType>PrivateKey</dnType>
                    <axType>PrivateKey</axType>
                    <objcName>privateKey</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>pem_add_certs_keys.asp</url>
                    <text>Add Private Key and Certificate to a PEM</text>
                </link>
                <link linkType="example">
                    <url>openssl_pkcs12_export.asp</url>
                    <text>Duplicate openssl pkcs12 –export –in certfile.cer –inkey certfile.key –out certfile.pfx</text>
                </link>
            </links2>
            <args2>
                <arg name="privateKey" type="PrivateKey" objcName="privateKey" />
            </args2>
        </method>
        <method name="AddPrivateKey2" axId="118" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Adds a private key and it's associated certificate chain to the PEM object.</descrip>
            <iversion>9.5.0.49</iversion>
            <args>
                <arg>
                    <argName>privKey</argName>
                    <cppType>CkPrivateKey &amp;</cppType>
                    <dnType>PrivateKey</dnType>
                    <axType>PrivateKey</axType>
                    <objcName>privKey</objcName>
                </arg>
                <arg>
                    <argName>certChain</argName>
                    <cppType>CkCertChain &amp;</cppType>
                    <dnType>CertChain</dnType>
                    <axType>CertChain</axType>
                    <objcName>certChain</objcName>
                </arg>
            </args>
            <args2>
                <arg name="privKey" type="PrivateKey" objcName="privKey" />
                <arg name="certChain" type="CertChain" objcName="certChain" />
            </args2>
        </method>
        <method name="AddPublicKey" ax="1" cpp="1" dn="1" status="1" axId="128">
            <gType>bool</gType>
            <descrip>Adds a public key to the PEM object.</descrip>
            <iversion>9.5.0.49</iversion>
            <args>
                <arg>
                    <argName>pubkey</argName>
                    <cppType>CkPublicKey &amp;</cppType>
                    <dnType>PublicKey</dnType>
                    <axType>PublicKey</axType>
                    <objcName>pubkey</objcName>
                </arg>
            </args>
            <args2>
                <arg name="pubkey" type="PublicKey" objcName="pubkey" />
            </args2>
        </method>
        <method name="Clear" ax="1" cpp="1" dn="1" status="1" axId="129">
            <gType>bool</gType>
            <descrip>Removes all content from this PEM object.</descrip>
            <iversion>9.5.0.49</iversion>
            <args />
            <args2 />
        </method>
        <method name="GetCert" axId="104" ax="1" cpp="1" dn="1">
            <gType>Cert</gType>
            <descrip>Returns the Nth certificate from the PEM.  The first certificate is at index 0.</descrip>
            <iversion>9.5.0.49</iversion>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
            </args>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
        </method>
        <method name="GetEncodedItem" ax="1" cpp="1" dn="1" axId="131" outArgName="outStr">
            <gType>string</gType>
            <descrip>Returns the encoded contents of the Nth item of a particular type (0-based ARG4).  The possible values for ARG1 are "certificate" (or "cert"), "privateKey", "publicKey", or "csr".  Input string args are case-insensitive.  If the ARG1 is "privateKey", the ARG2 may be "der" or "pkcs8".   If the ARG1 is "publicKey", the ARG2 may be "der" or "pkcs1".  The ARG2 is ignored for other values of ARG1.   The valid ARG3 modes are "Base64", "modBase64", "Base32", "Base58", "QP" (for quoted-printable), "URL" (for url-encoding), "Hex", "url_oauth", "url_rfc1738", "url_rfc2396", and "url_rfc3986".</descrip>
            <iversion>9.5.0.50</iversion>
            <args>
                <arg>
                    <argName>itemType</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>itemType</objcName>
                </arg>
                <arg>
                    <argName>itemSubType</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>itemSubType</objcName>
                </arg>
                <arg>
                    <argName>encoding</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <args2>
                <arg name="itemType" type="string" objcName="itemType" />
                <arg name="itemSubType" type="string" objcName="itemSubType" />
                <arg name="encoding" type="string" objcName="encoding" />
                <arg name="index" type="int" objcName="index" />
            </args2>
        </method>
        <method name="GetPrivateKey" axId="105" ax="1" cpp="1" dn="1">
            <gType>PrivateKey</gType>
            <descrip>Returns the Nth private key  from the PEM.  The first private key is at index 0.</descrip>
            <iversion>9.5.0.49</iversion>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
            </args>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
        </method>
        <method name="GetPublicKey" ax="1" cpp="1" dn="1" axId="124">
            <gType>PublicKey</gType>
            <descrip>Returns the Nth public key  from the PEM.  The first public key is at index 0.</descrip>
            <iversion>9.5.0.49</iversion>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
            </args>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
        </method>
        <method name="LoadP7b" ax="1" cpp="1" dn="1" events="1" status="1" axId="113">
            <gType>bool</gType>
            <descrip>Loads the PEM from  the contents of an in-memory PKCS7 container (.p7b).</descrip>
            <iversion>9.5.0.49</iversion>
            <args>
                <arg>
                    <argName>p7bData</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <dnType>bytes</dnType>
                    <axType>bytes</axType>
                    <objcName>p7bData</objcName>
                </arg>
            </args>
            <args2>
                <arg name="p7bData" type="bytes" objcName="p7bData" />
            </args2>
        </method>
        <method name="LoadP7bFile" axId="106" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Loads the contents of a PKCS7 container (.p7b file).</descrip>
            <iversion>9.5.0.49</iversion>
            <args>
                <arg>
                    <argName>path</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>path</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>pem_p7b_list_certs.asp</url>
                    <text>Load P7B and List Certificates</text>
                </link>
            </links2>
            <args2>
                <arg name="path" type="string" objcName="path" />
            </args2>
        </method>
        <method name="LoadPem" axId="103" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Loads the PEM from a PEM string.  If encrypted, then the ARG2 is required for decryption.  Otherwise, an empty string (or any string) may be passed for the ARG2.</descrip>
            <iversion>9.5.0.49</iversion>
            <args>
                <arg>
                    <argName>pemContent</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>pemContent</objcName>
                </arg>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
            </args>
            <args2>
                <arg name="pemContent" type="string" objcName="pemContent" />
                <arg name="password" type="string" objcName="password" />
            </args2>
        </method>
        <method name="LoadPemFile" axId="112" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Loads the PEM from a PEM file.  If encrypted, then the ARG2 is required for decryption.  Otherwise, an empty string (or any string) may be passed for the ARG2.</descrip>
            <iversion>9.5.0.49</iversion>
            <args>
                <arg>
                    <argName>path</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>path</objcName>
                </arg>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>pem_load_list_certs.asp</url>
                    <text>Load PEM and List Certificates</text>
                </link>
            </links2>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="password" type="string" objcName="password" />
            </args2>
        </method>
        <method name="RemoveCert" ax="1" cpp="1" dn="1" status="1" axId="121">
            <gType>bool</gType>
            <descrip>Removes  the Nth certificate from the PEM.  The first certificate is at index 0.</descrip>
            <iversion>9.5.0.49</iversion>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
            </args>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
        </method>
        <method name="RemovePrivateKey" ax="1" cpp="1" dn="1" status="1" axId="122">
            <gType>bool</gType>
            <descrip>Removes  the Nth private key from the PEM.  The first private key is at index 0.</descrip>
            <iversion>9.5.0.49</iversion>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
            </args>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
        </method>
        <method name="ToJks" axId="116" ax="1" cpp="1" dn="1">
            <gType>JavaKeyStore</gType>
            <descrip>Converts the PEM to JKS and returns the Java KeyStore object.   If the ARG1 is non-empty, the 1st object (private key or certificate) will use the alias, and all others (if any) will receive auto-generated aliases. The JKS returned will be encrypted using the provided ARG2.   If the PEM contains only certificates (no private keys), then the ARG2 is unused.</descrip>
            <iversion>9.5.0.49</iversion>
            <args>
                <arg>
                    <argName>alias</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>alias</objcName>
                </arg>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>pem_to_jks.asp</url>
                    <text>Convert PEM to JKS (Java KeyStore)</text>
                </link>
            </links2>
            <args2>
                <arg name="alias" type="string" objcName="alias" />
                <arg name="password" type="string" objcName="password" />
            </args2>
        </method>
        <method name="ToPem" axId="108" ax="1" cpp="1" dn="1" status="1" outArgName="outStr">
            <gType>string</gType>
            <descrip>Write the PFX to a PEM formatted string.  The resultant PEM will contain the private key, as well as the certs in the chain of authentication (or whatever certs are available in the PFX).  For example:
&lt;pre&gt;
 -----BEGIN RSA PRIVATE KEY-----
...
... the private key associated with the main certificate.
...
-----END RSA PRIVATE KEY-----
-----BEGIN CERTIFICATE-----
...
... the main certificate
...
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
...
... an intermediate CA certificate (if present)
...
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
...
... the root CA certificate
...
-----END CERTIFICATE----- 
&lt;/pre&gt;</descrip>
            <iversion>9.5.0.47</iversion>
            <args>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <args2 />
        </method>
        <method name="ToPemEx" axId="117" ax="1" cpp="1" dn="1" status="1" outArgName="outStr">
            <gType>string</gType>
            <descrip>Write the PFX to a PEM formatted string.  If ARG1 is _TRUE_, then extended properties (Bag Attributes and Key Attributes) are output.  If ARG2 is _TRUE_, then no private keys are output. If ARG3 is _TRUE_, then no certificates are output.  If ARG4 is _TRUE_, then  no CA certs or intermediate CA certs are output.  If ARG5 is not empty, it indicates the encryption algorithm to be used for encrypting the private keys (otherwise the private keys are output unencrypted).  The possible choices for the ARG5 are "des3", "aes128", "aes192", and "aes256".  (All encryption algorithm choices use CBC mode.) If the private keys are to be encrypted, then ARG6 is the password to be used. Otherwise, ARG6 may be left empty.

For example:
&lt;pre&gt;
Bag Attributes
    Microsoft Local Key set: &amp;lt;No Values&gt;
    localKeyID: 01 00 00 00 
    friendlyName: le-2b09a3d2-9037-4a05-95cc-4d44518e8607
    Microsoft CSP Name: Microsoft RSA SChannel Cryptographic Provider
Key Attributes
    X509v3 Key Usage: 10 
 -----BEGIN RSA PRIVATE KEY-----
...
... the private key associated with the main certificate.
...
-----END RSA PRIVATE KEY-----
Bag Attributes
    localKeyID: 01 00 00 00 
    1.3.6.1.4.1.311.17.3.92: 00 08 00 00 
    1.3.6.1.4.1.311.17.3.20: C2 53 54 F3 ...
    1.3.6.1.4.1.311.17.3.71: 49 00 43 00 ...
    1.3.6.1.4.1.311.17.3.75: 31 00 42 00 ...
subject=/OU=Domain Control Validated/OU=PositiveSSL/CN=something.com
issuer=/C=GB/ST=Greater Manchester/L=Salford/O=COMODO CA Limited/CN=COMODO RSA Domain Validation Secure Server CA
-----BEGIN CERTIFICATE-----
...
... the main certificate
...
-----END CERTIFICATE-----
...
-----BEGIN CERTIFICATE-----
...
... an intermediate CA certificate (if present)
...
-----END CERTIFICATE-----
...
-----BEGIN CERTIFICATE-----
...
... the root CA certificate
...
-----END CERTIFICATE----- 
&lt;/pre&gt;</descrip>
            <iversion>9.5.0.49</iversion>
            <args>
                <arg>
                    <argName>extendedAttrs</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>extendedAttrs</objcName>
                </arg>
                <arg>
                    <argName>noKeys</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>noKeys</objcName>
                </arg>
                <arg>
                    <argName>noCerts</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>noCerts</objcName>
                </arg>
                <arg>
                    <argName>noCaCerts</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>noCaCerts</objcName>
                </arg>
                <arg>
                    <argName>encryptAlg</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encryptAlg</objcName>
                </arg>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <args2>
                <arg name="extendedAttrs" type="bool" objcName="extendedAttrs" />
                <arg name="noKeys" type="bool" objcName="noKeys" />
                <arg name="noCerts" type="bool" objcName="noCerts" />
                <arg name="noCaCerts" type="bool" objcName="noCaCerts" />
                <arg name="encryptAlg" type="string" objcName="encryptAlg" />
                <arg name="password" type="string" objcName="password" />
            </args2>
        </method>
        <method name="ToPfx" axId="115" ax="1" cpp="1" dn="1">
            <gType>Pfx</gType>
            <descrip>Converts the PEM to PKCS12 and returns the PFX object.  The PFX object has method for saving to a file, exporting to an encoded string, converting to a JKS (Java Keystore), or even converting back to PEM.
&lt;p&gt;
&lt;b&gt;Note: &lt;/b&gt;The PEM must contain at least one private key to convert to PKCS12.  The typical case is that a PKCS12 contains a single private key, along with the associated certificate and the certificates in the chain of authentication.</descrip>
            <iversion>9.5.0.49</iversion>
            <args />
            <links2>
                <link linkType="example">
                    <url>pem_to_pkcs12.asp</url>
                    <text>Convert PEM to PKCS12 / PFX</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method name="AddItem" ax="1" cpp="1" dn="1" status="1" axId="132">
            <gType>bool</gType>
            <descrip>Adds a certificate, private key, public key, or csr to the PEM.  The possible values for ARG1 are "certificate" (or "cert"), "privateKey", "publicKey", or "csr".  The ARG2 can be "Base64", "modBase64", "Base32", "QP" (for quoted-printable), "URL" (for url-encoding), "Hex", "url_oauth", "url_rfc1738", "url_rfc2396", and "url_rfc3986".  The ARG3 contains the ASN.1 data in string format according to the encoding specified in ARG2.</descrip>
            <iversion>9.5.0.59</iversion>
            <args>
                <arg>
                    <argName>itemType</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>itemType</objcName>
                </arg>
                <arg>
                    <argName>encoding</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <argName>itemData</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>itemData</objcName>
                </arg>
            </args>
            <args2>
                <arg name="itemType" type="string" objcName="itemType" />
                <arg name="encoding" type="string" objcName="encoding" />
                <arg name="itemData" type="string" objcName="itemData" />
            </args2>
        </method>
    </methods>
    <properties>
        <property name="AppendMode" read="1" write="1" ax="1" cpp="1" dn="1" axId="127">
            <gType>bool</gType>
            <descrip>When set to _TRUE_, each of the Load* methods appends to the current contents of this PEM object.  When set to _FALSE_, a Load* method replaces the contents of this PEM object.  The default is _FALSE_.</descrip>
            <iversion>9.5.0.49</iversion>
        </property>
        <property name="HeartbeatMs" axId="114" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>This is the number of milliseconds between each AbortCheck event callback.  The AbortCheck callback allows an application to abort any event-enabled methods prior to completion.  If HeartbeatMs is 0 (the default), no AbortCheck event callbacks will fire.</descrip>
            <iversion>9.5.0.49</iversion>
        </property>
        <property name="NumCerts" axId="100" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>The number of certificates in the loaded PEM.  To get the 1st certificate, call GetCert(0).</descrip>
            <iversion>9.5.0.49</iversion>
            <links2>
                <link linkType="example">
                    <url>pem_iterate.asp</url>
                    <text>Iterate Keys and Certs in PEM</text>
                </link>
            </links2>
        </property>
        <property name="NumCsrs" read="1" ax="1" cpp="1" dn="1" axId="130">
            <gType>int</gType>
            <descrip>The number of certificate signing requests (CSRs)  in the loaded PEM.</descrip>
            <iversion>9.5.0.50</iversion>
        </property>
        <property name="NumPrivateKeys" axId="101" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>The number of private keys in the loaded PEM.  To get the 1st private key, call GetPrivateKey(0).</descrip>
            <iversion>9.5.0.49</iversion>
            <links2>
                <link linkType="example">
                    <url>pem_iterate.asp</url>
                    <text>Iterate Keys and Certs in PEM</text>
                </link>
            </links2>
        </property>
        <property name="NumPublicKeys" axId="123" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>The number of public keys in the loaded PEM.  To get the 1st public key, call GetPublicKey(0).</descrip>
            <iversion>9.5.0.49</iversion>
        </property>
        <property name="PrivateKeyFormat" read="1" write="1" ax="1" cpp="1" dn="1" axId="126">
            <gType>string</gType>
            <descrip>Controls the format to be used for &lt;b&gt;unencrypted&lt;/b&gt; private keys when writing a PEM.  Possible values are "pkcs1" and "pkcs8".  (OpenSSL typically uses the "pkcs8" format.)  When writing encrypted private keys to PEM, the format is always PKCS8, and the PEM header is "BEGIN ENCRYPTED PRIVATE KEY".   The default is "pkcs8".
&lt;p&gt;
The PKCS1 format uses the PEM header: BEGIN RSA PRIVATE KEY.&lt;br&gt;
The PKCS8 format uses the PEM header: BEGIN PRIVATE  KEY.</descrip>
            <iversion>9.5.0.49</iversion>
        </property>
        <property name="PublicKeyFormat" axId="125" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Controls the format to be used for public keys when writing a PEM.  Possible values are "pkcs1" and "pkcs8".  (OpenSSL typically uses the "pkcs8" format.)   The default is "pkcs8".
&lt;p&gt;
The PKCS1 format uses the PEM header: BEGIN RSA PUBLIC KEY.&lt;br&gt;
The PKCS8 format uses the PEM header: BEGIN PUBLIC  KEY.</descrip>
            <iversion>9.5.0.49</iversion>
            <links2>
                <link linkType="example">
                    <url>pem_public_keys.asp</url>
                    <text>Write PKCS1 or PKCS8 Public Key PEM</text>
                </link>
            </links2>
        </property>
    </properties>
    <events />
    <clsid>0D35E491-3CD9-470D-9373-D1B8BFC7A298</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidMidl>011A33C5-ABFF-431E-A08C-D6038DDA1CAA</uuidMidl>
    <nextAxId>133</nextAxId>
    <uuidEvents>0B8EF7C4-D76F-4EA3-A38F-2A9D2E520C97</uuidEvents>
</class>
