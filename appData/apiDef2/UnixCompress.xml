<?xml version="1.0" encoding="utf-8" ?>
<class XojoModuleId="860458874" license="Zip" baseProgress="1" hasEvents="1" sourceXmlPath="C:/ck2000/appData/apiDef2/UnixCompress.xml">
    <axName>UnixCompress</axName>
    <dnName>UnixCompress</dnName>
    <cppName>CkUnixCompress</cppName>
    <properties>
        <property name="HeartbeatMs" axId="100" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>The number of milliseconds between each AbortCheck event callback.  The AbortCheck callback allows an application to abort any method call prior to completion.  If HeartbeatMs is 0 (the default), no AbortCheck event callbacks will fire.</descrip>
        </property>
        <property name="AbortCurrent" read="1" write="1" ax="1" cpp="1" dn="1" axId="118">
            <gType>bool</gType>
            <descrip>When set to _TRUE_, causes the currently running method to abort.  Methods that always finish quickly (i.e.have no length file operations or network communications) are not affected.  If no method is running, then this property is automatically reset to _FALSE_ when the next method is called.  When the abort occurs, this property is reset to _FALSE_.  Both synchronous and asynchronous method calls can be aborted.  (A synchronous method call could be aborted by setting this property from a separate thread.)</descrip>
            <iversion>9.5.0.58</iversion>
        </property>
    </properties>
    <methods>
        <method name="CompressFile" axId="101" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inFilename</argName>
                    <objcName>srcPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>destPath</argName>
                    <objcName>destPath</objcName>
                </arg>
            </args>
            <descrip>Compresses a file to create a UNIX compressed file (.Z).  This compression uses the LZW (Lempel-Ziv-Welch) compression algorithm.</descrip>
            <args2>
                <arg name="inFilename" type="string" objcName="srcPath" />
                <arg name="destPath" type="string" objcName="destPath" />
            </args2>
        </method>
        <method name="CompressFileToMem" axId="102" ax="1" cpp="1" dn="1" events="1" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inFilename</argName>
                    <objcName>srcPath</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Unix compresses a file to an in-memory image of a .Z file.  (This compression uses the LZW (Lempel-Ziv-Welch) compression algorithm.)</descrip>
            <args2>
                <arg name="inFilename" type="string" objcName="srcPath" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="CompressMemToFile" axId="103">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>db</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>destPath</argName>
                    <objcName>destPath</objcName>
                </arg>
            </args>
            <descrip>Unix compresses and creates a .Z file from in-memory data.   (This compression uses the LZW (Lempel-Ziv-Welch) compression algorithm.)</descrip>
            <args2>
                <arg name="inData" type="bytes" objcName="db" />
                <arg name="destPath" type="string" objcName="destPath" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="CompressMemory" axId="104" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>dbIn</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Compresses in-memory data to an in-memory image of a .Z file.   (This compression uses the LZW (Lempel-Ziv-Welch) compression algorithm.)</descrip>
            <args2>
                <arg name="inData" type="bytes" objcName="dbIn" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="CompressString" axId="105" outArgName="outBytes">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inStr</argName>
                    <objcName>inStr</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>Compresses a string to an in-memory image of a .Z file.   Prior to compression, the string is converted to the character encoding specified by ARG2.   The ARG2 can be any one of a large number of character encodings, such as "utf-8", "iso-8859-1", "Windows-1252", "ucs-2", etc.</descrip>
            <links2>
                <link linkType="external">
                    <text>List of Valid Charsets</text>
                    <url>http://www.chilkatsoft.com/p/p_463.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="inStr" type="string" objcName="inStr" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="CompressStringToFile" axId="106">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inStr</argName>
                    <objcName>inStr</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>destPath</argName>
                    <objcName>destPath</objcName>
                </arg>
            </args>
            <descrip>Unix compresses and creates a .Z file from string data.   The ARG2 specifies the character encoding used for the byte representation of the characters when compressed.  The ARG2 can be any one of a large number of character encodings, such as "utf-8", "iso-8859-1", "Windows-1252", "ucs-2", etc.</descrip>
            <links2>
                <link linkType="external">
                    <text>List of Valid Charsets</text>
                    <url>http://www.chilkatsoft.com/p/p_463.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="inStr" type="string" objcName="inStr" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="destPath" type="string" objcName="destPath" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="IsUnlocked" axId="107">
            <gType>bool</gType>
            <args />
            <descrip>Returns true if the component has been unlocked. (For ActiveX, returns 1 if unlocked.)</descrip>
            <args2 />
        </method>
        <method cpp="0" dn="0" ax="1" name="ReadFile" axId="116">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <argName>filename</argName>
                </arg>
            </args>
            <descrip>Convenience method to read an entire file and return as a byte array.</descrip>
            <args2>
                <arg name="filename" type="string" />
            </args2>
        </method>
        <method name="UnTarZ" ax="1" cpp="1" dn="1" events="1" status="1" axId="108">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>zFilename</argName>
                    <objcName>zPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>destDir</argName>
                    <objcName>destDir</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bNoAbsolute</argName>
                    <objcName>bNoAbsolute</objcName>
                </arg>
            </args>
            <descrip>Unpacks a .tar.Z file.  The decompress and untar occur in streaming mode.  There are no temporary files and the memory footprint is constant (and small) while untarring.</descrip>
            <args2>
                <arg name="zFilename" type="string" objcName="zPath" />
                <arg name="destDir" type="string" objcName="destDir" />
                <arg name="bNoAbsolute" type="bool" objcName="bNoAbsolute" />
            </args2>
        </method>
        <method name="UncompressFile" axId="109" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inFilename</argName>
                    <objcName>srcPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>destPath</argName>
                    <objcName>destPath</objcName>
                </arg>
            </args>
            <descrip>Uncompresses a .Z file.  (This compression uses the LZW (Lempel-Ziv-Welch) compression algorithm.)</descrip>
            <args2>
                <arg name="inFilename" type="string" objcName="srcPath" />
                <arg name="destPath" type="string" objcName="destPath" />
            </args2>
        </method>
        <method name="UncompressFileToMem" axId="110" ax="1" cpp="1" dn="1" events="1" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>inFilename</argName>
                    <objcName>srcPath</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Uncompresses a .Z file directly to memory.  (This compression uses the LZW (Lempel-Ziv-Welch) compression algorithm.)</descrip>
            <args2>
                <arg name="inFilename" type="string" objcName="srcPath" />
            </args2>
        </method>
        <method name="UncompressFileToString" axId="111" ax="1" cpp="1" dn="1" events="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>zFilename</argName>
                    <objcName>srcPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>inCharset</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Uncompresses a .Z file that contains a text file.  The contents of the text file are returned as a string.  The character encoding of the text file is specified by ARG2.  Typical charsets are "iso-8859-1", "utf-8", "windows-1252", "shift_JIS", "big5", etc.</descrip>
            <links2>
                <link linkType="external">
                    <text>List of Valid Charsets</text>
                    <url>http://www.chilkatsoft.com/p/p_463.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="zFilename" type="string" objcName="srcPath" />
                <arg name="charset" type="string" objcName="inCharset" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="UncompressMemToFile" axId="112">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>db</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>destPath</argName>
                    <objcName>destPath</objcName>
                </arg>
            </args>
            <descrip>Uncompresses from an in-memory image of a .Z file to a file.   (This compression uses the LZW (Lempel-Ziv-Welch) compression algorithm.)</descrip>
            <args2>
                <arg name="inData" type="bytes" objcName="db" />
                <arg name="destPath" type="string" objcName="destPath" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="UncompressMemory" axId="113" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>dbIn</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Uncompresses from an in-memory image of a .Z file directly into memory.   (This compression uses the LZW (Lempel-Ziv-Welch) compression algorithm.)</descrip>
            <args2>
                <arg name="inData" type="bytes" objcName="dbIn" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="UncompressString" axId="114" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inCompressedData</argName>
                    <objcName>inData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>inCharset</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Uncompresses from an in-memory image of a .Z file directly to a string.   The ARG2 specifies the character encoding used to interpret the bytes resulting from the decompression.  The ARG2 can be any one of a large number of character encodings, such as "utf-8", "iso-8859-1", "Windows-1252", "ucs-2", etc.</descrip>
            <links2>
                <link linkType="external">
                    <text>List of Valid Charsets</text>
                    <url>http://www.chilkatsoft.com/p/p_463.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="inCompressedData" type="bytes" objcName="inData" />
                <arg name="charset" type="string" objcName="inCharset" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="UnlockComponent" axId="115">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>unlockCode</argName>
                    <objcName>unlockCode</objcName>
                </arg>
            </args>
            <descrip>Unlocks the component allowing for the full functionality to be used.</descrip>
            <args2>
                <arg name="unlockCode" type="string" objcName="unlockCode" />
            </args2>
            <links2>
                <link linkType="external">
                    <text>Diagnosing UnlockComponent Problems</text>
                    <url>http://www.cknotes.com/?p=168</url>
                </link>
                <link linkType="external">
                    <text>UnlockComponent LastErrorText shows exact string passed to it.</text>
                    <url>http://www.cknotes.com/?p=315</url>
                </link>
                <link linkType="external">
                    <text>Verify UnlockComponent Success w/ Purchased Unlock Code</text>
                    <url>http://www.cknotes.com/?p=317</url>
                </link>
                <link linkType="external">
                    <text>LastErrorText Standard Information</text>
                    <url>http://www.cknotes.com/?p=316</url>
                </link>
            </links2>
        </method>
        <method cpp="0" dn="0" ax="1" status="1" name="WriteFile" axId="117">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <argName>filename</argName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <argName>binaryData</argName>
                </arg>
            </args>
            <descrip>Convenience method for writing the contents of a byte array to a file.</descrip>
            <args2>
                <arg name="filename" type="string" />
                <arg name="binaryData" type="bytes" />
            </args2>
        </method>
    </methods>
    <events>
        <standard name="AbortCheck" />
        <standard name="PercentDone" />
    </events>
    <genericName>UnixCompress</genericName>
    <description>UNIX (.Z) compression component.</description>
    <clsid>F8295E9E-9E5B-486E-AA93-33E5726C4EE6</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidEvents>E03F4C5C-ED54-4CA6-BA01-36D5FE662522</uuidEvents>
    <uuidMidl>68CB048E-A120-4A99-B9DC-650775764421</uuidMidl>
    <nextAxId>119</nextAxId>
</class>
