<?xml version="1.0" encoding="utf-8" ?>
<class license="Bundle" sourceXmlPath="C:/ck2000/appData/apiDef2/Jwt.xml">
    <genericName>Jwt</genericName>
    <cppName>CkJwt</cppName>
    <dnName>Jwt</dnName>
    <axName>ChilkatJwt</axName>
    <description>A class for signing and verifying JWT's  (Java Web Tokens).</description>
    <methods>
        <method name="CreateJwt" axId="101" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <descrip>Creates a JWT.  The ARG1 is the JOSE JSON header.  It can be the full JOSE JSON, or it can be a shorthand string such as "HS256", "HS384", or "HS512", in which case the standard JOSE header for the given algorithm will be used.  
&lt;p&gt;
The ARG2 is the JSON payload that contains the claims.  The ARG3 is the secret.  Given that the secret is a shared passwod string, this method should only be called for creating JWT's where the JOSE header's "alg" is HS256, HS384, or HS512.   For RS256, RS384, RS512, ES256, ES384, and ES512, call CreateJwtPk instead.
&lt;p&gt;
When successful, this method returns a JWT with the format xxxxx.yyyyy.zzzzz, where xxxxx is the  base64url encoded JOSE header, yyyyy is the  base64url encoded payload, and zzzzz is the base64url signature.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>header</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>header</objcName>
                </arg>
                <arg>
                    <argName>payload</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>payload</objcName>
                </arg>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>jwt_create_hs256_hs384_hs512.asp</url>
                    <text>Create JWT Using HS256, HS384, or HS512</text>
                </link>
                <link linkType="example">
                    <url>firebase_jwt_authentication.asp</url>
                    <text>Firebase JWT User Authentication</text>
                </link>
            </links2>
            <args2>
                <arg name="header" type="string" objcName="header" />
                <arg name="payload" type="string" objcName="payload" />
                <arg name="password" type="string" objcName="password" />
            </args2>
        </method>
        <method name="CreateJwtPk" axId="102" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <descrip>Creates a JWT using an RSA or ECC private key.  The ARG1 is the JOSE JSON header.    It can be the full JOSE JSON, or it can be a shorthand string such as "RS256", "RS384", "RS512", "ES256", "ES384", or "ES512", in which case the standard JOSE header for the given algorithm will be used.  
&lt;p&gt;
The ARG2 is the JSON payload that contains the claims.  The ARG3 is the private key.  This method should only be called for creating JWT's where the JOSE header's "alg" is RS256, RS384, RS512, ES256, ES384, and ES512.  If the secret is a shared password string, then call CreateJwt instead.
&lt;p&gt;
When successful, this method returns a JWT with the format xxxxx.yyyyy.zzzzz, where xxxxx is the  base64url encoded JOSE header, yyyyy is the  base64url encoded payload, and zzzzz is the base64url signature.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>header</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>header</objcName>
                </arg>
                <arg>
                    <argName>payload</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>payload</objcName>
                </arg>
                <arg>
                    <argName>key</argName>
                    <cppType>CkPrivateKey &amp;</cppType>
                    <dnType>PrivateKey</dnType>
                    <axType>PrivateKey</axType>
                    <objcName>key</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>jwt_rsa_create.asp</url>
                    <text>Create JWT Using RSA (RS256, RS384, or RS512)</text>
                </link>
                <link linkType="example">
                    <url>jwt_ecc_create.asp</url>
                    <text>Create JWT Using ECC (ES256, ES384, or ES512)</text>
                </link>
            </links2>
            <args2>
                <arg name="header" type="string" objcName="header" />
                <arg name="payload" type="string" objcName="payload" />
                <arg name="key" type="PrivateKey" objcName="key" />
            </args2>
        </method>
        <method name="GenNumericDate" ax="1" cpp="1" dn="1" axId="107">
            <gType>int</gType>
            <descrip>Generates a JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds.  The date/time generated is equal to the current system time plus the number of seconds specified by ARG1.  The ARG1 can be negative.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>numSecOffset</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>numSecOffset</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>jwt_create_hs256_hs384_hs512.asp</url>
                    <text>Create JWT Using HS256, HS384, or HS512</text>
                </link>
            </links2>
            <args2>
                <arg name="numSecOffset" type="int" objcName="numSecOffset" />
            </args2>
        </method>
        <method name="GetHeader" ax="1" cpp="1" dn="1" axId="105" outArgName="outStr">
            <gType>string</gType>
            <descrip>Decodes the first part of a JWT (the "xxxxx" part of the  "xxxxx.yyyyy.zzzzz" JWT) and returns the JSON string.  This is the JOSE header of the JWT.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>token</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>token</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>jwt_verify_hs256_hs384_hs512.asp</url>
                    <text>Verify JWT Using HS256, HS384, or HS512</text>
                </link>
            </links2>
            <args2>
                <arg name="token" type="string" objcName="token" />
            </args2>
        </method>
        <method name="GetPayload" ax="1" cpp="1" dn="1" axId="106" outArgName="outStr">
            <gType>string</gType>
            <descrip>Decodes the second part of a JWT (the "yyyyy" part of the  "xxxxx.yyyyy.zzzzz" JWT) and returns the JSON string.  This is the claims payload of the JWT.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>token</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>token</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>jwt_verify_hs256_hs384_hs512.asp</url>
                    <text>Verify JWT Using HS256, HS384, or HS512</text>
                </link>
            </links2>
            <args2>
                <arg name="token" type="string" objcName="token" />
            </args2>
        </method>
        <method name="IsTimeValid" ax="1" cpp="1" dn="1" axId="108">
            <gType>bool</gType>
            <descrip>Verifies the "exp" and/or "nbf" claims and returns _TRUE_ if the current system date/time is within range.  Returns _FALSE_ if the current system date/time is outside the allowed range of time.    The ARG2 may be set to a non-zero number of seconds to allow for some small leeway (usually no more than a few minutes) to account for clock skew.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>jwt</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>jwt</objcName>
                </arg>
                <arg>
                    <argName>leeway</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>leeway</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>jwt_verify_hs256_hs384_hs512.asp</url>
                    <text>Verify JWT Using HS256, HS384, or HS512</text>
                </link>
            </links2>
            <args2>
                <arg name="jwt" type="string" objcName="jwt" />
                <arg name="leeway" type="int" objcName="leeway" />
            </args2>
        </method>
        <method name="VerifyJwt" ax="1" cpp="1" dn="1" status="1" axId="103">
            <gType>bool</gType>
            <descrip>Verifies a JWT that requires a shared password string for verification.  The ARG1 should be a JWT with the format xxxxx.yyyyy.zzzzz.  This method should only be called for JWT's using the HS256, HS384, or HS512 algorithms.  The VerifyJwtPk method should be called for verifying JWT's requiring an RSA or ECC key.
&lt;p&gt;
Returns _TRUE_ if the signature was verified.  Returns _FALSE_ if the signature was not successfully verified.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>token</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>token</objcName>
                </arg>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>jwt_verify_hs256_hs384_hs512.asp</url>
                    <text>Verify JWT Using HS256, HS384, or HS512</text>
                </link>
            </links2>
            <args2>
                <arg name="token" type="string" objcName="token" />
                <arg name="password" type="string" objcName="password" />
            </args2>
        </method>
        <method name="VerifyJwtPk" ax="1" cpp="1" dn="1" status="1" axId="104">
            <gType>bool</gType>
            <descrip>Verifies a JWT that requires an RSA or ECC public key for verification.  The ARG1 should be a JWT with the format xxxxx.yyyyy.zzzzz.  This method should only be called for JWT's using the RS256, RS384,  RS512, ES256, ES384,  or ES512 algorithms.  
&lt;p&gt;
Returns _TRUE_ if the signature was verified.  Returns _FALSE_ if the signature was not successfully verified.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>token</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>token</objcName>
                </arg>
                <arg>
                    <argName>key</argName>
                    <cppType>CkPublicKey &amp;</cppType>
                    <dnType>PublicKey</dnType>
                    <axType>PublicKey</axType>
                    <objcName>key</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>jwt_rsa_verify.asp</url>
                    <text>Verify JWT Using an RSA Public Key (RS256, RS384, RS512)</text>
                </link>
                <link linkType="example">
                    <url>jwt_ecc_verify.asp</url>
                    <text>Verify JWT Using an ECC Public Key (ES256, ES384, ES512)</text>
                </link>
            </links2>
            <args2>
                <arg name="token" type="string" objcName="token" />
                <arg name="key" type="PublicKey" objcName="key" />
            </args2>
        </method>
    </methods>
    <properties>
        <property name="AutoCompact" read="1" write="1" ax="1" cpp="1" dn="1" axId="100">
            <gType>bool</gType>
            <descrip>If _TRUE_, the JSON passed to CreateJwt and CreateJwtPk will be compacted to remove unnecessary whitespace.  This will result in the smallest possible JWT.  The default value is _TRUE_.</descrip>
            <iversion>9.5.0.58</iversion>
        </property>
    </properties>
    <events />
    <clsid>9FC3155D-8F03-459F-9D96-65ADE17D3615</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidMidl>09718276-04D7-4A84-B699-42FA9A49A645</uuidMidl>
    <nextAxId>109</nextAxId>
</class>
