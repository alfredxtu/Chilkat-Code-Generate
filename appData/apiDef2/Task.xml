<?xml version="1.0" encoding="utf-8" ?>
<class XojoModuleId="463857220" sourceXmlPath="c:/ck2000/appData/apiDef2/Task.xml" license="Bundle">
    <genericName>Task</genericName>
    <cppName>CkTask</cppName>
    <dnName>Task</dnName>
    <axName>ChilkatTask</axName>
    <description>Represents a single task to be run in a background thread.</description>
    <methods>
        <method name="Cancel" axId="115" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Marks an asynchronous task for cancellation.  The expected behavior depends on the current status of the task as described here:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;"loaded"&lt;/b&gt; - If the task has been loaded but has not yet been queued to run in the thread pool, then there is nothing to do. (There is nothing to cancel because the task's Run method has not yet been called.)  The task will remain in the "loaded" state.
&lt;li&gt;&lt;b&gt;"queued"&lt;/b&gt; - The task is marked for cancellation, is dequeued, and will not run.  The task's status changes immediately to "canceled".
&lt;li&gt;&lt;b&gt;"running"&lt;/b&gt; - The already-running task is marked for cancellation.  The task's status will &lt;b&gt;eventually&lt;/b&gt; change to "aborted" when the asynchronous method returns.  At that point in time, the ResultErrorText property will contain the "LastErrorText" of the method call.  In the case where a task is marked for cancellation just at the time it's completing, the task status may instead change to "completed". 
&lt;li&gt;&lt;b&gt;"canceled", "aborted", "completed"&lt;/b&gt; - In these cases the task has already finished, and there will be no change in status.
&lt;/ul&gt;
Cancel returns _TRUE_ if the task was in the "queued" or "running" state when it was marked for cancellation.  Cancel returns _FALSE_ if the task was in any other state.
&lt;p&gt;&lt;b&gt;Important:&lt;/b&gt; Calling the Cancel method marks a task for cancellation.  It sets a flag in memory that the running task will soon notice and then abort.  It is important to realize that your application is likely calling Cancel from the main UI thread, whereas the asynchronous task is running in a background thread.  If the task was in the "running" state when Cancel was called, it will still be in the "running" state when Cancel returns.  It will take a short amount of time until the task actually aborts.  This is because operating systems schedule threads in time slices, and the thread needs one or more time slices to notice the cancellation flag and abort.  After calling Cancel, your application might wish to call the Wait method to wait  until the task has actually aborted, or it could periodically check the task's status and then react once the status changes to "aborted".</descrip>
            <iversion>9.5.0.52</iversion>
            <args />
            <args2 />
            <links2 />
        </method>
        <method name="ClearProgressLog" axId="119" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <descrip>Removes all entries from the progress info log.</descrip>
            <iversion>9.5.0.52</iversion>
            <args />
            <args2 />
            <links2 />
        </method>
        <method name="CopyResultBytes" ax="1" cpp="1" dn="1" axId="109" outArgName="outBytes">
            <gType>bytes</gType>
            <descrip>Returns the binary bytes result of the task.  The bytes are copied to the caller.</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>outBytes</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <args2 />
            <links2 />
        </method>
        <method name="GetResultBool" ax="1" cpp="1" dn="1" axId="107">
            <gType>bool</gType>
            <descrip>Returns the boolean result of the task.</descrip>
            <iversion>9.5.0.52</iversion>
            <args />
            <args2 />
            <links2 />
        </method>
        <method name="GetResultBytes" ax="1" cpp="1" dn="1" axId="108" outArgName="outBytes">
            <gType>bytes</gType>
            <descrip>Returns the binary bytes result of the task.  The bytes are transferred to the caller, not copied.   Call CopyResultBytes instead to copy the result bytes.</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>outBytes</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <args2 />
            <links2 />
        </method>
        <method name="GetResultInt" ax="1" cpp="1" dn="1" axId="106">
            <gType>int</gType>
            <descrip>Returns the integer result of the task.</descrip>
            <iversion>9.5.0.52</iversion>
            <args />
            <args2 />
            <links2 />
        </method>
        <method name="GetResultString" ax="1" cpp="1" dn="1" axId="105" outArgName="outStr">
            <gType>string</gType>
            <descrip>Returns the string result of the task.</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <args2 />
            <links2 />
        </method>
        <method name="ProgressInfoName" axId="120" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <descrip>Returns the name of  the Nth progress info event logged.  The 1st entry is at index 0.</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>async_progressInfo.asp</url>
                    <text>Async Progress Info Log</text>
                </link>
            </links2>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
        </method>
        <method name="ProgressInfoValue" axId="121" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <descrip>Returns the value of the Nth progress info event logged.  The 1st entry is at index 0.</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example" lang="~nodejs">
                    <url>async_progressInfo.asp</url>
                    <text>Async Progress Info Log</text>
                </link>
            </links2>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
        </method>
        <method name="RemoveProgressInfo" axId="122" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <descrip>Removes the Nth progress info log entry.</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
            </args>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="Run" axId="100" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>&lt;nodejs&gt;If a taskCompleted callback function is passed in, then the task is started on Node's internal thread pool. If no callback function is passed, then the task is run synchronously.&lt;/nodejs&gt;
&lt;noNodejs&gt;Queues the task to run on the internal Chilkat thread pool.&lt;/noNodejs&gt;</descrip>
            <iversion>9.5.0.52</iversion>
            <args />
            <links2>
                <link linkType="example" lang="~nodejs">
                    <url>smtp_async.asp</url>
                    <text>Send Email Asynchronously using a Task</text>
                </link>
                <link linkType="example" lang="~nodejs">
                    <url>async_threadPoolSize.asp</url>
                    <text>Thread Pool Size</text>
                </link>
                <link linkType="external" lang="nodejs">
                    <url>http://www.cknotes.com/asynchronous-chilkat-methods-in-node-js/</url>
                    <text>Asynchronous Chilkat Methods in Node.js</text>
                </link>
                <link linkType="example" lang="~nodejs">
                    <url>async_returnObject.asp</url>
                    <text>Async Methods Returning an Object</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method name="RunSynchronously" axId="101" ax="1" cpp="1" dn="1" noNodeJs="1" status="1">
            <gType>bool</gType>
            <descrip>Runs the task synchronously.  Then this method returns after the task has been run.</descrip>
            <iversion>9.5.0.52</iversion>
            <args />
            <args2 />
            <links2 />
        </method>
        <method name="SleepMs" axId="116" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <descrip>Convenience method to force the calling thread to sleep for a number of milliseconds.  (This does not cause the task's background thread to sleep.)</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>numMs</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>numMs</objcName>
                </arg>
            </args>
            <args2>
                <arg name="numMs" type="int" objcName="numMs" />
            </args2>
            <links2 />
        </method>
        <method name="Wait" axId="110" ax="1" cpp="1" dn="1" noNodeJs="1" status="1">
            <gType>bool</gType>
            <descrip>Waits for the task to complete.  Returns when task has completed, or after ARG1 milliseconds have elapsed.  (A ARG1 value of 0 is to wait indefinitely.) Returns  (_FALSE_) if the task has not yet been started by calling the Run method, or if the ARG1 expired.  If the task  completed, was already completed, was canceled or aborted, then this method returns _TRUE_.</descrip>
            <iversion>9.5.0.52</iversion>
            <args>
                <arg>
                    <argName>maxWaitMs</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>maxWaitMs</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example" lang="~nodejs">
                    <url>async_wait.asp</url>
                    <text>Wait for Async Method to Complete</text>
                </link>
            </links2>
            <args2>
                <arg name="maxWaitMs" type="int" objcName="maxWaitMs" />
            </args2>
        </method>
    </methods>
    <properties>
        <property name="Finished" read="1" ax="1" cpp="1" dn="1" axId="114">
            <gType>bool</gType>
            <descrip>_TRUE_ if the task status is "canceled", "aborted", or "completed".  A task can only reach the "canceled" status if it was activated via the Run method, made it onto the internal thread pool thread's queue, was waiting for a pool thread to become available, and was then canceled prior to the task actually starting.</descrip>
            <iversion>9.5.0.52</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="HeartbeatMs" read="1" write="1" ax="1" cpp="1" dn="1" axId="125">
            <gType>int</gType>
            <descrip>The number of milliseconds between each AbortCheck event callback. The AbortCheck callback allows an application to abort the Wait method. If HeartbeatMs is 0 (the default), no AbortCheck event callbacks will fire.
&lt;b&gt;Note:&lt;/b&gt; An asynchronous task running in a background thread (in one of the thread pool threads) does not fire events.  The task's event callbacks pertain only to the Wait method.</descrip>
            <iversion>9.5.0.52</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="Inert" read="1" ax="1" cpp="1" dn="1" axId="112">
            <gType>bool</gType>
            <descrip>_TRUE_ if the task status is "empty" or "loaded".  When a task is inert, it has been loaded but is not scheduled to run yet.</descrip>
            <iversion>9.5.0.52</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="KeepProgressLog" axId="118" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Determines if the in-memory progress info event log is kept.  The default value is _FALSE_ and therefore no log is kept. To enable progress info logging, set this property equal to _TRUE_ (prior to running the task).</descrip>
            <iversion>9.5.0.52</iversion>
            <links2>
                <link linkType="example" lang="~nodejs">
                    <url>async_progressInfo.asp</url>
                    <text>Async Progress Info Log</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="Live" read="1" ax="1" cpp="1" dn="1" axId="113">
            <gType>bool</gType>
            <descrip>_TRUE_ if the task status is "queued" or "running".  When a task is live, it is either already running, or is on the thread pool thread's queue waiting for a thread to become available.</descrip>
            <iversion>9.5.0.52</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="PercentDone" axId="111" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>Indicates the percent completion while the task is running.  The percent completed information is only available in cases where it is possible to know the percentage completed.  For some methods, it is never possible to know, such as for methods that establish TCP or TLS connections.  For other methods it is always possible to know -- such as for sending email (because the size of the email to be sent is already known).  For some methods, it may or may not be possible to know the percent completed.  For example, if an HTTP response is "chunked", there is no Content-Length header and therefore the receiver has no knowledge of the size of the forthcoming response body.
&lt;p&gt;
Also, the value of the PercentDoneScale property of the asynchronous method's object determines the scale, such as 0 to 100, or 0 to 1000, etc.</descrip>
            <iversion>9.5.0.52</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="ProgressLogSize" axId="117" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>What would normally be a ProgressInfo event callback (assuming Chilkat supports event callbacks for this language)  is instead saved to an in-memory progress log that can be examined and pruned while the task is still running.  This property returns the number of progress log entries that are currently available.  (Note: the progress log is only kept if the KeepProgressLog property is turned on.  By default, the KeepProgressLog is turned off.)</descrip>
            <iversion>9.5.0.52</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="ResultErrorText" read="1" ax="1" cpp="1" dn="1" axId="103">
            <gType>string</gType>
            <descrip>The LastErrorText for the task's asynchronous method.</descrip>
            <iversion>9.5.0.52</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="ResultType" axId="102" read="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Indicates the data type of the task's result.  This property is only available after the task has completed.  Possible values are "bool", "int", "string", "bytes", "object", and "void".  For example, if the result data type is "bool", then call GetResultBool to get the boolean result of the underlying asynchronous method.
&lt;p&gt;
For example, if the synchronous version of the method returned a boolean, then in the asynchronous version of the method, the boolean return value is made available via the GetResultBool method.</descrip>
            <iversion>9.5.0.52</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="Status" axId="104" read="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The current status of the task.  Possible values are:
&lt;ul&gt;
&lt;li&gt;"empty" -- The method call and arguments are not yet loaded into the task object. This can only happen if a task was explicitly created instead of being returned by a method ending in "Async".
&lt;li&gt;"loaded" -- The method call and arguments are loaded into the task object.
&lt;li&gt;"queued" -- The task is in the thread pool's queue of tasks awaiting to be run.
&lt;li&gt;"running" -- The task is currently running.
&lt;li&gt;"canceled" -- The task was canceled before it entered the "running" state.
&lt;li&gt;"aborted" -- The task was canceled while it was in the running state.
&lt;li&gt;"completed" -- The task completed.  The success or failure depends on the semantics of the method call and the value of the result.
&lt;/ul&gt;</descrip>
            <iversion>9.5.0.52</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="StatusInt" axId="123" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>The current status of the task as an integer value.  Possible values are:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;1&lt;/b&gt; -- The method call and arguments are not yet loaded into the task object. This can only happen if a task was explicitly created instead of being returned by a method ending in "Async".
&lt;li&gt;&lt;b&gt;2&lt;/b&gt; -- The method call and arguments are loaded into the task object.
&lt;li&gt;&lt;b&gt;3&lt;/b&gt; -- The task is in the thread pool's queue of tasks awaiting to be run.
&lt;li&gt;&lt;b&gt;4&lt;/b&gt; -- The task is currently running.
&lt;li&gt;&lt;b&gt;5&lt;/b&gt; -- The task was canceled before it entered the "running" state.
&lt;li&gt;&lt;b&gt;6&lt;/b&gt; -- The task was canceled while it was in the running state.
&lt;li&gt;&lt;b&gt;7&lt;/b&gt; -- The task completed.  The success or failure depends on the semantics of the method call and the value of the result.
&lt;/ul&gt;</descrip>
            <iversion>9.5.0.52</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="TaskId" read="1" ax="1" cpp="1" dn="1" axId="126">
            <gType>int</gType>
            <descrip>A unique integer ID assigned to this task.   The purpose of this property is to help an application identify the task if a TaskCompleted event callback is used.</descrip>
            <iversion>9.5.0.52</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="TaskSuccess" axId="124" read="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>This is the value of the LastMethodSuccess property of the underlying task object.  This property is only valid for those methods where the LastMethodSuccess property would be valid had the method been called synchronously.
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; This property is only meaningful for cases where the underlying method call has a non-boolean return value (such as for methods that return strings, other Chilkat objects, or integers).   If the underlying method call returns a boolean, then call the GetResultBool() method instead to get the boolean return value.</descrip>
            <iversion>9.5.0.52</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="UserData" read="1" write="1" ax="1" cpp="1" dn="1" axId="127">
            <gType>string</gType>
            <descrip>An application may use this property to attach some user-specific information with the task, which may be useful if a TaskCompleted event callback is used.</descrip>
            <iversion>9.5.0.52</iversion>
            <args2 />
            <links2 />
        </property>
    </properties>
    <events />
    <clsid>EFA96FEC-9371-4C3B-AB6D-DA9CDEF3CC41</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidEvents>CB6C9BFC-30B1-47F8-BDE2-F5BCA21646C1</uuidEvents>
    <uuidMidl>F312552A-2E77-4866-95CA-A3699D7D6ED2</uuidMidl>
    <nextAxId>128</nextAxId>
</class>
