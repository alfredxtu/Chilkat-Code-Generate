<?xml version="1.0" encoding="utf-8" ?>
<class license="Free" XojoModuleId="122503894" sourceXmlPath="C:/ck2000/appData/apiDef2/Pfx.xml">
    <genericName>Pfx</genericName>
    <cppName>CkPfx</cppName>
    <dnName>Pfx</dnName>
    <axName>ChilkatPfx</axName>
    <description>Provides the ability to manage, parse, and read PFX (PKCS12) files.  To create PFX (PKCS12) files, use the certificate object's ExportToPfxFile or ExportToPfxData methods.</description>
    <methods>
        <method name="AddCert" axId="108" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Adds a certificate, its private key (if it exists), and potentially its certificate chain to the PFX.   If ARG2 is _TRUE_, then the certificate must have a private key.   The certificate's private key is automatically obtained (internally) via the ARG1's ExportPrivateKey method.   If the certificate's chain of authentication is to be added, it is automatically constructed and added using whatever resources are at hand (such as certs provided via the UseCertVault method, the trusted roots from Chilkat's TrustedRoots class, etc.   If a certificate chain is to be added, which is the typical case, then the chain must be completed to the root to succeed.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>cert</argName>
                    <cppType>CkCert &amp;</cppType>
                    <dnType>Cert</dnType>
                    <axType>Cert</axType>
                    <objcName>cert</objcName>
                </arg>
                <arg>
                    <argName>includeChain</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>includeChain</objcName>
                </arg>
            </args>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
                <arg name="includeChain" type="bool" objcName="includeChain" />
            </args2>
        </method>
        <method name="AddPrivateKey" ax="1" cpp="1" dn="1" status="1" axId="107">
            <gType>bool</gType>
            <descrip>Adds a private key and certificate chain to the PFX.  The private key should be such that it is associated with the 1st certificate in the chain.  In other words, the 1st certificate in the chain has a public key (embedded within the X.509 structure of the cert itself) that is the counterpart to the private key.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>privKey</argName>
                    <cppType>CkPrivateKey &amp;</cppType>
                    <dnType>PrivateKey</dnType>
                    <axType>PrivateKey</axType>
                    <objcName>privKey</objcName>
                </arg>
                <arg>
                    <argName>certChain</argName>
                    <cppType>CkCertChain &amp;</cppType>
                    <dnType>CertChain</dnType>
                    <axType>CertChain</axType>
                    <objcName>certChain</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>openssl_pkcs12_export.asp</url>
                    <text>Duplicate openssl pkcs12 –export –in certfile.cer –inkey certfile.key –out certfile.pfx</text>
                </link>
            </links2>
            <args2>
                <arg name="privKey" type="PrivateKey" objcName="privKey" />
                <arg name="certChain" type="CertChain" objcName="certChain" />
            </args2>
        </method>
        <method name="GetCert" axId="102" ax="1" cpp="1" dn="1">
            <gType>Cert</gType>
            <descrip>Returns the Nth certificate in the PFX.  (The 1st certificate is at index 0.)</descrip>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
            </args>
            <iversion>9.5.0.40</iversion>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
        </method>
        <method name="GetPrivateKey" ax="1" cpp="1" dn="1" axId="103">
            <gType>PrivateKey</gType>
            <descrip>Returns the Nth private key in the PFX.  (The 1st private key is at index 0.)</descrip>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
            </args>
            <iversion>9.5.0.40</iversion>
            <links2>
                <link linkType="example">
                    <url>rsa_sign_base64_pfx.asp</url>
                    <text>RSA Sign Using Private Key from .pfx/.p12 to Base64 Signature</text>
                </link>
            </links2>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
        </method>
        <method name="LoadPem" ax="1" cpp="1" dn="1" status="1" axId="115">
            <gType>bool</gType>
            <descrip>Loads a PFX from a PEM formatted string.  The PEM can contain the private key, the certificate, and certificates in the chain of authentication up to the CA root.  For example:
&lt;pre&gt;
 -----BEGIN RSA PRIVATE KEY-----
...
... the private key associated with the main certificate.
...
-----END RSA PRIVATE KEY-----
-----BEGIN CERTIFICATE-----
...
... the main certificate
...
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
...
... an intermediate CA certificate (if present)
...
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
...
... the root CA certificate
...
-----END CERTIFICATE----- 
&lt;/pre&gt;</descrip>
            <iversion>9.5.0.47</iversion>
            <args>
                <arg>
                    <argName>pemStr</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>pemStr</objcName>
                </arg>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
            </args>
            <args2>
                <arg name="pemStr" type="string" objcName="pemStr" />
                <arg name="password" type="string" objcName="password" />
            </args2>
        </method>
        <method name="LoadPfxBytes" ax="1" cpp="1" dn="1" status="1" axId="104">
            <gType>bool</gType>
            <descrip>Loads a PFX from in-memory bytes.</descrip>
            <iversion>9.5.0.40</iversion>
            <args>
                <arg>
                    <argName>pfxData</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <dnType>bytes</dnType>
                    <axType>bytes</axType>
                    <objcName>pfxData</objcName>
                </arg>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
            </args>
            <args2>
                <arg name="pfxData" type="bytes" objcName="pfxData" />
                <arg name="password" type="string" objcName="password" />
            </args2>
        </method>
        <method name="LoadPfxEncoded" axId="105" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Loads a PFX from encoded byte data.  The ARG2 can by any encoding, such as "Base64", "modBase64", "Base32", "UU", "QP" (for quoted-printable), "URL" (for url-encoding), "Hex", "Q", "B", "url_oath", "url_rfc1738", "url_rfc2396", and "url_rfc3986".</descrip>
            <iversion>9.5.0.40</iversion>
            <args>
                <arg>
                    <argName>encodedData</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encodedData</objcName>
                </arg>
                <arg>
                    <argName>encoding</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>List of Supported Encodings (Base64, Hex, etc.)</text>
                </link>
            </links2>
            <args2>
                <arg name="encodedData" type="string" objcName="encodedData" />
                <arg name="encoding" type="string" objcName="encoding" />
                <arg name="password" type="string" objcName="password" />
            </args2>
        </method>
        <method name="LoadPfxFile" axId="106" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Loads a PFX from a file.</descrip>
            <iversion>9.5.0.40</iversion>
            <args>
                <arg>
                    <argName>path</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>path</objcName>
                </arg>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>rsa_sign_base64_pfx.asp</url>
                    <text>RSA Sign Using Private Key from .pfx/.p12 to Base64 Signature</text>
                </link>
            </links2>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="password" type="string" objcName="password" />
            </args2>
        </method>
        <method name="ToBinary" ax="1" cpp="1" dn="1" status="1" axId="111" outArgName="outBytes">
            <gType>bytes</gType>
            <descrip>Write the PFX to in-memory bytes.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
                <arg>
                    <argName>outBytes</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <args2>
                <arg name="password" type="string" objcName="password" />
            </args2>
        </method>
        <method name="ToEncodedString" axId="112" ax="1" cpp="1" dn="1" status="1" outArgName="outStr">
            <gType>string</gType>
            <descrip>Write the PFX to an encoded string.  The ARG2 can be any encoding such as "base64" or "hex".</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
                <arg>
                    <argName>encoding</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list/</url>
                    <text>List of Supported Encodings (Base64, Hex, etc.)</text>
                </link>
            </links2>
            <args2>
                <arg name="password" type="string" objcName="password" />
                <arg name="encoding" type="string" objcName="encoding" />
            </args2>
        </method>
        <method name="ToFile" ax="1" cpp="1" dn="1" status="1" axId="110">
            <gType>bool</gType>
            <descrip>Write the PFX to a file.   PFX and PKCS12 are essentially the same.  Standard filename extensions are ".pfx" or ".p12".</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
                <arg>
                    <argName>path</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>path</objcName>
                </arg>
            </args>
            <args2>
                <arg name="password" type="string" objcName="password" />
                <arg name="path" type="string" objcName="path" />
            </args2>
        </method>
        <method name="ToJavaKeyStore" ax="1" cpp="1" dn="1" axId="113">
            <gType>JavaKeyStore</gType>
            <descrip>Converts the PFX (PKCS12) to a JavaKeyStore object.  One JKS entry per private key found in the PKCS12 is added.  The certs found within the PCKS12 are used to build the certificate chains for each private key. (A typical PFX file contains a single private key along with its associated certificate, and the certificates in the chain of authentication to the root CA cert.)  &lt;p&gt;
&lt;p&gt;The specified alias is applied to the 1st private key found.  If the alias is empty, then the alias is obtained from the cert/PFX in the following order of preference:
&lt;ol&gt;
&lt;li&gt;Certificate's subject common name&lt;/li&gt;
&lt;li&gt;Certificate's subject email address&lt;/li&gt;
&lt;li&gt;Certificate's friendly name found in the PKCS9 attributes of the PKCS12&lt;/li&gt;
&lt;li&gt;Certificate's serial number&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If multiple private keys are found in the PKCS12, then all but the first will automaticallly be assigned aliases using the preference just described.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>alias</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>alias</objcName>
                </arg>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
            </args>
            <args2>
                <arg name="alias" type="string" objcName="alias" />
                <arg name="password" type="string" objcName="password" />
            </args2>
        </method>
        <method name="ToPem" axId="114" ax="1" cpp="1" dn="1" status="1" outArgName="outStr">
            <gType>string</gType>
            <descrip>Write the PFX to a PEM formatted string.  The resultant PEM will contain the private key, as well as the certs in the chain of authentication (or whatever certs are available in the PFX).  For example:
&lt;pre&gt;
 -----BEGIN RSA PRIVATE KEY-----
...
... the private key associated with the main certificate.
...
-----END RSA PRIVATE KEY-----
-----BEGIN CERTIFICATE-----
...
... the main certificate
...
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
...
... an intermediate CA certificate (if present)
...
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
...
... the root CA certificate
...
-----END CERTIFICATE----- 
&lt;/pre&gt;</descrip>
            <iversion>9.5.0.47</iversion>
            <args>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <args2 />
        </method>
        <method name="ToPemEx" axId="116" ax="1" cpp="1" dn="1" status="1" outArgName="outStr">
            <gType>string</gType>
            <descrip>Write the PFX to a PEM formatted string.  If ARG1 is _TRUE_, then extended properties (Bag Attributes and Key Attributes) are output.  If ARG2 is _TRUE_, then no private keys are output. If ARG3 is _TRUE_, then no certificates are output.  If ARG4 is _TRUE_, then  no CA certs or intermediate CA certs are output.  If ARG5 is not empty, it indicates the encryption algorithm to be used for encrypting the private keys (otherwise the private keys are output unencrypted).  The possible choices for the ARG5 are "des3", "aes128", "aes192", and "aes256".  (All encryption algorithm choices use CBC mode.) If the private keys are to be encrypted, then ARG6 is the password to be used. Otherwise, ARG6 may be left empty.

For example:
&lt;pre&gt;
Bag Attributes
    Microsoft Local Key set: &amp;lt;No Values&gt;
    localKeyID: 01 00 00 00 
    friendlyName: le-2b09a3d2-9037-4a05-95cc-4d44518e8607
    Microsoft CSP Name: Microsoft RSA SChannel Cryptographic Provider
Key Attributes
    X509v3 Key Usage: 10 
 -----BEGIN RSA PRIVATE KEY-----
...
... the private key associated with the main certificate.
...
-----END RSA PRIVATE KEY-----
Bag Attributes
    localKeyID: 01 00 00 00 
    1.3.6.1.4.1.311.17.3.92: 00 08 00 00 
    1.3.6.1.4.1.311.17.3.20: C2 53 54 F3 ...
    1.3.6.1.4.1.311.17.3.71: 49 00 43 00 ...
    1.3.6.1.4.1.311.17.3.75: 31 00 42 00 ...
subject=/OU=Domain Control Validated/OU=PositiveSSL/CN=something.com
issuer=/C=GB/ST=Greater Manchester/L=Salford/O=COMODO CA Limited/CN=COMODO RSA Domain Validation Secure Server CA
-----BEGIN CERTIFICATE-----
...
... the main certificate
...
-----END CERTIFICATE-----
...
-----BEGIN CERTIFICATE-----
...
... an intermediate CA certificate (if present)
...
-----END CERTIFICATE-----
...
-----BEGIN CERTIFICATE-----
...
... the root CA certificate
...
-----END CERTIFICATE----- 
&lt;/pre&gt;</descrip>
            <iversion>9.5.0.49</iversion>
            <args>
                <arg>
                    <argName>extendedAttrs</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>extendedAttrs</objcName>
                </arg>
                <arg>
                    <argName>noKeys</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>noKeys</objcName>
                </arg>
                <arg>
                    <argName>noCerts</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>noCerts</objcName>
                </arg>
                <arg>
                    <argName>noCaCerts</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>noCaCerts</objcName>
                </arg>
                <arg>
                    <argName>encryptAlg</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encryptAlg</objcName>
                </arg>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <args2>
                <arg name="extendedAttrs" type="bool" objcName="extendedAttrs" />
                <arg name="noKeys" type="bool" objcName="noKeys" />
                <arg name="noCerts" type="bool" objcName="noCerts" />
                <arg name="noCaCerts" type="bool" objcName="noCaCerts" />
                <arg name="encryptAlg" type="string" objcName="encryptAlg" />
                <arg name="password" type="string" objcName="password" />
            </args2>
        </method>
        <method name="UseCertVault" ax="1" cpp="1" dn="1" status="1" axId="109">
            <gType>bool</gType>
            <descrip>Adds an XML certificate vault to the object's internal list of sources to be searched for certificates for help in building certificate chains  to a root certificate.</descrip>
            <iversion>9.5.0.44</iversion>
            <args>
                <arg>
                    <argName>vault</argName>
                    <cppType>CkXmlCertVault &amp;</cppType>
                    <dnType>XmlCertVault</dnType>
                    <axType>XmlCertVault</axType>
                    <objcName>vault</objcName>
                </arg>
            </args>
            <args2>
                <arg name="vault" type="XmlCertVault" objcName="vault" />
            </args2>
        </method>
    </methods>
    <properties>
        <property name="NumCerts" read="1" ax="1" cpp="1" dn="1" axId="100">
            <gType>int</gType>
            <descrip>The number of certificates contained in the PFX.</descrip>
            <iversion>9.5.0.40</iversion>
        </property>
        <property name="NumPrivateKeys" read="1" ax="1" cpp="1" dn="1" axId="101">
            <gType>int</gType>
            <descrip>The number of private keys contained in the PFX.</descrip>
            <iversion>9.5.0.40</iversion>
        </property>
    </properties>
    <events />
    <clsid>4A512F1D-8554-4EE4-A0C1-68AC4C2C517E</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidMidl>1B708D67-5ED0-4A1E-8894-144C531FB095</uuidMidl>
    <nextAxId>117</nextAxId>
</class>
