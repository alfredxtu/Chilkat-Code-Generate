<?xml version="1.0" encoding="utf-8" ?>
<class license="Crypt" XojoModuleId="924538698" sourceXmlPath="C:/ck2000/appData/apiDef2/Dh.xml">
    <nextAxId>108</nextAxId>
    <dnName>Dh</dnName>
    <cppName>CkDh</cppName>
    <properties>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="G" axId="101">
            <gType>int</gType>
            <descrip>The generator.  The value of G should be either 2 or 5.</descrip>
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="P" axId="100">
            <gType>string</gType>
            <descrip>A "safe" large prime returned as a hex string.  The hex string represent a bignum in SSH1 format.</descrip>
        </property>
    </properties>
    <methods>
        <method name="CreateE" axId="107" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>numBits</argName>
                    <objcName>numBits</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>The 1st step in Diffie-Hellman key exchange (to generate a shared-secret).  The ARG1 should be twice the size (in bits) of the shared secret to be generated.  For example, if you are using DH to create a 128-bit AES session key, then ARG1 should be set to 256.  Returns E as a bignum in SSH-format as a hex string.</descrip>
            <args2>
                <arg name="numBits" type="int" objcName="numBits" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="FindK" axId="102" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>E</argName>
                    <objcName>e</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>The 2nd and final step in Diffie-Hellman (DH) key exchange.  ARG1 is the E created by the other party.  Returns the shared secret (K) as an SSH1-format bignum encoded as a hex string.</descrip>
            <args2>
                <arg name="E" type="string" objcName="e" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="GenPG" axId="103">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>numBits</argName>
                    <objcName>numBits</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>G</argName>
                    <objcName>g</objcName>
                </arg>
            </args>
            <descrip>Generates a large safe prime that is ARG1 bits in size using the generator ARG2.  Generating a new (random) P is expensive in both time and CPU cycles.   A prime should be 1024 or more bits in length.</descrip>
            <args2>
                <arg name="numBits" type="int" objcName="numBits" />
                <arg name="G" type="int" objcName="g" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetPG" axId="104">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>p</argName>
                    <objcName>p</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>g</argName>
                    <objcName>g</objcName>
                </arg>
            </args>
            <descrip>Sets explicit values for P and G.  Returns _TRUE_ if P and G conform to the requirements for Diffie-Hellman.   P is an SSH1-format bignum passed as a hexidecimalized string.</descrip>
            <args2>
                <arg name="p" type="string" objcName="p" />
                <arg name="g" type="int" objcName="g" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="UnlockComponent" axId="105">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>unlockCode</argName>
                    <objcName>unlockCode</objcName>
                </arg>
            </args>
            <descrip>Unlocks the component. This must be called once prior to calling any other method. A fully-functional 30-day trial is automatically started when an arbitrary string is passed to this method. For example, passing "Hello", or "abc123" will unlock the component for the 1st thirty days after the initial install.</descrip>
            <args2>
                <arg name="unlockCode" type="string" objcName="unlockCode" />
            </args2>
            <links2>
                <link linkType="external">
                    <text>Diagnosing UnlockComponent Problems</text>
                    <url>http://www.cknotes.com/?p=168</url>
                </link>
                <link linkType="external">
                    <text>UnlockComponent LastErrorText shows exact string passed to it.</text>
                    <url>http://www.cknotes.com/?p=315</url>
                </link>
                <link linkType="external">
                    <text>Verify UnlockComponent Success w/ Permanent Unlock Code</text>
                    <url>http://www.cknotes.com/?p=317</url>
                </link>
                <link linkType="external">
                    <text>LastErrorText Standard Information</text>
                    <url>http://www.cknotes.com/?p=316</url>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="UseKnownPrime" axId="106">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>Sets P and G to a known safe prime.  The ARG1 may have the following values:
&lt;p&gt;
&lt;b&gt;1:&lt;/b&gt; First Oakley Default Group from RFC2409, section 6.1.   Generator is 2. The prime is: 2^768 - 2 ^704 - 1 + 2^64 * { [2^638 pi] + 149686 }
&lt;p&gt;
&lt;b&gt;2:&lt;/b&gt; Prime for 2nd Oakley Group (RFC 2409) -- 1024-bit MODP Group.  Generator is 2. The prime is: 2^1024 - 2^960 - 1 + 2^64 * { [2^894 pi] + 129093 }.
&lt;p&gt;
&lt;b&gt;3:&lt;/b&gt; 1536-bit MODP Group from RFC3526, Section 2.  Generator is 2.  The prime is: 2^1536 - 2^1472 - 1 + 2^64 * { [2^1406 pi] + 741804 }
&lt;p&gt;
&lt;b&gt;4:&lt;/b&gt; Prime for 14th Oakley Group (RFC 3526) -- 2048-bit MODP Group. Generator is 2.  The prime is: 2^2048 - 2^1984 - 1 + 2^64 * { [2^1918 pi] + 124476 }
&lt;p&gt;
&lt;b&gt;5:&lt;/b&gt; 3072-bit MODP Group from RFC3526, Section 4. Generator is 2.  The prime is: 2^3072 - 2^3008 - 1 + 2^64 * { [2^2942 pi] + 1690314 }
&lt;p&gt;
&lt;b&gt;6:&lt;/b&gt; 4096-bit MODP Group  from RFC3526, Section 5. Generator is 2.  The prime is: 2^4096 - 2^4032 - 1 + 2^64 * { [2^3966 pi] + 240904 }
&lt;p&gt;
&lt;b&gt;7:&lt;/b&gt; 6144-bit MODP Group from RFC3526, Section 6. Generator is 2. The prime is: 2^6144 - 2^6080 - 1 + 2^64 * { [2^6014 pi] + 929484 }
&lt;p&gt;
&lt;b&gt;8:&lt;/b&gt; 8192-bit MODP Group from RFC3526, Section 7. Generator is 2.  The prime is: 2^8192 - 2^8128 - 1 + 2^64 * { [2^8062 pi] + 4743158 }</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
        </method>
    </methods>
    <genericName>Dh</genericName>
    <description>Diffie-Hellman key-exchange component.
&lt;p&gt;
Diffie-Hellman (D-H) key exchange is a cryptographic protocol that allows two parties that have no prior knowledge of each other to jointly establish a shared secret key over an insecure communications channel. This key can then be used to encrypt subsequent communications using a symmetric key cipher.
&lt;/p&gt;
&lt;p&gt;
Synonyms of Diffie-Hellman key exchange include:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Diffie-Hellman key agreement&lt;/li&gt;
&lt;li&gt;Diffie-Hellman key establishment&lt;/li&gt;
&lt;li&gt;Diffie-Hellman key negotiation&lt;/li&gt;
&lt;li&gt;exponential key exchange&lt;/li&gt;
&lt;/ul&gt;</description>
    <clsid>F19E7679-F483-46D4-9E87-0253F0820A02</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidMidl>9EDDA6C9-A95E-4CE6-B4A3-6C4FE24B08C9</uuidMidl>
    <axName>ChilkatDh</axName>
</class>
