<?xml version="1.0" encoding="utf-8" ?>
<class license="Bundle" hasEvents="1" baseProgress="1" sourceXmlPath="c:/ck2000/appData/apiDef2/Rest.xml">
    <genericName>Rest</genericName>
    <cppName>CkRest</cppName>
    <dnName>Rest</dnName>
    <axName>ChilkatRest</axName>
    <description>API for implementing RESTful Web API's.</description>
    <methods>
        <method name="AddHeader" axId="114" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Adds an HTTP request header.  If the header field already exists, then it is replaced.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>name</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <argName>value</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>value</objcName>
                </arg>
            </args>
            <args2>
                <arg name="name" type="string" objcName="name" />
                <arg name="value" type="string" objcName="value" />
            </args2>
            <links2 />
        </method>
        <method name="AddQueryParam" axId="117" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Adds a query parameter.   If the query parameter already exists, then it is replaced.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>name</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <argName>value</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>value</objcName>
                </arg>
            </args>
            <args2>
                <arg name="name" type="string" objcName="name" />
                <arg name="value" type="string" objcName="value" />
            </args2>
            <links2 />
        </method>
        <method name="AddQueryParams" ax="1" cpp="1" dn="1" status="1" axId="150">
            <gType>bool</gType>
            <descrip>Adds the query parameters from the ARG1.  The ARG1 is a query string of the format &lt;b&gt;field1=value1&amp;field2=value2&amp;field3=value3...&lt;/b&gt; where each value is URL encoded.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>queryString</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>queryString</objcName>
                </arg>
            </args>
            <args2>
                <arg name="queryString" type="string" objcName="queryString" />
            </args2>
            <links2 />
        </method>
        <method name="ClearAllHeaders" axId="113" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Removes all HTTP request headers.</descrip>
            <iversion>9.5.0.58</iversion>
            <args />
            <args2 />
            <links2 />
        </method>
        <method name="ClearAllQueryParams" axId="116" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Clears all query parameters.</descrip>
            <iversion>9.5.0.58</iversion>
            <args />
            <args2 />
            <links2 />
        </method>
        <method name="ClearResponseBodyStream" ax="1" cpp="1" dn="1" axId="154">
            <gType>void</gType>
            <descrip>Clears the response body stream set by calling SetResponseBodyStream.</descrip>
            <iversion>9.5.0.58</iversion>
            <args />
            <args2 />
            <links2 />
        </method>
        <method name="Connect" axId="127" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Establishes an initial connection to a REST server.  The ARG1 can be a domain name or an IP address.  Both IPv4 and IPv6 addresses are supported. The ARG2 is the port, which is typically 80 or 443.   If SSL/TLS is required, then ARG3 should be set to _TRUE_.   The ARG4 indicates whether connection should automatically be established as needed for subsequent REST requests.
&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method is for simple connections that do not require any proxies (HTTP or SOCKS), or SSH tunneling.   If a proxy, SSH tunnel, or any other advanced socket feature is required, the Chilkat Socket API can be used to establish the connection.  The UseConnection method can then be called to use the pre-established socket connection.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>hostname</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>hostname</objcName>
                </arg>
                <arg>
                    <argName>port</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>port</objcName>
                </arg>
                <arg>
                    <argName>tls</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>tls</objcName>
                </arg>
                <arg>
                    <argName>autoReconnect</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>autoReconnect</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>rest_simple.asp</url>
                    <text>Simple REST Example</text>
                </link>
                <link linkType="example">
                    <url>rest_autoReconnect.asp</url>
                    <text>REST Auto Reconnect for Multiple Requests</text>
                </link>
            </links2>
            <args2>
                <arg name="hostname" type="string" objcName="hostname" />
                <arg name="port" type="int" objcName="port" />
                <arg name="tls" type="bool" objcName="tls" />
                <arg name="autoReconnect" type="bool" objcName="autoReconnect" />
            </args2>
        </method>
        <method name="Disconnect" axId="151" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Closes the connection with the HTTP server if one is open.   This method can be called to ensure the connection is closed.   The ARG1 is the maximum time in milliseconds to wait for a clean close.  If the connection is through an SSH tunnel, this closes the logical channel within the SSH tunnel, and not the connection with the SSH server itself.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>maxWaitMs</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>maxWaitMs</objcName>
                </arg>
            </args>
            <args2>
                <arg name="maxWaitMs" type="int" objcName="maxWaitMs" />
            </args2>
            <links2 />
        </method>
        <method name="FullRequestBinary" axId="136" ax="1" cpp="1" dn="1" events="1" status="1" outArgName="outStr">
            <gType>string</gType>
            <descrip>Sends a complete REST request (header + body) and receives the full response.  It is assumed that the request body is binary, and the response body is a string (such as JSON or XML).  The response body is returned.  
&lt;p&gt;This method is the equivalent of making the following calls in sequence: SendReqBinaryBody, ReadResponseHeader, ReadRespBodyString.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>httpVerb</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>httpVerb</objcName>
                </arg>
                <arg>
                    <argName>uriPath</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>uriPath</objcName>
                </arg>
                <arg>
                    <argName>bodyBytes</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <dnType>bytes</dnType>
                    <axType>bytes</axType>
                    <objcName>bodyBytes</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>azure_upload_binary.asp</url>
                    <text>Put Blob: Upload Binary Data  to Block Blob</text>
                </link>
            </links2>
            <args2>
                <arg name="httpVerb" type="string" objcName="httpVerb" />
                <arg name="uriPath" type="string" objcName="uriPath" />
                <arg name="bodyBytes" type="bytes" objcName="bodyBytes" />
            </args2>
        </method>
        <method name="FullRequestFormUrlEncoded" ax="1" cpp="1" dn="1" events="1" status="1" axId="147" outArgName="outStr">
            <gType>string</gType>
            <descrip>Sends a complete application/x-www-form-urlencoded HTTP request and receives the full response. The request  body is composed of the URL encoded query params.  It is assumed that the  response body is a string (such as JSON or XML).  The response body is returned.  
&lt;p&gt;This method is the equivalent of making the following calls in sequence: SendReqFormUrlEncoded, ReadResponseHeader, ReadRespBodyString.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>httpVerb</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>httpVerb</objcName>
                </arg>
                <arg>
                    <argName>uriPath</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>uriPath</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>twilio_sms.asp</url>
                    <text>Twilio: Send SMS using Basic Authentication</text>
                </link>
            </links2>
            <args2>
                <arg name="httpVerb" type="string" objcName="httpVerb" />
                <arg name="uriPath" type="string" objcName="uriPath" />
            </args2>
        </method>
        <method name="FullRequestMultipart" axId="138" ax="1" cpp="1" dn="1" events="1" status="1" outArgName="outStr">
            <gType>string</gType>
            <descrip>Sends a complete multipart REST request (header + multipart body) and receives the full response.  It is assumed that the  response body is a string (such as JSON or XML).  The response body is returned.  
&lt;p&gt;This method is the equivalent of making the following calls in sequence: SendReqMultipart, ReadResponseHeader, ReadRespBodyString.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>httpVerb</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>httpVerb</objcName>
                </arg>
                <arg>
                    <argName>uriPath</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>uriPath</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>rest_google_drive_multipart_upload_string.asp</url>
                    <text>Google Drive Multipart Upload String (Google Drive)</text>
                </link>
            </links2>
            <args2>
                <arg name="httpVerb" type="string" objcName="httpVerb" />
                <arg name="uriPath" type="string" objcName="uriPath" />
            </args2>
        </method>
        <method name="FullRequestNoBody" axId="139" outArgName="outStr" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>string</gType>
            <descrip>Sends a complete REST request and receives the full response.  It is assumed that the  response body is a string (such as JSON or XML).  The response body is returned.  
&lt;p&gt;This method is the equivalent of making the following calls in sequence: SendReqNoBody, ReadResponseHeader, ReadRespBodyString.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>httpVerb</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>httpVerb</objcName>
                </arg>
                <arg>
                    <argName>uriPath</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>uriPath</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>rest_simple.asp</url>
                    <text>Simple REST Example</text>
                </link>
                <link linkType="example">
                    <url>geolocation_ip_address.asp</url>
                    <text>Geolocation of IP Address</text>
                </link>
            </links2>
            <args2>
                <arg name="httpVerb" type="string" objcName="httpVerb" />
                <arg name="uriPath" type="string" objcName="uriPath" />
            </args2>
        </method>
        <method name="FullRequestStream" axId="140" outArgName="outStr" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>string</gType>
            <descrip>Sends a complete REST request and receives the full response.  It is assumed that the  response body is a string (such as JSON or XML).  The response body is returned.  
&lt;p&gt;This method is the equivalent of making the following calls in sequence: SendReqStream, ReadResponseHeader, ReadRespBodyString.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>httpVerb</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>httpVerb</objcName>
                </arg>
                <arg>
                    <argName>uriPath</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>uriPath</objcName>
                </arg>
                <arg>
                    <argName>stream</argName>
                    <cppType>CkStream &amp;</cppType>
                    <dnType>Stream</dnType>
                    <axType>Stream</axType>
                    <objcName>stream</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>rest_file_stream_upload.asp</url>
                    <text>REST File Streaming Upload</text>
                </link>
                <link linkType="example">
                    <url>s3_file_stream_upload.asp</url>
                    <text>AWS S3 File Streaming Upload</text>
                </link>
                <link linkType="example">
                    <url>rest_async_stream_upload_simplified.asp</url>
                    <text>REST Asynchronous Streaming Upload Simplified</text>
                </link>
            </links2>
            <args2>
                <arg name="httpVerb" type="string" objcName="httpVerb" />
                <arg name="uriPath" type="string" objcName="uriPath" />
                <arg name="stream" type="Stream" objcName="stream" />
            </args2>
        </method>
        <method name="FullRequestString" axId="131" outArgName="outStr" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>string</gType>
            <descrip>Sends a complete REST request (header + body string) and receives the full response.  It is assumed that both the request and response bodies are strings (such as JSON or XML).  The response body is returned.  
&lt;p&gt;This method is the equivalent of making the following calls in sequence: SendReqStringBody, ReadResponseHeader, ReadRespBodyString.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>httpVerb</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>httpVerb</objcName>
                </arg>
                <arg>
                    <argName>uriPath</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>uriPath</objcName>
                </arg>
                <arg>
                    <argName>bodyText</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>bodyText</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>rest_json.asp</url>
                    <text>Send JSON REST Request, Get JSON Response</text>
                </link>
                <link linkType="example">
                    <url>rest_string_upload.asp</url>
                    <text>REST Upload String</text>
                </link>
            </links2>
            <args2>
                <arg name="httpVerb" type="string" objcName="httpVerb" />
                <arg name="uriPath" type="string" objcName="uriPath" />
                <arg name="bodyText" type="string" objcName="bodyText" />
            </args2>
        </method>
        <method name="ReadRespBodyBinary" axId="108" outArgName="outBytes" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bytes</gType>
            <descrip>Reads the response body.  Should only be called after ReadResponseHeader has been called, and should only be called when it is already known that the response body is binary, such as for JPG images or other non-text binary file types.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>outBytes</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>rest_binary_response_a.asp</url>
                    <text>REST Download Binary to Memory (Byte Array)</text>
                </link>
                <link linkType="example">
                    <url>rest_binary_response_b.asp</url>
                    <text>REST Download Binary to Memory (CkByteData)</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method name="ReadRespBodyStream" axId="109" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Reads the response body to the ARG1.   If ARG2 is _TRUE_, then the ARG1's StringCharset property will automatically get set based on the charset, if any, indicated in the response header.  If the response is binary, then ARG2 is ignored.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>stream</argName>
                    <cppType>CkStream &amp;</cppType>
                    <dnType>Stream</dnType>
                    <axType>Stream</axType>
                    <objcName>stream</objcName>
                </arg>
                <arg>
                    <argName>autoSetStreamCharset</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>autoSetStreamCharset</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>rest_stream_to_file.asp</url>
                    <text>REST Stream Response to File (Streaming Download)</text>
                </link>
                <link linkType="example">
                    <url>rest_read_response_stream_a.asp</url>
                    <text>REST Read Response with Stream API</text>
                </link>
                <link linkType="example">
                    <url>rest_read_response_stream_b.asp</url>
                    <text>REST Read Response with Stream API</text>
                </link>
                <link linkType="example">
                    <url>firebase_eventStream.asp</url>
                    <text>Firebase Receive Server-Sent Events (text/event-stream)</text>
                </link>
                <link linkType="example">
                    <url>http_post_stream_response_to_file.asp</url>
                    <text>HTTP POST and Stream Response to File</text>
                </link>
            </links2>
            <args2>
                <arg name="stream" type="Stream" objcName="stream" />
                <arg name="autoSetStreamCharset" type="bool" objcName="autoSetStreamCharset" />
            </args2>
        </method>
        <method name="ReadRespBodyString" axId="107" outArgName="outStr" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>string</gType>
            <descrip>Reads the response body.  Should only be called after ReadResponseHeader has been called, and should only be called when it is already known that the response body will be a string (such as XML, JSON, etc.)</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>rest_lowLevel_api.asp</url>
                    <text>Lower-Level REST API Methods</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method name="ReadResponseHeader" axId="104" ax="1" cpp="1" dn="1" events="1">
            <gType>int</gType>
            <descrip>Reads the HTTP response header.  If the HTTP response includes a body, then the application must call the desired method to read the response body.  Otherwise, the HTTP request / response is finished after reading the response header (such as for a GET request).  The contents of the response header are available in various properties and methods.
&lt;p&gt;
The HTTP response status code is returned (such as 200 for a typical success response).  If an error occurred such that no response was received, then a value of -1 is returned.</descrip>
            <iversion>9.5.0.58</iversion>
            <args />
            <links2>
                <link linkType="example">
                    <url>rest_lowLevel_api.asp</url>
                    <text>Lower-Level REST API Methods</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method name="RedirectUrl" axId="149" ax="1" cpp="1" dn="1">
            <gType>Url</gType>
            <descrip>If the response was a redirect and contains a Location header field, this method returns the redirect URL.</descrip>
            <iversion>9.5.0.58</iversion>
            <args />
            <args2 />
            <links2 />
        </method>
        <method name="RemoveHeader" axId="115" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Removes all headers having the given ARG1.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>name</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>name</objcName>
                </arg>
            </args>
            <args2>
                <arg name="name" type="string" objcName="name" />
            </args2>
            <links2 />
        </method>
        <method name="RemoveQueryParam" axId="118" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Removes all query params having the given ARG1.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>name</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>name</objcName>
                </arg>
            </args>
            <args2>
                <arg name="name" type="string" objcName="name" />
            </args2>
            <links2 />
        </method>
        <method name="ResponseHdrByName" ax="1" cpp="1" dn="1" axId="144" outArgName="outStr">
            <gType>string</gType>
            <descrip>Returns the value of the response header indicated by ARG1.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>name</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>azure_create_container.asp</url>
                    <text>Azure Storage: Create Container</text>
                </link>
                <link linkType="example">
                    <url>dropbox_download_to_string.asp</url>
                    <text>Download File from Dropbox into a String Variable</text>
                </link>
                <link linkType="example">
                    <url>rest_s3_get_object_metadata.asp</url>
                    <text>Fetch S3 Object Metadata</text>
                </link>
            </links2>
            <args2>
                <arg name="name" type="string" objcName="name" />
            </args2>
        </method>
        <method name="ResponseHdrName" ax="1" cpp="1" dn="1" axId="128" outArgName="outStr">
            <gType>string</gType>
            <descrip>Returns the name of the Nth response header field.  (Chilkat always uses 0-based indexing.  The first header field is at index 0.)</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>rest_s3_get_object_metadata.asp</url>
                    <text>Fetch S3 Object Metadata</text>
                </link>
            </links2>
        </method>
        <method name="ResponseHdrValue" axId="129" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <descrip>Returns the value of the Nth response header field.  (Chilkat always uses 0-based indexing.  The first header field is at index 0.)</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>rest_s3_get_object_metadata.asp</url>
                    <text>Fetch S3 Object Metadata</text>
                </link>
            </links2>
        </method>
        <method name="SendReqBinaryBody" axId="110" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Sends a REST request that cotnains a binary body.  The ARG1 is the HTTP verb (also known as the HTTP method), such as "PUT".   The ARG2 is the path of the resource URI.  The ARG3 contains the bytes of the HTTP request body.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>httpVerb</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>httpVerb</objcName>
                </arg>
                <arg>
                    <argName>uriPath</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>uriPath</objcName>
                </arg>
                <arg>
                    <argName>body</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <dnType>bytes</dnType>
                    <axType>bytes</axType>
                    <objcName>body</objcName>
                </arg>
            </args>
            <args2>
                <arg name="httpVerb" type="string" objcName="httpVerb" />
                <arg name="uriPath" type="string" objcName="uriPath" />
                <arg name="body" type="bytes" objcName="body" />
            </args2>
            <links2 />
        </method>
        <method name="SendReqFormUrlEncoded" axId="119" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Sends an application/x-www-form-urlencoded HTTP request where the body is composed of the URL encoded query params.  The ARG1 is the HTTP verb (also known as the HTTP method), such as "POST".   The ARG2 is the path of the resource URI.  If the Content-Type header was set, it is ignored and instead the Content-Type of the  request will be "application/x-www-form-urlencoded".</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>httpVerb</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>httpVerb</objcName>
                </arg>
                <arg>
                    <argName>uriPath</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>uriPath</objcName>
                </arg>
            </args>
            <args2>
                <arg name="httpVerb" type="string" objcName="httpVerb" />
                <arg name="uriPath" type="string" objcName="uriPath" />
            </args2>
            <links2 />
        </method>
        <method name="SendReqMultipart" ax="1" cpp="1" dn="1" events="1" status="1" axId="137">
            <gType>bool</gType>
            <descrip>Sends a multipart REST request.  The ARG1 is the HTTP verb (also known as the HTTP method), such as "GET".   The ARG2 is the path of the resource URI.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>httpVerb</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>httpVerb</objcName>
                </arg>
                <arg>
                    <argName>uriPath</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>uriPath</objcName>
                </arg>
            </args>
            <args2>
                <arg name="httpVerb" type="string" objcName="httpVerb" />
                <arg name="uriPath" type="string" objcName="uriPath" />
            </args2>
            <links2 />
        </method>
        <method name="SendReqNoBody" axId="102" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Sends a REST request that cotnains no body.  The ARG1 is the HTTP verb (also known as the HTTP method), such as "GET".   The ARG2 is the path of the resource URI.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>httpVerb</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>httpVerb</objcName>
                </arg>
                <arg>
                    <argName>uriPath</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>uriPath</objcName>
                </arg>
            </args>
            <args2>
                <arg name="httpVerb" type="string" objcName="httpVerb" />
                <arg name="uriPath" type="string" objcName="uriPath" />
            </args2>
            <links2 />
        </method>
        <method name="SendReqStreamBody" axId="112" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Sends a REST request that cotnains a binary or text body that is obtained by reading from the ARG3.  The ARG1 is the HTTP verb (also known as the HTTP method), such as "PUT".   The ARG2 is the path of the resource URI.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>httpVerb</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>httpVerb</objcName>
                </arg>
                <arg>
                    <argName>uriPath</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>uriPath</objcName>
                </arg>
                <arg>
                    <argName>stream</argName>
                    <cppType>CkStream &amp;</cppType>
                    <dnType>Stream</dnType>
                    <axType>Stream</axType>
                    <objcName>stream</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>rest_async_stream_upload.asp</url>
                    <text>REST Asynchronous Streaming Upload</text>
                </link>
            </links2>
            <args2>
                <arg name="httpVerb" type="string" objcName="httpVerb" />
                <arg name="uriPath" type="string" objcName="uriPath" />
                <arg name="stream" type="Stream" objcName="stream" />
            </args2>
        </method>
        <method name="SendReqStringBody" axId="111" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Sends a REST request that cotnains a text body, such as XML or JSON.  The ARG1 is the HTTP verb (also known as the HTTP method), such as "PUT".   The ARG2 is the path of the resource URI.  The ARG3 contains the text of the HTTP request body.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>httpVerb</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>httpVerb</objcName>
                </arg>
                <arg>
                    <argName>uriPath</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>uriPath</objcName>
                </arg>
                <arg>
                    <argName>bodyText</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>bodyText</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>rest_lowLevel_api.asp</url>
                    <text>Lower-Level REST API Methods</text>
                </link>
            </links2>
            <args2>
                <arg name="httpVerb" type="string" objcName="httpVerb" />
                <arg name="uriPath" type="string" objcName="uriPath" />
                <arg name="bodyText" type="string" objcName="bodyText" />
            </args2>
        </method>
        <method name="SetAuthAws" axId="105" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Sets the authorization service provider for Amazon AWS REST requests.  An application that sets an AWS authentication provider need not explicitly set the Authorization property.  Each REST request is automatically signed and authenticated using the ARG1.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>authProvider</argName>
                    <cppType>CkAuthAws &amp;</cppType>
                    <dnType>AuthAws</dnType>
                    <axType>AuthAws</axType>
                    <objcName>authProvider</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>rest_httpProxy.asp</url>
                    <text>REST through HTTP Proxy</text>
                </link>
            </links2>
            <args2>
                <arg name="authProvider" type="AuthAws" objcName="authProvider" />
            </args2>
        </method>
        <method name="SetAuthAzureAD" axId="122" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Sets the Azure AD (Active Directory) authorization service provider.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>authProvider</argName>
                    <cppType>CkAuthAzureAD &amp;</cppType>
                    <dnType>AuthAzureAD</dnType>
                    <axType>AuthAzureAD</axType>
                    <objcName>authProvider</objcName>
                </arg>
            </args>
            <args2>
                <arg name="authProvider" type="AuthAzureAD" objcName="authProvider" />
            </args2>
            <links2 />
        </method>
        <method name="SetAuthAzureStorage" axId="121" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Sets the authorization service provider for Azure Storage Service requests.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>authProvider</argName>
                    <cppType>CkAuthAzureStorage &amp;</cppType>
                    <dnType>AuthAzureStorage</dnType>
                    <axType>AuthAzureStorage</axType>
                    <objcName>authProvider</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>azure_storage_blob_simple_upload.asp</url>
                    <text>Azure Storage Blob Simple Upload</text>
                </link>
                <link linkType="example">
                    <url>azure_blob_list_containers.asp</url>
                    <text>Azure Blob Service - List all Containers in a Storage Account</text>
                </link>
            </links2>
            <args2>
                <arg name="authProvider" type="AuthAzureStorage" objcName="authProvider" />
            </args2>
        </method>
        <method name="SetAuthBasic" axId="146" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Sets the ARG1 and ARG2 to be used for Basic authentication.  This method should be called when Basic authentication is required.  It should only be used with secure SSL/TLS connections.   Calling this method will cause the "Authorization: Basic ..." header to be automatically added to all requests.   In many cases, a REST API will support Basic authentication where the ARG1 is a client ID or account ID, and the ARG2 is a client secret or token.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>username</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>username</objcName>
                </arg>
                <arg>
                    <argName>password</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>password</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>twilio_sms.asp</url>
                    <text>Twilio: Send SMS using Basic Authentication</text>
                </link>
            </links2>
            <args2>
                <arg name="username" type="string" objcName="username" />
                <arg name="password" type="string" objcName="password" />
            </args2>
        </method>
        <method name="SetAuthGoogle" axId="120" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Sets the authorization service provider for Google API requests.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>authProvider</argName>
                    <cppType>CkAuthGoogle &amp;</cppType>
                    <dnType>AuthGoogle</dnType>
                    <axType>AuthGoogle</axType>
                    <objcName>authProvider</objcName>
                </arg>
            </args>
            <args2>
                <arg name="authProvider" type="AuthGoogle" objcName="authProvider" />
            </args2>
            <links2 />
        </method>
        <method name="SetAuthOAuth1" axId="145" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Sets the authentication provider for REST API requests needing OAuth 1.0 (and OAuth 1.0a) authentication.   If ARG2 is _TRUE_, then the OAuth1 authentication information and signature  is passed in query parameters.  Otherwise it is passed in an Authorization header.</descrip>
            <iversion>9.5.0.58</iversion>
            <links2>
                <link linkType="example">
                    <url>woo_commerce_oauth1.asp</url>
                    <text>WooCommerce OAuth 1.0a “one-legged” Authentication</text>
                </link>
            </links2>
            <args2>
                <arg name="authProvider" type="OAuth1" objcName="authProvider" />
                <arg name="useQueryParams" type="bool" objcName="useQueryParams" />
            </args2>
        </method>
        <method name="SetAuthOAuth2" axId="158" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Sets the authentication provider for REST API requests needing standards-based OAuth 2.0 authentication. This is for the case where a desktop/native/mobile application will be popping up a web browser, or embedding a web browser, to get authorization interactively from end-user of the application.</descrip>
            <args2>
                <arg name="authProvider" type="OAuth2" objcName="authProvider" />
            </args2>
            <iversion>9.5.0.59</iversion>
            <links2 />
        </method>
        <method name="SetMultipartBodyBinary" read="1" write="1" axId="133" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Only used for multipart requests. Sets the binary content of the multipart body indicated by the PartSelector.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>bodyData</argName>
                    <cppType>CkByteData &amp;</cppType>
                    <dnType>bytes</dnType>
                    <axType>bytes</axType>
                    <objcName>bodyData</objcName>
                </arg>
            </args>
            <args2>
                <arg name="bodyData" type="bytes" objcName="bodyData" />
            </args2>
            <links2 />
        </method>
        <method name="SetMultipartBodyStream" axId="135" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Only used for multipart requests. Sets the stream source of the multipart body indicated by the PartSelector.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>stream</argName>
                    <cppType>CkStream &amp;</cppType>
                    <dnType>Stream</dnType>
                    <axType>Stream</axType>
                    <objcName>stream</objcName>
                </arg>
            </args>
            <args2>
                <arg name="stream" type="Stream" objcName="stream" />
            </args2>
            <links2 />
        </method>
        <method name="SetMultipartBodyString" axId="134" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Only used for multipart requests. Sets the text content of the multipart body indicated by the PartSelector.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>bodyText</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>bodyText</objcName>
                </arg>
            </args>
            <args2>
                <arg name="bodyText" type="string" objcName="bodyText" />
            </args2>
            <links2 />
        </method>
        <method name="SetResponseBodyStream" ax="1" cpp="1" dn="1" status="1" axId="153">
            <gType>bool</gType>
            <descrip>Only applies to the Full* methods, such as FullRequestNoBody, FullRequestBinary, FullRequestStream, etc.    When set, the response body is streamed directly to ARG3, if (and only if) the HTTP response status code equals ARG1.   
&lt;p&gt;
If the response body was streamed to ARG3, then the string return value of the Full* method instead becomes "OK" for success.  If an attempt was made to stream the response body but it failed, then "FAIL" is returned.   If the response body was not streamed because the response status code was not equal to ARG1, then the returned string  contains the server's error response.
&lt;p&gt;
 If ARG2 is _TRUE_, then the ARG1's StringCharset property will automatically get set based on the charset, if any, indicated in the response header.  If the response is binary, then ARG2 is ignored.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>expectedStatus</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>expectedStatus</objcName>
                </arg>
                <arg>
                    <argName>autoSetStreamCharset</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>autoSetStreamCharset</objcName>
                </arg>
                <arg>
                    <argName>responseStream</argName>
                    <cppType>CkStream &amp;</cppType>
                    <dnType>Stream</dnType>
                    <axType>Stream</axType>
                    <objcName>responseStream</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>dropbox_download_file.asp</url>
                    <text>Download File from Dropbox</text>
                </link>
            </links2>
            <args2>
                <arg name="expectedStatus" type="int" objcName="expectedStatus" />
                <arg name="autoSetStreamCharset" type="bool" objcName="autoSetStreamCharset" />
                <arg name="responseStream" type="Stream" objcName="responseStream" />
            </args2>
        </method>
        <method name="UseConnection" axId="103" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Sets the connection to be used for sending the REST request. The ARG1 should be an already-connected socket.  It may be a TLS connection, an unencrypted connection, through an HTTP proxy, a SOCKS proxy, or even through SSH tunnels.  All of the connection related functionality is handled by the Chilkat Socket API.
&lt;p&gt;
The ARG2 indicates whether connection should automatically be established as needed for subsequent REST requests.
&lt;p&gt;
&lt;b&gt;Important: &lt;/b&gt; The UseConnection method is provided as a means for handling more complicated connections -- such as connections through proxies, tunnels, etc.   If your application is connecting directly to the HTTP server, then simply call this class's Connect method.</descrip>
            <iversion>9.5.0.58</iversion>
            <args>
                <arg>
                    <argName>connection</argName>
                    <cppType>CkSocket &amp;</cppType>
                    <dnType>Socket</dnType>
                    <axType>Socket</axType>
                    <objcName>connection</objcName>
                </arg>
                <arg>
                    <argName>autoReconnect</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>autoReconnect</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="example">
                    <url>rest_useSocketObject.asp</url>
                    <text>Use Socket Object for the Connection</text>
                </link>
                <link linkType="example">
                    <url>rest_httpProxy.asp</url>
                    <text>REST through HTTP Proxy</text>
                </link>
                <link linkType="example">
                    <url>rest_socksProxy.asp</url>
                    <text>REST through SOCKS Proxy</text>
                </link>
                <link linkType="example">
                    <url>rest_sshTunnel.asp</url>
                    <text>REST through SSH Tunnel</text>
                </link>
                <link linkType="example">
                    <url>rest_upload_bandwidth_throttle.asp</url>
                    <text>REST Upload Bandwidth Throttle</text>
                </link>
            </links2>
            <args2>
                <arg name="connection" type="Socket" objcName="connection" />
                <arg name="autoReconnect" type="bool" objcName="autoReconnect" />
            </args2>
        </method>
        <method name="FullRequestSb" axId="159" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Sends a complete REST request (header + body string) and receives the full response.  The body of the request is passed in ARG3. The response body is returned in ARG4  (replacing whatever contents ARG4 may have previously held).</descrip>
            <args2>
                <arg name="httpVerb" type="string" objcName="httpVerb" />
                <arg name="uriPath" type="string" objcName="uriPath" />
                <arg name="requestBody" type="StringBuilder" objcName="requestBody" />
                <arg name="responseBody" type="StringBuilder" objcName="responseBody" />
            </args2>
            <iversion>9.5.0.62</iversion>
            <links2 />
        </method>
        <method name="AddQueryParamSb" axId="160" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Adds a query parameter.   If the query parameter already exists, then it is replaced.  The parameter value is passed in a StringBuilder object.</descrip>
            <args2>
                <arg name="name" type="string" objcName="name" />
                <arg name="value" type="StringBuilder" objcName="value" />
            </args2>
            <iversion>9.5.0.62</iversion>
            <links2 />
        </method>
        <method name="SetMultipartBodySb" axId="161" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Only used for multipart requests. Sets the text content of the multipart body indicated by the PartSelector.</descrip>
            <args2>
                <arg name="bodySb" type="StringBuilder" objcName="bodySb" />
            </args2>
            <iversion>9.5.0.62</iversion>
            <links2>
                <link linkType="example">
                    <url>rest_multipart_form_data.asp</url>
                    <text>REST Send multipart/form-data</text>
                </link>
            </links2>
        </method>
        <method name="SetMultipartBodyBd" axId="162" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Only used for multipart requests. Sets the binary content of the multipart body indicated by the PartSelector.</descrip>
            <args2>
                <arg name="bodyData" type="BinData" objcName="bodyData" />
            </args2>
            <iversion>9.5.0.62</iversion>
            <links2>
                <link linkType="example">
                    <url>rest_multipart_form_data.asp</url>
                    <text>REST Send multipart/form-data</text>
                </link>
            </links2>
        </method>
        <method name="SendReqSb" axId="163" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Sends a REST request that cotnains a text body, such as XML or JSON.  The ARG1 is the HTTP verb (also known as the HTTP method), such as "PUT".   The ARG2 is the path of the resource URI.  The ARG3 contains the text of the HTTP request body.</descrip>
            <args2>
                <arg name="httpVerb" type="string" objcName="httpVerb" />
                <arg name="uriPath" type="string" objcName="uriPath" />
                <arg name="bodySb" type="StringBuilder" objcName="bodySb" />
            </args2>
            <iversion>9.5.0.62</iversion>
            <links2 />
        </method>
        <method name="SendReqBd" axId="164" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Sends a REST request that cotnains a binary body.  The ARG1 is the HTTP verb (also known as the HTTP method), such as "PUT".   The ARG2 is the path of the resource URI.  The ARG3 contains the bytes of the HTTP request body.</descrip>
            <args2>
                <arg name="httpVerb" type="string" objcName="httpVerb" />
                <arg name="uriPath" type="string" objcName="uriPath" />
                <arg name="body" type="BinData" objcName="body" />
            </args2>
            <iversion>9.5.0.62</iversion>
            <links2 />
        </method>
        <method name="ReadRespSb" axId="165" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Reads the response body.  Should only be called after ReadResponseHeader has been called, and should only be called when it is already known that the response body will be a string (such as XML, JSON, etc.)  The response body is stored in ARG1.  (replacing whatever contents ARG1 may have previously held).</descrip>
            <args2>
                <arg name="responseBody" type="StringBuilder" objcName="responseBody" />
            </args2>
            <iversion>9.5.0.62</iversion>
            <links2 />
        </method>
        <method name="ReadRespBd" axId="166" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Reads the response body.  Should only be called after ReadResponseHeader has been called, and should only be called when it is already known that the response body is binary, such as for JPG images or other non-text binary file types.  The response body is received into ARG1 (replacing whatever contents ARG1 may have previously held).</descrip>
            <args2>
                <arg name="responseBody" type="BinData" objcName="responseBody" />
            </args2>
            <iversion>9.5.0.62</iversion>
            <links2 />
        </method>
        <method name="ClearAllParts" axId="168" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Removes all sub-parts from a request.  This is useful when preparing the REST object to send a new request after a multipart request has just been sent.</descrip>
            <args2 />
            <iversion>9.5.0.64</iversion>
            <links2>
                <link linkType="example">
                    <url>rest_multipart_form_data.asp</url>
                    <text>REST Send multipart/form-data</text>
                </link>
            </links2>
        </method>
        <method name="FullRequestNoBodySb" axId="169" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="httpVerb" type="string" objcName="httpVerb" />
                <arg name="uriPath" type="string" objcName="uriPath" />
                <arg name="sb" type="StringBuilder" objcName="sb" />
            </args2>
            <iversion>9.5.0.64</iversion>
            <links2>
                <link linkType="example">
                    <url>xero_get_accounts_rest.asp</url>
                    <text>Xero Get Accounts using REST API</text>
                </link>
            </links2>
            <descrip>The same as FullRequestNoBody, except returns the response body in the ARG3.</descrip>
        </method>
        <method name="FullRequestBd" axId="170" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Sends a complete REST request (header + binary body) and receives the full response.  The binary body of the request is passed in ARG3. The response body is returned in ARG4  (replacing whatever contents ARG4 may have previously held).</descrip>
            <args2>
                <arg name="httpVerb" type="string" objcName="httpVerb" />
                <arg name="uriPath" type="string" objcName="uriPath" />
                <arg name="binData" type="BinData" objcName="binData" />
                <arg name="responseBody" type="StringBuilder" objcName="responseBody" />
            </args2>
            <iversion>9.5.0.64</iversion>
            <links2>
                <link linkType="example">
                    <url>s3_rest_upload_binData.asp</url>
                    <text>S3 Upload Binary File from BinData</text>
                </link>
            </links2>
        </method>
        <method name="FullRequestNoBodyBd" axId="171" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>The same as FullRequestNoBody, except returns the response body in the ARG3.   This method is useful for downloading binary files.</descrip>
            <args2>
                <arg name="httpVerb" type="string" objcName="httpVerb" />
                <arg name="uriPath" type="string" objcName="uriPath" />
                <arg name="binData" type="BinData" objcName="binData" />
            </args2>
            <iversion>9.5.0.64</iversion>
            <links2>
                <link linkType="example">
                    <url>xero_get_file_content.asp</url>
                    <text>Xero Get File Content (Files API)</text>
                </link>
            </links2>
        </method>
        <method name="SetAuthAzureSas" axId="172" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Provides the information for Azure SAS (Shared Access Signature) authorization.   Calling this method will cause the "Authorization: SharedAccessSignature ..." header to be automatically added to all requests.</descrip>
            <args2>
                <arg name="authProvider" type="AuthAzureSAS" objcName="authProvider" />
            </args2>
            <iversion>9.5.0.65</iversion>
            <links2>
                <link linkType="example">
                    <url>azure_service_bus_create_queue.asp</url>
                    <text>Azure Service Bus - Create Queue</text>
                </link>
            </links2>
        </method>
        <method name="AddMwsSignature" axId="173" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="httpVerb" type="string" objcName="httpVerb" />
                <arg name="uriPath" type="string" objcName="uriPath" />
                <arg name="domain" type="string" objcName="domain" />
                <arg name="mwsSecretKey" type="string" objcName="mwsSecretKey" />
            </args2>
            <iversion>9.5.0.66</iversion>
            <links2>
                <link linkType="example">
                    <url>mws_list_orders.asp</url>
                    <text>MWS List Orders (Amazon Marketplace Web Service)</text>
                </link>
            </links2>
            <descrip>Computes the Amazon MWS signature using the ARG4 and adds the "Signature" parameter to the request.  This method should be called for all Amazon Marketplace Web Service (Amazon MWS) HTTP requests.   It should be called after all request parameters have been added.
&lt;p&gt;
The ARG3 should be the domain of the request, such as one of the following:
&lt;ul&gt;
&lt;li&gt;mws.amazonservices.com
&lt;li&gt;mws-eu.amazonservices.com
&lt;li&gt;mws.amazonservices.in
&lt;li&gt;mws.amazonservices.com.cn
&lt;li&gt;mws.amazonservices.jp
&lt;/ul&gt;
&lt;p&gt;The ARG1 should be the HTTP verb, such as "GET", "POST", etc.  The ARG2 is the URI path, such as "/Feeds/2009-01-01".  In general, the ARG1 and ARG2 should be identical to the 1st two args passed to methods such as FullRequestFormUrlEncoded.
&lt;p&gt;Note: This method also automatically adds or replaces the existing Timestamp parameter to the current system date/time.</descrip>
        </method>
    </methods>
    <properties>
        <property name="Authorization" axId="101" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The value of the Authorization HTTP request header (if needed).</descrip>
            <iversion>9.5.0.58</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="HeartbeatMs" axId="148" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>This property is only valid in programming environment and languages that allow for event callbacks.
&lt;p&gt;Specifies the time interval in milliseconds between AbortCheck events.  A value of 0 (the default) indicate that no AbortCheck events will fire. Any REST method can be aborted via the AbortCheck event.</descrip>
            <iversion>9.5.0.58</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="Host" axId="100" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The value of the Host HTTP request header.</descrip>
            <iversion>9.5.0.58</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="IdleTimeoutMs" axId="106" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>The maximum amount of time to wait for additional incoming data when receiving, or the max time to wait to send additional data.   The default value  is 30000 (30 seconds).  This is not an overall max timeout.  Rather, it is the maximum time to wait when receiving or sending has halted.</descrip>
            <iversion>9.5.0.58</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="LastRequestHeader" read="1" ax="1" cpp="1" dn="1" axId="142">
            <gType>string</gType>
            <descrip>The full MIME header (not including the HTTP start line which contains the status code and status text), of the last request sent.</descrip>
            <iversion>9.5.0.58</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="LastRequestStartLine" read="1" ax="1" cpp="1" dn="1" axId="143">
            <gType>string</gType>
            <descrip>The full start line of the last request sent.  (The start line begins with the HTTP verb, such as GET, POST, etc., is followed by the URI path, and ends with the HTTP version.)</descrip>
            <iversion>9.5.0.58</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="NumResponseHeaders" read="1" ax="1" cpp="1" dn="1" axId="126">
            <gType>int</gType>
            <descrip>The number of response header fields.  The first response header field is at index 0.</descrip>
            <iversion>9.5.0.58</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="PartSelector" axId="132" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Only used for multipart requests.  Selects the target MIME part for calls to AddHeader, RemoveHeader, SetMultipartBodyBinary, SetMultipartBodyString, SetMultipartBodyStream, etc.  The default is an empty string and indicates the top-level header.  A string value of "1" would indicate the 1st sub-part in a multipart request.  A string value of "1.2" would indicate the 2nd sub-part under the 1st sub-part.  
&lt;p&gt;
It is unlikely you'll ever encounter the need for nested multipart requests (i.e. part selectors such as "1.2")   Also, most REST requests are NOT multipart, and therefore this feature is rarely used.  An example of a multipart REST request would be for a Google Drive upload, where the top-level Content-Type is multipart/related, the1st sub-part contains the JSON meta-data, and the 2nd sub-part contains the file data.</descrip>
            <iversion>9.5.0.58</iversion>
            <links2>
                <link linkType="example">
                    <url>rest_google_drive_multipart_upload_string.asp</url>
                    <text>Google Drive Multipart Upload String (Google Drive)</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="ResponseHeader" read="1" ax="1" cpp="1" dn="1" axId="141">
            <gType>string</gType>
            <descrip>The full response MIME header (not including the HTTP start line which contains the status code and status text).</descrip>
            <iversion>9.5.0.58</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="ResponseStatusCode" read="1" ax="1" cpp="1" dn="1" axId="125">
            <gType>int</gType>
            <descrip>The response status code.</descrip>
            <iversion>9.5.0.58</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="ResponseStatusText" axId="124" read="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The status message corresponding to the response status code.</descrip>
            <iversion>9.5.0.58</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="StreamNonChunked" read="1" write="1" ax="1" cpp="1" dn="1" axId="152">
            <gType>bool</gType>
            <descrip>If _TRUE_, then methods that upload data are sent non-chunked if possible.  For example, if the FullRequestStream method is called where the stream is a file stream, then the size of the content is known and the HTTP request will be sent using a Content-Length header instead of using a Transfer-Encoding: chunked upload.    If _FALSE_, then the chunked transfer encoding is used.  The default value of this property is _TRUE_.</descrip>
            <iversion>9.5.0.58</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="ConnectFailReason" read="1" ax="1" cpp="1" dn="1" axId="155">
            <gType>int</gType>
            <descrip>If the Connect method fails, this property can be checked to determine the reason for failure.
&lt;p&gt;
Possible values are:
&lt;pre&gt;
0 = success

Normal (non-SSL) sockets:
1 = empty hostname
2 = DNS lookup failed
3 = DNS timeout
4 = Aborted by application.
5 = Internal failure.
6 = Connect Timed Out
7 = Connect Rejected (or failed for some other reason)

SSL/TLS:
100 = TLS internal error.
101 = Failed to send client hello.
102 = Unexpected handshake message.
103 = Failed to read server hello.
104 = No server certificate.
105 = Unexpected TLS protocol version.
106 = Server certificate verify failed (the server certificate is expired or the cert's signature verification failed).
107 = Unacceptable TLS protocol version.
109 = Failed to read handshake messages.
110 = Failed to send client certificate handshake message.
111 = Failed to send client key exchange handshake message.
112 = Client certificate's private key not accessible.
113 = Failed to send client cert verify handshake message.
114 = Failed to send change cipher spec handshake message.
115 = Failed to send finished handshake message.
116 = Server's Finished message is invalid.
&lt;/pre&gt;</descrip>
            <iversion>9.5.0.58</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="PercentDoneOnSend" axId="156" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>This property only applies to the FullRequest* methods, which are methods that both send an HTTP request and receive the response.  (It also only applies to programming languages that support event callbacks.)  It determines whether percentage completion is tracked for the sending of the HTTP request, or for the downloading the HTTP response.  The default value is _FALSE_, which is to measure the percent completion when receiving the response.
&lt;p&gt;
&lt;b&gt;For example: &lt;/b&gt; If the REST request is to download a file, then this property should remain at the default value of _FALSE_.   If the REST request is to upload a file (using a Full* method), then set this property to _TRUE_.  Also note if a server sends an HTTP response in the chunked encoding, it is not possible to measure percent completion because the HTTP client has no way of knowing the total size of the HTTP response.</descrip>
            <iversion>9.5.0.58</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="AllowHeaderQB" read="1" write="1" axId="157" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Controls whether non us-ascii HTTP request headers are automatically Q/B encoded.  The default value is _TRUE_. 
&lt;p&gt;
Q/B encoded headers explicitly indicate the charset and byte representation, and appear as such:  =?utf-8?Q?...?=  or =?utf-8?B?...?=, where the charset may be "utf-8" or any other possible charset.
&lt;p&gt;
If this property is set to _FALSE_, then no Q/B encoding is applied to any request header.</descrip>
            <iversion>9.5.0.59</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="AllowHeaderFolding" axId="167" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If this property is set to _FALSE_, then no MIME header folding will be automatically applied to any request header.  The default is _TRUE_.   This property is provided to satisfy certain providers, such as Quickbooks, that require all MIME headers to be single unfolded lines regardless of length.</descrip>
            <args2 />
            <iversion>9.5.0.63</iversion>
            <links2 />
        </property>
    </properties>
    <events>
        <standard name="AbortCheck" />
        <standard name="PercentDone" />
        <standard name="ProgressInfo" />
    </events>
    <clsid>5BE34693-974D-41B8-931C-73506CDEE2BE</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidEvents>FEE89395-5563-4248-BAB4-C290E474123E</uuidEvents>
    <uuidMidl>D985C806-44A2-4BBD-9FC4-EDD1CD82F03E</uuidMidl>
    <nextAxId>174</nextAxId>
</class>
