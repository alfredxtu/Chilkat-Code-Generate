<?xml version="1.0" encoding="utf-8" ?>
<class XojoModuleId="973394229" sourceXmlPath="c:/ck2000/appData/apiDef2/SFtp.xml" license="Ssh" hasEvents="1">
    <axName>ChilkatSFtp</axName>
    <dnName>SFtp</dnName>
    <cppName>CkSFtp</cppName>
    <properties>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="AccumulateBuffer" axId="100">
            <gType>bytes</gType>
            <descrip>Contains the bytes downloaded from a remote file via the AccumulateBytes method call.  Each call to AccumulateBytes appends to this buffer.  To clear this buffer, call the ClearAccumulateBuffer method.</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="AuthFailReason" axId="217" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>Set to one of the following values if a call to AuthenticatePw, AuthenticatePk, or AuthenticatePwPk returns a failed status.
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;1: &lt;/b&gt;Transport failure. This is a failure to communicate with the server (i.e. the connection was lost, or a read or write failed or timed out).
&lt;li&gt;&lt;b&gt;2: &lt;/b&gt;Invalid key for public key authentication.  The key was not a valid format, not a valid key, not a private key, or not the right type of key.
&lt;li&gt;&lt;b&gt;3: &lt;/b&gt;No matching authentication methods were available.
&lt;li&gt;&lt;b&gt;4: &lt;/b&gt;SSH authentication protocol error - an unexpected or invalid message was received.
&lt;li&gt;&lt;b&gt;5: &lt;/b&gt;The incorrect password or private key was provided.
&lt;li&gt;&lt;b&gt;6: &lt;/b&gt;Already authenticated.  The SSH session is already authenticated.
&lt;li&gt;&lt;b&gt;7: &lt;/b&gt;Password change request: The server requires the password to be changed.
&lt;/ul&gt;</descrip>
            <iversion>9.5.0.52</iversion>
            <links2 />
            <args2 />
        </property>
        <property name="BandwidthThrottleDown" read="1" write="1" ax="1" cpp="1" dn="1" axId="214">
            <gType>int</gType>
            <descrip>If non-zero, limits (throttles) the download bandwidth to approximately this maximum number of bytes per second.  The default value of this property is 0.</descrip>
            <iversion>9.5.0.49</iversion>
            <links2 />
            <args2 />
        </property>
        <property name="BandwidthThrottleUp" axId="215" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>If non-zero, limits (throttles) the upload bandwidth to approximately this maximum number of bytes per second.  The default value of this property is 0.</descrip>
            <iversion>9.5.0.49</iversion>
            <links2>
                <link linkType="example">
                    <url>sftp_uploadBandwidthThrottle.asp</url>
                    <text>SFTP Upload with Bandwidth Throttling</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property name="ClientIdentifier" axId="101" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The client-identifier string to be used when connecting to an SSH/SFTP server.  Defaults to "SSH-2.0-PuTTY_Release_0.63".   (This string is used to mimic PuTTY because some servers are known to disconnect from clients with unknown client identifiers.)</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ClientIpAddress" axId="102">
            <gType>string</gType>
            <descrip>The IP address to use for computers with multiple network interfaces or IP addresses.
For computers with a single network interface (i.e. most computers), this property should not be set.  For multihoming computers, the default IP address is automatically used if this property is not set.&lt;p&gt;
The IP address is a string such as in dotted notation using numbers, not domain names, such as "165.164.55.124".</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ConnectTimeoutMs" axId="103">
            <gType>int</gType>
            <descrip>Maximum number of milliseconds to wait when connecting to an SSH server.</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="DisconnectCode" axId="104" read="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>If the SSH/SFTP server sent a DISCONNECT message when closing the connection, this property contains the "reason code" as specified in RFC 4253:
&lt;pre&gt;
           Symbolic name                                reason code
           -------------                                -----------
      SSH_DISCONNECT_HOST_NOT_ALLOWED_TO_CONNECT             1
      SSH_DISCONNECT_PROTOCOL_ERROR                          2
      SSH_DISCONNECT_KEY_EXCHANGE_FAILED                     3
      SSH_DISCONNECT_RESERVED                                4
      SSH_DISCONNECT_MAC_ERROR                               5
      SSH_DISCONNECT_COMPRESSION_ERROR                       6
      SSH_DISCONNECT_SERVICE_NOT_AVAILABLE                   7
      SSH_DISCONNECT_PROTOCOL_VERSION_NOT_SUPPORTED          8
      SSH_DISCONNECT_HOST_KEY_NOT_VERIFIABLE                 9
      SSH_DISCONNECT_CONNECTION_LOST                        10
      SSH_DISCONNECT_BY_APPLICATION                         11
      SSH_DISCONNECT_TOO_MANY_CONNECTIONS                   12
      SSH_DISCONNECT_AUTH_CANCELLED_BY_USER                 13
      SSH_DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE         14
      SSH_DISCONNECT_ILLEGAL_USER_NAME                      15
&lt;/pre&gt;</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="DisconnectReason" axId="105">
            <gType>string</gType>
            <descrip>If the SSH/SFTP server sent a DISCONNECT message when closing the connection, this property contains a descriptive string for the "reason code" as specified in RFC 4253.</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="EnableCache" axId="106" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Controls whether the component keeps an internal file size &amp; attribute cache.  The cache affects the following methods:  GetFileSize32, GetFileSize64, GetFileSizeStr, GetFileCreateTime, GetFileLastAccess, GetFileLastModified, GetFileOwner, GetFileGroup, and GetFilePermissions.
&lt;p&gt;
The file attribute cache exists to minimize communications with the SFTP server.  If the cache is enabled, then a request for any single attribute will cause all of the attributes to be cached.  A subsequent request for a different attribute of the same file will be fulfilled from cache, eliminating the need for a message to be sent to the SFTP server.
&lt;p&gt;
Note: Caching only occurs when filenames are used, not handles.</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="EnableCompression" read="1" write="1" ax="1" cpp="1" dn="1" axId="221">
            <gType>bool</gType>
            <descrip>Enables or disables the use of compression w/ the SSH connection.  The default value is  _TRUE_, meaning that compression is used if the server supports it.
&lt;p&gt;
Some older SSH servers have been found that claim to support compression, but actually fail when compression is used.  PuTTY does not enable compression by default.  If trouble is encountered where the SSH server disconnects immediately after the connection is seemingly established (i.e. during authentication), then check to see if disabling compression resolves the problem.</descrip>
            <iversion>9.5.0.56</iversion>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="FilenameCharset" axId="107">
            <gType>string</gType>
            <descrip>Automatically set during the InitializeSftp method if the server sends a filename-charset name-value extension.  Otherwise, may be set directly to the name of a charset, such as "utf-8", "iso-8859-1", "windows-1252", etc.  ("ansi" is also a valid choice.)  Incoming filenames are interpreted as utf-8 if no FilenameCharset is set.  Outgoing filenames are sent using utf-8 by default.  Otherwise, incoming and outgoing filenames use the charset specified by this property.</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="ForceCipher" axId="108" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Set to one of the following encryption algorithms to force that cipher to be used.  By default, the component will automatically choose the first cipher supported by the server in the order listed here:  "aes256-ctr", "aes128-ctr", "aes256-cbc", "aes128-cbc", "twofish256-cbc", "twofish128-cbc", "blowfish-cbc", "3des-cbc", "arcfour128", "arcfour256".   (If blowfish is chosen, the encryption strength is 128 bits.)     
&lt;p&gt;
Important: If this is property is set and the server does NOT support then encryption algorithm, then the Connect will fail.</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="ForceV3" axId="109" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If set to _TRUE_, forces the client to choose version 3 of the SFTP protocol, even if the server supports a higher version.  The default value of this property is _FALSE_.</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="HeartbeatMs" axId="110" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>This is the number of milliseconds between each AbortCheck event callback.  The AbortCheck callback allows an application to abort any SFTP operation prior to completion.  If HeartbeatMs is 0 (the default), no AbortCheck event callbacks will fire.</descrip>
            <links>
                <link>
                    <text>HeartbeatMs and the AbortCheck Event</text>
                    <url_cs>http://www.cknotes.com/?p=149</url_cs>
                    <url_vb.net>http://www.cknotes.com/?p=149</url_vb.net>
                </link>
            </links>
            <links2>
                <link linkType="external" lang="csharp">
                    <text>HeartbeatMs and the AbortCheck Event</text>
                    <url>http://www.cknotes.com/?p=149</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HostKeyAlg" axId="111">
            <gType>string</gType>
            <descrip>Indicates the preferred host key algorithm to be used in establishing the SSH secure connection.  The default is "DSS".  It may be changed to "RSA" if needed.  Chilkat recommends not changing this unless a problem warrants the change.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="HostKeyFingerprint" axId="112">
            <gType>string</gType>
            <descrip>Set after connecting to an SSH/SFTP server.  The format of the fingerprint looks like this:  "ssh-rsa 1024 68:ff:d1:4e:6c:ff:d7:b0:d6:58:73:85:07:bc:2e:d5"</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HttpProxyAuthMethod" axId="113">
            <gType>string</gType>
            <descrip>If an HTTP proxy requiring authentication is to be used, set this property to the HTTP proxy authentication method name.  Valid choices are "Basic" or "NTLM".</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HttpProxyDomain" axId="114">
            <gType>string</gType>
            <descrip>The NTLM authentication domain (optional) if NTLM authentication is used w/ the HTTP proxy.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HttpProxyHostname" axId="115">
            <gType>string</gType>
            <descrip>If an HTTP proxy is to be used, set this property to the HTTP proxy hostname or IPv4 address (in dotted decimal notation).</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HttpProxyPassword" axId="116">
            <gType>string</gType>
            <descrip>If an HTTP proxy requiring authentication is to be used, set this property to the HTTP proxy password.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HttpProxyPort" axId="117">
            <gType>int</gType>
            <descrip>If an HTTP proxy is to be used, set this property to the HTTP proxy port number.  (Two commonly used HTTP proxy ports are 8080 and 3128.)</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="HttpProxyUsername" axId="118">
            <gType>string</gType>
            <descrip>If an HTTP proxy requiring authentication is to be used, set this property to the HTTP proxy login name.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="IdleTimeoutMs" axId="119">
            <gType>int</gType>
            <descrip>Causes SFTP operations to fail when progress for sending or receiving data halts for more than this number of milliseconds.  Setting IdleTimeoutMs = 0 allows the application to wait indefinitely.  The default value of this property is 30000 (which equals 30 seconds).</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="IncludeDotDirs" axId="120">
            <gType>bool</gType>
            <descrip>If _TRUE_, then the ReadDir method will include the "." and ".." directories in its results.  The default value of this property is _FALSE_.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="InitializeFailCode" axId="121">
            <gType>int</gType>
            <descrip>The InitializeSftp method call opens a channel for the SFTP session.  If the request to open a channel fails, this property contains a code that identifies the reason for failure.  The reason codes are defined in RFC 4254 and are reproduced here:
&lt;pre&gt;
             Symbolic name                           reason code
             -------------                           -----------
            SSH_OPEN_ADMINISTRATIVELY_PROHIBITED          1
            SSH_OPEN_CONNECT_FAILED                       2
            SSH_OPEN_UNKNOWN_CHANNEL_TYPE                 3
            SSH_OPEN_RESOURCE_SHORTAGE                    4
&lt;/pre&gt;</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="InitializeFailReason" axId="122">
            <gType>string</gType>
            <descrip>The InitializeSftp method call opens a channel for the SFTP session.  If the request to open a channel fails, this property contains a description of the reason for failure.   (It contains descriptive text matching the InitializeFailCode property.)</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="IsConnected" axId="123">
            <gType>bool</gType>
            <descrip>Returns _TRUE_ if connected to the SSH server.  Note: This does not mean authentication has happened or InitializeSftp has already succeeded.  It only means that the connection has been established by calling Connect.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="KeepSessionLog" axId="124">
            <gType>bool</gType>
            <descrip>Controls whether communications to/from the SFTP server are saved to the SessionLog property.  The default value is _FALSE_.   If this property is set to _TRUE_, the contents of the SessionLog property will continuously grow as SFTP activity transpires.   The purpose of the KeepSessionLog / SessionLog properties is to help in debugging any future problems that may arise.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="MaxPacketSize" axId="125">
            <gType>int</gType>
            <descrip>The maximum packet length to be used in the underlying SSH transport protocol.  The default value is 32768.  (This should generally be left unchanged.)</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="PasswordChangeRequested" axId="126">
            <gType>bool</gType>
            <descrip>Set by the AuthenticatePw and AuthenticatePwPk methods.  If the authenticate  method returns a failed status, and this property is set to _TRUE_, then it indicates the server requested a password change.  In this case, re-call the authenticate method, but provide both the old and new passwords in the following format, where vertical bar characters encapsulate the old and new passwords:  
&lt;p&gt;&lt;blockquote&gt;|oldPassword|newPassword|&lt;/blockquote&gt;&lt;/p&gt;</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="PercentDoneScale" read="1" write="1" ax="1" cpp="1" dn="1" axId="213">
            <gType>int</gType>
            <descrip>This property is only valid in programming environment and languages that allow for event callbacks.
&lt;p&gt;
Sets the value to be defined as 100% complete for the purpose of PercentDone event callbacks.  The defaut value of 100 means that at most 100 event PercentDone callbacks will occur in a method that (1) is event enabled and (2) is such that it is possible to measure progress as a percentage completed.   This property may be set to larger numbers to get more fine-grained PercentDone callbacks.  For example, setting this property equal to 1000 will provide callbacks with .1 percent granularity.  For example, a value of 453 would indicate 45.3% competed.  This property is clamped to a minimum value of 10, and a maximum value of 100000.</descrip>
            <iversion>9.5.0.49</iversion>
            <links2 />
            <args2 />
        </property>
        <property name="PreferIpv6" read="1" write="1" ax="1" cpp="1" dn="1" axId="212">
            <gType>bool</gType>
            <descrip>If _TRUE_, then use IPv6 over IPv4 when both are supported for a particular domain.   The default value of this property is _FALSE_, which will choose IPv4 over IPv6.</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="PreserveDate" axId="127" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If _TRUE_, then the file last-modified and create date/time will be preserved for downloaded and uploaded files.  The default value is _FALSE_.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; Prior to version 9.5.0.40, this property only applied to downloads.  Starting in v9.5.0.40, it also applies to the UploadFileByName method.  
&lt;ul&gt;
&lt;li&gt;It does not apply to uploads or downloads where the remote file is opened to obtain a handle, the data is uploaded/downloaded, and then the handle is closed.
&lt;li&gt;The last-mod date/times are always preserved ini the SyncTreeDownload and SyncTreeUpload methods.
&lt;/ul&gt;</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="ProtocolVersion" axId="128">
            <gType>int</gType>
            <descrip>The negotiated SFTP protocol version, which should be a value between 3 and 6 inclusive.   When the InitializeSftp method is called, the Chilkat SFTP client sends it's highest supported protocol version to the server, and the server sends it's SFTP protocol version in response.  The negotiated protocol (i.e. the protocol version used for the session) is the lower of the two numbers.  If the SFTP server's protocol version is lower than 6, some file date/attributes are not supported because they are not supported by the earlier protocol version. These exceptions are noted throughout the reference documentation.</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="ReadDirMustMatch" read="1" write="1" ax="1" cpp="1" dn="1" axId="218">
            <gType>string</gType>
            <descrip>Can contain a wildcarded list of file patterns separated by semicolons.  For example, "*.xml; *.txt; *.csv".  If set, the ReadDir method will only return files that match any one of these patterns.</descrip>
            <iversion>9.5.0.53</iversion>
            <links2 />
            <args2 />
        </property>
        <property name="ReadDirMustNotMatch" read="1" write="1" ax="1" cpp="1" dn="1" axId="219">
            <gType>string</gType>
            <descrip>Can contain a wildcarded list of file patterns separated by semicolons.  For example, "*.xml; *.txt; *.csv".  If set, the ReadDir method will only return files that do not match any of these patterns.</descrip>
            <iversion>9.5.0.53</iversion>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="SessionLog" axId="129">
            <gType>string</gType>
            <descrip>Contains a log of the messages sent to/from the SFTP server.  To enable session logging, set the KeepSessionLog property = _TRUE_.  Note: This property is not a filename -- it is a string property that contains the session log data.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SoRcvBuf" axId="130">
            <gType>int</gType>
            <descrip>Sets the receive buffer size socket option.   Normally, this property should be left unchanged.  The default value is 0, which indicates that the receive buffer size socket option should not be explicitly set (i.e. the system default value, which may vary from system to system, should be used).   
&lt;p&gt;
This property can be changed if download performance seems slow.  It is recommended to be a multiple of 4096.  To see the current system's default receive buffer size, examine the LastErrorText property after calling any method that establishes a connection.  It should be reported under the heading "SO_RCVBUF".  To boost performance, try setting it equal to 2, 3, or 4 times the default value.</descrip>
            <links>
                <link>
                    <text>More Information about TCP performance and Buffer Sizes</text>
                    <url>http://www.cknotes.com/?p=446</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>More Information about TCP performance and Buffer Sizes</text>
                    <url>http://www.cknotes.com/?p=446</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SoSndBuf" axId="131">
            <gType>int</gType>
            <descrip>Sets the send buffer size socket option.   Normally, this property should be left unchanged.  The default value is 0, which indicates that the send buffer size socket option should not be explicitly set (i.e. the system default value, which may vary from system to system, should be used).   
&lt;p&gt;
This property can be changed if upload performance seems slow.  It is recommended to be a multiple of 4096.  To see the current system's default send buffer size, examine the LastErrorText property after calling any method that establishes a connection.  It should be reported under the heading "SO_SNDBUF".  To boost performance, try setting it equal to 2, 3, or 4 times the default value.</descrip>
            <links>
                <link>
                    <text>More Information about TCP performance and Buffer Sizes</text>
                    <url>http://www.cknotes.com/?p=446</url>
                </link>
            </links>
            <links2>
                <link linkType="external">
                    <text>More Information about TCP performance and Buffer Sizes</text>
                    <url>http://www.cknotes.com/?p=446</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SocksHostname" axId="132">
            <gType>string</gType>
            <descrip>The SOCKS4/SOCKS5 hostname or IPv4 address (in dotted decimal notation).  This property is only used if the SocksVersion property is set to 4 or 5).</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SocksPassword" axId="133">
            <gType>string</gType>
            <descrip>The SOCKS5 password (if required).  The SOCKS4 protocol does not include the use of a password, so this does not apply to SOCKS4.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SocksPort" axId="134">
            <gType>int</gType>
            <descrip>The SOCKS4/SOCKS5 proxy port.  The default value is 1080. 
This property only applies if a SOCKS proxy is used (if the SocksVersion property is set to 4 or 5).</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SocksUsername" axId="135">
            <gType>string</gType>
            <descrip>The SOCKS4/SOCKS5 proxy username.  This property is only used if the SocksVersion property is set to 4 or 5).</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="SocksVersion" axId="136">
            <gType>int</gType>
            <descrip>SocksVersion
May be set to one of the following integer values:
&lt;p&gt;
&lt;b&gt;0&lt;/b&gt; - No SOCKS proxy is used.  This is the default.&lt;br&gt;
&lt;b&gt;4&lt;/b&gt; - Connect via a SOCKS4 proxy.&lt;br&gt;
&lt;b&gt;5&lt;/b&gt; - Connect via a SOCKS5 proxy.</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="SyncMustMatch" axId="137" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Can contain a wildcarded list of file patterns separated by semicolons.  For example, "*.xml; *.txt; *.csv".  If set, the SyncTreeUpload and SyncTreeDownload methods will only  transfer files that match any one of these patterns.  This property only applies to files.  It does not apply to sub-directory names when recursively traversing a directory tree.</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="SyncMustNotMatch" axId="141" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Can contain a wildcarded list of file patterns separated by semicolons.  For example, "*.xml; *.txt; *.csv".  If set, the SyncTreeUpload  and SyncTreeDownload methods will not  transfer files that match any one of these patterns.  This property only applies to files.  It does not apply to sub-directory names when recursively traversing a directory tree.</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="SyncedFiles" axId="216" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The paths of the files uploaded or downloaded in the last call to SyncUploadTree or SyncDownloadTree.  The paths are listed one per line.  In both cases (for upload and download) each line contains the paths relative to the root synced directory.</descrip>
            <iversion>9.5.0.51</iversion>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="TcpNoDelay" axId="138">
            <gType>bool</gType>
            <descrip>This property controls the use of the internal TCP_NODELAY socket option (which disables the Nagle algorithm).  The default value of this property is _FALSE_.  Setting this value to _TRUE_ disables the delay of sending successive small packets on the network.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="UploadChunkSize" axId="139">
            <gType>int</gType>
            <descrip>The chunk size to use when uploading files via the UploadFile or UploadFileByName methods.  The default value is 32000.   If an upload fails because "WSAECONNABORTED An established connection was aborted by the software in your host machine.", then try setting this property to a smaller value, such as 4096.  A smaller value will result in slower transfer rates, but may help avoid this problem.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="UtcMode" axId="140">
            <gType>bool</gType>
            <descrip>If _TRUE_, then date/times are returned as UTC times.  If _FALSE_ (the default) then date/times are returned as local times.</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="AbortCurrent" read="1" write="1" ax="1" cpp="1" dn="1" axId="222">
            <gType>bool</gType>
            <descrip>When set to _TRUE_, causes the currently running method to abort.  Methods that always finish quickly (i.e.have no length file operations or network communications) are not affected.  If no method is running, then this property is automatically reset to _FALSE_ when the next method is called.  When the abort occurs, this property is reset to _FALSE_.  Both synchronous and asynchronous method calls can be aborted.  (A synchronous method call could be aborted by setting this property from a separate thread.)</descrip>
            <iversion>9.5.0.58</iversion>
            <links2 />
            <args2 />
        </property>
        <property name="SyncDirectives" read="1" write="1" ax="1" cpp="1" dn="1" axId="223">
            <gType>string</gType>
            <descrip>A property that can contain a list of comma-separated keywords to control certain aspects of an upload or download synchronization (for the SyncTreeUpload and SyncTreeDownload methods).  At this time there is only one possible directive, but others may be added in the future.
&lt;p&gt;
Set this property to &lt;b&gt;"UploadIgnoreLocalOpenFailures"&lt;/b&gt; to skip local files that cannot be opened.  A common reason for this would be if another process on the system has the file open for exclusive access.</descrip>
            <iversion>9.5.0.58</iversion>
            <links2 />
            <args2 />
        </property>
    </properties>
    <methods>
        <method name="AccumulateBytes" axId="142" ax="1" cpp="1" dn="1" events="1">
            <gType>int</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>sftpHandle</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>maxBytes</argName>
                    <objcName>maxBytes</objcName>
                </arg>
            </args>
            <descrip>Downloads bytes from an open file and appends them to the AccumulateBuffer.  The ARG1 is a file handle returned by the OpenFile method.  The ARG2 is the maximum number of bytes to read.  If the end-of-file is reached prior to reading the number of requested bytes, then fewer bytes may be returned.
&lt;p&gt;
Returns the number of bytes downloaded and appended to AccumulateBuffer.  Returns -1 on error.</descrip>
            <args2>
                <arg name="handle" type="string" objcName="sftpHandle" />
                <arg name="maxBytes" type="int" objcName="maxBytes" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="Add64" axId="143" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>n1</argName>
                    <objcName>n1</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>n2</argName>
                    <objcName>n2</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Convenience method for 64-bit addition.  Allows for two 64-bit integers to be passed as decimal strings and returns the sum in a decimal sting.</descrip>
            <args2>
                <arg name="n1" type="string" objcName="n1" />
                <arg name="n2" type="string" objcName="n2" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="AuthenticatePk" axId="144">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>username</argName>
                    <objcName>username</objcName>
                </arg>
                <arg>
                    <axType>SshKey</axType>
                    <dnType>SshKey</dnType>
                    <cppType>CkSshKey &amp;</cppType>
                    <argName>privateKey</argName>
                    <objcName>privateKey</objcName>
                </arg>
            </args>
            <descrip>Authenticates with the SSH server using public-key authentication.  The corresponding public key must have been installed on the SSH server for the ARG1.   Authentication will succeed if the matching ARG2 is provided.
&lt;p&gt;
Important: When reporting problems, please send the full contents of the LastErrorText property to support@chilkatsoft.com.</descrip>
            <args2>
                <arg name="username" type="string" objcName="username" />
                <arg name="privateKey" type="SshKey" objcName="privateKey" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>sftp_use_ppk_putty_private_key.asp</url>
                    <text>Use PuTTY Key for SFTP Authentication</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="AuthenticatePw" axId="145">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>login</argName>
                    <objcName>login</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>password</argName>
                    <objcName>password</objcName>
                </arg>
            </args>
            <descrip>Authenticates with the SSH server using a ARG1 and ARG2.
&lt;p&gt;
An SFTP session always begins by first calling Connect to connect to the SSH server, then calling either AuthenticatePw or AuthenticatePk to login, and finally calling InitializeSftp.
&lt;p&gt;
Important: When reporting problems, please send the full contents of the LastErrorText property to support@chilkatsoft.com.
&lt;p&gt;
Note: To learn about how to handle password change requests, see the PasswordChangeRequested property (above).</descrip>
            <args2>
                <arg name="login" type="string" objcName="login" />
                <arg name="password" type="string" objcName="password" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="AuthenticatePwPk" axId="146">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>username</argName>
                    <objcName>username</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>password</argName>
                    <objcName>password</objcName>
                </arg>
                <arg>
                    <axType>SshKey</axType>
                    <dnType>SshKey</dnType>
                    <cppType>CkSshKey &amp;</cppType>
                    <argName>privateKey</argName>
                    <objcName>privateKey</objcName>
                </arg>
            </args>
            <descrip>Authentication for SSH servers that require both a password and private key.  (Most SSH servers are configured to require one or the other, but not both.)
&lt;p&gt;
Important: When reporting problems, please send the full contents of the LastErrorText property to support@chilkatsoft.com.</descrip>
            <args2>
                <arg name="username" type="string" objcName="username" />
                <arg name="password" type="string" objcName="password" />
                <arg name="privateKey" type="SshKey" objcName="privateKey" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="ClearAccumulateBuffer" axId="147">
            <gType>void</gType>
            <args />
            <descrip>Clears the contents of the AccumulateBuffer property.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="ClearCache" axId="148">
            <gType>void</gType>
            <args />
            <descrip>Clears the internal file attribute cache.  (Please refer to the EnableCache property for more information about the file attribute cache.)</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="ClearSessionLog" axId="149">
            <gType>void</gType>
            <args />
            <descrip>Clears the contents of the SessionLog property.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="CloseHandle" axId="150" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>sftpHandle</objcName>
                </arg>
            </args>
            <descrip>Closes a file on the SSH/SFTP server.  ARG1 is a file handle returned from a previous call to OpenFile or OpenDir.</descrip>
            <args2>
                <arg name="handle" type="string" objcName="sftpHandle" />
            </args2>
            <links2 />
        </method>
        <method name="Connect" axId="151" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>domainName</argName>
                    <objcName>hostname</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>port</argName>
                    <objcName>port</objcName>
                </arg>
            </args>
            <descrip>Connects to an SSH/SFTP server.  The ARG1 may be a domain name or an IP address (example: 192.168.1.10).  Both IPv4 and IPv6 addresses are supported. The ARG2 is typically 22, which is the standard port for SSH servers.  
&lt;p&gt;
An SFTP session always begins by first calling Connect to connect to the SSH server, then calling either AuthenticatePw or AuthenticatePk to login, and finally calling InitializeSftp.
&lt;p&gt;
Important: When reporting problems, please send the full contents of the LastErrorText property to support@chilkatsoft.com.
&lt;p&gt;
&lt;b&gt;Important: &lt;/b&gt; All TCP-based Internet communications, regardless of the protocol (such as HTTP, FTP, SSH, IMAP, POP3, SMTP, etc.), and regardless of SSL/TLS, begin with establishing a TCP connection to a remote host:port.  External security-related infrastructure such as software firewalls (Windows Firewall), hardware firewalls, anti-virus, at either source or destination (or both) can block the connection.  If the connection fails, make sure to check all potential external causes of blockage.</descrip>
            <args2>
                <arg name="domainName" type="string" objcName="hostname" />
                <arg name="port" type="int" objcName="port" />
            </args2>
            <links2 />
        </method>
        <method name="ConnectThroughSsh" ax="1" cpp="1" dn="1" events="1" status="1" axId="220">
            <gType>bool</gType>
            <descrip>Connects to an SSH/SFTP server through an existing SSH connection.  The ARG1 is an existing connected and authenticated SSH object.   The connection to ARG2:ARG3 is made through the existing SSH connection via port-forwarding.  If successful, the connection is as follows:  application =&gt; ServerSSH1 =&gt; ServerSSH2.  (where ServerSSH1 is the ARG1 and ServerSSH2 is the SSH server at ARG2:ARG3)   Once connected in this way, all communications are routed through ServerSSH1 to ServerSSH2.  This includes authentication -- which means the application must still call one of the Authenticate* methods to authenticate with ServerSSH2.</descrip>
            <args>
                <arg>
                    <argName>sshConn</argName>
                    <cppType>CkSsh &amp;</cppType>
                    <dnType>Ssh</dnType>
                    <axType>Ssh</axType>
                    <objcName>sshConn</objcName>
                </arg>
                <arg>
                    <argName>hostname</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>hostname</objcName>
                </arg>
                <arg>
                    <argName>port</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>port</objcName>
                </arg>
            </args>
            <iversion>9.5.0.55</iversion>
            <links2>
                <link linkType="example">
                    <url>sftp_multipleHop.asp</url>
                    <text>Multiple Hop SSH to SFTP</text>
                </link>
            </links2>
            <args2>
                <arg name="sshConn" type="Ssh" objcName="sshConn" />
                <arg name="hostname" type="string" objcName="hostname" />
                <arg name="port" type="int" objcName="port" />
            </args2>
        </method>
        <method name="CopyFileAttr" axId="152" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localFilename</argName>
                    <objcName>localFilePath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilename</argName>
                    <objcName>remotePathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>isHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
            </args>
            <descrip>Sets the date/time and other attributes of a remote file to be equal to that of a local file.
&lt;p&gt;
The attributes copied depend on the SFTP version of the server:
&lt;pre&gt;
&lt;b&gt;SFTP v3 (and below)&lt;/b&gt;
    Last-Modified Date/Time
    Last-Access Date/Time

&lt;b&gt;SFTP v4, v5&lt;/b&gt;
    Last-Modified Date/Time
    Last-Access Date/Time
    Create Date/Time

&lt;b&gt;SFTP v6 (and above)&lt;/b&gt;
    Last-Modified Date/Time
    Last-Access Date/Time
    Create Date/Time
    Read-Only Flag
    Hidden Flag
    Archive Flag
    Compressed Flag
    Encrypted Flag

&lt;/pre&gt;
Notes:&lt;br&gt;
(1) The Last-Access date/time may or may not be set.  Chilkat has found that the Last-Access time is set to the current date/time, which is probably a result of the operating system setting it based on when the SFTP server is touching the file.&lt;br&gt;
(2) At the time of this writing, it is unknown whether the compressed/encryption settings for a local file are transferred to the remote file.   For example, does the remote file become compressed and/or encrypted just by setting the flags?  It may depend on the SFTP server and/or the remote filesystem.&lt;br&gt;
(3) Dates/times are sent in GMT.  SFTP servers should convert GMT times to local time zones.</descrip>
            <args2>
                <arg name="localFilename" type="string" objcName="localFilePath" />
                <arg name="remoteFilename" type="string" objcName="remotePathOrHandle" />
                <arg name="isHandle" type="bool" objcName="bIsHandle" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="CreateDir" axId="153">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>path</argName>
                    <objcName>path</objcName>
                </arg>
            </args>
            <descrip>Creates a directory on the SFTP server.</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="Disconnect" axId="154">
            <gType>void</gType>
            <args />
            <descrip>Disconnects from the SSH server.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="DownloadFile" axId="155">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>sftpHandle</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>toFilename</argName>
                    <objcName>toFilePath</objcName>
                </arg>
            </args>
            <descrip>Downloads a file from the SSH server to the local filesystem.  There are no limitations on file size and the data is streamed from SSH server to the local file.  ARG1 is a file handle returned by a previous call to OpenFile.</descrip>
            <args2>
                <arg name="handle" type="string" objcName="sftpHandle" />
                <arg name="toFilename" type="string" objcName="toFilePath" />
            </args2>
            <links2 />
        </method>
        <method name="DownloadFileByName" axId="156" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilePath</argName>
                    <objcName>remoteFilePath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localFilePath</argName>
                    <objcName>localFilePath</objcName>
                </arg>
            </args>
            <descrip>Simplified method for downloading files.
&lt;p&gt;
The last-modified date/time is only preserved when the PreserveDate property is set to _TRUE_.  (The default value of PreserveDate is _FALSE_.)</descrip>
            <links2>
                <link linkType="external">
                    <text>Understanding SFTP Absolute FilePaths</text>
                    <url>http://www.cknotes.com/?p=135</url>
                </link>
                <link linkType="example">
                    <url>async_sftp_progressInfo.asp</url>
                    <text>Async SFTP Progress Info</text>
                </link>
            </links2>
            <args2>
                <arg name="remoteFilePath" type="string" objcName="remoteFilePath" />
                <arg name="localFilePath" type="string" objcName="localFilePath" />
            </args2>
        </method>
        <method name="Eof" axId="157" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>sftpHandle</objcName>
                </arg>
            </args>
            <descrip>Returns _TRUE_ if the last read operation for a handle reached the end of file.  Otherwise returns _FALSE_.
If an invalid handle is passed, a value of _TRUE_ is returned.</descrip>
            <args2>
                <arg name="handle" type="string" objcName="sftpHandle" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetFileCreateDt" axId="158">
            <gType>CkDateTime</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>filePathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bFollowLinks</argName>
                    <objcName>bFollowLinks</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bIsHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
            </args>
            <descrip>Returns the create date/time for a file.  ARG1 may be a remote filepath or an open handle string as returned by OpenFile.  If ARG1 is a handle, then ARG3 must be set to _TRUE_, otherwise it should be _FALSE_.  If ARG2 is _TRUE_, then symbolic links will be followed on the server.
&lt;p&gt;
Note: Servers running the SFTP v3 protocol or lower do not have the ability to return a file's creation date/time.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="filePathOrHandle" />
                <arg name="bFollowLinks" type="bool" objcName="bFollowLinks" />
                <arg name="bIsHandle" type="bool" objcName="bIsHandle" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetFileCreateTime" axId="159" deprecated="1" noxojo="1" outArgName="outSysTime">
            <gType systemtime="1">date</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>filePathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bFollowLinks</argName>
                    <objcName>bFollowLinks</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bIsHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
                <arg>
                    <cppType>SYSTEMTIME &amp;</cppType>
                    <argName>outSysTime</argName>
                    <objcName>outSysTime</objcName>
                </arg>
            </args>
            <descrip>Returns the create date/time for a file.  ARG1 may be a remote filepath or an open handle string as returned by OpenFile.  If ARG1 is a handle, then ARG3 must be set to _TRUE_, otherwise it should be _FALSE_.  If ARG2 is _TRUE_, then symbolic links will be followed on the server.
&lt;p&gt;
Note: Servers running the SFTP v3 protocol or lower do not have the ability to return a file's creation date/time.</descrip>
            <links2>
                <link linkType="external" lang="perl">
                    <text>More information about using SYSTEMTIME in Perl</text>
                    <url>http://www.cknotes.com/?p=122</url>
                </link>
            </links2>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="filePathOrHandle" />
                <arg name="bFollowLinks" type="bool" objcName="bFollowLinks" />
                <arg name="bIsHandle" type="bool" objcName="bIsHandle" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetFileCreateTimeStr" axId="160" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>pathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bFollowLinks</argName>
                    <objcName>bFollowLinks</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bIsHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>The same as GetFileCreateTime, except the date/time is returned as an RFC822 formatted string.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="pathOrHandle" />
                <arg name="bFollowLinks" type="bool" objcName="bFollowLinks" />
                <arg name="bIsHandle" type="bool" objcName="bIsHandle" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetFileGroup" axId="161" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>filePathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bFollowLinks</argName>
                    <objcName>bFollowLinks</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bIsHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the group of a file.  ARG1 may be a remote filepath or an open handle string as returned by OpenFile.  If ARG1 is a handle, then ARG3 must be set to _TRUE_, otherwise it should be _FALSE_.  If ARG2 is _TRUE_, then symbolic links will be followed on the server.
&lt;p&gt;
Note: Servers running the SFTP v3 protocol or lower do not have the ability to return a file's group name.  Instead, the decimal GID of the file is returned.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="filePathOrHandle" />
                <arg name="bFollowLinks" type="bool" objcName="bFollowLinks" />
                <arg name="bIsHandle" type="bool" objcName="bIsHandle" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetFileLastAccess" axId="162" deprecated="1" noxojo="1" outArgName="outSysTime">
            <gType systemtime="1">date</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>filePathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bFollowLinks</argName>
                    <objcName>bFollowLinks</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bIsHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
                <arg>
                    <cppType>SYSTEMTIME &amp;</cppType>
                    <argName>outSysTime</argName>
                    <objcName>outSysTime</objcName>
                </arg>
            </args>
            <descrip>Returns the last-access date/time for a file.  ARG1 may be a remote filepath or an open handle string as returned by OpenFile.  If ARG1 is a handle, then ARG3 must be set to _TRUE_, otherwise it should be _FALSE_.  If ARG2 is _TRUE_, then symbolic links will be followed on the server.</descrip>
            <links2>
                <link linkType="external" lang="perl">
                    <text>More information about using SYSTEMTIME in Perl</text>
                    <url>http://www.cknotes.com/?p=122</url>
                </link>
            </links2>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="filePathOrHandle" />
                <arg name="bFollowLinks" type="bool" objcName="bFollowLinks" />
                <arg name="bIsHandle" type="bool" objcName="bIsHandle" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetFileLastAccessDt" axId="163">
            <gType>CkDateTime</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>filePathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bFollowLinks</argName>
                    <objcName>bFollowLinks</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bIsHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
            </args>
            <descrip>Returns the last-access date/time for a file.  ARG1 may be a remote filepath or an open handle string as returned by OpenFile.  If ARG1 is a handle, then ARG3 must be set to _TRUE_, otherwise it should be _FALSE_.  If ARG2 is _TRUE_, then symbolic links will be followed on the server.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="filePathOrHandle" />
                <arg name="bFollowLinks" type="bool" objcName="bFollowLinks" />
                <arg name="bIsHandle" type="bool" objcName="bIsHandle" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetFileLastAccessStr" axId="164" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>pathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bFollowLinks</argName>
                    <objcName>bFollowLinks</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bIsHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>The same as GetFileLastAccess, except the date/time is returned as an RFC822 formatted string.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="pathOrHandle" />
                <arg name="bFollowLinks" type="bool" objcName="bFollowLinks" />
                <arg name="bIsHandle" type="bool" objcName="bIsHandle" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetFileLastModified" axId="165" deprecated="1" noxojo="1" outArgName="outSysTime">
            <gType systemtime="1">date</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>filePathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bFollowLinks</argName>
                    <objcName>bFollowLinks</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bIsHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
                <arg>
                    <cppType>SYSTEMTIME &amp;</cppType>
                    <argName>outSysTime</argName>
                    <objcName>outSysTime</objcName>
                </arg>
            </args>
            <descrip>Returns the last-modified date/time for a file.  ARG1 may be a remote filepath or an open handle string as returned by OpenFile.  If ARG1 is a handle, then ARG3 must be set to _TRUE_, otherwise it should be _FALSE_.  If ARG2 is _TRUE_, then symbolic links will be followed on the server.</descrip>
            <links2>
                <link linkType="external" lang="perl">
                    <text>More information about using SYSTEMTIME in Perl</text>
                    <url>http://www.cknotes.com/?p=122</url>
                </link>
            </links2>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="filePathOrHandle" />
                <arg name="bFollowLinks" type="bool" objcName="bFollowLinks" />
                <arg name="bIsHandle" type="bool" objcName="bIsHandle" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetFileLastModifiedDt" axId="166">
            <gType>CkDateTime</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>filePathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bFollowLinks</argName>
                    <objcName>bFollowLinks</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bIsHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
            </args>
            <descrip>Returns the last-modified date/time for a file.  ARG1 may be a remote filepath or an open handle string as returned by OpenFile.  If ARG1 is a handle, then ARG3 must be set to _TRUE_, otherwise it should be _FALSE_.  If ARG2 is _TRUE_, then symbolic links will be followed on the server.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="filePathOrHandle" />
                <arg name="bFollowLinks" type="bool" objcName="bFollowLinks" />
                <arg name="bIsHandle" type="bool" objcName="bIsHandle" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetFileLastModifiedStr" axId="167" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>pathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bFollowLinks</argName>
                    <objcName>bFollowLinks</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bIsHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>The same as GetFileLastModified, except the date/time is returned as an RFC822 formatted string.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="pathOrHandle" />
                <arg name="bFollowLinks" type="bool" objcName="bFollowLinks" />
                <arg name="bIsHandle" type="bool" objcName="bIsHandle" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetFileOwner" axId="168" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>filePathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bFollowLinks</argName>
                    <objcName>bFollowLinks</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bIsHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the owner of a file.  ARG1 may be a remote filepath or an open handle string as returned by OpenFile.  If ARG1 is a handle, then ARG3 must be set to _TRUE_, otherwise it should be _FALSE_.  If ARG2 is _TRUE_, then symbolic links will be followed on the server.
&lt;p&gt;
Note: Servers running the SFTP v3 protocol or lower do not have the ability to return a file's owner name.  Instead, the decimal UID of the file is returned.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="filePathOrHandle" />
                <arg name="bFollowLinks" type="bool" objcName="bFollowLinks" />
                <arg name="bIsHandle" type="bool" objcName="bIsHandle" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="GetFilePermissions" axId="169">
            <gType>int</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>filePathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bFollowLinks</argName>
                    <objcName>bFollowLinks</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bIsHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
            </args>
            <descrip>Returns the access permisssions flags of a file.  ARG1 may be a remote filepath or an open handle string as returned by OpenFile.  If ARG1 is a handle, then ARG3 must be set to _TRUE_, otherwise it should be _FALSE_.  If ARG2 is _TRUE_, then symbolic links will be followed on the server.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="filePathOrHandle" />
                <arg name="bFollowLinks" type="bool" objcName="bFollowLinks" />
                <arg name="bIsHandle" type="bool" objcName="bIsHandle" />
            </args2>
            <links2 />
        </method>
        <method name="GetFileSize32" axId="170" ax="1" cpp="1" dn="1" events="1" noObjC="1">
            <gType>int</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>pathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bFollowLinks</argName>
                    <objcName>bFollowLinks</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bIsHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
            </args>
            <descrip>Returns the size in bytes of a file on the SSH server.  If the file size exceeds what can be represented in 32-bits, a value of -1 is returned.  ARG1 may be a remote filepath or an open handle string as returned by OpenFile.  If ARG1 is a handle, then ARG3 must be set to _TRUE_, otherwise it should be _FALSE_.  If ARG2 is _TRUE_, then symbolic links will be followed on the server.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="pathOrHandle" />
                <arg name="bFollowLinks" type="bool" objcName="bFollowLinks" />
                <arg name="bIsHandle" type="bool" objcName="bIsHandle" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="0" events="1" name="GetFileSize64">
            <gType>int64</gType>
            <args>
                <arg>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>filePathOrHandle</objcName>
                </arg>
                <arg>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bFollowLinks</argName>
                    <objcName>bFollowLinks</objcName>
                </arg>
                <arg>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bIsHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
            </args>
            <descrip>Returns a 64-bit integer containing the size (in bytes) of a file on the SSH server.   ARG1 may be a remote filepath or an open handle string as returned by OpenFile.  If ARG1 is a handle, then ARG3 must be set to _TRUE_, otherwise it should be _FALSE_.  If ARG2 is _TRUE_, then symbolic links will be followed on the server.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="filePathOrHandle" />
                <arg name="bFollowLinks" type="bool" objcName="bFollowLinks" />
                <arg name="bIsHandle" type="bool" objcName="bIsHandle" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" noObjC="1" name="GetFileSizeStr" axId="171" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>pathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bFollowLinks</argName>
                    <objcName>bFollowLinks</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bIsHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the size in bytes (in decimal string form) of a file on the SSH server.   ARG1 may be a remote filepath or an open handle string as returned by OpenFile.  If ARG1 is a handle, then ARG3 must be set to _TRUE_, otherwise it should be _FALSE_.  If ARG2 is _TRUE_, then symbolic links will be followed on the server.  
&lt;p&gt;
Note: This method exists for environments that do not have 64-bit integer support.  The Add64 method is provided for 64-bit addition, and other methods such as ReadFileBytes64s allow for 64-bit values to be passed as strings.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="pathOrHandle" />
                <arg name="bFollowLinks" type="bool" objcName="bFollowLinks" />
                <arg name="bIsHandle" type="bool" objcName="bIsHandle" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="InitializeSftp" axId="172">
            <gType>bool</gType>
            <args />
            <descrip>Intializes the SFTP subsystem.  This should be called after connecting and authenticating.  An SFTP session always begins by first calling Connect to connect to the SSH server, then calling either AuthenticatePw or AuthenticatePk to login, and finally calling InitializeSftp.
&lt;p&gt;
Important: When reporting problems, please send the full contents of the LastErrorText property to support@chilkatsoft.com.
&lt;p&gt;
If this method fails, the reason may be present in the InitializeFailCode and InitializeFailReason properties (assuming the failure occurred when trying to open the SFTP session channel).</descrip>
            <links2>
                <link linkType="external">
                    <text>Error Explained: Received FAILURE response to subsystem request.</text>
                    <url>http://www.cknotes.com/?p=250</url>
                </link>
            </links2>
            <args2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="LastReadFailed" axId="173">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>sftpHandle</objcName>
                </arg>
            </args>
            <descrip>Returns _TRUE_ if the last read on the specified handle failed.  Otherwise returns _FALSE_.</descrip>
            <args2>
                <arg name="handle" type="string" objcName="sftpHandle" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="LastReadNumBytes" axId="174">
            <gType>int</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>sftpHandle</objcName>
                </arg>
            </args>
            <descrip>Returns the number of bytes received by the last read on a specified channel.</descrip>
            <args2>
                <arg name="handle" type="string" objcName="sftpHandle" />
            </args2>
            <links2 />
        </method>
        <method name="OpenDir" axId="175" ax="1" cpp="1" dn="1" events="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>path</argName>
                    <objcName>path</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Opens a directory for reading.  To get a directory listing, first open the directory by calling this method, then call ReadDir to read the directory, and finally call CloseHandle to close the directory.
&lt;p&gt;
   The SFTP protocol represents file names as strings.  File names are
   assumed to use the slash ('/') character as a directory separator.
&lt;p&gt;
   File names starting with a slash are "absolute", and are relative to
   the root of the file system.  Names starting with any other character
   are relative to the user's default directory (home directory).  Note
   that identifying the user is assumed to take place outside of this
   protocol.
&lt;p&gt;
   Servers SHOULD interpret a path name component ".."  as
   referring to the parent directory, and "." as referring to the
   current directory.
&lt;p&gt;
   An empty path name is valid, and it refers to the user's default
   directory (usually the user's home directory).
&lt;p&gt;
Please note: This method does NOT "change" the remote working directory.  It is only a method for opening a directory for the purpose of reading the directory listing.&lt;p&gt;
SFTP is Secure File Transfer over SSH. It is not the FTP protocol. There is no similarity or relationship between FTP and SFTP. Therefore, concepts such as "current remote directory" that exist in FTP do not exist with SFTP. With the SFTP protocol, the current directory will always be the home directory of the user account used during SSH/SFTP authentication. You may pass relative or absolute directory/file paths. A relative path is always relative to the home directory of the SSH user account.</descrip>
            <links2>
                <link linkType="external">
                    <text>Understanding SFTP Absolute FilePaths</text>
                    <url>http://www.cknotes.com/?p=135</url>
                </link>
            </links2>
            <args2>
                <arg name="path" type="string" objcName="path" />
            </args2>
        </method>
        <method name="OpenFile" axId="176" ax="1" cpp="1" dn="1" events="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remotePath</argName>
                    <objcName>filename</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>access</argName>
                    <objcName>access</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>createDisposition</argName>
                    <objcName>createDisp</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Opens or creates a file on the remote system.  Returns a handle which may be passed to methods for reading and/or writing the file. The ARG1 is the remote file path (the path to the file on the server).  When the application is finished with the handle, it should call CloseHandle(ARG1).
&lt;p&gt;ARG2 should be one of the following strings: "readOnly", "writeOnly", or "readWrite".  &lt;p&gt;ARG3 is a comma-separated list of keywords to provide more control over how the file is opened or created.  One of the following keywords must be present: "createNew", "createTruncate", "openExisting", "openOrCreate", or "truncateExisting".  All other keywords are optional.  The list of keywords and their meanings are shown here:
&lt;p&gt;
&lt;b&gt;createNew&lt;/b&gt;&lt;br&gt;
A new file is created; if the file already exists the method fails.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;createTruncate&lt;/b&gt;&lt;br&gt;
A new file is created; if the file already exists, it is opened and truncated.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;openExisting&lt;/b&gt;&lt;br&gt;
An existing file is opened.  If the file does not exist the method fails.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;openOrCreate&lt;/b&gt;&lt;br&gt;
If the file exists, it is opened.  If the file does not exist,
         it is created.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;truncateExisting&lt;/b&gt;&lt;br&gt;
An existing file is opened and truncated.  If the file does not
         exist the method fails.
&lt;br&gt;&lt;br&gt;


&lt;b&gt;appendData&lt;/b&gt;&lt;br&gt;
Data is always written at the end of the file.  
      Data is not required to be appended atomically.  This means that
      if multiple writers attempt to append data simultaneously, data
      from the first may be lost. 
&lt;br&gt;&lt;br&gt;
&lt;b&gt;appendDataAtomic&lt;/b&gt;&lt;br&gt;
Data is always written at the end of the file.
      Data MUST be written atomically so that there is no chance that
      multiple appenders can collide and result in data being lost.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;textMode&lt;/b&gt;&lt;br&gt;
Indicates that the server should treat the file as text and
      convert it to the canonical newline convention in use.

      When a file is opened with this flag, data is always appended to the end of the file.

      Servers MUST process multiple, parallel reads and writes correctly
      in this mode.  
&lt;br&gt;&lt;br&gt;
&lt;b&gt;blockRead&lt;/b&gt;&lt;br&gt;
The server MUST guarantee that no other handle has been opened
      with read access, and that no other handle will be
      opened with read access until the client closes the
      handle.  (This MUST apply both to other clients and to other
      processes on the server.)   In a nutshell, this opens the file 
in non-sharing mode.

&lt;br&gt;&lt;br&gt;
&lt;b&gt;blockWrite&lt;/b&gt;&lt;br&gt;
The server MUST guarantee that no other handle has been opened
      with write access, and that no other
      handle will be opened with write
      access until the client closes the handle.  (This MUST apply both
      to other clients and to other processes on the server.)
In a nutshell, this opens the file 
in non-sharing mode.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;blockDelete&lt;/b&gt;&lt;br&gt;
The server MUST guarantee that the
      file itself is not deleted in any other way until the client
      closes the handle.  No other client or process is allowed to open the file with delete access.

&lt;br&gt;&lt;br&gt;
&lt;b&gt;blockAdvisory&lt;/b&gt;&lt;br&gt;
If set, the above "block" modes are advisory.  In
      advisory mode, only other accesses that specify a "block" mode need
      be considered when determining whether the "block" can be granted,
      and the server need not prevent I/O operations that violate the
      block mode.

      The server MAY perform mandatory locking even if the
      blockAdvisory flag is set.

&lt;br&gt;&lt;br&gt;
&lt;b&gt;noFollow&lt;/b&gt;&lt;br&gt;
If the final component of the path is a symlink, then the open
      MUST fail.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;deleteOnClose&lt;/b&gt;&lt;br&gt;
The file should be deleted when the last handle to it is closed.
      (The last handle may not be an sftp-handle.)  This MAY be emulated
      by a server if the OS doesn't support it by deleting the file when
      this handle is closed.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;accessAuditAlarmInfo&lt;/b&gt;&lt;br&gt;
The client wishes the server to enable any privileges or extra
      capabilities that the user may have in to allow the reading and
      writing of AUDIT or ALARM access control entries.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;accessBackup&lt;/b&gt;&lt;br&gt;
The client wishes the server to enable any privileges or extra
      capabilities that the user may have in order to bypass normal
      access checks for the purpose of backing up or restoring files.

&lt;br&gt;&lt;br&gt;
&lt;b&gt;backupStream&lt;/b&gt;&lt;br&gt;
This flag indicates that the client wishes to read or write a
      backup stream.  A backup stream is a system dependent structured
      data stream that encodes all the information that must be
      preserved in order to restore the file from backup medium.

      The only well defined use for backup stream data read in this
      fashion is to write it to the same server to a file also opened
      using the backupStream flag.  However, if the server has a well
      defined backup stream format, there may be other uses for this
      data outside the scope of this protocol.

&lt;/p&gt;
&lt;p&gt;&lt;b&gt;IMPORANT:&lt;/b&gt; If ARG1 is a filename with no path, such as "test.txt", and the server responds with a "Folder not found" error, then try prepending "./" to the ARG1.  For example, instead of passing "test.txt", try "./test.txt".&lt;/p&gt;</descrip>
            <links2>
                <link linkType="external">
                    <text>Understanding SFTP Absolute FilePaths</text>
                    <url>http://www.cknotes.com/?p=135</url>
                </link>
                <link linkType="example">
                    <text>SFTP Where Did My Upload Go?</text>
                    <url>sftp_realPath.asp</url>
                </link>
                <link linkType="external" lang="csharp">
                    <url>http://www.cknotes.com/c-sftp-upload-from-byte/</url>
                    <text>SFTP Upload from String and Byte[] Data</text>
                </link>
                <link linkType="external" lang="csharp_winrt">
                    <url>http://www.cknotes.com/c-sftp-upload-from-byte/</url>
                    <text>SFTP Upload from String and Byte[] Data</text>
                </link>
            </links2>
            <args2>
                <arg name="remotePath" type="string" objcName="filename" />
                <arg name="access" type="string" objcName="access" />
                <arg name="createDisposition" type="string" objcName="createDisp" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="ReadDir" axId="177">
            <gType>SFtpDir</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>sftpHandle</objcName>
                </arg>
            </args>
            <descrip>Reads the contents of a directory and returns the directory listing (as an object).  The handle returned by OpenDir should be passed to this method.</descrip>
            <args2>
                <arg name="handle" type="string" objcName="sftpHandle" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="ReadFileBytes" axId="178" outArgName="outBytes">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>sftpHandle</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>numBytes</argName>
                    <objcName>numBytes</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>Reads file data from a remote file on the SSH server.  The ARG1 is a file handle returned by the OpenFile method.  The ARG2 is the maximum number of bytes to read.  If the end-of-file is reached prior to reading the number of requested bytes, then fewer bytes may be returned.
&lt;p&gt;
To read an entire file, one may call ReadFileBytes repeatedly until Eof(handle) returns _TRUE_.</descrip>
            <args2>
                <arg name="handle" type="string" objcName="sftpHandle" />
                <arg name="numBytes" type="int" objcName="numBytes" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" noObjC="1" name="ReadFileBytes32" axId="179" outArgName="outBytes">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>handle</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>offset</argName>
                    <objcName>offset</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>numBytes</argName>
                    <objcName>numBytes</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>Reads file data from a remote file on the SSH server.  The ARG1 is a file handle returned by the OpenFile method.  The ARG2 is measured in bytes relative to the beginning of the file.  (64-bit offsets are supported via the ReadFileBytes64 and ReadFileBytes64s methods.)  The ARG2 is ignored if the "textMode" flag was specified during the OpenFile.  The ARG3 is the maximum number of bytes to read.  If the end-of-file is reached prior to reading the number of requested bytes, then fewer bytes may be returned.</descrip>
            <args2>
                <arg name="handle" type="string" objcName="handle" />
                <arg name="offset" type="int" objcName="offset" />
                <arg name="numBytes" type="int" objcName="numBytes" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="0" events="1" name="ReadFileBytes64" outArgName="outBytes">
            <gType>bytes</gType>
            <args>
                <arg>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>sftpHandle</objcName>
                </arg>
                <arg>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                    <argName>offset</argName>
                    <objcName>offset64</objcName>
                </arg>
                <arg>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>numBytes</argName>
                    <objcName>numBytes</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>Reads file data from a remote file on the SSH server.  The ARG1 is a file handle returned by the OpenFile method.  The ARG2 is a 64-bit integer measured in bytes relative to the beginning of the file.  The ARG2 is ignored if the "textMode" flag was specified during the OpenFile.  The ARG3 is the maximum number of bytes to read.  If the end-of-file is reached prior to reading the number of requested bytes, then fewer bytes may be returned.</descrip>
            <args2>
                <arg name="handle" type="string" objcName="sftpHandle" />
                <arg name="offset" type="int64" objcName="offset64" />
                <arg name="numBytes" type="int" objcName="numBytes" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" noObjC="1" name="ReadFileBytes64s" axId="180" outArgName="outBytes">
            <gType>bytes</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>handle</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>offset</argName>
                    <objcName>offset</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>numBytes</argName>
                    <objcName>numBytes</objcName>
                </arg>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>(This method exists for systems that do not support 64-bit integers.  The 64-bit integer offset is passed as a decimal string instead.)
&lt;p&gt;
Reads file data from a remote file on the SSH server.  The ARG1 is a file handle returned by the OpenFile method.  The ARG2 is a 64-bit integer represented as a decimal string.  It represents an offset in bytes from the beginning of the file.  The ARG2 is ignored if the "textMode" flag was specified during the OpenFile.  The ARG3 is the maximum number of bytes to read.  If the end-of-file is reached prior to reading the number of requested bytes, then fewer bytes may be returned.</descrip>
            <args2>
                <arg name="handle" type="string" objcName="handle" />
                <arg name="offset" type="string" objcName="offset" />
                <arg name="numBytes" type="int" objcName="numBytes" />
            </args2>
            <links2 />
        </method>
        <method name="ReadFileText" axId="181" ax="1" cpp="1" dn="1" events="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>sftpHandle</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>numBytes</argName>
                    <objcName>numBytes</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>This method is identical to ReadFileBytes except for one thing:  The bytes are interpreted according to the specified ARG3 (i.e. the character encoding) and returned as a string.  A list of supported charset values may be found on this page: &lt;a href="http://www.chilkatsoft.com/p/p_463.asp"&gt;Supported Charsets&lt;/a&gt;.
&lt;p&gt;
Note: If the ARG3 is an encoding where a single character might be represented in multiple bytes (such as utf-8, Shift_JIS, etc.) then there is a risk that the very last character may be partially read.  This is because the method specifies the number of bytes to read, not the number of characters.  This is never a problem with character encodings that use a single byte per character, such as all of the iso-8859-* encodings, or the Windows-* encodings.
&lt;p&gt;
To read an entire file, one may call ReadFileText repeatedly until Eof(handle) returns _TRUE_.</descrip>
            <links2>
                <link linkType="external" lang="activex">
                    <url>http://www.chilkatforum.com/questions/9342/sql-server-methods-that-return-long-strings</url>
                    <text>Long Strings Returned by ActiveX Methods in SQL Server</text>
                </link>
            </links2>
            <args2>
                <arg name="handle" type="string" objcName="sftpHandle" />
                <arg name="numBytes" type="int" objcName="numBytes" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" noObjC="1" name="ReadFileText32" axId="182" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>handle</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>offset</argName>
                    <objcName>offset</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>numBytes</argName>
                    <objcName>numBytes</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>This method is identical to ReadFileBytes32 except for one thing:  The bytes are interpreted according to the specified ARG4 (i.e. the character encoding) and returned as a string.  A list of supported charset values may be found on this page: &lt;a href="http://www.chilkatsoft.com/p/p_463.asp"&gt;Supported Charsets&lt;/a&gt;.
&lt;p&gt;
Note: If the ARG4 is an encoding where a single character might be represented in multiple bytes (such as utf-8, Shift_JIS, etc.) then there is a risk that the very last character may be partially read.  This is because the method specifies the number of bytes to read, not the number of characters.  This is never a problem with character encodings that use a single byte per character, such as all of the iso-8859-* encodings, or the Windows-* encodings.</descrip>
            <args2>
                <arg name="handle" type="string" objcName="handle" />
                <arg name="offset" type="int" objcName="offset" />
                <arg name="numBytes" type="int" objcName="numBytes" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="0" events="1" name="ReadFileText64" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>sftpHandle</objcName>
                </arg>
                <arg>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                    <argName>offset</argName>
                    <objcName>offset64</objcName>
                </arg>
                <arg>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>numBytes</argName>
                    <objcName>numBytes</objcName>
                </arg>
                <arg>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>This method is identical to ReadFileBytes64 except for one thing:  The bytes are interpreted according to the specified ARG4 (i.e. the character encoding) and returned as a string.  A list of supported charset values may be found on this page: &lt;a href="http://www.chilkatsoft.com/p/p_463.asp"&gt;Supported Charsets&lt;/a&gt;.
&lt;p&gt;
Note: If the ARG4 is an encoding where a single character might be represented in multiple bytes (such as utf-8, Shift_JIS, etc.) then there is a risk that the very last character may be partially read.  This is because the method specifies the number of bytes to read, not the number of characters.  This is never a problem with character encodings that use a single byte per character, such as all of the iso-8859-* encodings, or the Windows-* encodings.</descrip>
            <args2>
                <arg name="handle" type="string" objcName="sftpHandle" />
                <arg name="offset" type="int64" objcName="offset64" />
                <arg name="numBytes" type="int" objcName="numBytes" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" noObjC="1" name="ReadFileText64s" axId="183" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>handle</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>offset</argName>
                    <objcName>offset</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>numBytes</argName>
                    <objcName>numBytes</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>This method is identical to ReadFileBytes64s except for one thing:  The bytes are interpreted according to the specified ARG4 (i.e. the character encoding) and returned as a string.  A list of supported charset values may be found on this page: &lt;a href="http://www.chilkatsoft.com/p/p_463.asp"&gt;Supported Charsets&lt;/a&gt;.
&lt;p&gt;
Note: If the ARG4 is an encoding where a single character might be represented in multiple bytes (such as utf-8, Shift_JIS, etc.) then there is a risk that the very last character may be partially read.  This is because the method specifies the number of bytes to read, not the number of characters.  This is never a problem with character encodings that use a single byte per character, such as all of the iso-8859-* encodings, or the Windows-* encodings.</descrip>
            <args2>
                <arg name="handle" type="string" objcName="handle" />
                <arg name="offset" type="string" objcName="offset" />
                <arg name="numBytes" type="int" objcName="numBytes" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="RealPath" axId="184" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>originalPath</argName>
                    <objcName>originalPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>composePath</argName>
                    <objcName>composePath</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>This method can be used to have the server
   canonicalize any given path name to an absolute path.  This is useful
   for converting path names containing ".." components or relative
   pathnames without a leading slash into absolute paths.   The absolute path is returned by this method.
&lt;p&gt;
ARG1 is the first component of the path which the client wishes resolved
      into a absolute canonical path.  This may be the entire path.
&lt;p&gt;
The ARG2 is a path which the client wishes the server to compose with the
      original path to form the new path.  This field is optional and may be set to a zero-length string.
&lt;p&gt;
   The server will take the ARG1 and apply the ARG2
   as a modification to it. ARG2 may be relative to ARG1 or may be an absolute path, in which case ARG1 will
   be discarded.  The ARG2 may be zero length.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; Servers running SFTP v4 and below do not support ARG2.</descrip>
            <args2>
                <arg name="originalPath" type="string" objcName="originalPath" />
                <arg name="composePath" type="string" objcName="composePath" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="RemoveDir" axId="185">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>path</argName>
                    <objcName>path</objcName>
                </arg>
            </args>
            <descrip>Deletes a directory on the remote server.  Most (if not all) SFTP servers require that the directorybe empty of files before it may be deleted.</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="RemoveFile" axId="186">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>filePath</objcName>
                </arg>
            </args>
            <descrip>Deletes a file on the SFTP server.</descrip>
            <links2>
                <link linkType="external">
                    <text>Understanding SFTP Absolute FilePaths</text>
                    <url>http://www.cknotes.com/?p=135</url>
                </link>
            </links2>
            <args2>
                <arg name="filename" type="string" objcName="filePath" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="RenameFileOrDir" axId="187">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>oldPath</argName>
                    <objcName>oldPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>newPath</argName>
                    <objcName>newPath</objcName>
                </arg>
            </args>
            <descrip>Renames a file or directory on the SFTP server.</descrip>
            <args2>
                <arg name="oldPath" type="string" objcName="oldPath" />
                <arg name="newPath" type="string" objcName="newPath" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="ResumeDownloadFileByName" axId="188">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilePath</argName>
                    <objcName>remoteFilePath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localFilePath</argName>
                    <objcName>localFilePath</objcName>
                </arg>
            </args>
            <descrip>Resumes an SFTP download.  The size of the ARG2 is checked and the download begins at the appropriate position in the ARG1.  If ARG2 is empty or non-existent, then this method is identical to DownloadFileByName.  If the ARG2 is already fully downloaded, then no additional data is downloaded and the method will return _TRUE_.</descrip>
            <links2>
                <link linkType="example">
                    <text>SFTP Resume Download Example</text>
                    <url>sftp_resumeDownload.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="remoteFilePath" type="string" objcName="remoteFilePath" />
                <arg name="localFilePath" type="string" objcName="localFilePath" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="ResumeUploadFileByName" axId="189">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilePath</argName>
                    <objcName>remoteFilePath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localFilePath</argName>
                    <objcName>localFilePath</objcName>
                </arg>
            </args>
            <descrip>Resumes a file upload to the SFTP/SSH server.  The size of the ARG1 is first checked to determine the starting offset for the upload.  If ARG1 is empty or does not exist, this method is equivalent to UploadFileByName.  If ARG1 is already fully uploaded (i.e. it's size is equal to ARG2), then no additional bytes are uploaded and _TRUE_ is returned.</descrip>
            <links2>
                <link linkType="example">
                    <text>SFTP Resume Upload Example</text>
                    <url>sftp_resumeUpload.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="remoteFilePath" type="string" objcName="remoteFilePath" />
                <arg name="localFilePath" type="string" objcName="localFilePath" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="SetCreateDt" axId="190">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>pathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>isHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
                <arg>
                    <axType>CkDateTime</axType>
                    <dnType>CkDateTime</dnType>
                    <cppType>CkDateTime &amp;</cppType>
                    <argName>createDateTime</argName>
                    <objcName>createTime</objcName>
                </arg>
            </args>
            <descrip>Sets the create date/time for a file on the server.  The ARG1 may be a filepath or the handle of a currently open file.  ARG2 should be set to _TRUE_ if the ARG1 is a handle, otherwise set ARG2 to _FALSE_.
&lt;p&gt;
Note: Servers running version 3 or lower of the SFTP protocol do not support setting the create date/time.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="pathOrHandle" />
                <arg name="isHandle" type="bool" objcName="bIsHandle" />
                <arg name="createDateTime" type="CkDateTime" objcName="createTime" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="SetCreateTime" axId="191" deprecated="1" noxojo="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>pathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>isHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
                <arg>
                    <axType>date</axType>
                    <dnType>date</dnType>
                    <cppType>SYSTEMTIME &amp;</cppType>
                    <argName>createDateTime</argName>
                    <objcName>createTime</objcName>
                </arg>
            </args>
            <descrip>Sets the create date/time for a file on the server.  The ARG1 may be a filepath or the handle of a currently open file.  ARG2 should be set to _TRUE_ if the ARG1 is a handle, otherwise set ARG2 to _FALSE_.
&lt;p&gt;
Note: Servers running version 3 or lower of the SFTP protocol do not support setting the create date/time.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="pathOrHandle" />
                <arg name="isHandle" type="bool" objcName="bIsHandle" />
                <arg name="createDateTime" type="date" objcName="createTime" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="SetCreateTimeStr" axId="192">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>pathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bIsHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dateTimeStr</argName>
                    <objcName>createTimeStr</objcName>
                </arg>
            </args>
            <descrip>The same as SetCreateTime, except the date/time is passed as an RFC822 formatted string.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="pathOrHandle" />
                <arg name="bIsHandle" type="bool" objcName="bIsHandle" />
                <arg name="dateTimeStr" type="string" objcName="createTimeStr" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="SetLastAccessDt" axId="193">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>pathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>isHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
                <arg>
                    <axType>CkDateTime</axType>
                    <dnType>CkDateTime</dnType>
                    <cppType>CkDateTime &amp;</cppType>
                    <argName>accessDateTime</argName>
                    <objcName>createTime</objcName>
                </arg>
            </args>
            <descrip>Sets the last-access date/time for a file on the server.  The ARG1 may be a filepath or the handle of a currently open file.  ARG2 should be set to _TRUE_ if the ARG1 is a handle, otherwise set ARG2 to _FALSE_.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="pathOrHandle" />
                <arg name="isHandle" type="bool" objcName="bIsHandle" />
                <arg name="accessDateTime" type="CkDateTime" objcName="createTime" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="SetLastAccessTime" axId="194" deprecated="1" noxojo="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>pathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>isHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
                <arg>
                    <axType>date</axType>
                    <dnType>date</dnType>
                    <cppType>SYSTEMTIME &amp;</cppType>
                    <argName>accessDateTime</argName>
                    <objcName>lastAccessTime</objcName>
                </arg>
            </args>
            <descrip>Sets the last-access date/time for a file on the server.  The ARG1 may be a filepath or the handle of a currently open file.  ARG2 should be set to _TRUE_ if the ARG1 is a handle, otherwise set ARG2 to _FALSE_.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="pathOrHandle" />
                <arg name="isHandle" type="bool" objcName="bIsHandle" />
                <arg name="accessDateTime" type="date" objcName="lastAccessTime" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="SetLastAccessTimeStr" axId="195">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>pathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bIsHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dateTimeStr</argName>
                    <objcName>createTimeStr</objcName>
                </arg>
            </args>
            <descrip>The same as SetLastAccessTime, except the date/time is passed as an RFC822 formatted string.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="pathOrHandle" />
                <arg name="bIsHandle" type="bool" objcName="bIsHandle" />
                <arg name="dateTimeStr" type="string" objcName="createTimeStr" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="SetLastModifiedDt" axId="196">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>pathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>isHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
                <arg>
                    <axType>CkDateTime</axType>
                    <dnType>CkDateTime</dnType>
                    <cppType>CkDateTime &amp;</cppType>
                    <argName>modifiedDateTime</argName>
                    <objcName>createTime</objcName>
                </arg>
            </args>
            <descrip>Sets the last-modified date/time for a file on the server.  The ARG1 may be a filepath or the handle of a currently open file.  ARG2 should be set to _TRUE_ if the ARG1 is a handle, otherwise set ARG2 to _FALSE_.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="pathOrHandle" />
                <arg name="isHandle" type="bool" objcName="bIsHandle" />
                <arg name="modifiedDateTime" type="CkDateTime" objcName="createTime" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="SetLastModifiedTime" axId="197" deprecated="1" noxojo="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>pathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>isHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
                <arg>
                    <axType>date</axType>
                    <dnType>date</dnType>
                    <cppType>SYSTEMTIME &amp;</cppType>
                    <argName>modifiedDateTime</argName>
                    <objcName>lastModTime</objcName>
                </arg>
            </args>
            <descrip>Sets the last-modified date/time for a file on the server.  The ARG1 may be a filepath or the handle of a currently open file.  ARG2 should be set to _TRUE_ if the ARG1 is a handle, otherwise set ARG2 to _FALSE_.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="pathOrHandle" />
                <arg name="isHandle" type="bool" objcName="bIsHandle" />
                <arg name="modifiedDateTime" type="date" objcName="lastModTime" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="SetLastModifiedTimeStr" axId="198">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>pathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bIsHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dateTimeStr</argName>
                    <objcName>createTimeStr</objcName>
                </arg>
            </args>
            <descrip>The same as SetLastModifiedTime, except the date/time is passed as an RFC822 formatted string.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="pathOrHandle" />
                <arg name="bIsHandle" type="bool" objcName="bIsHandle" />
                <arg name="dateTimeStr" type="string" objcName="createTimeStr" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="SetOwnerAndGroup" axId="199">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>pathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>isHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>owner</argName>
                    <objcName>owner</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>group</argName>
                    <objcName>group</objcName>
                </arg>
            </args>
            <descrip>Sets the owner and group for a file on the server.  The ARG1 may be a filepath or the handle of a currently open file.  ARG2 should be set to _TRUE_ if the ARG1 is a handle, otherwise set ARG2 to _FALSE_.
&lt;p&gt;
Note: Servers running version 3 or lower of the SFTP protocol do not support setting the owner and group.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="pathOrHandle" />
                <arg name="isHandle" type="bool" objcName="bIsHandle" />
                <arg name="owner" type="string" objcName="owner" />
                <arg name="group" type="string" objcName="group" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="SetPermissions" axId="200">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pathOrHandle</argName>
                    <objcName>pathOrHandle</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>isHandle</argName>
                    <objcName>bIsHandle</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>permissions</argName>
                    <objcName>perm</objcName>
                </arg>
            </args>
            <descrip>Sets the permissions for a file on the server.  The ARG1 may be a filepath or the handle of a currently open file.  ARG2 should be set to _TRUE_ if the ARG1 is a handle, otherwise set ARG2 to _FALSE_.</descrip>
            <args2>
                <arg name="pathOrHandle" type="string" objcName="pathOrHandle" />
                <arg name="isHandle" type="bool" objcName="bIsHandle" />
                <arg name="permissions" type="int" objcName="perm" />
            </args2>
            <links2 />
        </method>
        <method name="SyncTreeDownload" axId="211" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Downloads files from the SFTP server to a local directory tree.  Synchronization modes include:&lt;p&gt;&lt;blockquote&gt;
mode=0: Download all files&lt;br&gt;
mode=1: Download all files that do not exist on the local filesystem.&lt;br&gt;
mode=2: Download newer or non-existant files.&lt;br&gt;
mode=3: Download only newer files.  If a file does not already exist on the local filesystem, it is not downloaded from the server.&lt;br&gt;
mode=5: Download only missing files or files with size differences.&lt;br&gt;
mode=6: Same as mode 5, but also download newer files.&lt;br&gt;
mode=99: Do not download files, but instead delete remote files that do not exist locally.&lt;br&gt;
&lt;/blockquote&gt;
&lt;/p&gt;&lt;p&gt;
If ARG4 is _FALSE_, then the remotel directory tree is not recursively descended.</descrip>
            <args>
                <arg>
                    <argName>remoteRoot</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>remoteRoot</objcName>
                </arg>
                <arg>
                    <argName>localRoot</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>localRoot</objcName>
                </arg>
                <arg>
                    <argName>mode</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>mode</objcName>
                </arg>
                <arg>
                    <argName>recurse</argName>
                    <cppType>bool</cppType>
                    <dnType>bool</dnType>
                    <axType>bool</axType>
                    <objcName>recurse</objcName>
                </arg>
            </args>
            <args2>
                <arg name="remoteRoot" type="string" objcName="remoteRoot" />
                <arg name="localRoot" type="string" objcName="localRoot" />
                <arg name="mode" type="int" objcName="mode" />
                <arg name="recurse" type="bool" objcName="recurse" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>sftp_dowload_all_files_in_directory.asp</url>
                    <text>SFTP Download all Files in a Directory</text>
                </link>
                <link linkType="example">
                    <url>sftp_synchronize_tree_download.asp</url>
                    <text>SFTP Synchronize Directory Tree - Download</text>
                </link>
            </links2>
        </method>
        <method name="SyncTreeUpload" axId="201" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localBaseDir</argName>
                    <objcName>localBaseDir</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteBaseDir</argName>
                    <objcName>remoteBaseDir</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>mode</argName>
                    <objcName>mode</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bRecurse</argName>
                    <objcName>bRecurse</objcName>
                </arg>
            </args>
            <descrip>Uploads a directory tree from the local filesystem to the SFTP server.  Synchronization modes include:&lt;p&gt;&lt;blockquote&gt;
mode=0: Upload all files&lt;br&gt;
mode=1: Upload all files that do not exist on the server.&lt;br&gt;
mode=2: Upload newer or non-existant files.&lt;br&gt;
mode=3: Upload only newer files.  If a file does not already exist on the server, it is not uploaded.&lt;br&gt;
mode=4: transfer missing files or files with size differences.&lt;br&gt;
mode=5: same as mode 4, but also newer files.
&lt;/blockquote&gt;&lt;/p&gt;

If ARG4 is _FALSE_, then the local directory tree is not recursively descended.</descrip>
            <args2>
                <arg name="localBaseDir" type="string" objcName="localBaseDir" />
                <arg name="remoteBaseDir" type="string" objcName="remoteBaseDir" />
                <arg name="mode" type="int" objcName="mode" />
                <arg name="bRecurse" type="bool" objcName="bRecurse" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>sftp_upload_synchronize_tree.asp</url>
                    <text>SFTP Upload - Synchronize Directory Tree</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="UnlockComponent" axId="202">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>unlockCode</argName>
                    <objcName>unlockCode</objcName>
                </arg>
            </args>
            <descrip>Unlocks the component. This must be called once prior to calling any other method.  A fully-functional 30-day trial is automatically started when an arbitrary string is passed to this method.  For example, passing "Hello", or "abc123" will unlock the component for the 1st thirty days after the initial install.
&lt;p&gt;
A purchased unlock code for SFTP should contain the substring "SSH" (or it can be a Bundle unlock code) because SFTP is the Secure File Transfer protocol over SSH.  It is a sub-system of the SSH protocol.  It is not the FTP protocol.   If the Chilkat FTP2 component/library should be used for the FTP protocol.</descrip>
            <args2>
                <arg name="unlockCode" type="string" objcName="unlockCode" />
            </args2>
            <links2>
                <link linkType="external">
                    <text>Diagnosing UnlockComponent Problems</text>
                    <url>http://www.cknotes.com/?p=168</url>
                </link>
                <link linkType="external">
                    <text>UnlockComponent LastErrorText shows exact string passed to it.</text>
                    <url>http://www.cknotes.com/?p=315</url>
                </link>
                <link linkType="external">
                    <text>Verify UnlockComponent Success w/ Purchased Unlock Code</text>
                    <url>http://www.cknotes.com/?p=317</url>
                </link>
                <link linkType="external">
                    <text>LastErrorText Standard Information</text>
                    <url>http://www.cknotes.com/?p=316</url>
                </link>
            </links2>
        </method>
        <method name="UploadFile" axId="203" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>sftpHandle</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fromFilename</argName>
                    <objcName>fromFilePath</objcName>
                </arg>
            </args>
            <descrip>Uploads a file from the local filesystem to the SFTP server.  ARG1 is a handle of a currently open file (obtained by calling the OpenFile method).   ARG2 is the local file path of the file to be uploaded.</descrip>
            <args2>
                <arg name="handle" type="string" objcName="sftpHandle" />
                <arg name="fromFilename" type="string" objcName="fromFilePath" />
            </args2>
            <links2 />
        </method>
        <method name="UploadFileByName" axId="204" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>remoteFilePath</argName>
                    <objcName>remoteFilePath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>localFilePath</argName>
                    <objcName>localFilePath</objcName>
                </arg>
            </args>
            <descrip>Simplified method for uploading a file to the SFTP/SSH server.
&lt;p&gt;
The last-modified date/time is only preserved if the PreserveDate property is set to _TRUE_.  This behavior of maintaining the last-mod date/time was introduced in v9.5.0.40.</descrip>
            <links2>
                <link linkType="example">
                    <text>SFTP Simplified Upload Example</text>
                    <url>sftp_uploadFileByName.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="remoteFilePath" type="string" objcName="remoteFilePath" />
                <arg name="localFilePath" type="string" objcName="localFilePath" />
            </args2>
        </method>
        <method name="WriteFileBytes" axId="205" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>sftpHandle</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>byteData</argName>
                    <objcName>data</objcName>
                </arg>
            </args>
            <descrip>Appends byte data to an open file.  The ARG1 is a file handle returned by the OpenFile method.</descrip>
            <links2>
                <link linkType="external" lang="csharp">
                    <url>http://www.cknotes.com/c-sftp-upload-from-byte/</url>
                    <text>SFTP Upload from String and Byte[] Data</text>
                </link>
                <link linkType="external" lang="csharp_winrt">
                    <url>http://www.cknotes.com/c-sftp-upload-from-byte/</url>
                    <text>SFTP Upload from String and Byte[] Data</text>
                </link>
            </links2>
            <args2>
                <arg name="handle" type="string" objcName="sftpHandle" />
                <arg name="byteData" type="bytes" objcName="data" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" noObjC="1" status="1" name="WriteFileBytes32" axId="206">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>handle</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>offset</argName>
                    <objcName>offset</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>data</objcName>
                </arg>
            </args>
            <descrip>Writes data to an open file at a specific offset from the beginning of the file.  The ARG1 is a file handle returned by the OpenFile method.  The ARG2 is an offset from the beginning of the file.</descrip>
            <args2>
                <arg name="handle" type="string" objcName="handle" />
                <arg name="offset" type="int" objcName="offset" />
                <arg name="data" type="bytes" objcName="data" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="0" events="1" status="1" name="WriteFileBytes64">
            <gType>bool</gType>
            <args>
                <arg>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>sftpHandle</objcName>
                </arg>
                <arg>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                    <argName>offset64</argName>
                    <objcName>offset64</objcName>
                </arg>
                <arg>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>data</objcName>
                </arg>
            </args>
            <descrip>Writes data to an open file at a specific offset from the beginning of the file.  The ARG1 is a file handle returned by the OpenFile method.  The ARG2 is an offset from the beginning of the file.</descrip>
            <args2>
                <arg name="handle" type="string" objcName="sftpHandle" />
                <arg name="offset64" type="int64" objcName="offset64" />
                <arg name="data" type="bytes" objcName="data" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" noObjC="1" status="1" name="WriteFileBytes64s" axId="207">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>handle</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>offset64</argName>
                    <objcName>offset64</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>data</argName>
                    <objcName>data</objcName>
                </arg>
            </args>
            <descrip>Writes data to an open file at a specific offset from the beginning of the file.  The ARG1 is a file handle returned by the OpenFile method.  The ARG2 is an offset (in decimal string format) from the beginning of the file.</descrip>
            <args2>
                <arg name="handle" type="string" objcName="handle" />
                <arg name="offset64" type="string" objcName="offset64" />
                <arg name="data" type="bytes" objcName="data" />
            </args2>
            <links2 />
        </method>
        <method name="WriteFileText" axId="208" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>sftpHandle</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>textData</argName>
                    <objcName>textData</objcName>
                </arg>
            </args>
            <descrip>Appends character data to an open file.  The ARG1 is a file handle returned by the OpenFile method.  ARG2 is a character encoding and is typically set to values such as "ansi", "utf-8", "windows-1252", etc. 
A list of supported character encodings is found on this page: &lt;a href="http://www.chilkatsoft.com/p/p_463.asp"&gt;Supported Charsets&lt;/a&gt;.
&lt;p&gt;
Note: It is necessary to specify the character encoding because in many programming languages, strings are represented as Unicode (2 bytes/char) and in most cases one does not wish to write Unicode chars to a text file (although it is possible by setting ARG2 = "Unicode").</descrip>
            <links2>
                <link linkType="external" lang="csharp">
                    <url>http://www.cknotes.com/c-sftp-upload-from-byte/</url>
                    <text>SFTP Upload from String and Byte[] Data</text>
                </link>
                <link linkType="external" lang="csharp_winrt">
                    <url>http://www.cknotes.com/c-sftp-upload-from-byte/</url>
                    <text>SFTP Upload from String and Byte[] Data</text>
                </link>
            </links2>
            <args2>
                <arg name="handle" type="string" objcName="sftpHandle" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="textData" type="string" objcName="textData" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" noObjC="1" status="1" name="WriteFileText32" axId="209">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>handle</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>offset32</argName>
                    <objcName>offset32</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>textData</argName>
                    <objcName>textData</objcName>
                </arg>
            </args>
            <descrip>Writes character data to an open file at a specific offset from the beginning of the file.  The ARG1 is a file handle returned by the OpenFile method.  ARG3 is a character encoding and is typically set to values such as "ansi", "utf-8", "windows-1252", etc. 
A list of supported character encodings is found on this page: &lt;a href="http://www.chilkatsoft.com/p/p_463.asp"&gt;Supported Charsets&lt;/a&gt;.</descrip>
            <args2>
                <arg name="handle" type="string" objcName="handle" />
                <arg name="offset32" type="int" objcName="offset32" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="textData" type="string" objcName="textData" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="0" events="1" status="1" name="WriteFileText64">
            <gType>bool</gType>
            <args>
                <arg>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>sftpHandle</objcName>
                </arg>
                <arg>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                    <argName>offset64</argName>
                    <objcName>offset64</objcName>
                </arg>
                <arg>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>textData</argName>
                    <objcName>textData</objcName>
                </arg>
            </args>
            <descrip>Writes character data to an open file at a specific offset from the beginning of the file.  The ARG1 is a file handle returned by the OpenFile method.  ARG3 is a character encoding and is typically set to values such as "ansi", "utf-8", "windows-1252", etc. 
A list of supported character encodings is found on this page: &lt;a href="http://www.chilkatsoft.com/p/p_463.asp"&gt;Supported Charsets&lt;/a&gt;.</descrip>
            <args2>
                <arg name="handle" type="string" objcName="sftpHandle" />
                <arg name="offset64" type="int64" objcName="offset64" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="textData" type="string" objcName="textData" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" noObjC="1" status="1" name="WriteFileText64s" axId="210">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>handle</argName>
                    <objcName>handle</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>offset64</argName>
                    <objcName>offset64</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>textData</argName>
                    <objcName>textData</objcName>
                </arg>
            </args>
            <descrip>Writes character data to an open file at a specific offset from the beginning of the file.  The ARG1 is a file handle returned by the OpenFile method.  The ARG2 is an offset (in decimal string format) from the beginning of the file.    ARG3 is a character encoding and is typically set to values such as "ansi", "utf-8", "windows-1252", etc. 
A list of supported character encodings is found on this page: &lt;a href="http://www.chilkatsoft.com/p/p_463.asp"&gt;Supported Charsets&lt;/a&gt;.</descrip>
            <args2>
                <arg name="handle" type="string" objcName="handle" />
                <arg name="offset64" type="string" objcName="offset64" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="textData" type="string" objcName="textData" />
            </args2>
            <links2 />
        </method>
        <method name="UploadSb" axId="224" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="sb" type="StringBuilder" objcName="sb" />
                <arg name="remoteFilePath" type="string" objcName="remoteFilePath" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="includeBom" type="bool" objcName="includeBom" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>sftp_uploadSb.asp</url>
                    <text>SFTP Upload and Download to a StringBuilder Object</text>
                </link>
            </links2>
            <iversion>9.5.0.62</iversion>
            <descrip>Uploads the contents of a StringBuilder to a remote file.</descrip>
        </method>
        <method name="UploadBd" axId="225" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Uploads the contents of a BinData to a remote file.</descrip>
            <args2>
                <arg name="binData" type="BinData" objcName="binData" />
                <arg name="remoteFilePath" type="string" objcName="remoteFilePath" />
            </args2>
            <iversion>9.5.0.62</iversion>
            <links2>
                <link linkType="example">
                    <url>sftp_uploadBd.asp</url>
                    <text>SFTP Upload and Download to a BinData Object</text>
                </link>
            </links2>
        </method>
        <method name="DownloadBd" axId="226" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="remoteFilePath" type="string" objcName="remoteFilePath" />
                <arg name="binData" type="BinData" objcName="binData" />
            </args2>
            <iversion>9.5.0.62</iversion>
            <links2>
                <link linkType="example">
                    <url>sftp_uploadBd.asp</url>
                    <text>SFTP Upload and Download to a BinData Object</text>
                </link>
            </links2>
            <descrip>Downloads the contents of a remote file to a BinData object.  (Appends to the BinData.)</descrip>
        </method>
        <method name="DownloadSb" axId="227" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <descrip>Downloads the contents of a remote file to a StringBuilder object.  (Appends to the StringBuilder.)</descrip>
            <args2>
                <arg name="remoteFilePath" type="string" objcName="remoteFilePath" />
                <arg name="charset" type="string" objcName="charset" />
                <arg name="sb" type="StringBuilder" objcName="sb" />
            </args2>
            <iversion>9.5.0.62</iversion>
            <links2>
                <link linkType="example">
                    <url>sftp_uploadSb.asp</url>
                    <text>SFTP Upload and Download to a StringBuilder Object</text>
                </link>
            </links2>
        </method>
        <method name="SendIgnore" axId="228" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args2 />
            <links2 />
            <iversion>9.5.0.66</iversion>
            <descrip>Sends an IGNORE message to the SSH server.  This is one way of verifying that the connection to the SSH server is open and valid.  The SSH server does not respond to an IGNORE message. It simply ignores it.  IGNORE messages are not associated with a channel (i.e., you do not need to first open a channel prior to sending an IGNORE message).</descrip>
        </method>
    </methods>
    <genericName>SFtp</genericName>
    <events>
        <standard name="AbortCheck" />
        <event name="DownloadRate">
            <gType>event</gType>
            <dotNetArgsClass>DataRateEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>byteCount</argName>
                    <objcName>byteCount</objcName>
                    <axType>int</axType>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                </arg>
                <arg>
                    <argName>bytesPerSec</argName>
                    <objcName>bytesPerSec</objcName>
                    <axType>int</axType>
                    <dnType>unsigned long</dnType>
                    <cppType>unsigned long</cppType>
                </arg>
            </args>
            <descrip>Called periodically with download progress information:  The ARG1 is the cumulative number of bytes downloaded so far.  The ARG2 is the current transfer rate in bytes per second.</descrip>
            <args2>
                <arg name="byteCount" type="int64" objcName="byteCount" />
                <arg name="bytesPerSec" type="unsigned long" objcName="bytesPerSec" />
            </args2>
            <links2 />
        </event>
        <standard name="PercentDone" />
        <standard name="ProgressInfo" />
        <standard name="TaskCompleted" />
        <event name="UploadRate">
            <gType>event</gType>
            <dotNetArgsClass>DataRateEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>byteCount</argName>
                    <objcName>byteCount</objcName>
                    <axType>int</axType>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                </arg>
                <arg>
                    <argName>bytesPerSec</argName>
                    <objcName>bytesPerSec</objcName>
                    <axType>int</axType>
                    <dnType>unsigned long</dnType>
                    <cppType>unsigned long</cppType>
                </arg>
            </args>
            <descrip>Called periodically with upload progress information:  The ARG1 is the cumulative number of bytes uploaded so far.  The ARG2 is the current transfer rate in bytes per second.</descrip>
            <args2>
                <arg name="byteCount" type="int64" objcName="byteCount" />
                <arg name="bytesPerSec" type="unsigned long" objcName="bytesPerSec" />
            </args2>
            <links2 />
        </event>
    </events>
    <description>SFTP implementation for file transfer and remote file management over SSH.</description>
    <clsid>345A5644-4F8E-4BCC-8E65-389B3C9D52B6</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidEvents>97DAB705-84AB-4228-8EB7-2A3E657462F7</uuidEvents>
    <uuidMidl>2701FB1F-7865-4CD0-8E1B-2BB97F701946</uuidMidl>
    <nextAxId>229</nextAxId>
</class>
