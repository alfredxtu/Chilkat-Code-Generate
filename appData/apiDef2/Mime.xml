<?xml version="1.0" encoding="utf-8" ?>
<class XojoModuleId="205846349" sourceXmlPath="c:/ck2000/appData/apiDef2/Mime.xml" license="Bundle">
    <axName>ChilkatMime</axName>
    <dnName>Mime</dnName>
    <cppName>CkMime</cppName>
    <properties>
        <property name="Boundary" axId="100" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The boundary string for a multipart MIME message. &lt;p&gt;
It is the value of the boundary attribute of the Content-Type header field.  For example, if the Content-Type header is this:
&lt;pre&gt;
Content-Type: multipart/mixed; boundary="------------080707010302060306060800"
&lt;/pre&gt;
then the value of the Boundary property is "------------080707010302060306060800".
&lt;p&gt;
When building multipart MIME messages, the boundary is automatically generated by methods such as NewMultipartMixed, to be a unique and random string, so explicitly setting the boundary is usually not necessary.&lt;p&gt;</descrip>
            <links>
                <link>
                    <text>Example Code: Create a Multipart-Mixed MIME Message with Auto-Generated Boundary and with Explicitly Set Boundary</text>
                    <url_asp>http://www.example-code.com/asp/mime_multipartMixed.asp</url_asp>
                    <url_sql>http://www.example-code.com/sql/mime_multipartMixed.asp</url_sql>
                    <url_cs>http://www.example-code.com/csharp/mime_multipartMixed.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/mime_multipartMixed.asp</url_cpp>
                    <url_mfc>http://www.example-code.com/mfc/mime_multipartMixed.asp</url_mfc>
                    <url_c>http://www.example-code.com/C/mime_multipartMixed.asp</url_c>
                    <url_delphi>http://www.example-code.com/delphi/mime_multipartMixed.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/mime_multipartMixed.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/mime_multipartMixed.asp</url_java>
                    <url_perl>http://www.example-code.com/perl/mime_multipartMixed.asp</url_perl>
                    <url_php>http://www.example-code.com/php/mime_multipartMixed.asp</url_php>
                    <url_python>http://www.example-code.com/python/mime_multipartMixed.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/mime_multipartMixed.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/mime_multipartMixed.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/mime_multipartMixed.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/mime_multipartMixed.asp</url_vbscript>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>Example Code: Create a Multipart-Mixed MIME Message with Auto-Generated Boundary and with Explicitly Set Boundary</text>
                    <url>mime_multipartMixed.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Charset" axId="101">
            <gType>string</gType>
            <descrip>The value of the "charset" attribute of the Content-Type header field.  For example, if the Content-Type header is this:
&lt;pre&gt;
Content-Type: text/plain; charset="iso-8859-1"
&lt;/pre&gt;
then the value of the Charset property is "iso-8859-1".</descrip>
            <links>
                <link>
                    <text>Example Code: Demonstrates the effect of setting the Charset property.</text>
                    <url_asp>http://www.example-code.com/asp/mime_charset.asp</url_asp>
                    <url_sql>http://www.example-code.com/sql/mime_charset.asp</url_sql>
                    <url_cs>http://www.example-code.com/csharp/mime_charset.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/mime_charset.asp</url_cpp>
                    <url_mfc>http://www.example-code.com/mfc/mime_charset.asp</url_mfc>
                    <url_c>http://www.example-code.com/C/mime_charset.asp</url_c>
                    <url_delphi>http://www.example-code.com/delphi/mime_charset.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/mime_charset.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/mime_charset.asp</url_java>
                    <url_perl>http://www.example-code.com/perl/mime_charset.asp</url_perl>
                    <url_php>http://www.example-code.com/php/mime_charset.asp</url_php>
                    <url_python>http://www.example-code.com/python/mime_charset.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/mime_charset.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/mime_charset.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/mime_charset.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/mime_charset.asp</url_vbscript>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>Example Code: Demonstrates the effect of setting the Charset property.</text>
                    <url>mime_charset.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ContentType" axId="102">
            <gType>string</gType>
            <descrip>The MIME content type, such as "text/plain", "text/html", "image/gif", "multipart/alternative", "multipart/mixed", etc.&lt;p&gt;
It is the value of the Content-Type header field, excluding any attributes.  For example, if the Content-Type header is this:
&lt;pre&gt;
Content-Type: multipart/mixed; boundary="------------080707010302060306060800"
&lt;/pre&gt;
then the value of the ContentType property is "multipart/mixed".</descrip>
            <links2>
                <link linkType="example">
                    <url>mime_multipart_related.asp</url>
                    <text>Build a multipart/related MIME Message</text>
                </link>
                <link linkType="example">
                    <url>mime_contentType.asp</url>
                    <text>The MIME Content-Type Header Field</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="CurrentDateTime" axId="103">
            <gType>string</gType>
            <descrip>Returns the current date/time in RFC 822 format.</descrip>
            <links2>
                <link linkType="example">
                    <url>mime_currentDateTime.asp</url>
                    <text>Mime CurrentDateTime</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Disposition" axId="104">
            <gType>string</gType>
            <descrip>The value of the Content-Disposition header field, excluding any attributes.  For example, if the Content-Disposition header is this:
&lt;pre&gt;
Content-Disposition: attachment; filename="starfish.gif"
&lt;/pre&gt;
then the value of the Disposition property is "attachment".</descrip>
            <links2>
                <link linkType="example">
                    <url>mime_content_disposition.asp</url>
                    <text>MIME Content-Disposition Header Field</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Encoding" axId="105">
            <gType>string</gType>
            <descrip>The value of the Content-Transfer-Encoding header field.  Typical values are "base64", "quoted-printable", "7bit", "8bit", "binary", etc.  For example, if the Content-Transfer-Encoding header is this:
&lt;pre&gt;
Content-Transfer-Encoding: base64
&lt;/pre&gt;
then the value of the Encoding property is "base64".</descrip>
            <links>
                <link />
            </links>
            <links2>
                <link linkType="example">
                    <url>mime_content_transfer_encoding.asp</url>
                    <text>MIME  Content-Transfer-Encoding Header Field</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Filename" axId="106">
            <gType>string</gType>
            <descrip>The value of the "filename" attribute of the Content-Disposition header field.  For example, if the Content-Disposition header is this:
&lt;pre&gt;
Content-Disposition: attachment; filename="starfish.gif"
&lt;/pre&gt;
then the value of the Filename property is "starfish.gif".</descrip>
            <links2>
                <link linkType="example">
                    <url>mime_content_disposition.asp</url>
                    <text>MIME Content-Disposition Header Field</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Micalg" axId="107">
            <gType>string</gType>
            <descrip>The value of the "micalg" attribute of the Content-Type header field.  For example, if the Content-Type header is this:
&lt;pre&gt;
Content-Type: multipart/signed; protocol="application/x-pkcs7-signature"; micalg=sha1; 
  boundary="------------ms000908010507020408060303"
&lt;/pre&gt;
then the value of the Micalg property is "sha".
&lt;p&gt;
&lt;b&gt;Note: &lt;/b&gt; The micalg attribute is only present in PKCS7 signed MIME.   Setting the Micalg property has the effect of choosing the hash algorithm used w/ signing.  Possible choices are "sha1", "md5", "sha256", "sha384", and "sha512".    However, it is preferable to set the signing hash algorithm by setting the SigningHashAlg property instead.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Name" axId="108">
            <gType>string</gType>
            <descrip>The value of the "name" attribute of the Content-Type header field.  For example, if the Content-Type header is this:
&lt;pre&gt;
Content-Type: image/gif; name="starfish.gif"
&lt;/pre&gt;
then the value of the Name property is "starfish.gif".</descrip>
            <links2>
                <link linkType="example">
                    <url>mime_contentType.asp</url>
                    <text>The MIME Content-Type Header Field</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="NumEncryptCerts" axId="109">
            <gType>int</gType>
            <descrip>The number of certificates found when decrypting S/MIME.  This property is set after UnwrapSecurity is called.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="NumHeaderFields" axId="110">
            <gType>int</gType>
            <descrip>The number of header fields.  Header field names and values can be retrieved by index (starting at 0) by calling GetHeaderFieldName and GetHeaderFieldValue.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="NumParts" axId="111">
            <gType>int</gType>
            <descrip>MIME messages are composed of parts in a tree structure.   The NumParts property contains the number of direct children.  To traverse an entire MIME tree, one would recursively descend the tree structure by iterating from 0 to NumParts-1, calling GetPart to get each direct child MIME object.  The traversal would continue by iterating over each child's parts, and so on.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="NumSignerCerts" axId="112">
            <gType>int</gType>
            <descrip>The number of certificates found when verifying signature(s).  This property is set after UnwrapSecurity is called.</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="Pkcs7CryptAlg" axId="113" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>When the MIME is encrypted (using PKCS7 public-key encryption), this selects the underlying symmetric encryption algorithm. Possible values are: "aes", "des", "3des", and "rc2".   The default value is "aes".</descrip>
            <links2>
                <link linkType="example">
                    <url>mime_encrypt_rsaes_oaep_aes_128_sha256.asp</url>
                    <text>Encrypt MIME using RSAES-OAEP with SHA256 and AES-128 content encryption</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Pkcs7KeyLength" axId="114">
            <gType>int</gType>
            <descrip>When the MIME is encrypted (using PKCS7 public-key encryption), this selects the key length of the underlying symmetric encryption algorithm. The possible values allowed depend on the Pkcs7CryptAlg property.  For "aes", the key length may be 128, 192, or 256.  For "3des" the key length must be 192.  For "des" the key length must be 40.  For "rc2" the key length can be 40, 56, 64, or 128.</descrip>
            <links2 />
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Protocol" axId="115">
            <gType>string</gType>
            <descrip>The value of the "protocol" attribute of the Content-Type header field.  For example, if the Content-Type header is this:
&lt;pre&gt;
Content-Type: multipart/signed; protocol="application/x-pkcs7-signature"; micalg=sha1; 
  boundary="------------ms000908010507020408060303"
&lt;/pre&gt;
then the value of the Protocol property is "application/x-pkcs7-signature".</descrip>
            <links2 />
            <args2 />
        </property>
        <property read="1" write="1" name="SigningHashAlg" axId="116" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Selects the underlying hash algorithm used when creating signed (PKCS7) MIME.  Possible values are "sha1", "sha256", "sha384", "sha512", "md5", and "md2".</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="UnwrapExtras" axId="117" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Controls whether extra (informative) header fields are added to the MIME message when unwrapping security.</descrip>
            <links2>
                <link linkType="example">
                    <url>smime_verify_signature.asp</url>
                    <text>Decrypt S/MIME and Verify S/MIME Signatures</text>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="UseMmDescription" axId="118">
            <gType>bool</gType>
            <descrip>Controls whether the boilerplate text "This is a multi-part message in MIME format." is used as the body content of a multipart MIME part.</descrip>
            <links>
                <link>
                    <text>Example Code: Create a Multipart-Mixed MIME Message (shows the difference when UseMmDescription is on/off).</text>
                    <url_asp>http://www.example-code.com/asp/mime_multipartMixed.asp</url_asp>
                    <url_sql>http://www.example-code.com/sql/mime_multipartMixed.asp</url_sql>
                    <url_cs>http://www.example-code.com/csharp/mime_multipartMixed.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/mime_multipartMixed.asp</url_cpp>
                    <url_mfc>http://www.example-code.com/mfc/mime_multipartMixed.asp</url_mfc>
                    <url_c>http://www.example-code.com/C/mime_multipartMixed.asp</url_c>
                    <url_delphi>http://www.example-code.com/delphi/mime_multipartMixed.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/mime_multipartMixed.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/mime_multipartMixed.asp</url_java>
                    <url_perl>http://www.example-code.com/perl/mime_multipartMixed.asp</url_perl>
                    <url_php>http://www.example-code.com/php/mime_multipartMixed.asp</url_php>
                    <url_python>http://www.example-code.com/python/mime_multipartMixed.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/mime_multipartMixed.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/mime_multipartMixed.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/mime_multipartMixed.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/mime_multipartMixed.asp</url_vbscript>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>Example Code: Create a Multipart-Mixed MIME Message (shows the difference when UseMmDescription is on/off).</text>
                    <url>mime_multipartMixed.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="UseXPkcs7" axId="119">
            <gType>bool</gType>
            <descrip>If _TRUE_, then the Content-Type header fields created by Chilkat will use "x-pkcs7" instead of simply "pkcs7" .  For example:
&lt;pre&gt;
Content-Type: multipart/signed;
	boundary="----=_NextPart_af8_0422_dbec3a60.7178e470";
	protocol="application/x-pkcs7-signature"; micalg=sha1

or

Content-Type: application/x-pkcs7-mime; name="smime.p7m"
&lt;/pre&gt;
If _FALSE_, then the "pcks7" is used.  For example:
&lt;pre&gt;
Content-Type: multipart/signed;
	boundary="----=_NextPart_af8_0422_dbec3a60.7178e470";
	protocol="application/pkcs7-signature"; micalg=sha1

or

Content-Type: application/pkcs7-mime; name="smime.p7m"
&lt;/pre&gt;

The default value of this property is _TRUE_, meaning that "x-" is used by default.</descrip>
            <links2 />
            <args2 />
        </property>
        <property name="SigningAlg" axId="220" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Selects the signature algorithm to be used when creating signed (PKCS7) MIME.  The default value is "PKCS1-v1_5".  This can be set to "RSASSA-PSS" (or simply "pss") to use the RSASSA-PSS signature scheme.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; This property only applies when signing with an RSA private key.  It does not apply for ECC or DSA private keys.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>mime_sign_rsassa_pss.asp</url>
                    <text>Sign MIME using RSASSA-PSS with SHA256</text>
                </link>
            </links2>
            <iversion>9.5.0.67</iversion>
        </property>
        <property name="OaepHash" axId="221" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>mime_encrypt_rsaes_oaep_aes_128_sha256.asp</url>
                    <text>Encrypt MIME using RSAES-OAEP with SHA256 and AES-128 content encryption</text>
                </link>
            </links2>
            <iversion>9.5.0.67</iversion>
            <descrip>Selects the hash algorithm for use within OAEP padding when encrypting MIME using RSAES-OAEP.  The valid choices are "sha1", "sha256", "sha384", "sha512",</descrip>
        </property>
        <property name="OaepPadding" axId="222" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>mime_encrypt_rsaes_oaep_aes_128_sha256.asp</url>
                    <text>Encrypt MIME using RSAES-OAEP with SHA256 and AES-128 content encryption</text>
                </link>
            </links2>
            <iversion>9.5.0.67</iversion>
            <descrip>Selects the RSA encryption scheme when encrypting MIME.  The default value is _FALSE_, which selects RSAES_PKCS1-V1_5.   If set to _TRUE_, then RSAES_OAEP is used.</descrip>
        </property>
        <property name="OaepMgfHash" axId="224" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>Selects the MGF hash algorithm for use within OAEP padding when encrypting MIME using RSAES-OAEP.  The valid choices are "sha1", "sha256", "sha384", "sha512",    The default is "sha1".</descrip>
            <args2 />
            <iversion>9.5.0.71</iversion>
            <links2 />
        </property>
    </properties>
    <methods>
        <method name="AddContentLength" axId="120" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <args />
            <descrip>Computes the size of the MIME body and adds a Content-Length header field with the computed value.  If the MIME body is non-multipart, the Content-Length is just the size of the content.  If the MIME is multipart, then the Content-Length is the sum of all the sub-parts.   Calling this method more than once causes the Content-Length header to be re-computed and updated.</descrip>
            <links2>
                <link linkType="example">
                    <text>Add Content-Length Header to a MIME Message</text>
                    <url>mime_addContentLength.asp</url>
                </link>
            </links2>
            <args2 />
        </method>
        <method name="AddDecryptCert" ax="1" cpp="1" dn="1" status="1" axId="213">
            <gType>bool</gType>
            <descrip>Makes a certificate available for decrypting if needed by methods that decrypt, such as UnwrapSecurity.  This method may be called multiple times to make more than one certificate (and it's private key) available.  Alternative methods for making certificates available are UseCertVault, AddPfxSourceFile, and AddPfxSourceData.</descrip>
            <iversion>9.5.0.40</iversion>
            <args>
                <arg>
                    <argName>cert</argName>
                    <cppType>CkCert &amp;</cppType>
                    <dnType>Cert</dnType>
                    <axType>Cert</axType>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
            <links2 />
        </method>
        <method name="AddDetachedSignature" axId="121" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <descrip>Signs the message using the certificate provided. If successful, the message is converted to "multipart/signed" and the original message will be contained in the first sub-part.</descrip>
            <links2>
                <link linkType="example">
                    <text>Example Code: Create PKCS7 Detached Signature (S/MIME)</text>
                    <url>mime_pkcs7_signature.asp</url>
                </link>
                <link linkType="example">
                    <text>Example: Add S/MIME Signature using PFX</text>
                    <url>mime_sign_with_pfx.asp</url>
                </link>
                <link linkType="example">
                    <url>mime_sign_rsassa_pss.asp</url>
                    <text>Sign MIME using RSASSA-PSS with SHA256</text>
                </link>
            </links2>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddDetachedSignature2" axId="122">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>transferHeaderFields</argName>
                    <objcName>transferHeaderFields</objcName>
                </arg>
            </args>
            <descrip>Same as AddDetachedSignature, except an extra argument is provided to control whether header fields from the calling MIME object are transferred to the content part of the multipart/signed object.  This method transforms the calling object into a multipart/signed MIME with two sub-parts.  The first contains the original content of the calling object, and the second contains the digital signature.</descrip>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
                <arg name="transferHeaderFields" type="bool" objcName="transferHeaderFields" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddDetachedSignaturePk" axId="123">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
                <arg>
                    <axType>PrivateKey</axType>
                    <dnType>PrivateKey</dnType>
                    <cppType>CkPrivateKey &amp;</cppType>
                    <argName>privateKey</argName>
                    <objcName>privateKey</objcName>
                </arg>
            </args>
            <descrip>Adds a detached signature using a certificate and it's associated private key.  This method would be used when the private key is external to the certificate -- for example, if a PFX/P12 file is not used, but instead a pair of .cer and .pem files are used (one for the certificate and one for the associated private key).</descrip>
            <links2>
                <link linkType="example">
                    <text>Example Code for AddDetachedSignaturePk</text>
                    <url>mime_AddDetachedSignaturePk.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
                <arg name="privateKey" type="PrivateKey" objcName="privateKey" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddDetachedSignaturePk2" axId="124">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
                <arg>
                    <axType>PrivateKey</axType>
                    <dnType>PrivateKey</dnType>
                    <cppType>CkPrivateKey &amp;</cppType>
                    <argName>privateKey</argName>
                    <objcName>privateKey</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>transferHeaderFields</argName>
                    <objcName>transferHeaderFields</objcName>
                </arg>
            </args>
            <descrip>Same as AddDetachedSignaturePk, except an extra argument is provided to control whether header fields from the calling MIME object are transferred to the content part of the multipart/signed object.  This method transforms the calling object into a multipart/signed MIME with two sub-parts.  The first contains the original content of the calling object, and the second contains the digital signature.</descrip>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
                <arg name="privateKey" type="PrivateKey" objcName="privateKey" />
                <arg name="transferHeaderFields" type="bool" objcName="transferHeaderFields" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddEncryptCert" axId="125">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <descrip>Adds a certificate to the object's internal list of certificates to be used when the EncryptN method is called.  (See the EncryptN method for more information.)  The internal list may be cleared by calling ClearEncryptCerts.</descrip>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddHeaderField" axId="126">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>name</argName>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>value</argName>
                    <objcName>value</objcName>
                </arg>
            </args>
            <descrip>Adds a header field to the MIME.</descrip>
            <args2>
                <arg name="name" type="string" objcName="name" />
                <arg name="value" type="string" objcName="value" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>mime_add_remove_update_header.asp</url>
                    <text>Add, Remove, Update MIME Header Fields</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddPfxSourceData" axId="127">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>pfxFileData</argName>
                    <objcName>pfxData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pfxPassword</argName>
                    <objcName>password</objcName>
                </arg>
            </args>
            <descrip>Adds a PFX to the object's internal list of sources to be searched for certificates and private keys when decrypting .  Multiple PFX sources can be added by calling this method once for each.  (On the Windows operating system, the registry-based certificate stores are also automatically searched, so it is commonly not required to explicitly add PFX sources.)
&lt;p&gt;
The ARG1 contains the bytes of a PFX file  (also known as PKCS12 or .p12).</descrip>
            <args2>
                <arg name="pfxFileData" type="bytes" objcName="pfxData" />
                <arg name="pfxPassword" type="string" objcName="password" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AddPfxSourceFile" axId="128">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pfxFilePath</argName>
                    <objcName>pfxFilePath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>password</argName>
                    <objcName>password</objcName>
                </arg>
            </args>
            <descrip>Adds a PFX file to the object's internal list of sources to be searched for certificates and private keys when decrypting.  Multiple PFX files can be added by calling this method once for each.  (On the Windows operating system, the registry-based certificate stores are also automatically searched, so it is commonly not required to explicitly add PFX sources.)
&lt;p&gt;
The ARG1 contains the bytes of a PFX file  (also known as PKCS12 or .p12).</descrip>
            <args2>
                <arg name="pfxFilePath" type="string" objcName="pfxFilePath" />
                <arg name="password" type="string" objcName="password" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AppendPart" axId="129">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Mime</axType>
                    <dnType>Mime</dnType>
                    <cppType>CkMime &amp;</cppType>
                    <argName>mime</argName>
                    <objcName>mime</objcName>
                </arg>
            </args>
            <descrip>Appends a MIME message to the sub-parts of this message. Arbitrarily complex messages with unlimited nesting levels can be created. If the calling Mime object is not already multipart, it is automatically converted to multipart/mixed first.</descrip>
            <args2>
                <arg name="mime" type="Mime" objcName="mime" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>mime_appendPart.asp</url>
                    <text>Append Part to MIME</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AppendPartFromFile" axId="130">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>path</objcName>
                </arg>
            </args>
            <descrip>Loads a file and creates a Mime message object using the file extension to determine the content type, and adds it as a sub-part to the calling object.</descrip>
            <args2>
                <arg name="filename" type="string" objcName="path" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="AsnBodyToXml" axId="131" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>When the body of a MIME part contains PKCS7 (ASN.1 in DER format, base64-encoded), this method can be used to convert the ASN.1 to an XML format for inspection.  Here is an example of how an ASN.1 body might look:
&lt;pre&gt;
Content-Type: application/x-pkcs7-mime;
	name="smime.p7m"; smime-type="signed-data"
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="smime.p7m"

MIIXXAYJKoZIhvcNAQcCoIIXTTCCF0kCAQExCzAJBgUrDgMCGgUAMFoGCSqGSIb3DQEHAaBNBEtD
b250ZW50LVR5cGU6IHRleHQvcGxhaW4NCkNvbnRlbnQtVHJhbnNmZXItRW5jb2Rpbmc6IDdiaXQN
Cg0KdGhpcyBpcyBhIHRlc3SgghI/MIIE3jCCA8agAwIBAgICAwEwDQYJKoZIhvcNAQEFBQAwYzEL
...
&lt;/pre&gt;
The XML produced would look something like this:
&lt;pre&gt;
_LT_?xml version="1.0" encoding="utf-8" ?&gt;
_LT_sequence&gt;
    _LT_oid&gt;1.2.840.113549.1.7.2_LT_/oid&gt;
    _LT_contextSpecific tag="0" constructed="1"&gt;
        _LT_sequence&gt;
            _LT_int&gt;01_LT_/int&gt;
            _LT_set&gt;
                _LT_sequence&gt;
                    _LT_oid&gt;1.3.14.3.2.26_LT_/oid&gt;
                    _LT_null /&gt;
                _LT_/sequence&gt;
            _LT_/set&gt;
            _LT_sequence&gt;
                _LT_oid&gt;1.2.840.113549.1.7.1_LT_/oid&gt;
                _LT_contextSpecific tag="0" constructed="1"&gt;
...
&lt;/pre&gt;</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="ClearEncryptCerts" axId="132">
            <gType>void</gType>
            <args />
            <descrip>Clears the internal list of certificates added by previous calls to the AddEncryptCert method.  (See the EncryptN method for information about encrypting using multiple certificates.)</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="ContainsEncryptedParts" axId="133" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <args />
            <descrip>Returns _TRUE_ if the MIME message contains encrypted parts.
&lt;p&gt;
Note: This method examines the MIME as-is.  If UnwrapSecurity is called and it is successful, then the MIME should no longer contain encrypted parts, and this method would return 0.
&lt;p&gt;
Note:  If a signed MIME message is then encrypted, then it is not possible to know that the MIME is both encrypted and signed until UnwrapSecurity is called.  (In other words, it is not possible to know the contents of the encrypted MIME until it is decrypted.) Therefore, the ContainsSignedParts method would return _FALSE_.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>smime_verify_signature.asp</url>
                    <text>Decrypt S/MIME and Verify S/MIME Signatures</text>
                </link>
            </links2>
        </method>
        <method name="ContainsSignedParts" axId="134" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <args />
            <descrip>Returns _TRUE_ if the MIME message contains signed parts.
&lt;p&gt;
Note: This method examines the MIME as-is.  If UnwrapSecurity is called and it is successful, then the MIME should no longer contain signed parts, and this method would return 0.
&lt;p&gt;
Note:  If a signed MIME message is then encrypted, then it is not possible to know that the MIME is both encrypted and signed until UnwrapSecurity is called.  (In other words, it is not possible to know the contents of the encrypted MIME until it is decrypted.) Therefore, the ContainsSignedParts method would return _FALSE_.
&lt;p&gt;
Note: The same concept also applies to opaque signatures, such as with the MIME produced by calling ConvertToSigned.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>smime_verify_signature.asp</url>
                    <text>Decrypt S/MIME and Verify S/MIME Signatures</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="Convert8Bit" axId="135">
            <gType>void</gType>
            <args />
            <descrip>Changes the content-transfer-encoding to "base64" for all 8bit or binary MIME subparts.  This allows for the MIME to be exported as a string via the GetMime method.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>mime_content_transfer_encoding.asp</url>
                    <text>MIME  Content-Transfer-Encoding Header Field</text>
                </link>
            </links2>
        </method>
        <method name="ConvertToMultipartAlt" axId="136" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args />
            <descrip>Converts existing MIME to a multipart/alternative.  This is accomplished by creating a new outermost multipart/alternative MIME part.  The existing MIME is moved into the 1st (and only) sub-part of the new multipart/alternative enclosure.  Header fields from the original top-level MIME part are transferred to the new top-level multipart/alternative header, except for Content-Type, Content-Transfer-Encoding, and Content-Disposition.  For example, the following simple plain-text MIME is converted as follows:
&lt;p&gt;Original: 
&lt;pre&gt;
MIME-Version: 1.0
Date: Sun, 11 Aug 2013 11:18:44 -0500
Message-ID: &lt;D105FA9A2B5F34E253C6E255D58247D26F8BD724@CHILKAT13&gt;
Content-Type: text/plain
Content-Transfer-Encoding: quoted-printable
X-Priority: 3 (Normal)
Subject: this is the subject.
From: "Chilkat Software" &lt;support@chilkatsoft.com&gt;
To: "Chilkat Sales" &lt;sales@chilkatsoft.com&gt;

This is the plain-text body.
&lt;/pre&gt;
&lt;p&gt;After Converting:
&lt;pre&gt;
MIME-Version: 1.0
Date: Sun, 11 Aug 2013 11:18:44 -0500
Message-ID: &lt;D105FA9A2B5F34E253C6E255D58247D26F8BD724@CHILKAT13&gt;
X-Priority: 3 (Normal)
Subject: this is the subject.
From: "Chilkat Software" &lt;support@chilkatsoft.com&gt;
To: "Chilkat Sales" &lt;sales@chilkatsoft.com&gt;
Content-Type: multipart/alternative;
	boundary="------------040101040804050401050400_.ALT"

--------------040101040804050401050400_.ALT
Content-Type: text/plain
Content-Transfer-Encoding: quoted-printable

This is the plain-text body.
--------------040101040804050401050400_.ALT--

&lt;/pre&gt;</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="ConvertToMultipartMixed" axId="137" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args />
            <descrip>Converts existing MIME to a multipart/mixed.  This is accomplished by creating a new outermost multipart/mixed MIME part.  The existing MIME is moved into the 1st (and only) sub-part of the new multipart/mixed enclosure.  Header fields from the original top-level MIME part are transferred to the new top-level multipart/mixed header, except for Content-Type, Content-Transfer-Encoding, and Content-Disposition.  For example, the following simple plain-text MIME is converted as follows:
&lt;p&gt;Original: 
&lt;pre&gt;
MIME-Version: 1.0
Date: Sun, 11 Aug 2013 11:27:04 -0500
Message-ID: &lt;B43DAF999B38BFE2C7240D86E691B8628D9D0BF4@CHILKAT13&gt;
Content-Type: text/plain
Content-Transfer-Encoding: quoted-printable
X-Priority: 3 (Normal)
Subject: this is the subject.
From: "Chilkat Software" &lt;support@chilkatsoft.com&gt;
To: "Chilkat Sales" &lt;sales@chilkatsoft.com&gt;

This is the plain-text body.
&lt;/pre&gt;
&lt;p&gt;After Converting:
&lt;pre&gt;
MIME-Version: 1.0
Date: Sun, 11 Aug 2013 11:27:04 -0500
Message-ID: &lt;B43DAF999B38BFE2C7240D86E691B8628D9D0BF4@CHILKAT13&gt;
X-Priority: 3 (Normal)
Subject: this is the subject.
From: "Chilkat Software" &lt;support@chilkatsoft.com&gt;
To: "Chilkat Sales" &lt;sales@chilkatsoft.com&gt;
Content-Type: multipart/mixed;
	boundary="------------050508060709030908040207"

--------------050508060709030908040207
Content-Type: text/plain
Content-Transfer-Encoding: quoted-printable

This is the plain-text body.
--------------050508060709030908040207--
&lt;/pre&gt;</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>mime_create_binary.asp</url>
                    <text>Create Binary MIME</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="ConvertToSigned" axId="138">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <descrip>Digitally signs a MIME message.  The MIME is converted to an application/x-pkcs7-mime which is a PKCS7 signature that includes both the original MIME message and the signature.  This is different than AddDetachedSignature, where the signature is appended to the MIME.
&lt;p&gt;
Note: This is commonly referred to as an "opaque" signature.</descrip>
            <links2>
                <link linkType="example">
                    <text>Example Code: Create PKCS7 Attached/Opaque Signature (S/MIME)</text>
                    <url>mime_pkcs7_opaque_signature.asp</url>
                </link>
                <link linkType="example">
                    <url>mime_sign_rsassa_pss.asp</url>
                    <text>Sign MIME using RSASSA-PSS with SHA256</text>
                </link>
            </links2>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="ConvertToSignedPk" axId="139">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
                <arg>
                    <axType>PrivateKey</axType>
                    <dnType>PrivateKey</dnType>
                    <cppType>CkPrivateKey &amp;</cppType>
                    <argName>privateKey</argName>
                    <objcName>privateKey</objcName>
                </arg>
            </args>
            <descrip>Digitally signs the MIME to convert it to an "opaque" signed message using a certificate and it's associated private key.  This method would be used when the private key is external to the certificate -- for example, if a PFX/P12 file is not used, but instead a pair of .cer and .pem files are used (one for the certificate and one for the associated private key).</descrip>
            <links2>
                <link linkType="example">
                    <text>Example Code for ConvertToSignedPk</text>
                    <url>mime_ConvertToSignedPk.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
                <arg name="privateKey" type="PrivateKey" objcName="privateKey" />
            </args2>
        </method>
        <method name="Decrypt" axId="140" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args />
            <descrip>Decrypts PKCS7 encrypted MIME (also known as S/MIME).   Information about the certificates required for decryption is always embedded within PKCS7 encrypted MIME.  This method will automatically find and use the certificate + private key required from three possible sources:
&lt;ol&gt;
&lt;li&gt;PFX files that were provided in one or more calls to AddPfxSourceData or AddPfxSourceFile.
&lt;li&gt;Certificates found in an XML certificate vault provided by calling the UseCertVault method.
&lt;li&gt;(On Windows systems) Certificates found in the system's registry-based certificate stores.
&lt;/ol&gt;</descrip>
            <links2>
                <link linkType="example">
                    <text>Example Code: PKCS7 Decrypt MIME</text>
                    <url>mime_pkcs7_decrypt.asp</url>
                </link>
                <link linkType="example">
                    <url>mime_decrypt_rsaes_oaep_aes_128_sha256.asp</url>
                    <text>Decrypt MIME using RSAES-OAEP with SHA256 and AES-128 content encryption</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="Decrypt2" axId="141">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
                <arg>
                    <axType>PrivateKey</axType>
                    <dnType>PrivateKey</dnType>
                    <cppType>CkPrivateKey &amp;</cppType>
                    <argName>privateKey</argName>
                    <objcName>privateKey</objcName>
                </arg>
            </args>
            <descrip>The same as Decrypt, but useful when the certificate and  private key are available in separate files (as opposed to a single file such as a .pfx/.p12).</descrip>
            <links2>
                <link linkType="example">
                    <text>Example Code for Decrypt2</text>
                    <url>mime_Decrypt2.asp</url>
                </link>
                <link linkType="example">
                    <url>mime_decrypt_rsaes_oaep_aes_128_sha256.asp</url>
                    <text>Decrypt MIME using RSAES-OAEP with SHA256 and AES-128 content encryption</text>
                </link>
            </links2>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
                <arg name="privateKey" type="PrivateKey" objcName="privateKey" />
            </args2>
        </method>
        <method name="DecryptUsingCert" ax="1" cpp="1" dn="1" status="1" axId="212">
            <gType>bool</gType>
            <descrip>Decrypts PKCS7 encrypted MIME (also known as S/MIME) using a specific certificate.</descrip>
            <args>
                <arg>
                    <argName>cert</argName>
                    <cppType>CkCert &amp;</cppType>
                    <dnType>Cert</dnType>
                    <axType>Cert</axType>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <iversion>9.5.0.40</iversion>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="DecryptUsingPfxData" axId="142">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>pfxData</argName>
                    <objcName>pfxData</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>password</argName>
                    <objcName>password</objcName>
                </arg>
            </args>
            <descrip>Decrypts MIME using a specific PFX ( also known as PKCS12, which is a file format commonly used to store private keys with accompanying public key certificates, protected with a password-based symmetric key).    This method allows the bytes of the PKCS12 file to be passed directly, thus allowing PKCS12's to be persisted and retrieved from non-file-based locations, such as in LDAP or a database.</descrip>
            <links2>
                <link linkType="example" lang="activex">
                    <text>Example Code: PKCS7 Decrypt Using .pfx or .p12 Data</text>
                    <url>mime_decrypt_using_pfxdata.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="pfxData" type="bytes" objcName="pfxData" />
                <arg name="password" type="string" objcName="password" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="DecryptUsingPfxFile" axId="143">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pfxFilePath</argName>
                    <objcName>pfxFilePath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pfxPassword</argName>
                    <objcName>password</objcName>
                </arg>
            </args>
            <descrip>Decrypts MIME using a specific PFX file (also known as PKCS12) as the source for any required certificates and private keys.  (Note: .pfx and .p12 files are both PKCS12 format.)</descrip>
            <links2>
                <link linkType="example">
                    <text>PKCS7 Decrypt Using .pfx or .p12 File</text>
                    <url>mime_decrypt_using_pfxfile.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="pfxFilePath" type="string" objcName="pfxFilePath" />
                <arg name="pfxPassword" type="string" objcName="password" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="Encrypt" axId="144">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <descrip>Encrypts the MIME to create PKCS7 encrypted MIME.  A digital certificate (which always contains a public-key) is used to encrypt.</descrip>
            <links2>
                <link linkType="example">
                    <text>Example Code: PKCS7 Encrypt MIME</text>
                    <url>mime_pkcs7_encrypt.asp</url>
                </link>
                <link linkType="example">
                    <url>mime_encrypt_rsaes_oaep_aes_128_sha256.asp</url>
                    <text>Encrypt MIME using RSAES-OAEP with SHA256 and AES-128 content encryption</text>
                </link>
            </links2>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="EncryptN" axId="145">
            <gType>bool</gType>
            <args />
            <descrip>Encrypt MIME using any number of digital certificates.  Each certificate to be used must first be added by calling AddEncryptCert (once per certificate).  See the example code below:</descrip>
            <links2>
                <link linkType="example">
                    <text>Example: PKCS7 Encrypt using Multiple Certificates</text>
                    <url>mime_pkcs7_encryptN.asp</url>
                </link>
            </links2>
            <args2 />
        </method>
        <method name="ExtractPartsToFiles" axId="146" ax="1" cpp="1" dn="1">
            <gType>StringArray</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dirPath</argName>
                    <objcName>dirPath</objcName>
                </arg>
            </args>
            <descrip>Recursively descends through the parts of a MIME message and extracts all parts having a filename to a file.  The files are created in ARG1.   Returns a (Ck)StringArray object containing the names of the files created.    The filenames are obtained from the "filename" attribute of the content-disposition header.  If a filename does not exist, then the MIME part is not saved to a file.</descrip>
            <links2>
                <link linkType="example">
                    <text>Extract Files from MIME</text>
                    <url>mime_extractFiles.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="dirPath" type="string" objcName="dirPath" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="FindIssuer" axId="147">
            <gType>Cert</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <descrip>Finds and returns the issuer certificate.  If the certificate is a root or self-issued, then the certificate returned is a copy of the caller certificate.</descrip>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
            <links2 />
        </method>
        <method name="GetBodyBinary" axId="148" outArgName="outData" ax="1" cpp="1" dn="1">
            <gType>bytes</gType>
            <args>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Returns the body of the MIME message as a block of binary data. The body is automatically converted from its encoding type, such as base64 or quoted-printable, before being returned.</descrip>
            <links2>
                <link linkType="example">
                    <url>mime_getBodyBinary.asp</url>
                    <text>Get the Binary Bytes of a MIME Body or Sub-Part Body</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetBodyDecoded" axId="149" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the body of the MIME message as a string. The body is automatically converted from its encoding type, such as base64 or quoted-printable, before being returned.</descrip>
            <links2>
                <link linkType="example">
                    <text>Example Code: GetBodyEncoded / GetBodyDecoded</text>
                    <url>mime_getTextBody.asp</url>
                </link>
                <link linkType="example">
                    <text>Example Code: MIME Body vs. Sub-Parts</text>
                    <url>mime_body.asp</url>
                </link>
            </links2>
            <args2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetBodyEncoded" axId="150" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the body of the MIME message as a String. The body is explicitly not decoded from it's encoding type, so if it was represented in Base64, you will get the Base64 encoded body, as an example.</descrip>
            <links2>
                <link linkType="example">
                    <text>Example Code: GetBodyEncoded / GetBodyDecoded</text>
                    <url>mime_getTextBody.asp</url>
                </link>
                <link linkType="example">
                    <text>Example Code: MIME Body vs. Sub-Parts</text>
                    <url>mime_body.asp</url>
                </link>
                <link linkType="example">
                    <url>mime_content_transfer_encoding.asp</url>
                    <text>MIME  Content-Transfer-Encoding Header Field</text>
                </link>
            </links2>
            <args2 />
        </method>
        <method name="GetEncryptCert" axId="151" ax="1" cpp="1" dn="1">
            <gType>Cert</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>Returns the Nth certificate found when decrypting. The EncryptCerts property contains the number of certificates.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>smime_verify_signature.asp</url>
                    <text>Decrypt S/MIME and Verify S/MIME Signatures</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetEntireBody" axId="152" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the entire MIME body, including all sub-parts.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>mime_getEntireBody.asp</url>
                    <text>GetEntireHead and GetEntireBody</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetEntireHead" axId="153" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the MIME header.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>mime_getEntireBody.asp</url>
                    <text>GetEntireHead and GetEntireBody</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetHeaderField" axId="154" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fieldName</argName>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the value of a MIME header field.  ARG1 is case-insensitive.</descrip>
            <args2>
                <arg name="fieldName" type="string" objcName="name" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>mime_getHeaderField.asp</url>
                    <text>Get the Value of a MIME Header Field</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetHeaderFieldAttribute" axId="155" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>name</argName>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>attrName</argName>
                    <objcName>attrName</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Parses a MIME header field and returns the value of an attribute.  MIME header fields w/ attributes are formatted like this:
&lt;pre&gt;
Header-Name:  value;  attrName1="value1"; attrName2="value2"; ....  attrNameN="valueN"
&lt;/pre&gt;
Semi-colons separate attribute name=value pairs.  The Content-Type header field often contains attributes.  Here is an example:
&lt;pre&gt;
Content-Type: multipart/signed;
	protocol="application/x-pkcs7-signature";
	micalg=SHA1;
	boundary="----=_NextPart_000_0000_01CB03E4.D0BAF010"
&lt;/pre&gt;
In the above example, to access the value of the "protocol" attribute, call GetHeaderFieldAttribute("Content-Type", "protocol");</descrip>
            <links2>
                <link linkType="example">
                    <text>Example Code: Parse MIME Header Fields</text>
                    <url>mime_parseHeaderFields.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="name" type="string" objcName="name" />
                <arg name="attrName" type="string" objcName="attrName" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetHeaderFieldName" axId="156" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the Nth MIME header field name.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetHeaderFieldValue" axId="157" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns the Nth MIME header field value.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="GetMime" axId="158" outArgName="outStr" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Returns a string containing the complete MIME message, including all sub-parts.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetMimeBytes" axId="159" outArgName="outBytes">
            <gType>bytes</gType>
            <args>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>Returns a byte array containing the complete MIME message, including all sub-parts.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>mime_convert_base64_to_binary.asp</url>
                    <text>MIME -- Convert Base64 to Binary</text>
                </link>
                <link linkType="example">
                    <url>mime_content_transfer_encoding.asp</url>
                    <text>MIME  Content-Transfer-Encoding Header Field</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetPart" axId="160">
            <gType>Mime</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>Returns the Nth sub-part of the MIME message. Indexing begins at 0.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetSignatureSigningTime" axId="161" deprecated="1" noxojo="1" outArgName="outSysTime">
            <gType systemtime="1">date</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>SYSTEMTIME &amp;</cppType>
                    <argName>outSysTime</argName>
                    <objcName>outSysTime</objcName>
                </arg>
            </args>
            <descrip>Returns the signature signing date/time for the Nth signature.  The number of signatures (i.e. signer certs) is indicated by the NumSignerCerts property. The HasSignatureSigningTime method may be called to determine if a signature timestamp is available.   The index of the 1st signature signing time is 0.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetSignatureSigningTimeStr" axId="162" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>The same as the GetSignatureSigningTime method, but returns tjhe date/time in RFC822 string format.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="GetSignerCert" axId="163" ax="1" cpp="1" dn="1">
            <gType>Cert</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>Returns the Nth digital certificate used to sign the MIME message. Indexing begins at 0.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>smime_verify_signature.asp</url>
                    <text>Decrypt S/MIME and Verify S/MIME Signatures</text>
                </link>
            </links2>
        </method>
        <method name="GetSignerCertChain" ax="1" cpp="1" dn="1" axId="210">
            <gType>CertChain</gType>
            <descrip>Returns the full certificate chain for the Nth certificate used to sign the MIME message. Indexing begins at 0.</descrip>
            <iversion>9.5.0.40</iversion>
            <args>
                <arg>
                    <argName>index</argName>
                    <cppType>int</cppType>
                    <dnType>int</dnType>
                    <axType>int</axType>
                    <objcName>index</objcName>
                </arg>
            </args>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method name="GetXml" axId="164" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>Converts the MIME (or S/MIME) message to XML and returns the XML as a string.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>mime_convert_to_xml.asp</url>
                    <text>Convert MIME to XML</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="HasSignatureSigningTime" axId="165">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>Returns _TRUE_ if the Nth signature included a timestamp that recorded the signing time.  The number of signatures (i.e. signer certs) is indicated by the NumSignerCerts property.  (In most cases, the number of signer certs is 1.)   The signing time can be obtained via the GetSignatureSigningTime or GetSignatureSigningTimeStr methods.   The index of the 1st signature signing time is 0.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsApplicationData" axId="166">
            <gType>bool</gType>
            <args />
            <descrip>Return _TRUE_ if the MIME message contains application data, otherwise returns _FALSE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsAttachment" axId="167">
            <gType>bool</gType>
            <args />
            <descrip>Return _TRUE_ if this MIME message is an attachment, otherwise returns _FALSE_.   A MIME message is considered an attachment if the Content-Disposition header field contains the value "attachment".</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsAudio" axId="168">
            <gType>bool</gType>
            <args />
            <descrip>Return _TRUE_ if the MIME message contains audio data, otherwise returns _FALSE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsEncrypted" axId="169">
            <gType>bool</gType>
            <args />
            <descrip>Returns _TRUE_ if the MIME message is PKCS7 encrypted, otherwise returns _FALSE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsHtml" axId="170">
            <gType>bool</gType>
            <args />
            <descrip>Return _TRUE_ if the MIME body is HTML, otherwise returns _FALSE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsImage" axId="171">
            <gType>bool</gType>
            <args />
            <descrip>Return _TRUE_ if the MIME message contains image data, otherwise returns _FALSE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsMultipart" axId="172">
            <gType>bool</gType>
            <args />
            <descrip>Return _TRUE_ if the MIME message is multipart (multipart/mixed, multipart/related, multipart/alternative, etc.), otherwise returns _FALSE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsMultipartAlternative" axId="173">
            <gType>bool</gType>
            <args />
            <descrip>Return _TRUE_ if the MIME message is multipart/alternative, otherwise returns _FALSE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsMultipartMixed" axId="174">
            <gType>bool</gType>
            <args />
            <descrip>Return true if the MIME message is multipart/mixed, otherwise returns _FALSE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsMultipartRelated" axId="175">
            <gType>bool</gType>
            <args />
            <descrip>Return _TRUE_ if the MIME message is multipart/related, otherwise returns _FALSE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsPlainText" axId="176">
            <gType>bool</gType>
            <args />
            <descrip>Return _TRUE_ if the MIME message body is plain text, otherwise returns _FALSE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsSigned" axId="177">
            <gType>bool</gType>
            <args />
            <descrip>Return _TRUE_ if the MIME message is PKCS7 digitally signed, otherwise returns _FALSE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsText" axId="178">
            <gType>bool</gType>
            <args />
            <descrip>Return _TRUE_ if the MIME message body is any text content type, such as text/plain, text/html, text/xml, etc., otherwise returns _FALSE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsUnlocked" axId="179">
            <gType>bool</gType>
            <args />
            <descrip>Returns _TRUE_ if the component is already unlocked, otherwise returns _FALSE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsVideo" axId="180">
            <gType>bool</gType>
            <args />
            <descrip>Return _TRUE_ if the MIME message contains video data, otherwise returns _FALSE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsXml" axId="181">
            <gType>bool</gType>
            <args />
            <descrip>Return _TRUE_ if the MIME message body is XML, otherwise returns _FALSE_.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="LoadMime" axId="182" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>mimeMsg</argName>
                    <objcName>mimeText</objcName>
                </arg>
            </args>
            <descrip>Discards the current contents of the MIME object and loads a new MIME message from a string.</descrip>
            <args2>
                <arg name="mimeMsg" type="string" objcName="mimeText" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="LoadMimeBytes" axId="183">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>binData</argName>
                    <objcName>bData</objcName>
                </arg>
            </args>
            <descrip>Loads a MIME document from an in-memory byte array.</descrip>
            <args2>
                <arg name="binData" type="bytes" objcName="bData" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="LoadMimeFile" axId="184">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fileName</argName>
                    <objcName>path</objcName>
                </arg>
            </args>
            <descrip>Discards the current contents of the MIME object and loads a new MIME message from a file.</descrip>
            <args2>
                <arg name="fileName" type="string" objcName="path" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="LoadXml" axId="185">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>xml</argName>
                    <objcName>xmlText</objcName>
                </arg>
            </args>
            <descrip>Converts XML to MIME and replaces the MIME object's contents with the converted XML.</descrip>
            <args2>
                <arg name="xml" type="string" objcName="xmlText" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="LoadXmlFile" axId="186">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fileName</argName>
                    <objcName>path</objcName>
                </arg>
            </args>
            <descrip>Converts XML to MIME and replaces the MIME object's contents with the converted XML.</descrip>
            <args2>
                <arg name="fileName" type="string" objcName="path" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="NewMessageRfc822" axId="187">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Mime</axType>
                    <dnType>Mime</dnType>
                    <cppType>CkMime &amp;</cppType>
                    <argName>mimeObject</argName>
                    <objcName>mimeObject</objcName>
                </arg>
            </args>
            <descrip>Clears the Mime object and initializes it such that the header contains a "content-type: message/rfc822" line and the body is the MIME text of the Mime object passed to the method.</descrip>
            <args2>
                <arg name="mimeObject" type="Mime" objcName="mimeObject" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="NewMultipartAlternative" axId="188">
            <gType>bool</gType>
            <args />
            <descrip>Discards the current MIME message header fields and contents, if any, an initializes the MIME object to be an empty mulipart/alternative message.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>mime_newMultipartAlternative.asp</url>
                    <text>Create multipart/alternative MIME</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="NewMultipartMixed" axId="189">
            <gType>bool</gType>
            <args />
            <descrip>Discards the current MIME message header fields and contents, if any, an initializes the MIME object to be an empty mulipart/mixed message.</descrip>
            <links2>
                <link linkType="example">
                    <text>Example Code: Create a Multipart-Mixed MIME Message</text>
                    <url>mime_multipartMixed.asp</url>
                </link>
            </links2>
            <args2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="NewMultipartRelated" axId="190">
            <gType>bool</gType>
            <args />
            <descrip>Discards the current MIME message header fields and contents, if any, an initializes the MIME object to be an empty mulipart/related message.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>mime_multipart_related.asp</url>
                    <text>Build a multipart/related MIME Message</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="RemoveHeaderField" axId="191">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fieldName</argName>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>bAllOccurrences</argName>
                    <objcName>bAllOccurrences</objcName>
                </arg>
            </args>
            <descrip>Removes a header field from the MIME header.  If ARG2 is _TRUE_, then all occurrences of the header field are removed.  Otherwise, only the 1st occurrence is removed.</descrip>
            <args2>
                <arg name="fieldName" type="string" objcName="name" />
                <arg name="bAllOccurrences" type="bool" objcName="bAllOccurrences" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>mime_add_remove_update_header.asp</url>
                    <text>Add, Remove, Update MIME Header Fields</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="RemovePart" axId="192">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>Removes the Nth subpart from the MIME message.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SaveBody" axId="193">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>path</objcName>
                </arg>
            </args>
            <descrip>Saves the MIME message body to a file. If the body is base64 or quoted-printable encoded, it is automatically decoded.</descrip>
            <links2>
                <link linkType="example">
                    <url>mime_save_body.asp</url>
                    <text>Save a MIME Body to a File</text>
                </link>
                <link linkType="example">
                    <url>mime_extract_binary_soap_mtom.asp</url>
                    <text>Extract Files from Binary SOAP MTOM MIME</text>
                </link>
            </links2>
            <args2>
                <arg name="filename" type="string" objcName="path" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SaveMime" axId="194">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>path</objcName>
                </arg>
            </args>
            <descrip>Saves the MIME message to a file, in MIME format.  (This is the same as the .EML format used by Microsoft Outlook Express.)</descrip>
            <args2>
                <arg name="filename" type="string" objcName="path" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SaveXml" axId="195">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>path</objcName>
                </arg>
            </args>
            <descrip>Converts the MIME message to XML and saves to an XML file.</descrip>
            <args2>
                <arg name="filename" type="string" objcName="path" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="SetBody" axId="196">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
            </args>
            <descrip>Sets the MIME body content to a text string.</descrip>
            <links2>
                <link linkType="example">
                    <text>Example Code: MIME SetBody</text>
                    <url>mime_setBody.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetBodyFromBinary" axId="197">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>binData</argName>
                    <objcName>dbuf</objcName>
                </arg>
            </args>
            <descrip>Sets the MIME message body from a byte array.</descrip>
            <args2>
                <arg name="binData" type="bytes" objcName="dbuf" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>mime_multipart_related.asp</url>
                    <text>Build a multipart/related MIME Message</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetBodyFromEncoded" axId="198">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encoding</argName>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
            </args>
            <descrip>Sets the MIME message body from a Base64 or Quoted-Printable encoded string.</descrip>
            <args2>
                <arg name="encoding" type="string" objcName="encoding" />
                <arg name="str" type="string" objcName="str" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>mime_content_transfer_encoding.asp</url>
                    <text>MIME  Content-Transfer-Encoding Header Field</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetBodyFromFile" axId="199">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fileName</argName>
                    <objcName>path</objcName>
                </arg>
            </args>
            <descrip>Sets the MIME message body from the contents of a file.   Note: A MIME message consists of a header and a body.  The body may itself be a MIME message that consists of a header and body, etc.   This method loads the contents of a file into the body of a MIME message, without replacing the header. &lt;p&gt;
The Content-Type and Content-Transfer-Encoding header fields are automatically updated to match the type of content loaded (based on file extension).  If your application requires the MIME to have a specific Content-Type and/or Content-Transfer-Encoding, set the ContentType and Encoding properties after calling this method (not before).</descrip>
            <args2>
                <arg name="fileName" type="string" objcName="path" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>mime_setBodyFromFile.asp</url>
                    <text>Set MIME Body from File</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetBodyFromHtml" axId="200">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
            </args>
            <descrip>Sets the MIME message body from a string containing HTML.  The Content-Type header is added or updated to the value "text/html". &lt;p&gt;
 If 8bit (non-us-ascii) characters are present, and if the Charset property was not previously set, then the "charset" attribute is automatically added to the Content-Type header using the default value of "utf-8".   This can be changed at any time by setting the Charset property.
&lt;p&gt;
If the Encoding property was not previously set, then the Content-Transfer-Encoding header is automatically added.  It will be set to "7bit" or "8bit" depending on whether the HTML body contains 8-bit non-us-ascii characters.
&lt;p&gt;&lt;b&gt;To set the MIME body with no intentional side-effects, use SetBody instead.&lt;/b&gt;&lt;/p&gt;</descrip>
            <links2>
                <link linkType="example">
                    <text>Example Code: Create MIME Containing HTML</text>
                    <url>mime_setBodyFromHtml.asp</url>
                </link>
                <link linkType="example">
                    <url>mime_multipart_related.asp</url>
                    <text>Build a multipart/related MIME Message</text>
                </link>
            </links2>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetBodyFromPlainText" axId="201">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
            </args>
            <descrip>Sets the MIME message body from a string containing plain-text.  The Content-Type header is added or updated to the value "text/plain". &lt;p&gt;
 If 8bit (non-us-ascii) characters are present, and if the Charset property was not previously set, then the "charset" attribute is automatically added to the Content-Type header using the default value of "utf-8".   This can be changed at any time by setting the Charset property.
&lt;p&gt;
If the Encoding property was not previously set, then the Content-Transfer-Encoding header is automatically added.  It will be set to "7bit" or "8bit" depending on whether the plain-text body contains 8-bit non-us-ascii characters.
&lt;p&gt;&lt;b&gt;To set the MIME body with no intentional side-effects, use SetBody instead.&lt;/b&gt;&lt;/p&gt;</descrip>
            <links2>
                <link linkType="example">
                    <text>Example Code: Create MIME Containing Plain-Text</text>
                    <url>mime_setBodyFromPlainText.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetBodyFromXml" axId="202">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>str</argName>
                    <objcName>str</objcName>
                </arg>
            </args>
            <descrip>Sets the MIME message body from a string containing XML.  The Content-Type header is added or updated to the value "text/xml". &lt;p&gt;
 If 8bit (non-us-ascii) characters are present, and if the Charset property was not previously set, then the "charset" attribute is automatically added to the Content-Type header using the default value of "utf-8".   This can be changed at any time by setting the Charset property.
&lt;p&gt;
If the Encoding property was not previously set, then the Content-Transfer-Encoding header is automatically added.  It will be set to "7bit" or "8bit" depending on whether the plain-text body contains 8-bit non-us-ascii characters.
&lt;p&gt;&lt;b&gt;To set the MIME body with no intentional side-effects, use SetBody instead.&lt;/b&gt;&lt;/p&gt;</descrip>
            <links2>
                <link linkType="example">
                    <text>Example Code: Create MIME Containing XML</text>
                    <url>mime_setBodyFromXml.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="str" type="string" objcName="str" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" windowsOnly="1" noObjC="1" status="1" name="SetCSP" axId="203">
            <gType>bool</gType>
            <ifdef>#if defined(CK_CSP_INCLUDED)</ifdef>
            <args>
                <arg>
                    <axType>Csp</axType>
                    <dnType>Csp</dnType>
                    <cppType>CkCsp &amp;</cppType>
                    <argName>csp</argName>
                    <objcName>csp</objcName>
                </arg>
            </args>
            <descrip>(Only applies to the Microsoft Windows OS)  Sets the Cryptographic Service Provider (CSP) to be used for encryption / signing, or decryption / signature verification.
&lt;p&gt;
This is not commonly used becaues the default Microsoft CSP is typically appropriate. 
One instance where SetCSP is necessary is when using the Crypto-Pro CSP for the GOST R 34.10-2001 and GOST R 34.10-94 providers.</descrip>
            <args2>
                <arg name="csp" type="Csp" objcName="csp" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="SetHeaderField" axId="204">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>name</argName>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>value</argName>
                    <objcName>value</objcName>
                </arg>
            </args>
            <descrip>Adds or replaces a MIME message header field. If the field already exists, it is automatically replaced. Otherwise it is added.  Pass zero-length ARG2 to remove the header field.</descrip>
            <args2>
                <arg name="name" type="string" objcName="name" />
                <arg name="value" type="string" objcName="value" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>mime_add_remove_update_header.asp</url>
                    <text>Add, Remove, Update MIME Header Fields</text>
                </link>
            </links2>
        </method>
        <method name="SetVerifyCert" axId="205" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>Cert</axType>
                    <dnType>Cert</dnType>
                    <cppType>CkCert &amp;</cppType>
                    <argName>cert</argName>
                    <objcName>cert</objcName>
                </arg>
            </args>
            <descrip>Allows a certificate to be explicitly specified for verifying a signature.</descrip>
            <args2>
                <arg name="cert" type="Cert" objcName="cert" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="UnlockComponent" axId="206">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>unlockCode</argName>
                    <objcName>unlockCode</objcName>
                </arg>
            </args>
            <descrip>Unlocks the component allowing for the full functionality to be used.   If this method unexpectedly returns _FALSE_, examine the contents of the LastErrorText property to determine the reason for failure.</descrip>
            <args2>
                <arg name="unlockCode" type="string" objcName="unlockCode" />
            </args2>
            <links2>
                <link linkType="external">
                    <text>Diagnosing UnlockComponent Problems</text>
                    <url>http://www.cknotes.com/?p=168</url>
                </link>
                <link linkType="external">
                    <text>UnlockComponent LastErrorText shows exact string passed to it.</text>
                    <url>http://www.cknotes.com/?p=315</url>
                </link>
                <link linkType="external">
                    <text>Verify UnlockComponent Success w/ Permanent Unlock Code</text>
                    <url>http://www.cknotes.com/?p=317</url>
                </link>
                <link linkType="external">
                    <text>LastErrorText Standard Information</text>
                    <url>http://www.cknotes.com/?p=316</url>
                </link>
            </links2>
        </method>
        <method name="UnwrapSecurity" axId="207" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args />
            <descrip>Decrypts and/or verifies all digital signatures contained within the MIME message, and returns _TRUE_ if all decryptions and verifications succeeded. Otherwise returns _FALSE_. After unwrapping, the information regarding security and certificates can be obtained by the methods GetSignerCert and GetEncryptCert, and the properties NumEncryptCerts and NumSignerCerts.&lt;p&gt;
The MIME is restored to the original structure/content prior to all signing and/or encryption.&lt;p&gt;
The difference between UnwrapSecurity and methods such as Verify or Decrypt is that UnwrapSecurity will recursively traverse the MIME to decrypt and/or verify all parts.  Also, UnwrapSecurity will unwrap layers until no further encrypted/signed content is found.  For example, if a MIME message was encrypted and then subsequently signed, then UnwrapSecurity will verify and unwrap the detached signature/signed-data layer, and then decrypt the "enveloped data".</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>smime_verify_signature.asp</url>
                    <text>Decrypt S/MIME and Verify S/MIME Signatures</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="UrlEncodeBody" axId="208">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
            </args>
            <descrip>URL encodes the MIME body.  The ARG1 is important.  For example, consider this MIME:
&lt;pre&gt;
Content-Type: text/plain
Content-Transfer-Encoding: 8bit

Société
&lt;/pre&gt;
If the ARG1 is set to "utf-8", then the following is produced:
&lt;pre&gt;
Content-Type: text/plain
Content-Transfer-Encoding: 8bit

Soci%C3%A9t%C3%A9
&lt;/pre&gt;
However, if the ARG1 is set to "ansi", then the following is the result:
&lt;pre&gt;
Content-Type: text/plain
Content-Transfer-Encoding: 8bit

Soci%E9t%E9
&lt;/pre&gt;</descrip>
            <args2>
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2 />
        </method>
        <method name="UseCertVault" ax="1" cpp="1" dn="1" status="1" axId="211">
            <gType>bool</gType>
            <descrip>Adds an XML certificate vault to the object's internal list of sources to be searched for certificates and private keys when encrypting/decrypting or signing/verifying.  Unlike the AddPfxSourceData and AddPfxSourceFile methods, only a single XML certificate vault can be used.  If UseCertVault is called multiple times, only the last certificate vault will be used, as each call to UseCertVault will replace the certificate vault provided in previous calls.</descrip>
            <args>
                <arg>
                    <argName>vault</argName>
                    <cppType>CkXmlCertVault &amp;</cppType>
                    <dnType>XmlCertVault</dnType>
                    <axType>XmlCertVault</axType>
                    <objcName>vault</objcName>
                </arg>
            </args>
            <args2>
                <arg name="vault" type="XmlCertVault" objcName="vault" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="Verify" axId="209">
            <gType>bool</gType>
            <args />
            <descrip>Verifies PKCS7 signed MIME and "unwraps" the signature.  The MIME is restored to the original structure that it would have originally had prior to signing.  The Verify method works with both detached signatures, as well as opaque/attached signatures.&lt;p&gt;
A PKCS7 signature usually embeds both the signing certificate with its public key.  Therefore, it is usually possible to verify a signature without the need to already have the certificate installed.  If the signature does not embed the certificate, the Verify method will automatically locate and use the certificate if it was correctly pre-installed on the computer.</descrip>
            <links2>
                <link linkType="example">
                    <text>Example Code: Verify and Unwrap PCKS7 Signed MIME</text>
                    <url>mime_pkcs7_verify_signature.asp</url>
                </link>
            </links2>
            <args2 />
        </method>
        <method name="GetStructure" axId="214" ax="1" cpp="1" dn="1" outArgName="outStr">
            <gType>string</gType>
            <descrip>Returns  a string summarizing the MIME structure.   The output format is specified by ARG1 and can be "text" or "xml".</descrip>
            <args>
                <arg>
                    <argName>fmt</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>fmt</objcName>
                </arg>
                <arg>
                    <argName>outStr</argName>
                    <cppType>CkString &amp;</cppType>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <iversion>9.5.0.56</iversion>
            <args2>
                <arg name="fmt" type="string" objcName="fmt" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>mime_structure.asp</url>
                    <text>Examing the MIME Nesting Structure</text>
                </link>
            </links2>
        </method>
        <method name="GetMimeSb" axId="215" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args2>
                <arg name="sb" type="StringBuilder" objcName="sb" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>mime_create_binary.asp</url>
                    <text>Create Binary MIME</text>
                </link>
            </links2>
            <iversion>9.5.0.62</iversion>
            <descrip>Appends the MIME to a StringBuilder object.</descrip>
        </method>
        <method name="GetMimeBd" axId="216" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Appends the MIME to a BinData object.</descrip>
            <args2>
                <arg name="bindat" type="BinData" objcName="bindat" />
            </args2>
            <iversion>9.5.0.62</iversion>
            <links2>
                <link linkType="example">
                    <url>mime_create_binary.asp</url>
                    <text>Create Binary MIME</text>
                </link>
            </links2>
        </method>
        <method name="LoadMimeSb" axId="217" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Discards the current contents of the MIME object and loads a new MIME message from a StringBuilder.</descrip>
            <args2>
                <arg name="sb" type="StringBuilder" objcName="sb" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>load_mime_object_from_email_object.asp</url>
                    <text>Load MIME Object from Email Object</text>
                </link>
            </links2>
            <iversion>9.5.0.62</iversion>
        </method>
        <method name="LoadMimeBd" axId="218" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Discards the current contents of the MIME object and loads a new MIME message from a BinData object.</descrip>
            <args2>
                <arg name="bindat" type="BinData" objcName="bindat" />
            </args2>
            <iversion>9.5.0.62</iversion>
            <links2 />
        </method>
        <method name="GetBodyBd" axId="219" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <descrip>Returns the body of the MIME message in a BinData object.</descrip>
            <args2>
                <arg name="binDat" type="BinData" objcName="binDat" />
            </args2>
            <links2 />
            <iversion>9.5.0.67</iversion>
        </method>
        <method name="LastJsonData" axId="223" ax="1" cpp="1" dn="1">
            <gType>JsonObject</gType>
            <args2 />
            <links2 />
            <iversion>9.5.0.69</iversion>
            <descrip>Provides information about what transpired in the last method called on this object instance.  For many methods, there is no information.  However, for some methods, details about what occurred can be obtained by getting the LastJsonData right after the method call returns.  For example, after calling UnwrapSecurity, the LastJsonData will return JSON with details about the algorithms used for signature verification and decryption.</descrip>
        </method>
    </methods>
    <genericName>Mime</genericName>
    <description>Chilkat MIME allows you to easily create and manipulate MIME and S/MIME messages from within your applications.</description>
    <clsid>13D60A54-46AE-4B1A-86F3-652A79EA88C6</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidMidl>45484EC9-E196-492F-8C1F-6D311F89036E</uuidMidl>
    <nextAxId>225</nextAxId>
</class>
