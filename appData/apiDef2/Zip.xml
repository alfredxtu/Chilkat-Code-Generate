<?xml version="1.0" encoding="utf-8" ?>
<class XojoModuleId="114147433" sourceXmlPath="C:/ck2000/appData/apiDef2/Zip.xml" license="Zip" hasEvents="1">
    <axName>ChilkatZip</axName>
    <dnName>Zip</dnName>
    <cppName>CkZip</cppName>
    <properties>
        <property name="AbortCurrent" read="1" write="1" ax="1" cpp="1" dn="1" axId="199">
            <gType>bool</gType>
            <descrip>When set to _TRUE_, causes the currently running method to abort.  Methods that always finish quickly (i.e.have no length file operations or network communications) are not affected.  If no method is running, then this property is automatically reset to _FALSE_ when the next method is called.  When the abort occurs, this property is reset to _FALSE_.  Both synchronous and asynchronous method calls can be aborted.  (A synchronous method call could be aborted by setting this property from a separate thread.)</descrip>
            <iversion>9.5.0.58</iversion>
            <args2 />
            <links2 />
        </property>
        <property name="AppendFromDir" axId="100" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>When files are added to a Zip archive, they are appended from this directory.  For example,  to add all the files under c:/abc/123/myAppDir, this property could be set to "c:/abc/123", and "myAppDir/*" would be passed to AppendFiles.  The path that is saved in the .zip would be "myAppDir/".   (The value of the AppendFromDir property does not become part of the file path saved in the .zip.)</descrip>
            <links>
                <link>
                    <text>Controlling Paths of Files Added to Zip</text>
                    <url_asp>http://www.example-code.com/asp/zip_pathWithinZip.asp</url_asp>
                    <url_cs>http://www.example-code.com/csharp/zip_pathWithinZip.asp</url_cs>
                    <url_cpp>http://www.example-code.com/vcpp/zip_pathWithinZip.asp</url_cpp>
                    <url_delphi>http://www.example-code.com/delphi/zip_pathWithinZip.asp</url_delphi>
                    <url_foxpro>http://www.example-code.com/foxpro/zip_pathWithinZip.asp</url_foxpro>
                    <url_java>http://www.example-code.com/java/zip_pathWithinZip.asp</url_java>
                    <url_perl>http://www.example-code.com/perl/zip_pathWithinZip.asp</url_perl>
                    <url_python>http://www.example-code.com/python/zip_pathWithinZip.asp</url_python>
                    <url_ruby>http://www.example-code.com/ruby/zip_pathWithinZip.asp</url_ruby>
                    <url_vb.net>http://www.example-code.com/vbdotnet/zip_pathWithinZip.asp</url_vb.net>
                    <url_vb6>http://www.example-code.com/vb/zip_pathWithinZip.asp</url_vb6>
                    <url_vbscript>http://www.example-code.com/vbscript/zip_pathWithinZip.asp</url_vbscript>
                    <url_android>http://www.example-code.com/android/zip_pathWithinZip.asp</url_android>
                    <url_objc>http://www.example-code.com/objc/zip_pathWithinZip.asp</url_objc>
                    <url_ios>http://www.example-code.com/ios/zip_pathWithinZip.asp</url_ios>
                    <url_phpext>http://www.example-code.com/phpExt/zip_pathWithinZip.asp</url_phpext>
                    <url_powershell>http://www.example-code.com/powershell/zip_pathWithinZip.asp</url_powershell>
                </link>
            </links>
            <links2>
                <link linkType="example">
                    <text>Controlling Paths of Files Added to Zip</text>
                    <url>zip_pathWithinZip.asp</url>
                </link>
            </links2>
            <args2 />
        </property>
        <property cpp="1" dn="1" ax="1" noObjC="1" windowsOnly="1" read="1" write="1" name="AutoRun" axId="101">
            <gType>string</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.)  Optional when creating Windows-based self-extracting EXEs.  This is the name of an executable contained within the to-be-created EXE that will automatically be run after extraction.  (This is typically something like "setup.exe")</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" noObjC="1" windowsOnly="1" read="1" write="1" name="AutoRunParams" axId="102">
            <gType>string</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.)  Command line parameters that get passed to the AutoRun executable.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" noObjC="1" windowsOnly="1" read="1" write="1" name="AutoTemp" axId="103">
            <gType>bool</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.) This option applies to creating Windows-based self-extracting EXEs.  If _TRUE_, the to-be-created EXE will automatically select and create a temporary directory for unzipping.  This property is often used in conjunction with the AutoRun property to create a self-extracting EXE that automatically unzips to a temp directory and runs a setup.exe without interaction with the user.
&lt;p&gt;
Note: To create a self-extracting EXE with no user-interaction, set the following properties to these values:
&lt;blockquote&gt;
ExeSilentProgress  = _FALSE_&lt;br&gt;
ExeNoInterface = _TRUE_&lt;br&gt;
ExeFinishNotifier = _FALSE_
&lt;/blockquote&gt;
&lt;p&gt;The default AutoTemp value is _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="CaseSensitive" axId="104" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>If _TRUE_ then all methods that get or search for zip entries by name will use case-sensitive filename matching.  If _FALSE_ then filename matching will be case insensitive.  Methods affected by this property include GetEntryByName, UnzipMatching, FirstMatchingEntry, etc.&lt;p&gt;
The default value is _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ClearArchiveAttribute" axId="105">
            <gType>bool</gType>
            <descrip>Set this to _TRUE_ to clear the FILE_ATTRIBUTE_ARCHIVE file attribute of each file during a zipping operation.
&lt;p&gt;
The default value is _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="ClearReadOnlyAttr" axId="106">
            <gType>bool</gType>
            <descrip>If _TRUE_, the read-only attribute is automatically cleared when unzipping.  The default value of this property is _FALSE_, which leaves the read-only attribute unchanged when unzipping.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="Comment" axId="107">
            <gType>string</gType>
            <descrip>The global Zip file comment.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="DecryptPassword" axId="108" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>When opening a password-protected or AES encrypted Zip, this is the password to be used for decryption.  Encrypted Zips may be opened without setting a password, but the contents cannot be unzipped without setting this password.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;The SetPassword method has the effect of setting both this property as well as the EncryptPassword property.  The SetPassword method should no longer be used.  It has been replaced by the DecryptPassword and EncryptPassword properties to make it possible to open an encrypted zip and re-write it with a new password.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="DiscardPaths" axId="109">
            <gType>bool</gType>
            <descrip>If _TRUE_, discards all file path information when zipping.  The default value is _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="EncryptKeyLength" axId="110">
            <gType>int</gType>
            <descrip>The encryption key length if AES, Blowfish, Twofish, or WinZip-compatible AES encryption is used. This value must be 128, 192, or 256.  The default value is 128.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="EncryptPassword" axId="111">
            <gType>string</gType>
            <descrip>The password used when writing a password-protected or strong-encrytped Zip.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;The SetPassword method has the effect of setting both this property as well as the DecryptPassword property.  The SetPassword method should no longer be used.  It has been replaced by the DecryptPassword and EncryptPassword properties to make it possible to open an encrypted zip and re-write it with a new password.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="Encryption" axId="112" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>Indicate whether the Zip is to be strong encrypted or not.  Valid values are 0 (not encrypted) or 4 (AES encrypted).     When this property is set to the value 4, WinZip AES compatible encrypted zip archives are produced.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; Prior to Chilkat v9.4.1, other possible values for this property were: 1 (blowfish), 2 (twofish), and 3 (rijndael).   These settings originally provided a way to produce strong encrypted zips prior to when the AES encrypted Zip standard existed.  Using these legacy values (1, 2, or 3) produced encrypted zips that only applications using Chilkat could read.  Chilkat no longer supports these custom modes of encryption.  If using an older version of Chilkat with one of these deprecated encryption modes, make sure to decrypt using the old Chilkat version and re-encrypt using mode 4 (WinZip compatible AES encryption) prior to updating to the new Chilkat version.
&lt;p&gt;&lt;b&gt;Important:&lt;/b&gt;The Encryption and PasswordProtect properties are mutually exclusive.  PasswordProtect corresponds to the older Zip 2.0 encryption, commonly referred to as a "password-protected" zip.  If the PasswordProtect is set to _TRUE_, the Encryption property should be set to 0.  If the Encryption property is set to a non-zero value, then PasswordProtect should be set to _FALSE_.  A zip cannot be both password-protected and strong-encrypted.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" noObjC="1" windowsOnly="1" read="1" write="1" name="ExeDefaultDir" axId="113">
            <gType>string</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.) Specifies the default unzip directory path to appear in the user-interface dialog box when the Windows-based self-extracting EXE is run.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" noObjC="1" windowsOnly="1" read="1" write="1" name="ExeFinishNotifier" axId="114">
            <gType>bool</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.)  If set to _TRUE_, a "Finished" dialog box is displayed when the self-extracting EXE is finished extracting.   The caption, title, and button text of the finish notifier dialog may be customized by calling SetExeConfigParam.  The default value is _FALSE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="ExeIconFile" axId="115" read="1" write="1" ax="1" cpp="1" dn="1" noWinRT="1" noObjC="1" windowsOnly="1">
            <gType>string</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.)  Applies to creating self-extracting EXEs.  This property can be set to a pre-existing icon filename (.ico) that will be embedded within the to-be-created EXE and set as its default icon.
&lt;p&gt;
&lt;b&gt;Note: &lt;/b&gt; This property is only possible for 32-bit applications.  (Meaning that the application that is creating the self-extracting EXE must be a 32-bit application if an ExeIconFile is to be used.)</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" noObjC="1" windowsOnly="1" read="1" write="1" name="ExeNoInterface" axId="116">
            <gType>bool</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.) Applies to creating Windows-based self-extracting EXEs.  When set to _TRUE_, the to-be-created EXE will run without a user-interface.  The default value is _FALSE_.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; The ExeSilentProgress property needs to be set to _TRUE_ for the extract to be truly silent.  
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; If the AutoTemp property = _TRUE_ and there is no AutoRun EXE, and there is no ExeUnzipDir set, then the self-extracting EXE will always display a dialog to get the unzip directory.  The reason is that it makes no sense to silently unzip to an auto-selected (and unknown) temp directory without anything happening afterwards.  
&lt;p&gt;
&lt;b&gt;Important:&lt;/b&gt; If the self-extracting EXE is encrypted, a password dialog will be displayed.  The password dialog may be suppressed if the password is provided on the command line via the &lt;i&gt;-pwd&lt;/i&gt; command-line option.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" noObjC="1" windowsOnly="1" read="1" write="1" name="ExeSilentProgress" axId="117">
            <gType>bool</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.)  Determines whether a progress dialog is displayed when the self-extracting EXE is run.  If ExeNoInterface = _FALSE_ (i.e. there is a main dialog with the ability to select the unzip directory), then the progress dialog is (by default) shown as a progress bar within the main dialog -- and this property has no effect.  If ExeNoInterface = _TRUE_, then a progress-only dialog is displayed if ExeSilentProgress = _FALSE_.  The default value of ExeSilentProgress is _TRUE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" noObjC="1" windowsOnly="1" read="1" write="1" name="ExeTitle" axId="118">
            <gType>string</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.)  Applies to creating Windows-based self-extracting EXEs.  Sets the title of the main user-interface dialog that appears when the self-extracting EXE runs.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" noObjC="1" windowsOnly="1" read="1" write="1" name="ExeUnzipCaption" axId="119">
            <gType>string</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.)  Applies to creating MS Windows-based self-extracting EXEs.  Sets the unzipping caption of the main user-interface dialog that appears when the self-extracting EXE runs.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" noObjC="1" windowsOnly="1" read="1" write="1" name="ExeUnzipDir" axId="120">
            <gType>string</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.) Applies to creating MS Windows self-extracting EXEs.  Stores a pre-defined unzip directory within the self-extracting EXE so that it automatically unzips to this directory without user-intervention. 
&lt;p&gt;
Environment variables may be included if surrounded by percent characters.  For example: %TEMP%.   Environment variables are expanded (i.e. resolved) when the self-extracting EXE runs.
&lt;p&gt;
Note: To create a self-extracting EXE with no user-interaction, set the following properties to these values:
&lt;blockquote&gt;
ExeSilentProgress  = _FALSE_&lt;br&gt;
ExeNoInterface = _TRUE_&lt;br&gt;
ExeFinishNotifier = _FALSE_
&lt;/blockquote&gt;</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" noObjC="1" windowsOnly="1" read="1" write="1" name="ExeWaitForSetup" axId="121">
            <gType>bool</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.)  If _TRUE_, the self-extracting EXE will wait for the AutoRun EXE to complete before it exits.  If _FALSE_, the self-extracting EXE dialog (or process if running silently with no user-interface), is allowed to exit prior to the completion of the AutoRun EXE.  The default value is _TRUE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" noObjC="1" windowsOnly="1" read="1" write="1" name="ExeXmlConfig" axId="122">
            <gType>string</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.)   Allows for an XML config document to be used to specify all possible options for self-extracting EXEs.  This property is a string containing the XML config document.
&lt;p&gt;
The XML should have this format:
&lt;pre&gt;
_LT_SfxConfig_GT_
	_LT_ErrPwdTitle_GT_Title for incorrect password dialog_LT_/ErrPwdTitle_GT_
	_LT_ErrPwdCaption_GT_Caption for incorrect password dialog_LT_/ErrPwdCaption_GT_
	_LT_FinOkBtn_GT_Text on finish notifier button_LT_/FinOkBtn_GT_
	_LT_PwdOkBtn_GT_Text on password challenge dialog's _QUOTE_OK_QUOTE_ button._LT_/PwdOkBtn_GT_
	_LT_PwdCancelBtn_GT_Text on password challenge dialog's Cancel button._LT_/PwdCancelBtn_GT_
	_LT_ErrInvalidPassword_GT_Incorrect password error message._LT_/ErrInvalidPassword_GT_
	_LT_MainUnzipBtn_GT_Text on main dialog's unzip button_LT_/MainUnzipBtn_GT_
	_LT_MainCloseBtn_GT_Text on main dialog's quit/exit button_LT_/MainCloseBtn_GT_
	_LT_MainBrowseBtn_GT_Text on main dialog's browse-for-directory button._LT_/MainBrowseBtn_GT_
	_LT_MainUnzipLabel_GT_Caption displayed in main dialog._LT_/MainUnzipLabel_GT_
	_LT_AutoTemp_GT__QUOTE_1|0 (Maps to the AutoTemp property)_QUOTE__LT_/AutoTemp_GT_
	_LT_Cleanup_GT__QUOTE_1|0 (Deletes extracted files after the SetupExe is run.)_QUOTE__LT_/Cleanup_GT_
	_LT_Debug_GT__QUOTE_1|0  (If 1, the EXE will not extract any files.)_QUOTE__LT_/Debug_GT_
	_LT_Verbose_GT__QUOTE_1|0 (If 1, then verbose information is sent to the log.)_QUOTE__LT_/Verbose_GT_
	_LT_ShowFin_GT__QUOTE_1|0_QUOTE_ Maps to ExeFinishNotifier property._LT_/ShowFin_GT_
	_LT_ShowMain_GT__QUOTE_1|0_QUOTE_ Maps to ExeNoInterface property._LT_/ShowMain_GT_
	_LT_ShowProgress_GT__QUOTE_1|0_QUOTE_ Maps to ExeSilentProgress property._LT_/ShowProgress_GT_
	_LT_WaitForSetup_GT__QUOTE_1|0_QUOTE_ Maps to ExeWaitForSetup property._LT_/WaitForSetup_GT_
	_LT_Encryption_GT__QUOTE_1|0_QUOTE_  1=Yes, 0=No_LT_/Encryption_GT_
	_LT_KeyLength_GT_128|192|256_LT_/KeyLength_GT_
	_LT_SetupExe_GT_EXE to run after extracting. (Maps to AutoRun property)_LT_/SetupExe_GT_
	_LT_UnzipDir_GT_Pre-defined unzip directory. (Maps to ExeUnzipDir property)_GT_
	_LT_DefaultDir_GT_Default unzip directory to appear in the main dialog. 
                                                (Maps to ExeDefaultDir property)_LT_/DefaultDir_GT_
	_LT_IconFile_GT_Icon file to be used (Maps to ExeIconFile property)_LT_/IconFile_GT_
	_LT_Url_GT_Maps to ExeSourceUrl property._LT_/Url_GT_
	_LT_MainTitle_GT_Maps to ExeTitle property._LT_/MainTitle_GT_
	_LT_MainCaption_GT_Maps to ExeUnzipCaption property._LT_/MainCaption_GT_
	_LT_FinTitle_GT_Title for the finish notifier dialog._LT_/FinTitle_GT_
	_LT_FinCaption_GT_Caption for the finish notifier dialog._LT_/FinTitle_GT_
	_LT_ProgressTitle_GT_Title for the progress dialog._LT_/ProgressTitle_GT_
	_LT_ProgressCaption_GT_Caption for the progress dialog._LT_/ProgressCaption_GT_
	_LT_PwTitle_GT_Title for the password challenge dialog._LT_/PwTitle_GT_
	_LT_PwCaption_GT_Caption for the password challenge dialog._LT_/PwCaption_GT_
_LT_/SfxConfig_GT_
&lt;/pre&gt;
&lt;p&gt;A self-extracting EXE can be run from the command line with the "-log {logFilePath}" option to create a log with information for debugging.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="FileCount" axId="123">
            <gType>int</gType>
            <descrip>The number of files (excluding directories) contained within the Zip.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="FileName" axId="124">
            <gType>string</gType>
            <descrip>The path (absolute or relative) of the Zip archive.  This is the path of the file that is created or overwritten when the zip is saved.</descrip>
            <args2 />
            <links2 />
        </property>
        <property write="0" name="HasZipFormatErrors" axId="125" read="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>_TRUE_ if the opened zip contained file format errors (that were not severe enough to prevent the zip from being opened and parsed).</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="HeartbeatMs" axId="126" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>int</gType>
            <descrip>The number of milliseconds between each AbortCheck event callback.  The AbortCheck callback allows an application to abort any method call prior to completion.  If HeartbeatMs is 0 (the default), no AbortCheck event callbacks will fire.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="IgnoreAccessDenied" axId="127">
            <gType>bool</gType>
            <descrip>If _TRUE_, then files that cannot be read due to "access denied" (i.e. a file permission error) will be ignored and the call to WriteZip, WriteZipAndClose, WriteExe, etc. will return a success status.  If _FALSE_, then the "access denied" filesystem errors are not ignored and any occurrence will cause the zip writing to fail.  The default value is _TRUE_.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="0" name="NumEntries" axId="128">
            <gType>int</gType>
            <descrip>The number of entries in the Zip, including both files and directories.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="OemCodePage" axId="129">
            <gType>int</gType>
            <descrip>Sets the OEM code page to be used for Unicode filenames.  This property defaults to the OEM code page of the computer.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="OverwriteExisting" axId="130">
            <gType>bool</gType>
            <descrip>Determines whether existing files are overwritten during unzipping.  The default is _TRUE_, which means that already-existing files will be overwritten.  Set this property = _FALSE_ to prevent existing files from being overwritten when unzipping.</descrip>
            <args2 />
            <links2 />
        </property>
        <property name="PasswordProtect" axId="131" read="1" write="1" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>_TRUE_ if the Zip should be password-protected using older  Zip 2.0 encryption, commonly referred to as "password-protection".
&lt;p&gt;
This property is set when a zip archive is opened by any of the Open* methods, such as OpenZip, OpenFromMemory, etc.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="PathPrefix" axId="132">
            <gType>string</gType>
            <descrip>A prefix that is added to each filename when zipping.  One might set the PathPrefix to "subdir/" so that files are unzipped to a specified subdirectory when unzipping.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>zip_directory_in_zip.asp</url>
                    <text>How to Add a Directory Path to Files when Zipping</text>
                </link>
            </links2>
        </property>
        <property name="PercentDoneScale" read="1" write="1" ax="1" cpp="1" dn="1" axId="198">
            <gType>int</gType>
            <descrip>This property is only valid in programming environment and languages that allow for event callbacks.
&lt;p&gt;
Sets the value to be defined as 100% complete for the purpose of PercentDone event callbacks.  The defaut value of 100 means that at most 100 event PercentDone callbacks will occur in a method that (1) is event enabled and (2) is such that it is possible to measure progress as a percentage completed.   This property may be set to larger numbers to get more fine-grained PercentDone callbacks.  For example, setting this property equal to 1000 will provide callbacks with .1 percent granularity.  For example, a value of 453 would indicate 45.3% competed.  This property is clamped to a minimum value of 10, and a maximum value of 100000.</descrip>
            <iversion>9.5.0.49</iversion>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="TempDir" axId="134">
            <gType>string</gType>
            <descrip>The temporary directory to use when unzipping files.  When running in ASP or ASP.NET, the default value of TempDir is set to the directory where the .zip is being written.  Set this property to override the default.</descrip>
            <args2 />
            <links2 />
        </property>
        <property cpp="1" dn="1" ax="1" read="1" write="1" name="TextFlag" axId="135">
            <gType>bool</gType>
            <descrip>If set to _TRUE_, the component will set the "text flag" for each file having these filename extensions: .txt, .xml, .htm, and .html.   It will also preserve the "text flag" for existing zips that are opened and rewritten.  By default, this property is set to _FALSE_. 
&lt;p&gt;
It is generally not necessary to set the text flag for a zip entry.</descrip>
            <args2 />
            <links2 />
        </property>
        <property read="1" write="1" name="Zipx" axId="136" ax="1" cpp="1" dn="1">
            <gType>bool</gType>
            <descrip>Starting in v9.4.1, Chilkat Zip will automatically unzip ZIPX files using any of the following compression methods: BZIP2, PPMd, LZMA, and Deflate64 ("Deflate64" is a trademark of PKWare, Inc.)&lt;p&gt;
This property, however, controls whether or not a ZipX is automatically produced where the best compression algorithm for each file is automatically chosen based on file type.  This property is for writing zip archives.  It does not apply to when unzipping ZIPX archives, Chilkat Zip automatically handles the various compression algorithms when unzipping.</descrip>
            <args2 />
            <links2 />
        </property>
        <property read="1" write="1" name="ZipxDefaultAlg" axId="137" ax="1" cpp="1" dn="1">
            <gType>string</gType>
            <descrip>The default compression algorithm to be used when creating ZIPX archives.  The default value is "deflate".  Other possible values are "ppmd", "lzma", "bzip2" and "deflate64".   When writing a ZIPX archive, if the file extension does not indicate an obvious choice for the appropriate compression algorithm, then the ZipxDefaultAlg is used.</descrip>
            <args2 />
            <links2 />
        </property>
    </properties>
    <methods>
        <method name="AddEmbedded" axId="138" ax="1" cpp="1" dn="1" noObjC="1" noWinRT="1" windowsOnly="1" status="1">
            <gType>bool</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>exeFilename</argName>
                    <objcName>exeFilename</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>resourceName</argName>
                    <objcName>resourceName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>zipFilename</argName>
                    <objcName>zipFilename</objcName>
                </arg>
            </args>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.)  Embeds a Zip file into an EXE as a custom resource.  This resource can be opened by the EXE containing it at runtime by using the OpenMyEmbedded method.
&lt;p&gt;
Important: In Visual Studio 2010, the linker has a property "Randomized Base Address" (Project Properties/Linker) that defaults to "YES", but the default is "NO" in Visual Studio 2008.  (The property is nonexistent in Visual Studio 2005 and earlier.) This enables ASLR ( Address Space Layout Randomization) in Vista and up, and prevents the proper code injection in the executable address space.  To successfully embed a .zip as a resource within an EXE, this Visual Studio property must be set to "NO".</descrip>
            <args2>
                <arg name="exeFilename" type="string" objcName="exeFilename" />
                <arg name="resourceName" type="string" objcName="resourceName" />
                <arg name="zipFilename" type="string" objcName="zipFilename" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="AddNoCompressExtension" axId="139">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fileExtension</argName>
                    <objcName>fileExtension</objcName>
                </arg>
            </args>
            <descrip>Attempting to compress already-compressed data is usually a waste of CPU cycles with little or no benefit.  In fact, it is possible that attempting to compress already-compressed data results in a slightly increased size.  The Zip file format allows for files to be "stored" rather than compressed.  This allows the file data to be streamed directly into a .zip without compression.
&lt;p&gt;
An instance of the Zip object has an internal list of "no compress" extensions.  A filename with a "no compress" extension is "stored" rather than compressed.  Additional "no compress" extensions may be added by calling this method (once per file extension).  You should pass the file extension, such as ".xyz" in ARG1.  
&lt;p&gt;
"no compress" extensions may be removed by calling RemoveNoCompressExtension.
&lt;p&gt;
The default "no compress" extensions are: .zip, .gif, .jpg, .gz, .rar, .jar, .tgz, .bz2, .z, .rpm, .msi, .png</descrip>
            <args2>
                <arg name="fileExtension" type="string" objcName="fileExtension" />
            </args2>
            <links2 />
        </method>
        <method name="AppendBase64" axId="140" ax="1" cpp="1" dn="1">
            <gType>ZipEntry</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fileName</argName>
                    <objcName>pathInZip</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encodedCompressedData</argName>
                    <objcName>data</objcName>
                </arg>
            </args>
            <descrip>Creates a new Zip entry and initializes it with already-compressed data that is Base64 encoded.  (The ZipEntry.CopyBase64 method can be used to retrieve the compressed data in Base64 format.)
&lt;p&gt;
Note 1: This method only updates the zip object.  To update (rewrite) a zip file, either the WriteZip or WriteZipAndClose method would need to be called.
&lt;p&gt;
Note 2: It is assumed that the compressed data is unencrypted deflated data.  (Meaning data compressed using the "deflate" compression algorithm.)</descrip>
            <args2>
                <arg name="fileName" type="string" objcName="pathInZip" />
                <arg name="encodedCompressedData" type="string" objcName="data" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="AppendCompressed" axId="141">
            <gType>ZipEntry</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filename</argName>
                    <objcName>pathInZip</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>data</objcName>
                </arg>
            </args>
            <descrip>Append memory data that is already Zip-compressed to the Zip object. The ZipEntry object containing the compressed data is returned.  Note: This method appends the compressed data for a single zip entry.  To load an entire in-memory .zip, call OpenFromMemory instead.
&lt;p&gt;
Note 1: This method only updates the zip object.  To update (rewrite) a zip file, either the WriteZip or WriteZipAndClose method would need to be called.
&lt;p&gt;
Note 2: It is assumed that the compressed data is unencrypted deflated data.  (Meaning data compressed using the "deflate" compression algorithm.)</descrip>
            <args2>
                <arg name="filename" type="string" objcName="pathInZip" />
                <arg name="inData" type="bytes" objcName="data" />
            </args2>
            <links2 />
        </method>
        <method name="AppendData" axId="142" ax="1" cpp="1" dn="1">
            <gType>ZipEntry</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fileName</argName>
                    <objcName>pathInZip</objcName>
                </arg>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>data</objcName>
                </arg>
            </args>
            <descrip>Appends in-memory data as a new entry to a Zip object.  The ZipEntry object containing the data is returned.
&lt;p&gt;
Note: This method only updates the zip object.  To update (rewrite) a zip file, either the WriteZip or WriteZipAndClose method would need to be called.</descrip>
            <args2>
                <arg name="fileName" type="string" objcName="pathInZip" />
                <arg name="inData" type="bytes" objcName="data" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>zip_create_in_memory.asp</url>
                    <text>Create a Zip Entirely in Memory</text>
                </link>
                <link linkType="external" lang="cpp">
                    <url>http://cknotes.com/c-zip-example-to-append-in-memory-binary-and-string-data/</url>
                    <text>C++ Zip Example to Append In-Memory Binary and String Data</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="AppendFiles" axId="143">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filePattern</argName>
                    <objcName>filePattern</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>recurse</argName>
                    <objcName>recurse</objcName>
                </arg>
            </args>
            <descrip>Appends one or more files to the Zip object. The filePattern can use the "*" wildcard character for 0 or more of any characterSet recurse equal to True to recursively add all subdirectories, or False to only add files in the current directory.
&lt;p&gt;
Note: This method only updates the zip object.  To update (rewrite) a zip file, either the WriteZip or WriteZipAndClose method would need to be called.</descrip>
            <args2>
                <arg name="filePattern" type="string" objcName="filePattern" />
                <arg name="recurse" type="bool" objcName="recurse" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>zip_pathTutorial.asp</url>
                    <text>Controlling paths within a Zip</text>
                </link>
            </links2>
        </method>
        <method name="AppendFilesEx" axId="144" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>filePattern</argName>
                    <objcName>filePattern</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>recurse</argName>
                    <objcName>recurse</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>saveExtraPath</argName>
                    <objcName>saveExtraPath</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>archiveOnly</argName>
                    <objcName>archiveOnly</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>includeHidden</argName>
                    <objcName>includeHidden</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>includeSystem</argName>
                    <objcName>includeSystem</objcName>
                </arg>
            </args>
            <descrip>Appends one or more files to the Zip object. The ARG1 can use the "*" and "?" wildcard characters where "*" means 0 or more of any character and "?" means any single character.  The ARG2 controls whether directories are recursively traversed.  Set ARG2 equal to _TRUE_ to append files and subdirectories in the directory tree.  Set ARG2 equal to _FALSE_ to add files only from the indicated directory.
&lt;p&gt;
The ARG3 only applies when the ARG1 is an absolute path pattern, such as "C:/temp/abc/*.txt".  If ARG3 is _TRUE_, then the absolute path will be included in the zip entry filenames as relative paths.  For example, "temp/abc/xyz.txt".   
&lt;p&gt;The ARG4, ARG4, and ARG5 flags only apply when on the Windows operating system.  These flags control whether files with the Archive, Hidden, or System attributes are included.
&lt;p&gt;
Note: This method does not write the zip archive.  It simply adds references to the files that will be included in the .zip when the WriteZip or WriteZipAndClose methods are eventually called.  Files and/or data may be added to the zip object by calling any combination of the Append* methods before finally writing the zip via one of the Write* methods.</descrip>
            <args2>
                <arg name="filePattern" type="string" objcName="filePattern" />
                <arg name="recurse" type="bool" objcName="recurse" />
                <arg name="saveExtraPath" type="bool" objcName="saveExtraPath" />
                <arg name="archiveOnly" type="bool" objcName="archiveOnly" />
                <arg name="includeHidden" type="bool" objcName="includeHidden" />
                <arg name="includeSystem" type="bool" objcName="includeSystem" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="AppendHex" axId="145">
            <gType>ZipEntry</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fileName</argName>
                    <objcName>pathInZip</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>encodedCompressedData</argName>
                    <objcName>data</objcName>
                </arg>
            </args>
            <descrip>Creates a new Zip entry and initializes it with already-compressed data that is hexidecimal encoded. (The ZipEntry.CopyHex method can be used to retrieve the compressed data in Hex format.)
&lt;p&gt;
Note 1: This method only updates the zip object.  To update (rewrite) a zip file, either the WriteZip or WriteZipAndClose method would need to be called.
&lt;p&gt;
Note 2: It is assumed that the compressed data is unencrypted deflated data.  (Meaning data compressed using the "deflate" compression algorithm.)</descrip>
            <args2>
                <arg name="fileName" type="string" objcName="pathInZip" />
                <arg name="encodedCompressedData" type="string" objcName="data" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="AppendMultiple" axId="146">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>StringArray</axType>
                    <dnType>StringArray</dnType>
                    <cppType>CkStringArray &amp;</cppType>
                    <argName>fileSpecs</argName>
                    <objcName>fileSpecs</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>recurse</argName>
                    <objcName>recurse</objcName>
                </arg>
            </args>
            <descrip>This method is the same as calling AppendFiles multiple times - once for each file pattern in fileSpecs
&lt;p&gt;
Note: This method only updates the zip object.  To update (rewrite) a zip file, either the WriteZip or WriteZipAndClose method would need to be called.</descrip>
            <args2>
                <arg name="fileSpecs" type="StringArray" objcName="fileSpecs" />
                <arg name="recurse" type="bool" objcName="recurse" />
            </args2>
            <links2 />
        </method>
        <method name="AppendNew" axId="147" ax="1" cpp="1" dn="1">
            <gType>ZipEntry</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fileName</argName>
                    <objcName>pathInZip</objcName>
                </arg>
            </args>
            <descrip>Appends a new and empty entry to the Zip object and returns the ZipEntry object.  Data can be appended to the entry by calling ZipEntry.AppendData.
&lt;p&gt;&lt;b&gt;Important:&lt;/b&gt; To append an already-existing file, call the AppendOneFileOrDir method.  The AppendNew method inserts a new and empty file entry within the Zip object.  The purpose of AppendNew is to either create an empty file within the Zip, or to create a new file entry which can then be filled with data by calling the entry's AppendData method.
&lt;p&gt;
Note: This method only updates the zip object.  To update (rewrite) a zip file, either the WriteZip or WriteZipAndClose method would need to be called.</descrip>
            <args2>
                <arg name="fileName" type="string" objcName="pathInZip" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="AppendNewDir" axId="148">
            <gType>ZipEntry</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dirName</argName>
                    <objcName>pathInZip</objcName>
                </arg>
            </args>
            <descrip>Adds an entry to the zip so that when it unzips, a new directory (with no files) is created.  The directory does not need to exist on the local filesystem when calling this method.  The ARG1 is simply a string that is used as the directory path for the entry added to the zip.  The zip entry object is returned.
&lt;p&gt;
Note: This method only updates the zip object.  To update (rewrite) a zip file, either the WriteZip or WriteZipAndClose method would need to be called.</descrip>
            <args2>
                <arg name="dirName" type="string" objcName="pathInZip" />
            </args2>
            <links2 />
        </method>
        <method name="AppendOneFileOrDir" axId="149" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fileOrDirPath</argName>
                    <objcName>path</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>saveExtraPath</argName>
                    <objcName>saveExtraPath</objcName>
                </arg>
            </args>
            <descrip>Appends a single file or directory to the Zip object.  The ARG2 applies when ARG1 is an absolute (non-relative) path.  If ARG2 is _TRUE_, then the absolute path is made relative and saved in the zip.  For example, if the ARG1 is "C:/temp/xyz/test.txt" and ARG2 is _TRUE_, then the path in the zip will be "./temp/xyz/test.txt".   If however, ARG1 contains a relative path, then ARG2 has no effect.</descrip>
            <args2>
                <arg name="fileOrDirPath" type="string" objcName="path" />
                <arg name="saveExtraPath" type="bool" objcName="saveExtraPath" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>zip_set_entry_filepath.asp</url>
                    <text>Set Entry Filepath (in output Zip) when Zipping</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="AppendString" axId="150">
            <gType>ZipEntry</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>internalZipFilepath</argName>
                    <objcName>pathInZip</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>textData</argName>
                    <objcName>str</objcName>
                </arg>
            </args>
            <descrip>Adds an in-memory string to the Zip object. The ARG2 argument is converted to the ANSI charset before being added to the Zip. If the Zip were written to disk by calling WriteZip, and later unzipped, the entry would unzip to an ANSI text file.
&lt;p&gt;
Note: This method only updates the zip object.  To update (rewrite) a zip file, either the WriteZip or WriteZipAndClose method would need to be called.</descrip>
            <args2>
                <arg name="internalZipFilepath" type="string" objcName="pathInZip" />
                <arg name="textData" type="string" objcName="str" />
            </args2>
            <links2 />
        </method>
        <method name="AppendString2" axId="151" ax="1" cpp="1" dn="1">
            <gType>ZipEntry</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>internalZipFilepath</argName>
                    <objcName>pathInZip</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>textData</argName>
                    <objcName>str</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>charset</argName>
                    <objcName>charset</objcName>
                </arg>
            </args>
            <descrip>Same as AppendString, but allows the charset to be specified.  The ARG2 is converted to ARG3 before being added to the zip.  The ARG1 is the path of the file that will be stored within the zip.
&lt;p&gt;
Note: This method only updates the zip object.  To update (rewrite) a zip file, either the WriteZip or WriteZipAndClose method would need to be called.</descrip>
            <args2>
                <arg name="internalZipFilepath" type="string" objcName="pathInZip" />
                <arg name="textData" type="string" objcName="str" />
                <arg name="charset" type="string" objcName="charset" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>zip_create_in_memory.asp</url>
                    <text>Create a Zip Entirely in Memory</text>
                </link>
                <link linkType="external" lang="cpp">
                    <url>http://cknotes.com/c-zip-example-to-append-in-memory-binary-and-string-data/</url>
                    <text>C++ Zip Example to Append In-Memory Binary and String Data</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="AppendZip" axId="152">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>zipFileName</argName>
                    <objcName>zipPath</objcName>
                </arg>
            </args>
            <descrip>Adds the contents of another existing Zip file to this Zip object.</descrip>
            <args2>
                <arg name="zipFileName" type="string" objcName="zipPath" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="CloseZip" axId="153">
            <gType>void</gType>
            <args />
            <descrip>Closes an open Zip file.  This is identical to calling NewZip.  (NewZip closes the current Zip file, if open, and initializes the Zip object to be empty. Zip files are only created when WriteZip is called.)</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="DeleteEntry" axId="154">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>ZipEntry</axType>
                    <dnType>ZipEntry</dnType>
                    <cppType>CkZipEntry &amp;</cppType>
                    <argName>entry</argName>
                    <objcName>entry</objcName>
                </arg>
            </args>
            <descrip>Removes a Zip entry from the calling Zip object.</descrip>
            <args2>
                <arg name="entry" type="ZipEntry" objcName="entry" />
            </args2>
            <links2 />
        </method>
        <method name="ExcludeDir" axId="155" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dirName</argName>
                    <objcName>dirName</objcName>
                </arg>
            </args>
            <descrip>Adds a directory name to be excluded when AppendFiles is called to add an entire directory tree.  All directories having a name equal to an excluded directory will not be included when AppendFiles (or AppendFileEx) is called.  Multiple directories can be excluded by calling ExcludeDir multiple times.   The name comparison is case-insensitive.</descrip>
            <args2>
                <arg name="dirName" type="string" objcName="dirName" />
            </args2>
            <links2 />
        </method>
        <method name="Extract" axId="156" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dirPath</argName>
                    <objcName>dirPath</objcName>
                </arg>
            </args>
            <descrip>Unzip all the files into the specified directory. Subdirectories are automatically created as needed.</descrip>
            <args2>
                <arg name="dirPath" type="string" objcName="dirPath" />
            </args2>
            <links2 />
        </method>
        <method name="ExtractExe" axId="197" ax="1" cpp="1" dn="1" events="1" windowsOnly="1" status="1">
            <gType>bool</gType>
            <descrip>Extracts files from a Chilkat produced self-extracting EXE into the specified directory. Subdirectories are automatically created as needed.  If the self-extracting EXE is encrypted, be sure to set the DecryptPassword property prior to calling this method.</descrip>
            <args>
                <arg>
                    <argName>exePath</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>exePath</objcName>
                </arg>
                <arg>
                    <argName>dirPath</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>dirPath</objcName>
                </arg>
            </args>
            <iversion>9.5.0.44</iversion>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <args2>
                <arg name="exePath" type="string" objcName="exePath" />
                <arg name="dirPath" type="string" objcName="dirPath" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="0" events="1" status="1" name="ExtractInto">
            <gType>bool</gType>
            <args>
                <arg>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dirPath</argName>
                    <objcName>dirPath</objcName>
                </arg>
            </args>
            <descrip>Unzips all the files in a Zip into a single directory regardless of the path stored in the Zip</descrip>
            <args2>
                <arg name="dirPath" type="string" objcName="dirPath" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="0" events="1" status="1" name="ExtractMatching">
            <gType>bool</gType>
            <args>
                <arg>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dirPath</argName>
                    <objcName>dirPath</objcName>
                </arg>
                <arg>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pattern</argName>
                    <objcName>pattern</objcName>
                </arg>
            </args>
            <descrip>Unzip all files matching a wildcard pattern.</descrip>
            <args2>
                <arg name="dirPath" type="string" objcName="dirPath" />
                <arg name="pattern" type="string" objcName="pattern" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="0" events="1" status="1" name="ExtractNewer">
            <gType>bool</gType>
            <args>
                <arg>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dirPath</argName>
                    <objcName>dirPath</objcName>
                </arg>
            </args>
            <descrip>Extracts only the files that have more recent last-modified-times than the files on disk. This allows you to easily refresh only the files that have been updated.</descrip>
            <args2>
                <arg name="dirPath" type="string" objcName="dirPath" />
            </args2>
            <links2 />
        </method>
        <method name="ExtractOne" axId="201" cpp="1" dn="1" events="1" deprecated="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <dnType>ZipEntry</dnType>
                    <cppType>CkZipEntry &amp;</cppType>
                    <argName>entry</argName>
                    <objcName>entry</objcName>
                </arg>
                <arg>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dirPath</argName>
                    <objcName>dirPath</objcName>
                </arg>
            </args>
            <descrip>Identical to calling ZipEntry.Extract.  This method is deprecated and the Extract method of the zip entry should be called instead.</descrip>
            <args2>
                <arg name="entry" type="ZipEntry" objcName="entry" />
                <arg name="dirPath" type="string" objcName="dirPath" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="FirstEntry" axId="157">
            <gType>ZipEntry</gType>
            <args />
            <descrip>Return the first entry in the Zip.  Call ZipEntry.NextEntry to iterate over the entries in a Zip until a NULL is returned.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="FirstMatchingEntry" axId="158">
            <gType>ZipEntry</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pattern</argName>
                    <objcName>pattern</objcName>
                </arg>
            </args>
            <descrip>Returns the first entry having a filename matching a pattern.  The "*" characters matches 0 or more of any character.  The full filename, including path, is used when matching against the pattern. A NULL is returned if nothing matches.</descrip>
            <links2>
                <link linkType="example">
                    <url>zip_IterateMatching.asp</url>
                    <text>Iterate over Matching Filenames</text>
                </link>
            </links2>
            <args2>
                <arg name="pattern" type="string" objcName="pattern" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetDirectoryAsXML" axId="159" outArgName="outXml">
            <gType>string</gType>
            <args>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outXml</argName>
                    <objcName>outXml</objcName>
                </arg>
            </args>
            <descrip>Return the contents of the Zip file directory in an XML formatted string</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetEntryByID" axId="160">
            <gType>ZipEntry</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>entryID</argName>
                    <objcName>entryID</objcName>
                </arg>
            </args>
            <descrip>Retrieves a ZipEntry by ID. Chilkat Zip.NET automatically assigns a unique ID to each ZipEntry in the Zip. This feature makes it easy to associate an item in a UI control with a ZipEntry.</descrip>
            <args2>
                <arg name="entryID" type="int" objcName="entryID" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetEntryByIndex" axId="161">
            <gType>ZipEntry</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>index</argName>
                    <objcName>index</objcName>
                </arg>
            </args>
            <descrip>Retrieves a ZipEntry by index. The first entry is at index 0. This will return directory entries as well as files.</descrip>
            <args2>
                <arg name="index" type="int" objcName="index" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="GetEntryByName" axId="162">
            <gType>ZipEntry</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>entryName</argName>
                    <objcName>entryName</objcName>
                </arg>
            </args>
            <descrip>Returns a ZipEntry by filename.  If a full or partial path is part of the filename, this must be included in the filename parameter.</descrip>
            <args2>
                <arg name="entryName" type="string" objcName="entryName" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>zip_openFromMemory.asp</url>
                    <text>Download a Zip from a URL and OpenFromMemory. (No .zip fie is created)</text>
                </link>
                <link linkType="example">
                    <url>zip_set_entry_filepath.asp</url>
                    <text>Set Entry Filepath (in output Zip) when Zipping</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" name="GetExclusions" axId="163">
            <gType>StringArray</gType>
            <args />
            <descrip>Returns the current collection of exclusion patterns that have been set by SetExclusions.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" windowsOnly="1" noObjC="1" name="GetExeConfigParam" axId="164" outArgName="outStr">
            <gType>string</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>name</argName>
                    <objcName>name</objcName>
                </arg>
                <arg>
                    <cppType>CkString &amp;</cppType>
                    <argName>outStr</argName>
                    <objcName>outStr</objcName>
                </arg>
            </args>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.)  Gets the value of an EXE config param as described in the ExeXmlConfig property.</descrip>
            <args2>
                <arg name="name" type="string" objcName="name" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="InsertNew" axId="165">
            <gType>ZipEntry</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fileName</argName>
                    <objcName>pathInZip</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>beforeIndex</argName>
                    <objcName>beforeIndex</objcName>
                </arg>
            </args>
            <descrip>Inserts a new and empty entry into the Zip object. To insert at the beginning of the Zip, beforeIndex should be 0. The ZipEntry's FileName property is initialized to fileName parameter.</descrip>
            <args2>
                <arg name="fileName" type="string" objcName="pathInZip" />
                <arg name="beforeIndex" type="int" objcName="beforeIndex" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsNoCompressExtension" axId="166">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fileExtension</argName>
                    <objcName>fileExtension</objcName>
                </arg>
            </args>
            <descrip>Returns _TRUE_ if the ARG1 is contained in the set of "no compress" extensions, otherwise returns _FALSE_.  (See the documentation for the AddNoCompressExtension method.)   The ARG1 may be  passed with or without the ".".  For example, both ".jpg" and "jpg" are acceptable.</descrip>
            <args2>
                <arg name="fileExtension" type="string" objcName="fileExtension" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsPasswordProtected" axId="167">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>zipFilename</argName>
                    <objcName>zipPath</objcName>
                </arg>
            </args>
            <descrip>Return True if a Zip file is password protected</descrip>
            <args2>
                <arg name="zipFilename" type="string" objcName="zipPath" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="IsUnlocked" axId="168">
            <gType>bool</gType>
            <args />
            <descrip>Returns True if the class is already unlocked, otherwise returns False.</descrip>
            <args2 />
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="NewZip" axId="169">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>zipFilePath</argName>
                    <objcName>zipPath</objcName>
                </arg>
            </args>
            <descrip>Clears and initializes the contents of the Zip object.  If a Zip file was open, it is closed and all entries are removed from the object. The FileName property is set to the ARG1 argument.</descrip>
            <links2>
                <link linkType="example">
                    <url>zip_api_concepts.asp</url>
                    <text>Chilkat Zip API Concepts</text>
                </link>
            </links2>
            <args2>
                <arg name="zipFilePath" type="string" objcName="zipPath" />
            </args2>
        </method>
        <method name="OpenEmbedded" axId="170" ax="1" cpp="1" dn="1" noObjC="1" noWinRT="1" windowsOnly="1" status="1">
            <gType>bool</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>exeFilename</argName>
                    <objcName>exeFilename</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>resourceName</argName>
                    <objcName>resourceName</objcName>
                </arg>
            </args>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.)  Opens a Zip embedded in an MS Windows EXE</descrip>
            <args2>
                <arg name="exeFilename" type="string" objcName="exeFilename" />
                <arg name="resourceName" type="string" objcName="resourceName" />
            </args2>
            <links2 />
        </method>
        <method name="OpenFromByteData" axId="171" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>byteData</argName>
                    <objcName>byteData</objcName>
                </arg>
            </args>
            <descrip>Same as OpenFromMemory.
&lt;p&gt;
When a zip is opened, the PasswordProtect and Encryption properties will be appropriately set.  If the zip is password protected (i.e. uses older Zip 2.0 encrypion), then the PasswordProtect property will be set to _TRUE_.  If the zip is strong encrypted, the Encryption property will be set to a value 1 through 4, where 4 indicates WinZip compatible AES encryption.</descrip>
            <args2>
                <arg name="byteData" type="bytes" objcName="byteData" />
            </args2>
            <links2 />
        </method>
        <method name="OpenFromMemory" axId="172" ax="1" cpp="1" dn="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>bytes</axType>
                    <dnType>bytes</dnType>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>inData</argName>
                    <objcName>inData</objcName>
                </arg>
            </args>
            <descrip>Open a Zip that is completely in-memory.  This allows for Zip files to be opened from non-filesystem sources, such as a database.
&lt;p&gt;
When a zip is opened, the PasswordProtect and Encryption properties will be appropriately set.  If the zip is password protected (i.e. uses older Zip 2.0 encrypion), then the PasswordProtect property will be set to _TRUE_.  If the zip is strong encrypted, the Encryption property will be set to a value 1 through 4, where 4 indicates WinZip compatible AES encryption.</descrip>
            <args2>
                <arg name="inData" type="bytes" objcName="inData" />
            </args2>
            <links2>
                <link linkType="example">
                    <url>zip_openFromMemory.asp</url>
                    <text>Download a Zip from a URL and OpenFromMemory. (No .zip fie is created)</text>
                </link>
            </links2>
        </method>
        <method name="OpenMyEmbedded" axId="174" ax="1" cpp="1" dn="1" noWinRT="1" noObjC="1" windowsOnly="1" status="1">
            <gType>bool</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>resourceName</argName>
                    <objcName>resourceName</objcName>
                </arg>
            </args>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.)  Opens a Zip embedded within the caller's MS Windows EXE.</descrip>
            <args2>
                <arg name="resourceName" type="string" objcName="resourceName" />
            </args2>
            <links2 />
        </method>
        <method name="OpenZip" axId="175" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>ZipFileName</argName>
                    <objcName>zipPath</objcName>
                </arg>
            </args>
            <descrip>Opens a Zip archive.  Encrypted and password-protected zips may be opened without providing the password, but their contents may not be unzipped unless the correct password is provided via the DecryptPassword proprety, or the SetPassword method.
&lt;p&gt;
When a zip is opened, the PasswordProtect and Encryption properties will be appropriately set.  If the zip is password protected (i.e. uses older Zip 2.0 encrypion), then the PasswordProtect property will be set to _TRUE_.  If the zip is strong encrypted, the Encryption property will be set to a value 1 through 4, where 4 indicates WinZip compatible AES encryption.</descrip>
            <args2>
                <arg name="zipPath" type="string" objcName="zipPath" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" status="1" name="QuickAppend" axId="176">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>ZipFileName</argName>
                    <objcName>zipPath</objcName>
                </arg>
            </args>
            <descrip>Efficiently appends additional files to an existing zip archive.  QuickAppend leaves all entries in the existing .zip untouched. It operates by appending new files and updating the internal "central directory" of the zip archive.</descrip>
            <links2>
                <link linkType="example">
                    <text>Append Files to Existing Zip w/out Rewriting Entire Zip</text>
                    <url>zip_appendFilesToExistingZip.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="ZipFileName" type="string" objcName="zipPath" />
            </args2>
        </method>
        <method name="RemoveEmbedded" axId="177" ax="1" cpp="1" dn="1" noWinRT="1" noObjC="1" windowsOnly="1" status="1">
            <gType>bool</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>exeFilename</argName>
                    <objcName>exeFilename</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>resourceName</argName>
                    <objcName>resourceName</objcName>
                </arg>
            </args>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.)  Removes an embedded Zip from an MS-Windows EXE</descrip>
            <args2>
                <arg name="exeFilename" type="string" objcName="exeFilename" />
                <arg name="resourceName" type="string" objcName="resourceName" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="RemoveNoCompressExtension" axId="178">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>fileExtension</argName>
                    <objcName>fileExtension</objcName>
                </arg>
            </args>
            <descrip>Removes a file extension from the zip object's internal list of "no compress" extensions.  (For more information, see AddNoCompressExtension.)</descrip>
            <args2>
                <arg name="fileExtension" type="string" objcName="fileExtension" />
            </args2>
            <links2 />
        </method>
        <method name="ReplaceEmbedded" axId="179" ax="1" cpp="1" dn="1" noWinRT="1" noObjC="1" windowsOnly="1" status="1">
            <gType>bool</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>exeFilename</argName>
                    <objcName>exeFilename</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>resourceName</argName>
                    <objcName>resourceName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>zipFilename</argName>
                    <objcName>zipFilename</objcName>
                </arg>
            </args>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.) Replace a Zip embedded in an MS-Windows EXE with another Zip file.</descrip>
            <args2>
                <arg name="exeFilename" type="string" objcName="exeFilename" />
                <arg name="resourceName" type="string" objcName="resourceName" />
                <arg name="zipFilename" type="string" objcName="zipFilename" />
            </args2>
            <links2 />
        </method>
        <method name="SetCompressionLevel" axId="180" ax="1" cpp="1" dn="1">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>int</axType>
                    <dnType>int</dnType>
                    <cppType>int</cppType>
                    <argName>level</argName>
                    <objcName>level</objcName>
                </arg>
            </args>
            <descrip>Sets the compression level for all file and data entries. The compression level for a mapped entry (i.e. an entry that is contained within an opened .zip, cannot be changed.) The default compression level is 6. A compression level of 0 is equivalent to no compression. The maximum compression level is 9.
&lt;p&gt;
The zip.SetCompressionLevel method must be called after appending the files (i.e. after the calls to AppendFile*, AppendData, or AppendOneFileOrDir).
&lt;p&gt;
A single call to SetCompressionLevel will set the compression level for all existing file and data entries.</descrip>
            <args2>
                <arg name="level" type="int" objcName="level" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="SetExclusions" axId="181">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>StringArray</axType>
                    <dnType>StringArray</dnType>
                    <cppType>CkStringArray &amp;</cppType>
                    <argName>excludePatterns</argName>
                    <objcName>excludePatterns</objcName>
                </arg>
            </args>
            <descrip>Specify a collection of exclusion patterns to be used when adding files to a Zip. Each pattern in the collection can use the "*" wildcard character, where "*" indicates 0 or more occurrences of any character.</descrip>
            <args2>
                <arg name="excludePatterns" type="StringArray" objcName="excludePatterns" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" windowsOnly="1" noObjC="1" name="SetExeConfigParam" axId="182">
            <gType>void</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>paramName</argName>
                    <objcName>paramName</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>paramValue</argName>
                    <objcName>paramValue</objcName>
                </arg>
            </args>
            <descrip>Sets a self-extractor property that is embedded in the resultant EXE created by the WriteExe or WriteExe2 methods.  The ARG1 is one of the XML tags listed in the ExeXmlConfig property.   &lt;p&gt;
For example, to specify the text for the self-extractor's main dialog unzip button, ARG1 would be "MainUnzipBtn".</descrip>
            <args2>
                <arg name="paramName" type="string" objcName="paramName" />
                <arg name="paramValue" type="string" objcName="paramValue" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="SetPassword" axId="183">
            <gType>void</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>password</argName>
                    <objcName>password</objcName>
                </arg>
            </args>
            <descrip>Set the password for an encrypted or password-protected Zip.</descrip>
            <args2>
                <arg name="password" type="string" objcName="password" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" status="1" name="UnlockComponent" axId="184">
            <gType>bool</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>regCode</argName>
                    <objcName>regCode</objcName>
                </arg>
            </args>
            <descrip>Unlocks the component allowing for the full functionality to be used.  If a purchased unlock code is passed, there is no expiration.  Any other string automatically begins a fully-functional 30-day trial the first time UnlockComponent is called.</descrip>
            <args2>
                <arg name="regCode" type="string" objcName="regCode" />
            </args2>
            <links2>
                <link linkType="external">
                    <text>Diagnosing UnlockComponent Problems</text>
                    <url>http://www.cknotes.com/?p=168</url>
                </link>
                <link linkType="external">
                    <text>UnlockComponent LastErrorText shows exact string passed to it.</text>
                    <url>http://www.cknotes.com/?p=315</url>
                </link>
                <link linkType="external">
                    <text>Verify UnlockComponent Success w/ Permanent Unlock Code</text>
                    <url>http://www.cknotes.com/?p=317</url>
                </link>
                <link linkType="external">
                    <text>LastErrorText Standard Information</text>
                    <url>http://www.cknotes.com/?p=316</url>
                </link>
            </links2>
        </method>
        <method name="Unzip" axId="185" ax="1" cpp="1" dn="1" events="1">
            <gType>int</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dirPath</argName>
                    <objcName>dirPath</objcName>
                </arg>
            </args>
            <descrip>Unzips and returns the number of files unzipped, or -1 if a failure occurs.  Subdirectories are automatically created during the unzipping process.</descrip>
            <args2>
                <arg name="dirPath" type="string" objcName="dirPath" />
            </args2>
            <links2>
                <link linkType="external" lang="activex">
                    <url>https://github.com/chilkatsoft/VB6-Zip-and-HTTPS-with-Progress-Events</url>
                    <text>VB6 Sample Project for Zip and HTTPS with Progress Events</text>
                </link>
            </links2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="UnzipInto" axId="186">
            <gType>int</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dirPath</argName>
                    <objcName>dirPath</objcName>
                </arg>
            </args>
            <descrip>Unzips and returns the number of files unzipped, or -1 if a failure occurs.  All files in the Zip are unzipped into the specfied dirPath regardless of the directory path information contained in the Zip.  This has the effect of collapsing all files into a single directory.  If several files in the Zip have the same name, the files unzipped last will overwrite the files already unzipped.</descrip>
            <args2>
                <arg name="dirPath" type="string" objcName="dirPath" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="UnzipMatching" axId="187">
            <gType>int</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dirPath</argName>
                    <objcName>dirPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pattern</argName>
                    <objcName>pattern</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>verbose</argName>
                    <objcName>verbose</objcName>
                </arg>
            </args>
            <descrip>Same as Unzip, but only unzips files matching a pattern.  If no wildcard characters ('*') are used, then only files that exactly match the pattern will be unzipped.  The "*" characters matches 0 or more of any character.</descrip>
            <links2>
                <link linkType="example">
                    <url>zip_unzipMatching.asp</url>
                    <text>Unzip Files Matching a Pattern (such as *.xml)</text>
                </link>
            </links2>
            <args2>
                <arg name="dirPath" type="string" objcName="dirPath" />
                <arg name="pattern" type="string" objcName="pattern" />
                <arg name="verbose" type="bool" objcName="verbose" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="UnzipMatchingInto" axId="188">
            <gType>int</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dirPath</argName>
                    <objcName>dirPath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>pattern</argName>
                    <objcName>pattern</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                    <argName>verbose</argName>
                    <objcName>verbose</objcName>
                </arg>
            </args>
            <descrip>Unzips matching files into a single directory, ignoring all path information stored in the Zip.</descrip>
            <args2>
                <arg name="dirPath" type="string" objcName="dirPath" />
                <arg name="pattern" type="string" objcName="pattern" />
                <arg name="verbose" type="bool" objcName="verbose" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="UnzipNewer" axId="189">
            <gType>int</gType>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>dirPath</argName>
                    <objcName>dirPath</objcName>
                </arg>
            </args>
            <descrip>Same as Unzip, but only files that don't already exist on disk, or have later file modification dates are unzipped.</descrip>
            <args2>
                <arg name="dirPath" type="string" objcName="dirPath" />
            </args2>
            <links2 />
        </method>
        <method cpp="1" dn="1" ax="1" name="VerifyPassword" axId="190">
            <gType>bool</gType>
            <args />
            <descrip>Tests the current DecryptPassword setting against the currently opened zip.  Returns _TRUE_ if the password is valid, otherwise returns _FALSE_.</descrip>
            <links2>
                <link linkType="example">
                    <text>Verify a Zip's Password</text>
                    <url>zip_VerifyPassword.asp</url>
                </link>
            </links2>
            <args2 />
        </method>
        <method name="WriteExe" axId="191" ax="1" cpp="1" dn="1" events="1" noObjC="1" windowsOnly="1" status="1">
            <gType>bool</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <args>
                <arg>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                    <argName>exeFilename</argName>
                    <objcName>exeFilename</objcName>
                </arg>
            </args>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.)  Writes an MS-Windows self-extracting executable.  There are no limitations on the total size, individual file size, or number of files that can be added to a self-extracting EXE.  &lt;p&gt;
If the resultant EXE will automatically accept these command-line arguments when run:
&lt;dl&gt;
&lt;dt&gt;-log &lt;i&gt;logFileName&lt;/i&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a log file that lists the settings embedded within the EXE and logs the errors, warnings,  and other information about the self-extraction.&lt;/dd&gt;
&lt;dt&gt;-unzipDir &lt;i&gt;unzipDirectoryPath&lt;/i&gt;&lt;/dt&gt;
&lt;dd&gt;Unzips to this directory path without user intervention.&lt;/dd&gt;
&lt;dt&gt;-pwd &lt;i&gt;password&lt;/i&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the password for an encrypted EXE&lt;/dd&gt;
&lt;dt&gt;-ap &lt;i&gt;autoRunParams&lt;/i&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the command line parameters to be passed to the AutoRun executable (embedded within the EXE).&lt;/dd&gt;
&lt;/dl&gt;</descrip>
            <links2>
                <link linkType="external">
                    <text>More information about self-extracting executables.</text>
                    <url>http://www.cknotes.com/?p=351</url>
                </link>
                <link linkType="example">
                    <text>Create Self-Extractor</text>
                    <url>self-extract-create.asp</url>
                </link>
            </links2>
            <args2>
                <arg name="exeFilename" type="string" objcName="exeFilename" />
            </args2>
        </method>
        <method name="WriteExe2" axId="192" ax="1" cpp="1" events="1" noWinRT="1" noObjC="1" windowsOnly="1" noPublish="1" status="1">
            <gType>bool</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <args>
                <arg>
                    <axType>string</axType>
                    <cppType>const char *</cppType>
                    <argName>exePath</argName>
                    <objcName>exePath</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <cppType>const char *</cppType>
                    <argName>destExePath</argName>
                    <objcName>destExePath</objcName>
                </arg>
                <arg>
                    <axType>bool</axType>
                    <cppType>bool</cppType>
                    <argName>bAesEncrypt</argName>
                    <objcName>bAesEncrypt</objcName>
                </arg>
                <arg>
                    <axType>int</axType>
                    <cppType>int</cppType>
                    <argName>keyLength</argName>
                    <objcName>keyLength</objcName>
                </arg>
                <arg>
                    <axType>string</axType>
                    <cppType>const char *</cppType>
                    <argName>password</argName>
                    <objcName>password</objcName>
                </arg>
            </args>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.)  Writes a self-extracting MS-Windows EXE with no limitations on total file size and no limitations on the size of any one file contained within.  

The 1st argument is the pre-existing EXE housing that is to be used.  Essentially,
the self-extracting EXE is a concatenation of the EXE housing and the compressed/encrypted data.
The 2nd argument is the name of the EXE to create or overwrite.  

A housing for use with WriteExe2 can be found here:
http://www.chilkatsoft.com/d2/SaExtract.zip</descrip>
            <links2>
                <link linkType="external">
                    <text>More information about self-extracting executables.</text>
                    <url>http://www.cknotes.com/?p=351</url>
                </link>
            </links2>
            <args2>
                <arg name="exePath" type="string" objcName="exePath" />
                <arg name="destExePath" type="string" objcName="destExePath" />
                <arg name="bAesEncrypt" type="bool" objcName="bAesEncrypt" />
                <arg name="keyLength" type="int" objcName="keyLength" />
                <arg name="password" type="string" objcName="password" />
            </args2>
        </method>
        <method cpp="1" dn="1" ax="1" events="1" windowsOnly="1" noObjC="1" status="1" name="WriteExeToMemory" axId="193" outArgName="outBytes">
            <gType>bytes</gType>
            <ifdef>#if defined(CK_SFX_INCLUDED)</ifdef>
            <args>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outBytes</argName>
                    <objcName>outBytes</objcName>
                </arg>
            </args>
            <descrip>(Relevant only when running on a Microsoft Windows operating system.)  Same as WriteExe, but instead of writing a file, the MS-Windows EXE is written to memory.</descrip>
            <links2>
                <link linkType="external">
                    <text>More information about self-extracting executables.</text>
                    <url>http://www.cknotes.com/?p=351</url>
                </link>
            </links2>
            <args2 />
        </method>
        <method cpp="1" dn="1" ax="1" events="1" name="WriteToMemory" axId="194" outArgName="outData">
            <gType>bytes</gType>
            <args>
                <arg>
                    <cppType>CkByteData &amp;</cppType>
                    <argName>outData</argName>
                    <objcName>outData</objcName>
                </arg>
            </args>
            <descrip>Same as WriteZip, but instead of writing the Zip to a file, it writes to memory.  Zips that are written to memory can also be opened from memory by calling OpenFromMemory.</descrip>
            <args2 />
            <links2>
                <link linkType="example">
                    <url>zip_create_in_memory.asp</url>
                    <text>Create a Zip Entirely in Memory</text>
                </link>
            </links2>
        </method>
        <method name="WriteZip" axId="195" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args />
            <descrip>Saves the Zip to a file and implictly re-opens it so further operations can continue. Use WriteZipAndClose to write and close the Zip.  There is no limitation on the size of files that may be contained within a .zip, the total number of files in a .zip, or the total size of a .zip.  If necessary, WriteZip will use the ZIP64 file format extensions when 4GB or file count limitations of the old zip file format are exceeded.</descrip>
            <args2 />
            <links2 />
        </method>
        <method name="WriteZipAndClose" axId="196" ax="1" cpp="1" dn="1" events="1" status="1">
            <gType>bool</gType>
            <args />
            <descrip>Saves the Zip to a file and closes it.  On return, the Zip object will be in the state as if NewZip had been called. There is no limitation on the size of files that may be contained within a .zip, the total number of files in a .zip, or the total size of a .zip.  If necessary, WriteZip will use the ZIP64 file format extensions when 4GB or file count limitations of the old zip file format are exceeded.</descrip>
            <args2 />
            <links2>
                <link linkType="external" lang="activex">
                    <url>https://github.com/chilkatsoft/VB6-Zip-and-HTTPS-with-Progress-Events</url>
                    <text>VB6 Sample Project for Zip and HTTPS with Progress Events</text>
                </link>
            </links2>
        </method>
        <method name="AppendDataEncoded" ax="1" cpp="1" dn="1" axId="200">
            <gType>ZipEntry</gType>
            <descrip>Appends in-memory data as a new entry to a Zip object.  The ARG1 is the filename of the entry as it will appear within the zip.  The ARG2 is the encoding of the ARG3, such as "base64", "hex", etc.  The full list of encodings is listed at the web page linked below.  
&lt;p&gt;
Returns the zip entry object.
&lt;p&gt;
Note: This method only updates the zip object.  To update (rewrite) a zip file, either the WriteZip or WriteZipAndClose method would need to be called.</descrip>
            <iversion>9.5.0.59</iversion>
            <args>
                <arg>
                    <argName>filename</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>filename</objcName>
                </arg>
                <arg>
                    <argName>encoding</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>encoding</objcName>
                </arg>
                <arg>
                    <argName>data</argName>
                    <cppType>const char *</cppType>
                    <dnType>string</dnType>
                    <axType>string</axType>
                    <objcName>data</objcName>
                </arg>
            </args>
            <links2>
                <link linkType="external">
                    <url>http://www.cknotes.com/chilkat-binary-encoding-list</url>
                    <text>Binary Encodings Supported by Chilkat</text>
                </link>
            </links2>
            <args2>
                <arg name="filename" type="string" objcName="filename" />
                <arg name="encoding" type="string" objcName="encoding" />
                <arg name="data" type="string" objcName="data" />
            </args2>
        </method>
    </methods>
    <genericName>Zip</genericName>
    <events>
        <standard name="AbortCheck" />
        <event name="AddFilesBegin">
            <gType>event</gType>
            <dotNetArgsClass>EventArgs</dotNetArgsClass>
            <args />
            <descrip>Fired at the start of the AppendFiles or AppendFIlesEx method.</descrip>
            <args2 />
            <links2 />
        </event>
        <event name="AddFilesEnd">
            <gType>event</gType>
            <dotNetArgsClass>EventArgs</dotNetArgsClass>
            <args />
            <descrip>Fired at the end of the AppendFiles or AppendFIlesEx method.</descrip>
            <args2 />
            <links2 />
        </event>
        <event name="DirToBeAdded">
            <gType>event</gType>
            <dotNetArgsClass>DirToBeAddedEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>path</argName>
                    <objcName>path</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg out="1">
                    <argName>skip</argName>
                    <objcName>skip</objcName>
                    <axType>int</axType>
                    <dnType>bool</dnType>
                    <cppType>bool *</cppType>
                </arg>
            </args>
            <descrip>This event fires during the AppendFiles and AppendFilesEx method calls.  It is called just before each directory  is to be added.  
&lt;nonSwig&gt;The ARG2 output-only argument may be set to _TRUE_ to prevent the directory and everything it contains from being added.&lt;/nonSwig&gt;
&lt;swig&gt;Return _TRUE_ to skip ( prevent the directory and everything it contains from being added).  Return _FALSE_ to not skip.&lt;/swig&gt;</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="skip" type="bool" objcName="skip" ref="1" />
            </args2>
            <links2 />
        </event>
        <event name="FileAdded">
            <gType>event</gType>
            <dotNetArgsClass>FileAddedEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>path</argName>
                    <objcName>path</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg>
                    <argName>fileSize</argName>
                    <objcName>fileSize</objcName>
                    <axType>int</axType>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                </arg>
                <arg out="1">
                    <argName>abort</argName>
                    <objcName>abort</objcName>
                    <axType>int</axType>
                    <dnType>bool</dnType>
                    <cppType>bool *</cppType>
                </arg>
            </args>
            <descrip>This event fires during the AppendFiles and AppendFilesEx method calls.  It is called just after each file is added.  

&lt;nonSwig&gt;The ARG3 output-only argument may be set to _TRUE_ to abort the method call.&lt;/nonSwig&gt;
&lt;swig&gt;Return _TRUE_ to abort; return _FALSE_ to continue.&lt;/swig&gt;</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="fileSize" type="int64" objcName="fileSize" />
                <arg name="abort" type="bool" objcName="abort" ref="1" />
            </args2>
            <links2 />
        </event>
        <event name="FileUnzipped">
            <gType>event</gType>
            <dotNetArgsClass>FileUnzippedEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>path</argName>
                    <objcName>path</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg>
                    <argName>compressedSize</argName>
                    <objcName>compressedSize</objcName>
                    <axType>int</axType>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                </arg>
                <arg>
                    <argName>fileSize</argName>
                    <objcName>fileSize</objcName>
                    <axType>int</axType>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                </arg>
                <arg out="1">
                    <argName>abort</argName>
                    <objcName>abort</objcName>
                    <axType>int</axType>
                    <dnType>bool</dnType>
                    <cppType>bool *</cppType>
                </arg>
            </args>
            <descrip>This event fires during method calls that unzip a zip archive.  It is called just after each file is unzipped.  
&lt;nonSwig&gt;The ARG4 output-only argument may be set to _TRUE_ to abort the method call.&lt;/nonSwig&gt;
&lt;swig&gt;Return _TRUE_ to abort; return _FALSE_ to continue.&lt;/swig&gt;</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="compressedSize" type="int64" objcName="compressedSize" />
                <arg name="fileSize" type="int64" objcName="fileSize" />
                <arg name="abort" type="bool" objcName="abort" ref="1" />
            </args2>
            <links2 />
        </event>
        <event name="FileZipped">
            <gType>event</gType>
            <dotNetArgsClass>FileZippedEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>path</argName>
                    <objcName>path</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg>
                    <argName>fileSize</argName>
                    <objcName>fileSize</objcName>
                    <axType>int</axType>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                </arg>
                <arg>
                    <argName>compressedSize</argName>
                    <objcName>compressedSize</objcName>
                    <axType>int</axType>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                </arg>
                <arg out="1">
                    <argName>abort</argName>
                    <objcName>abort</objcName>
                    <axType>int</axType>
                    <dnType>bool</dnType>
                    <cppType>bool *</cppType>
                </arg>
            </args>
            <descrip>This event fires during method calls that write a zip archive.  It is called just after each file is zipped. 
&lt;nonSwig&gt;The ARG4 output-only argument may be set to _TRUE_ to abort the method call.&lt;/nonSwig&gt;
&lt;swig&gt;Return _TRUE_ to abort; return _FALSE_ to continue.&lt;/swig&gt;</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="fileSize" type="int64" objcName="fileSize" />
                <arg name="compressedSize" type="int64" objcName="compressedSize" />
                <arg name="abort" type="bool" objcName="abort" ref="1" />
            </args2>
            <links2 />
        </event>
        <standard name="PercentDone" />
        <standard name="ProgressInfo" />
        <event name="SkippedForUnzip">
            <gType>event</gType>
            <dotNetArgsClass>ToBeUnzippedEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>path</argName>
                    <objcName>path</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg>
                    <argName>compressedSize</argName>
                    <objcName>compressedSize</objcName>
                    <axType>int</axType>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                </arg>
                <arg>
                    <argName>fileSize</argName>
                    <objcName>fileSize</objcName>
                    <axType>int</axType>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                </arg>
                <arg>
                    <argName>isDirectory</argName>
                    <objcName>isDirectory</objcName>
                    <axType>int</axType>
                    <dnType>bool</dnType>
                    <cppType>bool</cppType>
                </arg>
            </args>
            <descrip>This event fires during method calls that unzip a zip archive.  It is called for each file that was skipped for some reason (such as for when UnzipNewer or UnzipMatching is called).</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="compressedSize" type="int64" objcName="compressedSize" />
                <arg name="fileSize" type="int64" objcName="fileSize" />
                <arg name="isDirectory" type="bool" objcName="isDirectory" />
            </args2>
            <links2 />
        </event>
        <standard name="TaskCompleted" />
        <event name="ToBeAdded">
            <gType>event</gType>
            <dotNetArgsClass>ToBeAddedEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>path</argName>
                    <objcName>path</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg>
                    <argName>fileSize</argName>
                    <objcName>fileSize</objcName>
                    <axType>int</axType>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                </arg>
                <arg out="1">
                    <argName>skip</argName>
                    <objcName>skip</objcName>
                    <axType>int</axType>
                    <dnType>bool</dnType>
                    <cppType>bool *</cppType>
                </arg>
            </args>
            <descrip>This event fires during the AppendFiles and AppendFilesEx method calls.  It is called just before each file  is to be added.  

&lt;nonSwig&gt;The ARG3 output-only argument may be set to _TRUE_ to prevent the file from being added.&lt;/nonSwig&gt;
&lt;swig&gt;Return _TRUE_ to skip adding this file; return _FALSE_ to not skip.&lt;/swig&gt;</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="fileSize" type="int64" objcName="fileSize" />
                <arg name="skip" type="bool" objcName="skip" ref="1" />
            </args2>
            <links2 />
        </event>
        <event name="ToBeUnzipped">
            <gType>event</gType>
            <dotNetArgsClass>ToBeUnzippedEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>path</argName>
                    <objcName>path</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg>
                    <argName>compressedSize</argName>
                    <objcName>compressedSize</objcName>
                    <axType>int</axType>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                </arg>
                <arg>
                    <argName>fileSize</argName>
                    <objcName>fileSize</objcName>
                    <axType>int</axType>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                </arg>
                <arg out="1">
                    <argName>skip</argName>
                    <objcName>skip</objcName>
                    <axType>int</axType>
                    <dnType>bool</dnType>
                    <cppType>bool *</cppType>
                </arg>
            </args>
            <descrip>This event fires during method calls that unzip a zip archive.  It is called just before each file is unzipped.  
&lt;nonSwig&gt;The ARG4 output-only argument may be set to _TRUE_ to prevent the file from being unzipped.&lt;/nonSwig&gt;
&lt;swig&gt;Return _TRUE_ to skip this file; return _FALSE_ to not skip.&lt;/swig&gt;</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="compressedSize" type="int64" objcName="compressedSize" />
                <arg name="fileSize" type="int64" objcName="fileSize" />
                <arg name="skip" type="bool" objcName="skip" ref="1" />
            </args2>
            <links2 />
        </event>
        <event name="ToBeZipped">
            <gType>event</gType>
            <dotNetArgsClass>ToBeZippedEventArgs</dotNetArgsClass>
            <args>
                <arg>
                    <argName>path</argName>
                    <objcName>path</objcName>
                    <axType>string</axType>
                    <dnType>string</dnType>
                    <cppType>const char *</cppType>
                </arg>
                <arg>
                    <argName>fileSize</argName>
                    <objcName>fileSize</objcName>
                    <axType>int</axType>
                    <dnType>int64</dnType>
                    <cppType>__int64</cppType>
                </arg>
                <arg out="1">
                    <argName>skip</argName>
                    <objcName>skip</objcName>
                    <axType>int</axType>
                    <dnType>bool</dnType>
                    <cppType>bool *</cppType>
                </arg>
            </args>
            <descrip>This event fires during method calls that create a zip archive.  It is called just before each file is to be zipped.  

&lt;nonSwig&gt;The ARG3 output-only argument may be set to _TRUE_ to prevent the file from being zipped.&lt;/nonSwig&gt;
&lt;swig&gt;Return _TRUE_ to skip this file; return _FALSE_ to not skip.&lt;/swig&gt;</descrip>
            <args2>
                <arg name="path" type="string" objcName="path" />
                <arg name="fileSize" type="int64" objcName="fileSize" />
                <arg name="skip" type="bool" objcName="skip" ref="1" />
            </args2>
            <links2 />
        </event>
        <event name="UnzipBegin">
            <gType>event</gType>
            <dotNetArgsClass>EventArgs</dotNetArgsClass>
            <args />
            <args2 />
            <links2 />
        </event>
        <event name="UnzipEnd">
            <gType>event</gType>
            <dotNetArgsClass>EventArgs</dotNetArgsClass>
            <args />
            <descrip>Fired when finished unzipping.</descrip>
            <args2 />
            <links2 />
        </event>
        <event name="WriteZipBegin">
            <gType>event</gType>
            <dotNetArgsClass>EventArgs</dotNetArgsClass>
            <args />
            <descrip>Fired when starting to write a zip.</descrip>
            <args2 />
            <links2 />
        </event>
        <event name="WriteZipEnd">
            <gType>event</gType>
            <dotNetArgsClass>EventArgs</dotNetArgsClass>
            <args />
            <descrip>Fired when finished writing a zip.</descrip>
            <args2 />
            <links2 />
        </event>
    </events>
    <description>Zip compression component.</description>
    <clsid>C95EAE19-C7B8-4297-A6C6-B4B973A8B867</clsid>
    <typeid>004CB902-F437-4D01-BD85-9E18836DA5C2</typeid>
    <uuidEvents>F0C2D9C1-0B80-432D-A60C-0957A5A03AAE</uuidEvents>
    <uuidMidl>EFE9ADE4-0851-49E2-BC0B-AB26E0353B1B</uuidMidl>
    <nextAxId>202</nextAxId>
</class>
